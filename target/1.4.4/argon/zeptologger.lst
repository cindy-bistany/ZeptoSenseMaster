
c:/Code/ZeptoSensorBlynk-master/zeptologger/target/1.4.4/argon/zeptologger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000149b0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  00028b50  2**0
                  CONTENTS
  4 .data         00000154  2003d558  000e89d0  0001d558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00001144  2003d6b0  2003d6b0  0002d6b0  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000e8b24  000e8b24  00028b24  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000e8b4c  000e8b4c  00028b4c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00162905  00000000  00000000  00028b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001cbb9  00000000  00000000  0018b455  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002faf5  00000000  00000000  001a800e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003b50  00000000  00000000  001d7b03  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000069f8  00000000  00000000  001db653  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0004b4c4  00000000  00000000  001e204b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0004b685  00000000  00000000  0022d50f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00113a2a  00000000  00000000  00278b94  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0001226c  00000000  00000000  0038c5c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f00f fa9f 	bl	e3574 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f00f faa4 	bl	e358a <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003d558 	.word	0x2003d558
   d404c:	000e89d0 	.word	0x000e89d0
   d4050:	2003d6ac 	.word	0x2003d6ac
   d4054:	2003d6b0 	.word	0x2003d6b0
   d4058:	2003e7f4 	.word	0x2003e7f4

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f007 fcbd 	bl	db9dc <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000e89c8 	.word	0x000e89c8
   d4084:	000e8964 	.word	0x000e8964

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f004 ba4c 	b.w	d8524 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f004 fdf9 	bl	d8c84 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f007 bc6f 	b.w	db978 <_post_loop>

000d409a <_Znwj>:
   d409a:	f006 bd2f 	b.w	daafc <malloc>

000d409e <_ZdlPv>:
   d409e:	f006 bd35 	b.w	dab0c <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f006 bd33 	b.w	dab0c <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <pi>:
    te_free_parameters(n);
    free(n);
}


static double pi(void) {return 3.14159265358979323846;}
   d40b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; d40c0 <pi+0x8>
   d40bc:	4770      	bx	lr
   d40be:	bf00      	nop
   d40c0:	54442d18 	.word	0x54442d18
   d40c4:	400921fb 	.word	0x400921fb

000d40c8 <e>:
static double e(void) {return 2.71828182845904523536;}
   d40c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; d40d0 <e+0x8>
   d40cc:	4770      	bx	lr
   d40ce:	bf00      	nop
   d40d0:	8b145769 	.word	0x8b145769
   d40d4:	4005bf0a 	.word	0x4005bf0a

000d40d8 <add>:
    return 0;
}



static double add(double a, double b) {return a + b;}
   d40d8:	b508      	push	{r3, lr}
   d40da:	ec51 0b10 	vmov	r0, r1, d0
   d40de:	ec53 2b11 	vmov	r2, r3, d1
   d40e2:	f00e fbfb 	bl	e28dc <__adddf3>
   d40e6:	ec41 0b10 	vmov	d0, r0, r1
   d40ea:	bd08      	pop	{r3, pc}

000d40ec <sub>:
static double sub(double a, double b) {return a - b;}
   d40ec:	b508      	push	{r3, lr}
   d40ee:	ec51 0b10 	vmov	r0, r1, d0
   d40f2:	ec53 2b11 	vmov	r2, r3, d1
   d40f6:	f00e fbef 	bl	e28d8 <__aeabi_dsub>
   d40fa:	ec41 0b10 	vmov	d0, r0, r1
   d40fe:	bd08      	pop	{r3, pc}

000d4100 <mul>:
static double mul(double a, double b) {return a * b;}
   d4100:	b508      	push	{r3, lr}
   d4102:	ec51 0b10 	vmov	r0, r1, d0
   d4106:	ec53 2b11 	vmov	r2, r3, d1
   d410a:	f00e fd99 	bl	e2c40 <__aeabi_dmul>
   d410e:	ec41 0b10 	vmov	d0, r0, r1
   d4112:	bd08      	pop	{r3, pc}

000d4114 <divide>:
static double divide(double a, double b) {return a / b;}
   d4114:	b508      	push	{r3, lr}
   d4116:	ec51 0b10 	vmov	r0, r1, d0
   d411a:	ec53 2b11 	vmov	r2, r3, d1
   d411e:	f00e feb9 	bl	e2e94 <__aeabi_ddiv>
   d4122:	ec41 0b10 	vmov	d0, r0, r1
   d4126:	bd08      	pop	{r3, pc}

000d4128 <negate>:
static double negate(double a) {return -a;}
   d4128:	ec51 0b10 	vmov	r0, r1, d0
   d412c:	ee10 2a10 	vmov	r2, s0
   d4130:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d4134:	ec43 2b10 	vmov	d0, r2, r3
   d4138:	4770      	bx	lr

000d413a <comma>:
static double comma(double a, double b) {(void)a; return b;}
   d413a:	eeb0 0a41 	vmov.f32	s0, s2
   d413e:	eef0 0a61 	vmov.f32	s1, s3
   d4142:	4770      	bx	lr
   d4144:	0000      	movs	r0, r0
	...

000d4148 <greater>:

static double greater(double a, double b) {return a > b;}
   d4148:	b508      	push	{r3, lr}
   d414a:	ec51 0b10 	vmov	r0, r1, d0
   d414e:	ec53 2b11 	vmov	r2, r3, d1
   d4152:	f00f f805 	bl	e3160 <__aeabi_dcmpgt>
   d4156:	b910      	cbnz	r0, d415e <greater+0x16>
   d4158:	ed9f 0b03 	vldr	d0, [pc, #12]	; d4168 <greater+0x20>
   d415c:	bd08      	pop	{r3, pc}
   d415e:	ed9f 0b04 	vldr	d0, [pc, #16]	; d4170 <greater+0x28>
   d4162:	bd08      	pop	{r3, pc}
   d4164:	f3af 8000 	nop.w
	...
   d4174:	3ff00000 	.word	0x3ff00000

000d4178 <greater_eq>:
static double greater_eq(double a, double b) {return a >= b;}
   d4178:	b508      	push	{r3, lr}
   d417a:	ec51 0b10 	vmov	r0, r1, d0
   d417e:	ec53 2b11 	vmov	r2, r3, d1
   d4182:	f00e ffe3 	bl	e314c <__aeabi_dcmpge>
   d4186:	b910      	cbnz	r0, d418e <greater_eq+0x16>
   d4188:	ed9f 0b03 	vldr	d0, [pc, #12]	; d4198 <greater_eq+0x20>
   d418c:	bd08      	pop	{r3, pc}
   d418e:	ed9f 0b04 	vldr	d0, [pc, #16]	; d41a0 <greater_eq+0x28>
   d4192:	bd08      	pop	{r3, pc}
   d4194:	f3af 8000 	nop.w
	...
   d41a4:	3ff00000 	.word	0x3ff00000

000d41a8 <lower>:
static double lower(double a, double b) {return a < b;}
   d41a8:	b508      	push	{r3, lr}
   d41aa:	ec51 0b10 	vmov	r0, r1, d0
   d41ae:	ec53 2b11 	vmov	r2, r3, d1
   d41b2:	f00e ffb7 	bl	e3124 <__aeabi_dcmplt>
   d41b6:	b910      	cbnz	r0, d41be <lower+0x16>
   d41b8:	ed9f 0b03 	vldr	d0, [pc, #12]	; d41c8 <lower+0x20>
   d41bc:	bd08      	pop	{r3, pc}
   d41be:	ed9f 0b04 	vldr	d0, [pc, #16]	; d41d0 <lower+0x28>
   d41c2:	bd08      	pop	{r3, pc}
   d41c4:	f3af 8000 	nop.w
	...
   d41d4:	3ff00000 	.word	0x3ff00000

000d41d8 <lower_eq>:
static double lower_eq(double a, double b) {return a <= b;}
   d41d8:	b508      	push	{r3, lr}
   d41da:	ec51 0b10 	vmov	r0, r1, d0
   d41de:	ec53 2b11 	vmov	r2, r3, d1
   d41e2:	f00e ffa9 	bl	e3138 <__aeabi_dcmple>
   d41e6:	b910      	cbnz	r0, d41ee <lower_eq+0x16>
   d41e8:	ed9f 0b03 	vldr	d0, [pc, #12]	; d41f8 <lower_eq+0x20>
   d41ec:	bd08      	pop	{r3, pc}
   d41ee:	ed9f 0b04 	vldr	d0, [pc, #16]	; d4200 <lower_eq+0x28>
   d41f2:	bd08      	pop	{r3, pc}
   d41f4:	f3af 8000 	nop.w
	...
   d4204:	3ff00000 	.word	0x3ff00000

000d4208 <equal>:
static double equal(double a, double b) {return a == b;}
   d4208:	b508      	push	{r3, lr}
   d420a:	ec51 0b10 	vmov	r0, r1, d0
   d420e:	ec53 2b11 	vmov	r2, r3, d1
   d4212:	f00e ff7d 	bl	e3110 <__aeabi_dcmpeq>
   d4216:	b910      	cbnz	r0, d421e <equal+0x16>
   d4218:	ed9f 0b03 	vldr	d0, [pc, #12]	; d4228 <equal+0x20>
   d421c:	bd08      	pop	{r3, pc}
   d421e:	ed9f 0b04 	vldr	d0, [pc, #16]	; d4230 <equal+0x28>
   d4222:	bd08      	pop	{r3, pc}
   d4224:	f3af 8000 	nop.w
	...
   d4234:	3ff00000 	.word	0x3ff00000

000d4238 <not_equal>:
static double not_equal(double a, double b) {return a != b;}
   d4238:	b508      	push	{r3, lr}
   d423a:	ec51 0b10 	vmov	r0, r1, d0
   d423e:	ec53 2b11 	vmov	r2, r3, d1
   d4242:	f00e ff65 	bl	e3110 <__aeabi_dcmpeq>
   d4246:	b110      	cbz	r0, d424e <not_equal+0x16>
   d4248:	ed9f 0b03 	vldr	d0, [pc, #12]	; d4258 <not_equal+0x20>
   d424c:	bd08      	pop	{r3, pc}
   d424e:	ed9f 0b04 	vldr	d0, [pc, #16]	; d4260 <not_equal+0x28>
   d4252:	bd08      	pop	{r3, pc}
   d4254:	f3af 8000 	nop.w
	...
   d4264:	3ff00000 	.word	0x3ff00000

000d4268 <logical_and>:
static double logical_and(double a, double b) {return a != 0.0 && b != 0.0;}
   d4268:	b507      	push	{r0, r1, r2, lr}
   d426a:	2300      	movs	r3, #0
   d426c:	2200      	movs	r2, #0
   d426e:	ec51 0b10 	vmov	r0, r1, d0
   d4272:	ed8d 1b00 	vstr	d1, [sp]
   d4276:	f00e ff4b 	bl	e3110 <__aeabi_dcmpeq>
   d427a:	b958      	cbnz	r0, d4294 <logical_and+0x2c>
   d427c:	ed9d 1b00 	vldr	d1, [sp]
   d4280:	2200      	movs	r2, #0
   d4282:	2300      	movs	r3, #0
   d4284:	ec51 0b11 	vmov	r0, r1, d1
   d4288:	f00e ff42 	bl	e3110 <__aeabi_dcmpeq>
   d428c:	fab0 f080 	clz	r0, r0
   d4290:	0940      	lsrs	r0, r0, #5
   d4292:	e000      	b.n	d4296 <logical_and+0x2e>
   d4294:	2000      	movs	r0, #0
   d4296:	f00e fc6d 	bl	e2b74 <__aeabi_i2d>
   d429a:	ec41 0b10 	vmov	d0, r0, r1
   d429e:	b003      	add	sp, #12
   d42a0:	f85d fb04 	ldr.w	pc, [sp], #4

000d42a4 <logical_or>:
static double logical_or(double a, double b) {return a != 0.0 || b != 0.0;}
   d42a4:	b507      	push	{r0, r1, r2, lr}
   d42a6:	2300      	movs	r3, #0
   d42a8:	2200      	movs	r2, #0
   d42aa:	ec51 0b10 	vmov	r0, r1, d0
   d42ae:	ed8d 1b00 	vstr	d1, [sp]
   d42b2:	f00e ff2d 	bl	e3110 <__aeabi_dcmpeq>
   d42b6:	b158      	cbz	r0, d42d0 <logical_or+0x2c>
   d42b8:	ed9d 1b00 	vldr	d1, [sp]
   d42bc:	2200      	movs	r2, #0
   d42be:	2300      	movs	r3, #0
   d42c0:	ec51 0b11 	vmov	r0, r1, d1
   d42c4:	f00e ff24 	bl	e3110 <__aeabi_dcmpeq>
   d42c8:	fab0 f080 	clz	r0, r0
   d42cc:	0940      	lsrs	r0, r0, #5
   d42ce:	e000      	b.n	d42d2 <logical_or+0x2e>
   d42d0:	2001      	movs	r0, #1
   d42d2:	f00e fc4f 	bl	e2b74 <__aeabi_i2d>
   d42d6:	ec41 0b10 	vmov	d0, r0, r1
   d42da:	b003      	add	sp, #12
   d42dc:	f85d fb04 	ldr.w	pc, [sp], #4

000d42e0 <logical_not>:
static double logical_not(double a) {return a == 0.0;}
   d42e0:	b508      	push	{r3, lr}
   d42e2:	2200      	movs	r2, #0
   d42e4:	2300      	movs	r3, #0
   d42e6:	ec51 0b10 	vmov	r0, r1, d0
   d42ea:	f00e ff11 	bl	e3110 <__aeabi_dcmpeq>
   d42ee:	b910      	cbnz	r0, d42f6 <logical_not+0x16>
   d42f0:	ed9f 0b03 	vldr	d0, [pc, #12]	; d4300 <logical_not+0x20>
   d42f4:	bd08      	pop	{r3, pc}
   d42f6:	ed9f 0b04 	vldr	d0, [pc, #16]	; d4308 <logical_not+0x28>
   d42fa:	bd08      	pop	{r3, pc}
   d42fc:	f3af 8000 	nop.w
	...
   d430c:	3ff00000 	.word	0x3ff00000

000d4310 <logical_notnot>:
static double logical_notnot(double a) {return a != 0.0;}
   d4310:	b508      	push	{r3, lr}
   d4312:	2200      	movs	r2, #0
   d4314:	2300      	movs	r3, #0
   d4316:	ec51 0b10 	vmov	r0, r1, d0
   d431a:	f00e fef9 	bl	e3110 <__aeabi_dcmpeq>
   d431e:	b110      	cbz	r0, d4326 <logical_notnot+0x16>
   d4320:	ed9f 0b03 	vldr	d0, [pc, #12]	; d4330 <logical_notnot+0x20>
   d4324:	bd08      	pop	{r3, pc}
   d4326:	ed9f 0b04 	vldr	d0, [pc, #16]	; d4338 <logical_notnot+0x28>
   d432a:	bd08      	pop	{r3, pc}
   d432c:	f3af 8000 	nop.w
	...
   d433c:	3ff00000 	.word	0x3ff00000

000d4340 <negate_logical_not>:
static double negate_logical_not(double a) {return -(a == 0.0);}
   d4340:	b508      	push	{r3, lr}
   d4342:	2200      	movs	r2, #0
   d4344:	2300      	movs	r3, #0
   d4346:	ec51 0b10 	vmov	r0, r1, d0
   d434a:	f00e fee1 	bl	e3110 <__aeabi_dcmpeq>
   d434e:	3000      	adds	r0, #0
   d4350:	bf18      	it	ne
   d4352:	2001      	movne	r0, #1
   d4354:	4240      	negs	r0, r0
   d4356:	f00e fc0d 	bl	e2b74 <__aeabi_i2d>
   d435a:	ec41 0b10 	vmov	d0, r0, r1
   d435e:	bd08      	pop	{r3, pc}

000d4360 <negate_logical_notnot>:
static double negate_logical_notnot(double a) {return -(a != 0.0);}
   d4360:	b508      	push	{r3, lr}
   d4362:	2200      	movs	r2, #0
   d4364:	2300      	movs	r3, #0
   d4366:	ec51 0b10 	vmov	r0, r1, d0
   d436a:	f00e fed1 	bl	e3110 <__aeabi_dcmpeq>
   d436e:	fab0 f080 	clz	r0, r0
   d4372:	0940      	lsrs	r0, r0, #5
   d4374:	4240      	negs	r0, r0
   d4376:	f00e fbfd 	bl	e2b74 <__aeabi_i2d>
   d437a:	ec41 0b10 	vmov	d0, r0, r1
   d437e:	bd08      	pop	{r3, pc}

000d4380 <new_expr>:
#define IS_FUNCTION(TYPE) (((TYPE) & TE_FUNCTION0) != 0)
#define IS_CLOSURE(TYPE) (((TYPE) & TE_CLOSURE0) != 0)
#define ARITY(TYPE) ( ((TYPE) & (TE_FUNCTION0 | TE_CLOSURE0)) ? ((TYPE) & 0x00000007) : 0 )
#define NEW_EXPR(type, ...) new_expr((type), (const te_expr*[]){__VA_ARGS__})

static te_expr *new_expr(const int type, const te_expr *parameters[]) {
   d4380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    const int arity = ARITY(type);
   d4384:	f010 0718 	ands.w	r7, r0, #24
   d4388:	bf18      	it	ne
   d438a:	f000 0707 	andne.w	r7, r0, #7
    const int psize = sizeof(void*) * arity;
   d438e:	ea4f 0987 	mov.w	r9, r7, lsl #2
    const int size = (sizeof(te_expr) - sizeof(void*)) + psize + (IS_CLOSURE(type) ? sizeof(void*) : 0);
   d4392:	f010 0f10 	tst.w	r0, #16
   d4396:	bf14      	ite	ne
   d4398:	2304      	movne	r3, #4
   d439a:	2300      	moveq	r3, #0
   d439c:	f109 0614 	add.w	r6, r9, #20
   d43a0:	441e      	add	r6, r3
#define IS_FUNCTION(TYPE) (((TYPE) & TE_FUNCTION0) != 0)
#define IS_CLOSURE(TYPE) (((TYPE) & TE_CLOSURE0) != 0)
#define ARITY(TYPE) ( ((TYPE) & (TE_FUNCTION0 | TE_CLOSURE0)) ? ((TYPE) & 0x00000007) : 0 )
#define NEW_EXPR(type, ...) new_expr((type), (const te_expr*[]){__VA_ARGS__})

static te_expr *new_expr(const int type, const te_expr *parameters[]) {
   d43a2:	4604      	mov	r4, r0
    const int arity = ARITY(type);
    const int psize = sizeof(void*) * arity;
    const int size = (sizeof(te_expr) - sizeof(void*)) + psize + (IS_CLOSURE(type) ? sizeof(void*) : 0);
    te_expr *ret = malloc(size);
   d43a4:	4630      	mov	r0, r6
#define IS_FUNCTION(TYPE) (((TYPE) & TE_FUNCTION0) != 0)
#define IS_CLOSURE(TYPE) (((TYPE) & TE_CLOSURE0) != 0)
#define ARITY(TYPE) ( ((TYPE) & (TE_FUNCTION0 | TE_CLOSURE0)) ? ((TYPE) & 0x00000007) : 0 )
#define NEW_EXPR(type, ...) new_expr((type), (const te_expr*[]){__VA_ARGS__})

static te_expr *new_expr(const int type, const te_expr *parameters[]) {
   d43a6:	4688      	mov	r8, r1
    const int arity = ARITY(type);
    const int psize = sizeof(void*) * arity;
    const int size = (sizeof(te_expr) - sizeof(void*)) + psize + (IS_CLOSURE(type) ? sizeof(void*) : 0);
    te_expr *ret = malloc(size);
   d43a8:	f006 fba8 	bl	daafc <malloc>
    memset(ret, 0, size);
   d43ac:	4632      	mov	r2, r6
   d43ae:	2100      	movs	r1, #0

static te_expr *new_expr(const int type, const te_expr *parameters[]) {
    const int arity = ARITY(type);
    const int psize = sizeof(void*) * arity;
    const int size = (sizeof(te_expr) - sizeof(void*)) + psize + (IS_CLOSURE(type) ? sizeof(void*) : 0);
    te_expr *ret = malloc(size);
   d43b0:	4605      	mov	r5, r0
    memset(ret, 0, size);
   d43b2:	f00f f8ea 	bl	e358a <memset>
    if (arity && parameters) {
   d43b6:	b147      	cbz	r7, d43ca <new_expr+0x4a>
   d43b8:	f1b8 0f00 	cmp.w	r8, #0
   d43bc:	d005      	beq.n	d43ca <new_expr+0x4a>
        memcpy(ret->parameters, parameters, psize);
   d43be:	464a      	mov	r2, r9
   d43c0:	4641      	mov	r1, r8
   d43c2:	f105 0010 	add.w	r0, r5, #16
   d43c6:	f00f f8d5 	bl	e3574 <memcpy>
    }
    ret->type = type;
    ret->bound = 0;
   d43ca:	2300      	movs	r3, #0
    te_expr *ret = malloc(size);
    memset(ret, 0, size);
    if (arity && parameters) {
        memcpy(ret->parameters, parameters, psize);
    }
    ret->type = type;
   d43cc:	602c      	str	r4, [r5, #0]
    ret->bound = 0;
   d43ce:	60ab      	str	r3, [r5, #8]
    return ret;
}
   d43d0:	4628      	mov	r0, r5
   d43d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

000d43d8 <fac>:
}


static double pi(void) {return 3.14159265358979323846;}
static double e(void) {return 2.71828182845904523536;}
static double fac(double a) {/* simplest version of fac */
   d43d8:	b538      	push	{r3, r4, r5, lr}
   d43da:	ec55 4b10 	vmov	r4, r5, d0
    if (a < 0.0)
   d43de:	2200      	movs	r2, #0
   d43e0:	2300      	movs	r3, #0
   d43e2:	ee10 0a10 	vmov	r0, s0
   d43e6:	4629      	mov	r1, r5
   d43e8:	f00e fe9c 	bl	e3124 <__aeabi_dcmplt>
   d43ec:	b9e0      	cbnz	r0, d4428 <fac+0x50>
        return NAN;
    if (a > UINT_MAX)
   d43ee:	a314      	add	r3, pc, #80	; (adr r3, d4440 <fac+0x68>)
   d43f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d43f4:	4620      	mov	r0, r4
   d43f6:	4629      	mov	r1, r5
   d43f8:	f00e feb2 	bl	e3160 <__aeabi_dcmpgt>
   d43fc:	b9b8      	cbnz	r0, d442e <fac+0x56>
        return INFINITY;
    unsigned int ua = (unsigned int)(a);
   d43fe:	4629      	mov	r1, r5
   d4400:	4620      	mov	r0, r4
   d4402:	f00e fef5 	bl	e31f0 <__aeabi_d2uiz>
    unsigned long int result = 1, i;
    for (i = 1; i <= ua; i++) {
   d4406:	2301      	movs	r3, #1
    if (a < 0.0)
        return NAN;
    if (a > UINT_MAX)
        return INFINITY;
    unsigned int ua = (unsigned int)(a);
    unsigned long int result = 1, i;
   d4408:	461a      	mov	r2, r3
    for (i = 1; i <= ua; i++) {
        if (i > ULONG_MAX / result)
   d440a:	f04f 31ff 	mov.w	r1, #4294967295
        return NAN;
    if (a > UINT_MAX)
        return INFINITY;
    unsigned int ua = (unsigned int)(a);
    unsigned long int result = 1, i;
    for (i = 1; i <= ua; i++) {
   d440e:	4298      	cmp	r0, r3
   d4410:	d306      	bcc.n	d4420 <fac+0x48>
        if (i > ULONG_MAX / result)
   d4412:	fbb1 f4f2 	udiv	r4, r1, r2
   d4416:	429c      	cmp	r4, r3
   d4418:	d309      	bcc.n	d442e <fac+0x56>
            return INFINITY;
        result *= i;
   d441a:	435a      	muls	r2, r3
        return NAN;
    if (a > UINT_MAX)
        return INFINITY;
    unsigned int ua = (unsigned int)(a);
    unsigned long int result = 1, i;
    for (i = 1; i <= ua; i++) {
   d441c:	3301      	adds	r3, #1
   d441e:	e7f6      	b.n	d440e <fac+0x36>
        if (i > ULONG_MAX / result)
            return INFINITY;
        result *= i;
    }
    return (double)result;
   d4420:	4610      	mov	r0, r2
   d4422:	f00e fb97 	bl	e2b54 <__aeabi_ui2d>
   d4426:	e004      	b.n	d4432 <fac+0x5a>

static double pi(void) {return 3.14159265358979323846;}
static double e(void) {return 2.71828182845904523536;}
static double fac(double a) {/* simplest version of fac */
    if (a < 0.0)
        return NAN;
   d4428:	2000      	movs	r0, #0
   d442a:	4903      	ldr	r1, [pc, #12]	; (d4438 <fac+0x60>)
   d442c:	e001      	b.n	d4432 <fac+0x5a>
    if (a > UINT_MAX)
        return INFINITY;
   d442e:	4903      	ldr	r1, [pc, #12]	; (d443c <fac+0x64>)
   d4430:	2000      	movs	r0, #0
        if (i > ULONG_MAX / result)
            return INFINITY;
        result *= i;
    }
    return (double)result;
}
   d4432:	ec41 0b10 	vmov	d0, r0, r1
   d4436:	bd38      	pop	{r3, r4, r5, pc}
   d4438:	7ff80000 	.word	0x7ff80000
   d443c:	7ff00000 	.word	0x7ff00000
   d4440:	ffe00000 	.word	0xffe00000
   d4444:	41efffff 	.word	0x41efffff

000d4448 <ncr>:
static double ncr(double n, double r) {
   d4448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d444a:	ec55 4b10 	vmov	r4, r5, d0
    if (n < 0.0 || r < 0.0 || n < r) return NAN;
   d444e:	2200      	movs	r2, #0
   d4450:	2300      	movs	r3, #0
   d4452:	ee10 0a10 	vmov	r0, s0
   d4456:	4629      	mov	r1, r5
            return INFINITY;
        result *= i;
    }
    return (double)result;
}
static double ncr(double n, double r) {
   d4458:	ec57 6b11 	vmov	r6, r7, d1
    if (n < 0.0 || r < 0.0 || n < r) return NAN;
   d445c:	f00e fe62 	bl	e3124 <__aeabi_dcmplt>
   d4460:	2800      	cmp	r0, #0
   d4462:	d13f      	bne.n	d44e4 <ncr+0x9c>
   d4464:	2200      	movs	r2, #0
   d4466:	2300      	movs	r3, #0
   d4468:	4630      	mov	r0, r6
   d446a:	4639      	mov	r1, r7
   d446c:	f00e fe5a 	bl	e3124 <__aeabi_dcmplt>
   d4470:	bbc0      	cbnz	r0, d44e4 <ncr+0x9c>
   d4472:	4632      	mov	r2, r6
   d4474:	463b      	mov	r3, r7
   d4476:	4620      	mov	r0, r4
   d4478:	4629      	mov	r1, r5
   d447a:	f00e fe53 	bl	e3124 <__aeabi_dcmplt>
   d447e:	bb88      	cbnz	r0, d44e4 <ncr+0x9c>
    if (n > UINT_MAX || r > UINT_MAX) return INFINITY;
   d4480:	a31f      	add	r3, pc, #124	; (adr r3, d4500 <ncr+0xb8>)
   d4482:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4486:	4620      	mov	r0, r4
   d4488:	4629      	mov	r1, r5
   d448a:	f00e fe69 	bl	e3160 <__aeabi_dcmpgt>
   d448e:	bb60      	cbnz	r0, d44ea <ncr+0xa2>
   d4490:	a31b      	add	r3, pc, #108	; (adr r3, d4500 <ncr+0xb8>)
   d4492:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4496:	4630      	mov	r0, r6
   d4498:	4639      	mov	r1, r7
   d449a:	f00e fe61 	bl	e3160 <__aeabi_dcmpgt>
   d449e:	bb20      	cbnz	r0, d44ea <ncr+0xa2>
    unsigned long int un = (unsigned int)(n), ur = (unsigned int)(r), i;
   d44a0:	4629      	mov	r1, r5
   d44a2:	4620      	mov	r0, r4
   d44a4:	f00e fea4 	bl	e31f0 <__aeabi_d2uiz>
   d44a8:	4639      	mov	r1, r7
   d44aa:	4604      	mov	r4, r0
   d44ac:	4630      	mov	r0, r6
   d44ae:	f00e fe9f 	bl	e31f0 <__aeabi_d2uiz>
    unsigned long int result = 1;
    if (ur > un / 2) ur = un - ur;
   d44b2:	ebb0 0f54 	cmp.w	r0, r4, lsr #1
   d44b6:	bf88      	it	hi
   d44b8:	1a20      	subhi	r0, r4, r0
}
static double ncr(double n, double r) {
    if (n < 0.0 || r < 0.0 || n < r) return NAN;
    if (n > UINT_MAX || r > UINT_MAX) return INFINITY;
    unsigned long int un = (unsigned int)(n), ur = (unsigned int)(r), i;
    unsigned long int result = 1;
   d44ba:	2301      	movs	r3, #1
    if (ur > un / 2) ur = un - ur;
    for (i = 1; i <= ur; i++) {
   d44bc:	461a      	mov	r2, r3
   d44be:	1a24      	subs	r4, r4, r0
        if (result > ULONG_MAX / (un - ur + i))
   d44c0:	f04f 35ff 	mov.w	r5, #4294967295
    if (n < 0.0 || r < 0.0 || n < r) return NAN;
    if (n > UINT_MAX || r > UINT_MAX) return INFINITY;
    unsigned long int un = (unsigned int)(n), ur = (unsigned int)(r), i;
    unsigned long int result = 1;
    if (ur > un / 2) ur = un - ur;
    for (i = 1; i <= ur; i++) {
   d44c4:	4290      	cmp	r0, r2
   d44c6:	d309      	bcc.n	d44dc <ncr+0x94>
   d44c8:	18a1      	adds	r1, r4, r2
        if (result > ULONG_MAX / (un - ur + i))
   d44ca:	fbb5 f6f1 	udiv	r6, r5, r1
   d44ce:	429e      	cmp	r6, r3
   d44d0:	d30b      	bcc.n	d44ea <ncr+0xa2>
            return INFINITY;
        result *= un - ur + i;
   d44d2:	434b      	muls	r3, r1
        result /= i;
   d44d4:	fbb3 f3f2 	udiv	r3, r3, r2
    if (n < 0.0 || r < 0.0 || n < r) return NAN;
    if (n > UINT_MAX || r > UINT_MAX) return INFINITY;
    unsigned long int un = (unsigned int)(n), ur = (unsigned int)(r), i;
    unsigned long int result = 1;
    if (ur > un / 2) ur = un - ur;
    for (i = 1; i <= ur; i++) {
   d44d8:	3201      	adds	r2, #1
   d44da:	e7f3      	b.n	d44c4 <ncr+0x7c>
        if (result > ULONG_MAX / (un - ur + i))
            return INFINITY;
        result *= un - ur + i;
        result /= i;
    }
    return result;
   d44dc:	4618      	mov	r0, r3
   d44de:	f00e fb39 	bl	e2b54 <__aeabi_ui2d>
   d44e2:	e004      	b.n	d44ee <ncr+0xa6>
        result *= i;
    }
    return (double)result;
}
static double ncr(double n, double r) {
    if (n < 0.0 || r < 0.0 || n < r) return NAN;
   d44e4:	2000      	movs	r0, #0
   d44e6:	4904      	ldr	r1, [pc, #16]	; (d44f8 <ncr+0xb0>)
   d44e8:	e001      	b.n	d44ee <ncr+0xa6>
    if (n > UINT_MAX || r > UINT_MAX) return INFINITY;
   d44ea:	4904      	ldr	r1, [pc, #16]	; (d44fc <ncr+0xb4>)
   d44ec:	2000      	movs	r0, #0
            return INFINITY;
        result *= un - ur + i;
        result /= i;
    }
    return result;
}
   d44ee:	ec41 0b10 	vmov	d0, r0, r1
   d44f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d44f4:	f3af 8000 	nop.w
   d44f8:	7ff80000 	.word	0x7ff80000
   d44fc:	7ff00000 	.word	0x7ff00000
   d4500:	ffe00000 	.word	0xffe00000
   d4504:	41efffff 	.word	0x41efffff

000d4508 <npr>:
static double npr(double n, double r) {return ncr(n, r) * fac(r);}
   d4508:	b500      	push	{lr}
   d450a:	ed2d 8b02 	vpush	{d8}
   d450e:	eeb0 8a41 	vmov.f32	s16, s2
   d4512:	eef0 8a61 	vmov.f32	s17, s3
   d4516:	b083      	sub	sp, #12
   d4518:	f7ff ff96 	bl	d4448 <ncr>
   d451c:	ec51 0b10 	vmov	r0, r1, d0
   d4520:	eeb0 0a48 	vmov.f32	s0, s16
   d4524:	eef0 0a68 	vmov.f32	s1, s17
   d4528:	e9cd 0100 	strd	r0, r1, [sp]
   d452c:	f7ff ff54 	bl	d43d8 <fac>
   d4530:	e9dd 0100 	ldrd	r0, r1, [sp]
   d4534:	ec53 2b10 	vmov	r2, r3, d0
   d4538:	f00e fb82 	bl	e2c40 <__aeabi_dmul>
   d453c:	ec41 0b10 	vmov	d0, r0, r1
   d4540:	b003      	add	sp, #12
   d4542:	ecbd 8b02 	vpop	{d8}
   d4546:	f85d fb04 	ldr.w	pc, [sp], #4

000d454a <te_free>:
        case TE_FUNCTION1: case TE_CLOSURE1: te_free(n->parameters[0]);
    }
}


void te_free(te_expr *n) {
   d454a:	b510      	push	{r4, lr}
    if (!n) return;
   d454c:	4604      	mov	r4, r0
   d454e:	b130      	cbz	r0, d455e <te_free+0x14>
    te_free_parameters(n);
   d4550:	f000 f806 	bl	d4560 <te_free_parameters>
    free(n);
   d4554:	4620      	mov	r0, r4
}
   d4556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}


void te_free(te_expr *n) {
    if (!n) return;
    te_free_parameters(n);
    free(n);
   d455a:	f006 bad7 	b.w	dab0c <free>
   d455e:	bd10      	pop	{r4, pc}

000d4560 <te_free_parameters>:
    ret->bound = 0;
    return ret;
}


void te_free_parameters(te_expr *n) {
   d4560:	b510      	push	{r4, lr}
    if (!n) return;
   d4562:	4604      	mov	r4, r0
   d4564:	b330      	cbz	r0, d45b4 <te_free_parameters+0x54>
    switch (TYPE_MASK(n->type)) {
   d4566:	6803      	ldr	r3, [r0, #0]
   d4568:	f003 031f 	and.w	r3, r3, #31
   d456c:	3b09      	subs	r3, #9
   d456e:	2b0e      	cmp	r3, #14
   d4570:	d820      	bhi.n	d45b4 <te_free_parameters+0x54>
   d4572:	e8df f003 	tbb	[pc, r3]
   d4576:	171a      	.short	0x171a
   d4578:	0b0e1114 	.word	0x0b0e1114
   d457c:	171a1f08 	.word	0x171a1f08
   d4580:	0b0e1114 	.word	0x0b0e1114
   d4584:	08          	.byte	0x08
   d4585:	00          	.byte	0x00
        case TE_FUNCTION7: case TE_CLOSURE7: te_free(n->parameters[6]);     /* Falls through. */
   d4586:	6a80      	ldr	r0, [r0, #40]	; 0x28
   d4588:	f7ff ffdf 	bl	d454a <te_free>
        case TE_FUNCTION6: case TE_CLOSURE6: te_free(n->parameters[5]);     /* Falls through. */
   d458c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d458e:	f7ff ffdc 	bl	d454a <te_free>
        case TE_FUNCTION5: case TE_CLOSURE5: te_free(n->parameters[4]);     /* Falls through. */
   d4592:	6a20      	ldr	r0, [r4, #32]
   d4594:	f7ff ffd9 	bl	d454a <te_free>
        case TE_FUNCTION4: case TE_CLOSURE4: te_free(n->parameters[3]);     /* Falls through. */
   d4598:	69e0      	ldr	r0, [r4, #28]
   d459a:	f7ff ffd6 	bl	d454a <te_free>
        case TE_FUNCTION3: case TE_CLOSURE3: te_free(n->parameters[2]);     /* Falls through. */
   d459e:	69a0      	ldr	r0, [r4, #24]
   d45a0:	f7ff ffd3 	bl	d454a <te_free>
        case TE_FUNCTION2: case TE_CLOSURE2: te_free(n->parameters[1]);     /* Falls through. */
   d45a4:	6960      	ldr	r0, [r4, #20]
   d45a6:	f7ff ffd0 	bl	d454a <te_free>
        case TE_FUNCTION1: case TE_CLOSURE1: te_free(n->parameters[0]);
   d45aa:	6920      	ldr	r0, [r4, #16]
    }
}
   d45ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        case TE_FUNCTION6: case TE_CLOSURE6: te_free(n->parameters[5]);     /* Falls through. */
        case TE_FUNCTION5: case TE_CLOSURE5: te_free(n->parameters[4]);     /* Falls through. */
        case TE_FUNCTION4: case TE_CLOSURE4: te_free(n->parameters[3]);     /* Falls through. */
        case TE_FUNCTION3: case TE_CLOSURE3: te_free(n->parameters[2]);     /* Falls through. */
        case TE_FUNCTION2: case TE_CLOSURE2: te_free(n->parameters[1]);     /* Falls through. */
        case TE_FUNCTION1: case TE_CLOSURE1: te_free(n->parameters[0]);
   d45b0:	f7ff bfcb 	b.w	d454a <te_free>
   d45b4:	bd10      	pop	{r4, pc}
	...

000d45b8 <next_token>:
static double logical_notnot(double a) {return a != 0.0;}
static double negate_logical_not(double a) {return -(a == 0.0);}
static double negate_logical_notnot(double a) {return -(a != 0.0);}


void next_token(state *s) {
   d45b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    s->type = TOK_NULL;
   d45bc:	2318      	movs	r3, #24
    int imax = sizeof(functions) / sizeof(te_variable) - 2;

    /*Binary search.*/
    while (imax >= imin) {
        const int i = (imin + ((imax-imin)/2));
        int c = strncmp(name, functions[i].name, len);
   d45be:	f8df b270 	ldr.w	fp, [pc, #624]	; d4830 <next_token+0x278>
static double negate_logical_not(double a) {return -(a == 0.0);}
static double negate_logical_notnot(double a) {return -(a != 0.0);}


void next_token(state *s) {
    s->type = TOK_NULL;
   d45c2:	6083      	str	r3, [r0, #8]
static double logical_notnot(double a) {return a != 0.0;}
static double negate_logical_not(double a) {return -(a == 0.0);}
static double negate_logical_notnot(double a) {return -(a != 0.0);}


void next_token(state *s) {
   d45c4:	4604      	mov	r4, r0
    s->type = TOK_NULL;

    do {

        if (!*s->next){
   d45c6:	6865      	ldr	r5, [r4, #4]
   d45c8:	782b      	ldrb	r3, [r5, #0]
   d45ca:	b913      	cbnz	r3, d45d2 <next_token+0x1a>
            s->type = TOK_END;
   d45cc:	231a      	movs	r3, #26
   d45ce:	60a3      	str	r3, [r4, #8]
            return;
   d45d0:	e10c      	b.n	d47ec <next_token+0x234>
        }

        /* Try reading a number. */
        if ((s->next[0] >= '0' && s->next[0] <= '9') || s->next[0] == '.') {
   d45d2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d45d6:	2a09      	cmp	r2, #9
   d45d8:	d901      	bls.n	d45de <next_token+0x26>
   d45da:	2b2e      	cmp	r3, #46	; 0x2e
   d45dc:	d107      	bne.n	d45ee <next_token+0x36>
            s->value = strtod(s->next, (char**)&s->next);
   d45de:	1d21      	adds	r1, r4, #4
   d45e0:	4628      	mov	r0, r5
   d45e2:	f010 fde1 	bl	e51a8 <strtod>
            s->type = TOK_NUMBER;
   d45e6:	231e      	movs	r3, #30
            return;
        }

        /* Try reading a number. */
        if ((s->next[0] >= '0' && s->next[0] <= '9') || s->next[0] == '.') {
            s->value = strtod(s->next, (char**)&s->next);
   d45e8:	ed84 0b04 	vstr	d0, [r4, #16]
   d45ec:	e0f3      	b.n	d47d6 <next_token+0x21e>
            s->type = TOK_NUMBER;
        } else {
            /* Look for a variable or builtin function call. */
            if (s->next[0] >= 'a' && s->next[0] <= 'z') {
   d45ee:	3b61      	subs	r3, #97	; 0x61
   d45f0:	2b19      	cmp	r3, #25
   d45f2:	d85a      	bhi.n	d46aa <next_token+0xf2>
                const char *start;
                start = s->next;
                while ((s->next[0] >= 'a' && s->next[0] <= 'z') || (s->next[0] >= '0' && s->next[0] <= '9') || (s->next[0] == '_')) s->next++;
   d45f4:	6863      	ldr	r3, [r4, #4]
   d45f6:	781a      	ldrb	r2, [r3, #0]
   d45f8:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
   d45fc:	2919      	cmp	r1, #25
   d45fe:	d802      	bhi.n	d4606 <next_token+0x4e>
   d4600:	3301      	adds	r3, #1
   d4602:	6063      	str	r3, [r4, #4]
   d4604:	e7f6      	b.n	d45f4 <next_token+0x3c>
   d4606:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   d460a:	2909      	cmp	r1, #9
   d460c:	d9f8      	bls.n	d4600 <next_token+0x48>
   d460e:	2a5f      	cmp	r2, #95	; 0x5f
   d4610:	d0f6      	beq.n	d4600 <next_token+0x48>
}

static const te_variable *find_lookup(const state *s, const char *name, int len) {
    int iters;
    const te_variable *var;
    if (!s->lookup) return 0;
   d4612:	69e6      	ldr	r6, [r4, #28]
            if (s->next[0] >= 'a' && s->next[0] <= 'z') {
                const char *start;
                start = s->next;
                while ((s->next[0] >= 'a' && s->next[0] <= 'z') || (s->next[0] >= '0' && s->next[0] <= '9') || (s->next[0] == '_')) s->next++;

                const te_variable *var = find_lookup(s, start, s->next - start);
   d4614:	ebc5 0803 	rsb	r8, r5, r3
}

static const te_variable *find_lookup(const state *s, const char *name, int len) {
    int iters;
    const te_variable *var;
    if (!s->lookup) return 0;
   d4618:	b17e      	cbz	r6, d463a <next_token+0x82>

    for (var = s->lookup, iters = s->lookup_len; iters; ++var, --iters) {
   d461a:	6a27      	ldr	r7, [r4, #32]
   d461c:	b177      	cbz	r7, d463c <next_token+0x84>
        if (strncmp(name, var->name, len) == 0 && var->name[len] == '\0') {
   d461e:	f8d6 9000 	ldr.w	r9, [r6]
   d4622:	4642      	mov	r2, r8
   d4624:	4649      	mov	r1, r9
   d4626:	4628      	mov	r0, r5
   d4628:	f00f ff78 	bl	e451c <strncmp>
   d462c:	b910      	cbnz	r0, d4634 <next_token+0x7c>
   d462e:	f819 3008 	ldrb.w	r3, [r9, r8]
   d4632:	b32b      	cbz	r3, d4680 <next_token+0xc8>
static const te_variable *find_lookup(const state *s, const char *name, int len) {
    int iters;
    const te_variable *var;
    if (!s->lookup) return 0;

    for (var = s->lookup, iters = s->lookup_len; iters; ++var, --iters) {
   d4634:	3610      	adds	r6, #16
   d4636:	3f01      	subs	r7, #1
   d4638:	e7f0      	b.n	d461c <next_token+0x64>
}

static const te_variable *find_lookup(const state *s, const char *name, int len) {
    int iters;
    const te_variable *var;
    if (!s->lookup) return 0;
   d463a:	4637      	mov	r7, r6
   d463c:	f04f 0a17 	mov.w	sl, #23
    int imin = 0;
    int imax = sizeof(functions) / sizeof(te_variable) - 2;

    /*Binary search.*/
    while (imax >= imin) {
        const int i = (imin + ((imax-imin)/2));
   d4640:	ebc7 090a 	rsb	r9, r7, sl
   d4644:	eb07 0969 	add.w	r9, r7, r9, asr #1
        int c = strncmp(name, functions[i].name, len);
   d4648:	ea4f 1309 	mov.w	r3, r9, lsl #4
   d464c:	eb0b 0603 	add.w	r6, fp, r3
   d4650:	f85b 3003 	ldr.w	r3, [fp, r3]
   d4654:	9301      	str	r3, [sp, #4]
   d4656:	4642      	mov	r2, r8
   d4658:	4619      	mov	r1, r3
   d465a:	4628      	mov	r0, r5
   d465c:	f00f ff5e 	bl	e451c <strncmp>
        if (!c) c = '\0' - functions[i].name[len];
   d4660:	2800      	cmp	r0, #0
   d4662:	f040 80be 	bne.w	d47e2 <next_token+0x22a>
        if (c == 0) {
   d4666:	9b01      	ldr	r3, [sp, #4]
   d4668:	f813 3008 	ldrb.w	r3, [r3, r8]
   d466c:	b91b      	cbnz	r3, d4676 <next_token+0xbe>
                while ((s->next[0] >= 'a' && s->next[0] <= 'z') || (s->next[0] >= '0' && s->next[0] <= '9') || (s->next[0] == '_')) s->next++;

                const te_variable *var = find_lookup(s, start, s->next - start);
                if (!var) var = find_builtin(start, s->next - start);

                if (!var) {
   d466e:	2e00      	cmp	r6, #0
   d4670:	f000 80b0 	beq.w	d47d4 <next_token+0x21c>
   d4674:	e004      	b.n	d4680 <next_token+0xc8>
        if (c == 0) {
            return functions + i;
        } else if (c > 0) {
            imin = i + 1;
        } else {
            imax = i - 1;
   d4676:	f109 3aff 	add.w	sl, r9, #4294967295
static const te_variable *find_builtin(const char *name, int len) {
    int imin = 0;
    int imax = sizeof(functions) / sizeof(te_variable) - 2;

    /*Binary search.*/
    while (imax >= imin) {
   d467a:	4557      	cmp	r7, sl
   d467c:	dde0      	ble.n	d4640 <next_token+0x88>
   d467e:	e0a9      	b.n	d47d4 <next_token+0x21c>
                if (!var) var = find_builtin(start, s->next - start);

                if (!var) {
                    s->type = TOK_ERROR;
                } else {
                    switch(TYPE_MASK(var->type))
   d4680:	68b3      	ldr	r3, [r6, #8]
   d4682:	f003 031f 	and.w	r3, r3, #31
   d4686:	2b0f      	cmp	r3, #15
   d4688:	dc06      	bgt.n	d4698 <next_token+0xe0>
   d468a:	2b08      	cmp	r3, #8
   d468c:	da09      	bge.n	d46a2 <next_token+0xea>
   d468e:	2b00      	cmp	r3, #0
   d4690:	f040 80a2 	bne.w	d47d8 <next_token+0x220>
                    {
                        case TE_VARIABLE:
                            s->type = TOK_VARIABLE;
   d4694:	231f      	movs	r3, #31
   d4696:	e005      	b.n	d46a4 <next_token+0xec>
                if (!var) var = find_builtin(start, s->next - start);

                if (!var) {
                    s->type = TOK_ERROR;
                } else {
                    switch(TYPE_MASK(var->type))
   d4698:	2b17      	cmp	r3, #23
   d469a:	f300 809d 	bgt.w	d47d8 <next_token+0x220>
                            s->bound = var->address;
                            break;

                        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:         /* Falls through. */
                        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:         /* Falls through. */
                            s->context = var->context;                                                  /* Falls through. */
   d469e:	68f3      	ldr	r3, [r6, #12]
   d46a0:	61a3      	str	r3, [r4, #24]

                        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:     /* Falls through. */
                        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:     /* Falls through. */
                            s->type = var->type;
   d46a2:	68b3      	ldr	r3, [r6, #8]
   d46a4:	60a3      	str	r3, [r4, #8]
                            s->function = var->address;
   d46a6:	6873      	ldr	r3, [r6, #4]
   d46a8:	e03d      	b.n	d4726 <next_token+0x16e>
                    }
                }

            } else {
                /* Look for an operator or special character. */
                switch (s->next++[0]) {
   d46aa:	1c6a      	adds	r2, r5, #1
   d46ac:	6062      	str	r2, [r4, #4]
   d46ae:	782b      	ldrb	r3, [r5, #0]
   d46b0:	2b2a      	cmp	r3, #42	; 0x2a
   d46b2:	d03e      	beq.n	d4732 <next_token+0x17a>
   d46b4:	d81e      	bhi.n	d46f4 <next_token+0x13c>
   d46b6:	2b21      	cmp	r3, #33	; 0x21
   d46b8:	d043      	beq.n	d4742 <next_token+0x18a>
   d46ba:	d80c      	bhi.n	d46d6 <next_token+0x11e>
   d46bc:	2b0d      	cmp	r3, #13
   d46be:	f000 808b 	beq.w	d47d8 <next_token+0x220>
   d46c2:	d804      	bhi.n	d46ce <next_token+0x116>
   d46c4:	3b09      	subs	r3, #9
   d46c6:	2b01      	cmp	r3, #1
   d46c8:	f240 8086 	bls.w	d47d8 <next_token+0x220>
   d46cc:	e082      	b.n	d47d4 <next_token+0x21c>
   d46ce:	2b20      	cmp	r3, #32
   d46d0:	f000 8082 	beq.w	d47d8 <next_token+0x220>
   d46d4:	e07e      	b.n	d47d4 <next_token+0x21c>
   d46d6:	2b26      	cmp	r3, #38	; 0x26
   d46d8:	d066      	beq.n	d47a8 <next_token+0x1f0>
   d46da:	d805      	bhi.n	d46e8 <next_token+0x130>
   d46dc:	2b25      	cmp	r3, #37	; 0x25
   d46de:	d179      	bne.n	d47d4 <next_token+0x21c>
                    case '+': s->type = TOK_INFIX; s->function = add; break;
                    case '-': s->type = TOK_INFIX; s->function = sub; break;
                    case '*': s->type = TOK_INFIX; s->function = mul; break;
                    case '/': s->type = TOK_INFIX; s->function = divide; break;
                    case '^': s->type = TOK_INFIX; s->function = pow; break;
                    case '%': s->type = TOK_INFIX; s->function = fmod; break;
   d46e0:	2320      	movs	r3, #32
   d46e2:	60a3      	str	r3, [r4, #8]
   d46e4:	4b43      	ldr	r3, [pc, #268]	; (d47f4 <next_token+0x23c>)
   d46e6:	e01e      	b.n	d4726 <next_token+0x16e>
                    }
                }

            } else {
                /* Look for an operator or special character. */
                switch (s->next++[0]) {
   d46e8:	2b28      	cmp	r3, #40	; 0x28
   d46ea:	d06f      	beq.n	d47cc <next_token+0x214>
   d46ec:	2b29      	cmp	r3, #41	; 0x29
   d46ee:	d171      	bne.n	d47d4 <next_token+0x21c>
                        } else {
                            s->type = TOK_ERROR;
                        }
                        break;
                    case '(': s->type = TOK_OPEN; break;
                    case ')': s->type = TOK_CLOSE; break;
   d46f0:	231d      	movs	r3, #29
   d46f2:	e070      	b.n	d47d6 <next_token+0x21e>
                    }
                }

            } else {
                /* Look for an operator or special character. */
                switch (s->next++[0]) {
   d46f4:	2b3c      	cmp	r3, #60	; 0x3c
   d46f6:	d03b      	beq.n	d4770 <next_token+0x1b8>
   d46f8:	d80a      	bhi.n	d4710 <next_token+0x158>
   d46fa:	2b2c      	cmp	r3, #44	; 0x2c
   d46fc:	d068      	beq.n	d47d0 <next_token+0x218>
   d46fe:	d30f      	bcc.n	d4720 <next_token+0x168>
   d4700:	2b2d      	cmp	r3, #45	; 0x2d
   d4702:	d012      	beq.n	d472a <next_token+0x172>
   d4704:	2b2f      	cmp	r3, #47	; 0x2f
   d4706:	d165      	bne.n	d47d4 <next_token+0x21c>
                    case '+': s->type = TOK_INFIX; s->function = add; break;
                    case '-': s->type = TOK_INFIX; s->function = sub; break;
                    case '*': s->type = TOK_INFIX; s->function = mul; break;
                    case '/': s->type = TOK_INFIX; s->function = divide; break;
   d4708:	2320      	movs	r3, #32
   d470a:	60a3      	str	r3, [r4, #8]
   d470c:	4b3a      	ldr	r3, [pc, #232]	; (d47f8 <next_token+0x240>)
   d470e:	e00a      	b.n	d4726 <next_token+0x16e>
                    }
                }

            } else {
                /* Look for an operator or special character. */
                switch (s->next++[0]) {
   d4710:	2b3e      	cmp	r3, #62	; 0x3e
   d4712:	d03b      	beq.n	d478c <next_token+0x1d4>
   d4714:	d323      	bcc.n	d475e <next_token+0x1a6>
   d4716:	2b5e      	cmp	r3, #94	; 0x5e
   d4718:	d00f      	beq.n	d473a <next_token+0x182>
   d471a:	2b7c      	cmp	r3, #124	; 0x7c
   d471c:	d04d      	beq.n	d47ba <next_token+0x202>
   d471e:	e059      	b.n	d47d4 <next_token+0x21c>
                    case '+': s->type = TOK_INFIX; s->function = add; break;
   d4720:	2320      	movs	r3, #32
   d4722:	60a3      	str	r3, [r4, #8]
   d4724:	4b35      	ldr	r3, [pc, #212]	; (d47fc <next_token+0x244>)
   d4726:	6123      	str	r3, [r4, #16]
   d4728:	e056      	b.n	d47d8 <next_token+0x220>
                    case '-': s->type = TOK_INFIX; s->function = sub; break;
   d472a:	2320      	movs	r3, #32
   d472c:	60a3      	str	r3, [r4, #8]
   d472e:	4b34      	ldr	r3, [pc, #208]	; (d4800 <next_token+0x248>)
   d4730:	e7f9      	b.n	d4726 <next_token+0x16e>
                    case '*': s->type = TOK_INFIX; s->function = mul; break;
   d4732:	2320      	movs	r3, #32
   d4734:	60a3      	str	r3, [r4, #8]
   d4736:	4b33      	ldr	r3, [pc, #204]	; (d4804 <next_token+0x24c>)
   d4738:	e7f5      	b.n	d4726 <next_token+0x16e>
                    case '/': s->type = TOK_INFIX; s->function = divide; break;
                    case '^': s->type = TOK_INFIX; s->function = pow; break;
   d473a:	2320      	movs	r3, #32
   d473c:	60a3      	str	r3, [r4, #8]
   d473e:	4b32      	ldr	r3, [pc, #200]	; (d4808 <next_token+0x250>)
   d4740:	e7f1      	b.n	d4726 <next_token+0x16e>
                    case '%': s->type = TOK_INFIX; s->function = fmod; break;
                    case '!':
                        if (s->next++[0] == '=') {
   d4742:	1cab      	adds	r3, r5, #2
   d4744:	6063      	str	r3, [r4, #4]
   d4746:	786b      	ldrb	r3, [r5, #1]
   d4748:	2b3d      	cmp	r3, #61	; 0x3d
   d474a:	f04f 0320 	mov.w	r3, #32
                            s->type = TOK_INFIX; s->function = not_equal;
   d474e:	bf0b      	itete	eq
   d4750:	60a3      	streq	r3, [r4, #8]
                        } else {
                            s->next--;
                            s->type = TOK_INFIX; s->function = logical_not;
   d4752:	60a3      	strne	r3, [r4, #8]
                    case '/': s->type = TOK_INFIX; s->function = divide; break;
                    case '^': s->type = TOK_INFIX; s->function = pow; break;
                    case '%': s->type = TOK_INFIX; s->function = fmod; break;
                    case '!':
                        if (s->next++[0] == '=') {
                            s->type = TOK_INFIX; s->function = not_equal;
   d4754:	4b2d      	ldreq	r3, [pc, #180]	; (d480c <next_token+0x254>)
                        } else {
                            s->next--;
   d4756:	6062      	strne	r2, [r4, #4]
                            s->type = TOK_INFIX; s->function = logical_not;
   d4758:	bf18      	it	ne
   d475a:	4b2d      	ldrne	r3, [pc, #180]	; (d4810 <next_token+0x258>)
   d475c:	e7e3      	b.n	d4726 <next_token+0x16e>
                        }
                        break;
                    case '=':
                        if (s->next++[0] == '=') {
   d475e:	1cab      	adds	r3, r5, #2
   d4760:	6063      	str	r3, [r4, #4]
   d4762:	786b      	ldrb	r3, [r5, #1]
   d4764:	2b3d      	cmp	r3, #61	; 0x3d
   d4766:	d135      	bne.n	d47d4 <next_token+0x21c>
                            s->type = TOK_INFIX; s->function = equal;
   d4768:	2320      	movs	r3, #32
   d476a:	60a3      	str	r3, [r4, #8]
   d476c:	4b29      	ldr	r3, [pc, #164]	; (d4814 <next_token+0x25c>)
   d476e:	e7da      	b.n	d4726 <next_token+0x16e>
                        } else {
                            s->type = TOK_ERROR;
                        }
                        break;
                    case '<':
                        if (s->next++[0] == '=') {
   d4770:	1cab      	adds	r3, r5, #2
   d4772:	6063      	str	r3, [r4, #4]
   d4774:	786b      	ldrb	r3, [r5, #1]
   d4776:	2b3d      	cmp	r3, #61	; 0x3d
   d4778:	f04f 0320 	mov.w	r3, #32
                            s->type = TOK_INFIX; s->function = lower_eq;
   d477c:	bf0b      	itete	eq
   d477e:	60a3      	streq	r3, [r4, #8]
                        } else {
                            s->next--;
                            s->type = TOK_INFIX; s->function = lower;
   d4780:	60a3      	strne	r3, [r4, #8]
                            s->type = TOK_ERROR;
                        }
                        break;
                    case '<':
                        if (s->next++[0] == '=') {
                            s->type = TOK_INFIX; s->function = lower_eq;
   d4782:	4b25      	ldreq	r3, [pc, #148]	; (d4818 <next_token+0x260>)
                        } else {
                            s->next--;
   d4784:	6062      	strne	r2, [r4, #4]
                            s->type = TOK_INFIX; s->function = lower;
   d4786:	bf18      	it	ne
   d4788:	4b24      	ldrne	r3, [pc, #144]	; (d481c <next_token+0x264>)
   d478a:	e7cc      	b.n	d4726 <next_token+0x16e>
                        }
                        break;
                    case '>':
                        if (s->next++[0] == '=') {
   d478c:	1cab      	adds	r3, r5, #2
   d478e:	6063      	str	r3, [r4, #4]
   d4790:	786b      	ldrb	r3, [r5, #1]
   d4792:	2b3d      	cmp	r3, #61	; 0x3d
   d4794:	f04f 0320 	mov.w	r3, #32
                            s->type = TOK_INFIX; s->function = greater_eq;
   d4798:	bf0b      	itete	eq
   d479a:	60a3      	streq	r3, [r4, #8]
                        } else {
                            s->next--;
                            s->type = TOK_INFIX; s->function = greater;
   d479c:	60a3      	strne	r3, [r4, #8]
                            s->type = TOK_INFIX; s->function = lower;
                        }
                        break;
                    case '>':
                        if (s->next++[0] == '=') {
                            s->type = TOK_INFIX; s->function = greater_eq;
   d479e:	4b20      	ldreq	r3, [pc, #128]	; (d4820 <next_token+0x268>)
                        } else {
                            s->next--;
   d47a0:	6062      	strne	r2, [r4, #4]
                            s->type = TOK_INFIX; s->function = greater;
   d47a2:	bf18      	it	ne
   d47a4:	4b1f      	ldrne	r3, [pc, #124]	; (d4824 <next_token+0x26c>)
   d47a6:	e7be      	b.n	d4726 <next_token+0x16e>
                        }
                        break;
                    case '&':
                        if (s->next++[0] == '&') {
   d47a8:	1cab      	adds	r3, r5, #2
   d47aa:	6063      	str	r3, [r4, #4]
   d47ac:	786b      	ldrb	r3, [r5, #1]
   d47ae:	2b26      	cmp	r3, #38	; 0x26
   d47b0:	d110      	bne.n	d47d4 <next_token+0x21c>
                            s->type = TOK_INFIX; s->function = logical_and;
   d47b2:	2320      	movs	r3, #32
   d47b4:	60a3      	str	r3, [r4, #8]
   d47b6:	4b1c      	ldr	r3, [pc, #112]	; (d4828 <next_token+0x270>)
   d47b8:	e7b5      	b.n	d4726 <next_token+0x16e>
                        } else {
                            s->type = TOK_ERROR;
                        }
                        break;
                    case '|':
                        if (s->next++[0] == '|') {
   d47ba:	1cab      	adds	r3, r5, #2
   d47bc:	6063      	str	r3, [r4, #4]
   d47be:	786b      	ldrb	r3, [r5, #1]
   d47c0:	2b7c      	cmp	r3, #124	; 0x7c
   d47c2:	d107      	bne.n	d47d4 <next_token+0x21c>
                            s->type = TOK_INFIX; s->function = logical_or;
   d47c4:	2320      	movs	r3, #32
   d47c6:	60a3      	str	r3, [r4, #8]
   d47c8:	4b18      	ldr	r3, [pc, #96]	; (d482c <next_token+0x274>)
   d47ca:	e7ac      	b.n	d4726 <next_token+0x16e>
                        } else {
                            s->type = TOK_ERROR;
                        }
                        break;
                    case '(': s->type = TOK_OPEN; break;
   d47cc:	231c      	movs	r3, #28
   d47ce:	e002      	b.n	d47d6 <next_token+0x21e>
                    case ')': s->type = TOK_CLOSE; break;
                    case ',': s->type = TOK_SEP; break;
   d47d0:	231b      	movs	r3, #27
   d47d2:	e000      	b.n	d47d6 <next_token+0x21e>
                    case ' ': case '\t': case '\n': case '\r': break;
                    default: s->type = TOK_ERROR; break;
   d47d4:	2319      	movs	r3, #25
   d47d6:	60a3      	str	r3, [r4, #8]
                }
            }
        }
    } while (s->type == TOK_NULL);
   d47d8:	68a3      	ldr	r3, [r4, #8]
   d47da:	2b18      	cmp	r3, #24
   d47dc:	f43f aef3 	beq.w	d45c6 <next_token+0xe>
   d47e0:	e004      	b.n	d47ec <next_token+0x234>
        const int i = (imin + ((imax-imin)/2));
        int c = strncmp(name, functions[i].name, len);
        if (!c) c = '\0' - functions[i].name[len];
        if (c == 0) {
            return functions + i;
        } else if (c > 0) {
   d47e2:	f77f af48 	ble.w	d4676 <next_token+0xbe>
            imin = i + 1;
   d47e6:	f109 0701 	add.w	r7, r9, #1
   d47ea:	e746      	b.n	d467a <next_token+0xc2>
                    default: s->type = TOK_ERROR; break;
                }
            }
        }
    } while (s->type == TOK_NULL);
}
   d47ec:	b003      	add	sp, #12
   d47ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d47f2:	bf00      	nop
   d47f4:	000ddf21 	.word	0x000ddf21
   d47f8:	000d4115 	.word	0x000d4115
   d47fc:	000d40d9 	.word	0x000d40d9
   d4800:	000d40ed 	.word	0x000d40ed
   d4804:	000d4101 	.word	0x000d4101
   d4808:	000de221 	.word	0x000de221
   d480c:	000d4239 	.word	0x000d4239
   d4810:	000d42e1 	.word	0x000d42e1
   d4814:	000d4209 	.word	0x000d4209
   d4818:	000d41d9 	.word	0x000d41d9
   d481c:	000d41a9 	.word	0x000d41a9
   d4820:	000d4179 	.word	0x000d4179
   d4824:	000d4149 	.word	0x000d4149
   d4828:	000d4269 	.word	0x000d4269
   d482c:	000d42a5 	.word	0x000d42a5
   d4830:	000e68c8 	.word	0x000e68c8

000d4834 <list>:

    return ret;
}


static te_expr *list(state *s) {
   d4834:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4836:	4605      	mov	r5, r0
    /* <list>      =    <expr> {"," <expr>} */
    te_expr *ret = expr(s);
   d4838:	f000 f9f6 	bl	d4c28 <expr>

    while (s->type == TOK_SEP) {
        next_token(s);
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, expr(s));
        ret->function = comma;
   d483c:	4e0b      	ldr	r6, [pc, #44]	; (d486c <list+0x38>)
}


static te_expr *list(state *s) {
    /* <list>      =    <expr> {"," <expr>} */
    te_expr *ret = expr(s);
   d483e:	4604      	mov	r4, r0

    while (s->type == TOK_SEP) {
   d4840:	68ab      	ldr	r3, [r5, #8]
   d4842:	2b1b      	cmp	r3, #27
   d4844:	d10e      	bne.n	d4864 <list+0x30>
        next_token(s);
   d4846:	4628      	mov	r0, r5
   d4848:	f7ff feb6 	bl	d45b8 <next_token>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, expr(s));
   d484c:	4628      	mov	r0, r5
   d484e:	9400      	str	r4, [sp, #0]
   d4850:	f000 f9ea 	bl	d4c28 <expr>
   d4854:	4669      	mov	r1, sp
   d4856:	9001      	str	r0, [sp, #4]
   d4858:	202a      	movs	r0, #42	; 0x2a
   d485a:	f7ff fd91 	bl	d4380 <new_expr>
   d485e:	4604      	mov	r4, r0
        ret->function = comma;
   d4860:	6086      	str	r6, [r0, #8]
   d4862:	e7ed      	b.n	d4840 <list+0xc>
    }

    return ret;
}
   d4864:	4620      	mov	r0, r4
   d4866:	b002      	add	sp, #8
   d4868:	bd70      	pop	{r4, r5, r6, pc}
   d486a:	bf00      	nop
   d486c:	000d413b 	.word	0x000d413b

000d4870 <base>:

static te_expr *list(state *s);
static te_expr *expr(state *s);
static te_expr *power(state *s);

static te_expr *base(state *s) {
   d4870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4874:	4604      	mov	r4, r0
    /* <base>      =    <constant> | <variable> | <function-0> {"(" ")"} | <function-1> <power> | <function-X> "(" <expr> {"," <expr>} ")" | "(" <list> ")" */
    te_expr *ret;
    int arity;

    switch (TYPE_MASK(s->type)) {
   d4876:	6880      	ldr	r0, [r0, #8]
   d4878:	f000 031f 	and.w	r3, r0, #31
   d487c:	3b08      	subs	r3, #8
   d487e:	2b17      	cmp	r3, #23
   d4880:	f200 808a 	bhi.w	d4998 <base+0x128>
   d4884:	e8df f003 	tbb	[pc, r3]
   d4888:	4646331e 	.word	0x4646331e
   d488c:	46464646 	.word	0x46464646
   d4890:	4646331e 	.word	0x4646331e
   d4894:	46464646 	.word	0x46464646
   d4898:	88888888 	.word	0x88888888
   d489c:	160c8877 	.word	0x160c8877
        case TOK_NUMBER:
            ret = new_expr(TE_CONSTANT, 0);
   d48a0:	2100      	movs	r1, #0
   d48a2:	2001      	movs	r0, #1
   d48a4:	f7ff fd6c 	bl	d4380 <new_expr>
            ret->value = s->value;
   d48a8:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    te_expr *ret;
    int arity;

    switch (TYPE_MASK(s->type)) {
        case TOK_NUMBER:
            ret = new_expr(TE_CONSTANT, 0);
   d48ac:	4605      	mov	r5, r0
            ret->value = s->value;
   d48ae:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d48b2:	e06d      	b.n	d4990 <base+0x120>
            next_token(s);
            break;

        case TOK_VARIABLE:
            ret = new_expr(TE_VARIABLE, 0);
   d48b4:	2100      	movs	r1, #0
   d48b6:	4608      	mov	r0, r1
   d48b8:	f7ff fd62 	bl	d4380 <new_expr>
            ret->bound = s->bound;
   d48bc:	6923      	ldr	r3, [r4, #16]
   d48be:	6083      	str	r3, [r0, #8]
            ret->value = s->value;
            next_token(s);
            break;

        case TOK_VARIABLE:
            ret = new_expr(TE_VARIABLE, 0);
   d48c0:	4605      	mov	r5, r0
   d48c2:	e065      	b.n	d4990 <base+0x120>
            next_token(s);
            break;

        case TE_FUNCTION0:
        case TE_CLOSURE0:
            ret = new_expr(s->type, 0);
   d48c4:	2100      	movs	r1, #0
   d48c6:	f7ff fd5b 	bl	d4380 <new_expr>
            ret->function = s->function;
   d48ca:	6923      	ldr	r3, [r4, #16]
   d48cc:	6083      	str	r3, [r0, #8]
            if (IS_CLOSURE(s->type)) ret->parameters[0] = s->context;
   d48ce:	68a3      	ldr	r3, [r4, #8]
   d48d0:	06d9      	lsls	r1, r3, #27
   d48d2:	bf44      	itt	mi
   d48d4:	69a3      	ldrmi	r3, [r4, #24]
   d48d6:	6103      	strmi	r3, [r0, #16]
            next_token(s);
            break;

        case TE_FUNCTION0:
        case TE_CLOSURE0:
            ret = new_expr(s->type, 0);
   d48d8:	4605      	mov	r5, r0
            ret->function = s->function;
            if (IS_CLOSURE(s->type)) ret->parameters[0] = s->context;
            next_token(s);
   d48da:	4620      	mov	r0, r4
   d48dc:	f7ff fe6c 	bl	d45b8 <next_token>
            if (s->type == TOK_OPEN) {
   d48e0:	68a3      	ldr	r3, [r4, #8]
   d48e2:	2b1c      	cmp	r3, #28
   d48e4:	d163      	bne.n	d49ae <base+0x13e>
                next_token(s);
   d48e6:	4620      	mov	r0, r4
   d48e8:	f7ff fe66 	bl	d45b8 <next_token>
   d48ec:	e04a      	b.n	d4984 <base+0x114>
            }
            break;

        case TE_FUNCTION1:
        case TE_CLOSURE1:
            ret = new_expr(s->type, 0);
   d48ee:	2100      	movs	r1, #0
   d48f0:	f7ff fd46 	bl	d4380 <new_expr>
            ret->function = s->function;
   d48f4:	6923      	ldr	r3, [r4, #16]
   d48f6:	6083      	str	r3, [r0, #8]
            if (IS_CLOSURE(s->type)) ret->parameters[1] = s->context;
   d48f8:	68a3      	ldr	r3, [r4, #8]
   d48fa:	06da      	lsls	r2, r3, #27
   d48fc:	bf44      	itt	mi
   d48fe:	69a3      	ldrmi	r3, [r4, #24]
   d4900:	6143      	strmi	r3, [r0, #20]
            }
            break;

        case TE_FUNCTION1:
        case TE_CLOSURE1:
            ret = new_expr(s->type, 0);
   d4902:	4605      	mov	r5, r0
            ret->function = s->function;
            if (IS_CLOSURE(s->type)) ret->parameters[1] = s->context;
            next_token(s);
   d4904:	4620      	mov	r0, r4
   d4906:	f7ff fe57 	bl	d45b8 <next_token>
            ret->parameters[0] = power(s);
   d490a:	4620      	mov	r0, r4
   d490c:	f000 f854 	bl	d49b8 <power>
   d4910:	6128      	str	r0, [r5, #16]
            break;
   d4912:	e04c      	b.n	d49ae <base+0x13e>

        case TE_FUNCTION2: case TE_FUNCTION3: case TE_FUNCTION4:
        case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
        case TE_CLOSURE2: case TE_CLOSURE3: case TE_CLOSURE4:
        case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            arity = ARITY(s->type);
   d4914:	f010 0618 	ands.w	r6, r0, #24

            ret = new_expr(s->type, 0);
   d4918:	f04f 0100 	mov.w	r1, #0

        case TE_FUNCTION2: case TE_FUNCTION3: case TE_FUNCTION4:
        case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
        case TE_CLOSURE2: case TE_CLOSURE3: case TE_CLOSURE4:
        case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            arity = ARITY(s->type);
   d491c:	bf18      	it	ne
   d491e:	f000 0607 	andne.w	r6, r0, #7

            ret = new_expr(s->type, 0);
   d4922:	f7ff fd2d 	bl	d4380 <new_expr>
            ret->function = s->function;
   d4926:	6923      	ldr	r3, [r4, #16]
   d4928:	6083      	str	r3, [r0, #8]
            if (IS_CLOSURE(s->type)) ret->parameters[arity] = s->context;
   d492a:	68a3      	ldr	r3, [r4, #8]
   d492c:	06db      	lsls	r3, r3, #27
   d492e:	bf42      	ittt	mi
   d4930:	1d33      	addmi	r3, r6, #4
   d4932:	69a2      	ldrmi	r2, [r4, #24]
   d4934:	f840 2023 	strmi.w	r2, [r0, r3, lsl #2]
        case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
        case TE_CLOSURE2: case TE_CLOSURE3: case TE_CLOSURE4:
        case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            arity = ARITY(s->type);

            ret = new_expr(s->type, 0);
   d4938:	4605      	mov	r5, r0
            ret->function = s->function;
            if (IS_CLOSURE(s->type)) ret->parameters[arity] = s->context;
            next_token(s);
   d493a:	4620      	mov	r0, r4
   d493c:	f7ff fe3c 	bl	d45b8 <next_token>

            if (s->type != TOK_OPEN) {
   d4940:	68a3      	ldr	r3, [r4, #8]
   d4942:	2b1c      	cmp	r3, #28
   d4944:	d121      	bne.n	d498a <base+0x11a>
   d4946:	f105 080c 	add.w	r8, r5, #12
   d494a:	2700      	movs	r7, #0
                s->type = TOK_ERROR;
            } else {
                int i;
                for(i = 0; i < arity; i++) {
   d494c:	42b7      	cmp	r7, r6
   d494e:	d00a      	beq.n	d4966 <base+0xf6>
                    next_token(s);
   d4950:	4620      	mov	r0, r4
   d4952:	f7ff fe31 	bl	d45b8 <next_token>
                    ret->parameters[i] = expr(s);
   d4956:	4620      	mov	r0, r4
   d4958:	f000 f966 	bl	d4c28 <expr>
   d495c:	f848 0f04 	str.w	r0, [r8, #4]!
                    if(s->type != TOK_SEP) {
   d4960:	68a3      	ldr	r3, [r4, #8]
   d4962:	2b1b      	cmp	r3, #27
   d4964:	d005      	beq.n	d4972 <base+0x102>
                        break;
                    }
                }
                if(s->type != TOK_CLOSE || i != arity - 1) {
   d4966:	68a3      	ldr	r3, [r4, #8]
   d4968:	2b1d      	cmp	r3, #29
   d496a:	d10e      	bne.n	d498a <base+0x11a>
   d496c:	3e01      	subs	r6, #1
   d496e:	42be      	cmp	r6, r7
   d4970:	e00a      	b.n	d4988 <base+0x118>

            if (s->type != TOK_OPEN) {
                s->type = TOK_ERROR;
            } else {
                int i;
                for(i = 0; i < arity; i++) {
   d4972:	3701      	adds	r7, #1
   d4974:	e7ea      	b.n	d494c <base+0xdc>
            }

            break;

        case TOK_OPEN:
            next_token(s);
   d4976:	4620      	mov	r0, r4
   d4978:	f7ff fe1e 	bl	d45b8 <next_token>
            ret = list(s);
   d497c:	4620      	mov	r0, r4
   d497e:	f7ff ff59 	bl	d4834 <list>
   d4982:	4605      	mov	r5, r0
            if (s->type != TOK_CLOSE) {
   d4984:	68a3      	ldr	r3, [r4, #8]
   d4986:	2b1d      	cmp	r3, #29
   d4988:	d002      	beq.n	d4990 <base+0x120>
                s->type = TOK_ERROR;
   d498a:	2319      	movs	r3, #25
   d498c:	60a3      	str	r3, [r4, #8]
   d498e:	e00e      	b.n	d49ae <base+0x13e>
            } else {
                next_token(s);
   d4990:	4620      	mov	r0, r4
   d4992:	f7ff fe11 	bl	d45b8 <next_token>
   d4996:	e00a      	b.n	d49ae <base+0x13e>
            }
            break;

        default:
            ret = new_expr(0, 0);
   d4998:	2100      	movs	r1, #0
   d499a:	4608      	mov	r0, r1
   d499c:	f7ff fcf0 	bl	d4380 <new_expr>
            s->type = TOK_ERROR;
   d49a0:	2319      	movs	r3, #25
   d49a2:	60a3      	str	r3, [r4, #8]
            ret->value = NAN;
   d49a4:	4b03      	ldr	r3, [pc, #12]	; (d49b4 <base+0x144>)
   d49a6:	2200      	movs	r2, #0
   d49a8:	e9c0 2302 	strd	r2, r3, [r0, #8]
                next_token(s);
            }
            break;

        default:
            ret = new_expr(0, 0);
   d49ac:	4605      	mov	r5, r0
            ret->value = NAN;
            break;
    }

    return ret;
}
   d49ae:	4628      	mov	r0, r5
   d49b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d49b4:	7ff80000 	.word	0x7ff80000

000d49b8 <power>:


static te_expr *power(state *s) {
   d49b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    /* <power>     =    {("-" | "+" | "!")} <base> */
    int sign = 1;
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d49bc:	4f39      	ldr	r7, [pc, #228]	; (d4aa4 <power+0xec>)
   d49be:	4d3a      	ldr	r5, [pc, #232]	; (d4aa8 <power+0xf0>)

    return ret;
}


static te_expr *power(state *s) {
   d49c0:	b087      	sub	sp, #28
   d49c2:	4604      	mov	r4, r0
    /* <power>     =    {("-" | "+" | "!")} <base> */
    int sign = 1;
   d49c4:	2601      	movs	r6, #1
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d49c6:	68a3      	ldr	r3, [r4, #8]
   d49c8:	2b20      	cmp	r3, #32
   d49ca:	d002      	beq.n	d49d2 <power+0x1a>
        next_token(s);
    }

    te_expr *ret;

    if (sign == 1) {
   d49cc:	2e01      	cmp	r6, #1
   d49ce:	d144      	bne.n	d4a5a <power+0xa2>
   d49d0:	e027      	b.n	d4a22 <power+0x6a>


static te_expr *power(state *s) {
    /* <power>     =    {("-" | "+" | "!")} <base> */
    int sign = 1;
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d49d2:	6923      	ldr	r3, [r4, #16]
   d49d4:	f8df 80cc 	ldr.w	r8, [pc, #204]	; d4aa4 <power+0xec>
   d49d8:	42bb      	cmp	r3, r7
   d49da:	d103      	bne.n	d49e4 <power+0x2c>
        if (s->function == sub) sign = -sign;
        next_token(s);
   d49dc:	4620      	mov	r0, r4
   d49de:	f7ff fdeb 	bl	d45b8 <next_token>
   d49e2:	e7f0      	b.n	d49c6 <power+0xe>


static te_expr *power(state *s) {
    /* <power>     =    {("-" | "+" | "!")} <base> */
    int sign = 1;
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d49e4:	42ab      	cmp	r3, r5
   d49e6:	f8df 90c0 	ldr.w	r9, [pc, #192]	; d4aa8 <power+0xf0>
   d49ea:	d101      	bne.n	d49f0 <power+0x38>
        if (s->function == sub) sign = -sign;
   d49ec:	4276      	negs	r6, r6
   d49ee:	e7f5      	b.n	d49dc <power+0x24>
        next_token(s);
    }

    int logical = 0;
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub || s->function == logical_not)) {
   d49f0:	4f2e      	ldr	r7, [pc, #184]	; (d4aac <power+0xf4>)
   d49f2:	2500      	movs	r5, #0
   d49f4:	68a3      	ldr	r3, [r4, #8]
   d49f6:	2b20      	cmp	r3, #32
   d49f8:	d110      	bne.n	d4a1c <power+0x64>
   d49fa:	6923      	ldr	r3, [r4, #16]
   d49fc:	4543      	cmp	r3, r8
   d49fe:	d103      	bne.n	d4a08 <power+0x50>
                logical = -1;
            } else {
                logical = -logical;
            }
        }
        next_token(s);
   d4a00:	4620      	mov	r0, r4
   d4a02:	f7ff fdd9 	bl	d45b8 <next_token>
   d4a06:	e7f5      	b.n	d49f4 <power+0x3c>
        if (s->function == sub) sign = -sign;
        next_token(s);
    }

    int logical = 0;
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub || s->function == logical_not)) {
   d4a08:	454b      	cmp	r3, r9
   d4a0a:	d0f9      	beq.n	d4a00 <power+0x48>
   d4a0c:	42bb      	cmp	r3, r7
   d4a0e:	d105      	bne.n	d4a1c <power+0x64>
        if (s->function == logical_not) {
            if (logical == 0) {
   d4a10:	b10d      	cbz	r5, d4a16 <power+0x5e>
                logical = -1;
            } else {
                logical = -logical;
   d4a12:	426d      	negs	r5, r5
   d4a14:	e7f4      	b.n	d4a00 <power+0x48>

    int logical = 0;
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub || s->function == logical_not)) {
        if (s->function == logical_not) {
            if (logical == 0) {
                logical = -1;
   d4a16:	f04f 35ff 	mov.w	r5, #4294967295
   d4a1a:	e7f1      	b.n	d4a00 <power+0x48>
        next_token(s);
    }

    te_expr *ret;

    if (sign == 1) {
   d4a1c:	2e01      	cmp	r6, #1
   d4a1e:	d11b      	bne.n	d4a58 <power+0xa0>
        if (logical == 0) {
   d4a20:	b91d      	cbnz	r5, d4a2a <power+0x72>
            ret = base(s);
   d4a22:	4620      	mov	r0, r4
   d4a24:	f7ff ff24 	bl	d4870 <base>
   d4a28:	e039      	b.n	d4a9e <power+0xe6>
        } else if (logical == -1) {
   d4a2a:	3501      	adds	r5, #1
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a2c:	4620      	mov	r0, r4
    te_expr *ret;

    if (sign == 1) {
        if (logical == 0) {
            ret = base(s);
        } else if (logical == -1) {
   d4a2e:	d109      	bne.n	d4a44 <power+0x8c>
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a30:	f7ff ff1e 	bl	d4870 <base>
   d4a34:	a906      	add	r1, sp, #24
   d4a36:	f841 0d14 	str.w	r0, [r1, #-20]!
   d4a3a:	2029      	movs	r0, #41	; 0x29
   d4a3c:	f7ff fca0 	bl	d4380 <new_expr>
            ret->function = logical_not;
   d4a40:	4b1a      	ldr	r3, [pc, #104]	; (d4aac <power+0xf4>)
   d4a42:	e02b      	b.n	d4a9c <power+0xe4>
        } else {
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a44:	f7ff ff14 	bl	d4870 <base>
   d4a48:	a906      	add	r1, sp, #24
   d4a4a:	f841 0d10 	str.w	r0, [r1, #-16]!
   d4a4e:	2029      	movs	r0, #41	; 0x29
   d4a50:	f7ff fc96 	bl	d4380 <new_expr>
            ret->function = logical_notnot;
   d4a54:	4b16      	ldr	r3, [pc, #88]	; (d4ab0 <power+0xf8>)
   d4a56:	e021      	b.n	d4a9c <power+0xe4>
        }
    } else {
        if (logical == 0) {
   d4a58:	b955      	cbnz	r5, d4a70 <power+0xb8>
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a5a:	4620      	mov	r0, r4
   d4a5c:	f7ff ff08 	bl	d4870 <base>
   d4a60:	a906      	add	r1, sp, #24
   d4a62:	f841 0d0c 	str.w	r0, [r1, #-12]!
   d4a66:	2029      	movs	r0, #41	; 0x29
   d4a68:	f7ff fc8a 	bl	d4380 <new_expr>
            ret->function = negate;
   d4a6c:	4b11      	ldr	r3, [pc, #68]	; (d4ab4 <power+0xfc>)
   d4a6e:	e015      	b.n	d4a9c <power+0xe4>
        } else if (logical == -1) {
   d4a70:	3501      	adds	r5, #1
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a72:	4620      	mov	r0, r4
        }
    } else {
        if (logical == 0) {
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
            ret->function = negate;
        } else if (logical == -1) {
   d4a74:	d109      	bne.n	d4a8a <power+0xd2>
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a76:	f7ff fefb 	bl	d4870 <base>
   d4a7a:	a906      	add	r1, sp, #24
   d4a7c:	f841 0d08 	str.w	r0, [r1, #-8]!
   d4a80:	2029      	movs	r0, #41	; 0x29
   d4a82:	f7ff fc7d 	bl	d4380 <new_expr>
            ret->function = negate_logical_not;
   d4a86:	4b0c      	ldr	r3, [pc, #48]	; (d4ab8 <power+0x100>)
   d4a88:	e008      	b.n	d4a9c <power+0xe4>
        } else {
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a8a:	f7ff fef1 	bl	d4870 <base>
   d4a8e:	a906      	add	r1, sp, #24
   d4a90:	f841 0d04 	str.w	r0, [r1, #-4]!
   d4a94:	2029      	movs	r0, #41	; 0x29
   d4a96:	f7ff fc73 	bl	d4380 <new_expr>
            ret->function = negate_logical_notnot;
   d4a9a:	4b08      	ldr	r3, [pc, #32]	; (d4abc <power+0x104>)
   d4a9c:	6083      	str	r3, [r0, #8]
        }
    }

    return ret;
}
   d4a9e:	b007      	add	sp, #28
   d4aa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4aa4:	000d40d9 	.word	0x000d40d9
   d4aa8:	000d40ed 	.word	0x000d40ed
   d4aac:	000d42e1 	.word	0x000d42e1
   d4ab0:	000d4311 	.word	0x000d4311
   d4ab4:	000d4129 	.word	0x000d4129
   d4ab8:	000d4341 	.word	0x000d4341
   d4abc:	000d4361 	.word	0x000d4361

000d4ac0 <factor>:
    }

    return ret;
}
#else
static te_expr *factor(state *s) {
   d4ac0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4ac2:	4605      	mov	r5, r0
    /* <factor>    =    <power> {"^" <power>} */
    te_expr *ret = power(s);
   d4ac4:	f7ff ff78 	bl	d49b8 <power>

    while (s->type == TOK_INFIX && (s->function == pow)) {
   d4ac8:	4e0c      	ldr	r6, [pc, #48]	; (d4afc <factor+0x3c>)
    return ret;
}
#else
static te_expr *factor(state *s) {
    /* <factor>    =    <power> {"^" <power>} */
    te_expr *ret = power(s);
   d4aca:	4604      	mov	r4, r0

    while (s->type == TOK_INFIX && (s->function == pow)) {
   d4acc:	68ab      	ldr	r3, [r5, #8]
   d4ace:	2b20      	cmp	r3, #32
   d4ad0:	d111      	bne.n	d4af6 <factor+0x36>
   d4ad2:	692b      	ldr	r3, [r5, #16]
   d4ad4:	42b3      	cmp	r3, r6
   d4ad6:	d10e      	bne.n	d4af6 <factor+0x36>
        te_fun2 t = s->function;
        next_token(s);
   d4ad8:	4628      	mov	r0, r5
   d4ada:	f7ff fd6d 	bl	d45b8 <next_token>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, power(s));
   d4ade:	4628      	mov	r0, r5
   d4ae0:	9400      	str	r4, [sp, #0]
   d4ae2:	f7ff ff69 	bl	d49b8 <power>
   d4ae6:	4669      	mov	r1, sp
   d4ae8:	9001      	str	r0, [sp, #4]
   d4aea:	202a      	movs	r0, #42	; 0x2a
   d4aec:	f7ff fc48 	bl	d4380 <new_expr>
   d4af0:	4604      	mov	r4, r0
        ret->function = t;
   d4af2:	6086      	str	r6, [r0, #8]
   d4af4:	e7ea      	b.n	d4acc <factor+0xc>
    }

    return ret;
}
   d4af6:	4620      	mov	r0, r4
   d4af8:	b002      	add	sp, #8
   d4afa:	bd70      	pop	{r4, r5, r6, pc}
   d4afc:	000de221 	.word	0x000de221

000d4b00 <term>:
#endif



static te_expr *term(state *s) {
   d4b00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d4b04:	4606      	mov	r6, r0
    /* <term>      =    <factor> {("*" | "/" | "%") <factor>} */
    te_expr *ret = factor(s);
   d4b06:	f7ff ffdb 	bl	d4ac0 <factor>

    while (s->type == TOK_INFIX && (s->function == mul || s->function == divide || s->function == fmod)) {
   d4b0a:	f8df 8048 	ldr.w	r8, [pc, #72]	; d4b54 <term+0x54>
   d4b0e:	f8df 9048 	ldr.w	r9, [pc, #72]	; d4b58 <term+0x58>
   d4b12:	4f0f      	ldr	r7, [pc, #60]	; (d4b50 <term+0x50>)



static te_expr *term(state *s) {
    /* <term>      =    <factor> {("*" | "/" | "%") <factor>} */
    te_expr *ret = factor(s);
   d4b14:	4604      	mov	r4, r0

    while (s->type == TOK_INFIX && (s->function == mul || s->function == divide || s->function == fmod)) {
   d4b16:	68b3      	ldr	r3, [r6, #8]
   d4b18:	2b20      	cmp	r3, #32
   d4b1a:	d115      	bne.n	d4b48 <term+0x48>
   d4b1c:	6935      	ldr	r5, [r6, #16]
   d4b1e:	4545      	cmp	r5, r8
   d4b20:	d10e      	bne.n	d4b40 <term+0x40>
        te_fun2 t = s->function;
        next_token(s);
   d4b22:	4630      	mov	r0, r6
   d4b24:	f7ff fd48 	bl	d45b8 <next_token>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, factor(s));
   d4b28:	4630      	mov	r0, r6
   d4b2a:	9400      	str	r4, [sp, #0]
   d4b2c:	f7ff ffc8 	bl	d4ac0 <factor>
   d4b30:	4669      	mov	r1, sp
   d4b32:	9001      	str	r0, [sp, #4]
   d4b34:	202a      	movs	r0, #42	; 0x2a
   d4b36:	f7ff fc23 	bl	d4380 <new_expr>
   d4b3a:	4604      	mov	r4, r0
        ret->function = t;
   d4b3c:	6085      	str	r5, [r0, #8]
   d4b3e:	e7ea      	b.n	d4b16 <term+0x16>

static te_expr *term(state *s) {
    /* <term>      =    <factor> {("*" | "/" | "%") <factor>} */
    te_expr *ret = factor(s);

    while (s->type == TOK_INFIX && (s->function == mul || s->function == divide || s->function == fmod)) {
   d4b40:	454d      	cmp	r5, r9
   d4b42:	d0ee      	beq.n	d4b22 <term+0x22>
   d4b44:	42bd      	cmp	r5, r7
   d4b46:	d0ec      	beq.n	d4b22 <term+0x22>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, factor(s));
        ret->function = t;
    }

    return ret;
}
   d4b48:	4620      	mov	r0, r4
   d4b4a:	b003      	add	sp, #12
   d4b4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4b50:	000ddf21 	.word	0x000ddf21
   d4b54:	000d4101 	.word	0x000d4101
   d4b58:	000d4115 	.word	0x000d4115

000d4b5c <sum_expr>:


static te_expr *sum_expr(state *s) {
   d4b5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4b60:	4605      	mov	r5, r0
    /* <expr>      =    <term> {("+" | "-") <term>} */
    te_expr *ret = term(s);
   d4b62:	f7ff ffcd 	bl	d4b00 <term>

    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d4b66:	f8df 8040 	ldr.w	r8, [pc, #64]	; d4ba8 <sum_expr+0x4c>
   d4b6a:	4f0e      	ldr	r7, [pc, #56]	; (d4ba4 <sum_expr+0x48>)
}


static te_expr *sum_expr(state *s) {
    /* <expr>      =    <term> {("+" | "-") <term>} */
    te_expr *ret = term(s);
   d4b6c:	4604      	mov	r4, r0

    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d4b6e:	68ab      	ldr	r3, [r5, #8]
   d4b70:	2b20      	cmp	r3, #32
   d4b72:	d113      	bne.n	d4b9c <sum_expr+0x40>
   d4b74:	692e      	ldr	r6, [r5, #16]
   d4b76:	4546      	cmp	r6, r8
   d4b78:	d10e      	bne.n	d4b98 <sum_expr+0x3c>
        te_fun2 t = s->function;
        next_token(s);
   d4b7a:	4628      	mov	r0, r5
   d4b7c:	f7ff fd1c 	bl	d45b8 <next_token>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, term(s));
   d4b80:	4628      	mov	r0, r5
   d4b82:	9400      	str	r4, [sp, #0]
   d4b84:	f7ff ffbc 	bl	d4b00 <term>
   d4b88:	4669      	mov	r1, sp
   d4b8a:	9001      	str	r0, [sp, #4]
   d4b8c:	202a      	movs	r0, #42	; 0x2a
   d4b8e:	f7ff fbf7 	bl	d4380 <new_expr>
   d4b92:	4604      	mov	r4, r0
        ret->function = t;
   d4b94:	6086      	str	r6, [r0, #8]
   d4b96:	e7ea      	b.n	d4b6e <sum_expr+0x12>

static te_expr *sum_expr(state *s) {
    /* <expr>      =    <term> {("+" | "-") <term>} */
    te_expr *ret = term(s);

    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d4b98:	42be      	cmp	r6, r7
   d4b9a:	d0ee      	beq.n	d4b7a <sum_expr+0x1e>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, term(s));
        ret->function = t;
    }

    return ret;
}
   d4b9c:	4620      	mov	r0, r4
   d4b9e:	b002      	add	sp, #8
   d4ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4ba4:	000d40ed 	.word	0x000d40ed
   d4ba8:	000d40d9 	.word	0x000d40d9

000d4bac <test_expr>:


static te_expr *test_expr(state *s) {
   d4bac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d4bb0:	4606      	mov	r6, r0
    /* <expr>      =    <sum_expr> {(">" | ">=" | "<" | "<=" | "==" | "!=") <sum_expr>} */
    te_expr *ret = sum_expr(s);
   d4bb2:	f7ff ffd3 	bl	d4b5c <sum_expr>

    while (s->type == TOK_INFIX && (s->function == greater || s->function == greater_eq ||
   d4bb6:	4f16      	ldr	r7, [pc, #88]	; (d4c10 <test_expr+0x64>)
   d4bb8:	f8df 8064 	ldr.w	r8, [pc, #100]	; d4c20 <test_expr+0x74>
   d4bbc:	f8df 9064 	ldr.w	r9, [pc, #100]	; d4c24 <test_expr+0x78>
}


static te_expr *test_expr(state *s) {
    /* <expr>      =    <sum_expr> {(">" | ">=" | "<" | "<=" | "==" | "!=") <sum_expr>} */
    te_expr *ret = sum_expr(s);
   d4bc0:	4605      	mov	r5, r0

    while (s->type == TOK_INFIX && (s->function == greater || s->function == greater_eq ||
   d4bc2:	68b3      	ldr	r3, [r6, #8]
   d4bc4:	2b20      	cmp	r3, #32
   d4bc6:	d11e      	bne.n	d4c06 <test_expr+0x5a>
   d4bc8:	6934      	ldr	r4, [r6, #16]
   d4bca:	42bc      	cmp	r4, r7
   d4bcc:	d10e      	bne.n	d4bec <test_expr+0x40>
        s->function == lower || s->function == lower_eq || s->function == equal || s->function == not_equal)) {
        te_fun2 t = s->function;
        next_token(s);
   d4bce:	4630      	mov	r0, r6
   d4bd0:	f7ff fcf2 	bl	d45b8 <next_token>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, sum_expr(s));
   d4bd4:	4630      	mov	r0, r6
   d4bd6:	9500      	str	r5, [sp, #0]
   d4bd8:	f7ff ffc0 	bl	d4b5c <sum_expr>
   d4bdc:	4669      	mov	r1, sp
   d4bde:	9001      	str	r0, [sp, #4]
   d4be0:	202a      	movs	r0, #42	; 0x2a
   d4be2:	f7ff fbcd 	bl	d4380 <new_expr>
   d4be6:	4605      	mov	r5, r0
        ret->function = t;
   d4be8:	6084      	str	r4, [r0, #8]
   d4bea:	e7ea      	b.n	d4bc2 <test_expr+0x16>

static te_expr *test_expr(state *s) {
    /* <expr>      =    <sum_expr> {(">" | ">=" | "<" | "<=" | "==" | "!=") <sum_expr>} */
    te_expr *ret = sum_expr(s);

    while (s->type == TOK_INFIX && (s->function == greater || s->function == greater_eq ||
   d4bec:	4544      	cmp	r4, r8
   d4bee:	d0ee      	beq.n	d4bce <test_expr+0x22>
   d4bf0:	454c      	cmp	r4, r9
   d4bf2:	d0ec      	beq.n	d4bce <test_expr+0x22>
        s->function == lower || s->function == lower_eq || s->function == equal || s->function == not_equal)) {
   d4bf4:	4b07      	ldr	r3, [pc, #28]	; (d4c14 <test_expr+0x68>)
   d4bf6:	429c      	cmp	r4, r3
   d4bf8:	d0e9      	beq.n	d4bce <test_expr+0x22>
   d4bfa:	4b07      	ldr	r3, [pc, #28]	; (d4c18 <test_expr+0x6c>)
   d4bfc:	429c      	cmp	r4, r3
   d4bfe:	d0e6      	beq.n	d4bce <test_expr+0x22>
   d4c00:	4b06      	ldr	r3, [pc, #24]	; (d4c1c <test_expr+0x70>)
   d4c02:	429c      	cmp	r4, r3
   d4c04:	d0e3      	beq.n	d4bce <test_expr+0x22>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, sum_expr(s));
        ret->function = t;
    }

    return ret;
}
   d4c06:	4628      	mov	r0, r5
   d4c08:	b003      	add	sp, #12
   d4c0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4c0e:	bf00      	nop
   d4c10:	000d4149 	.word	0x000d4149
   d4c14:	000d41d9 	.word	0x000d41d9
   d4c18:	000d4209 	.word	0x000d4209
   d4c1c:	000d4239 	.word	0x000d4239
   d4c20:	000d4179 	.word	0x000d4179
   d4c24:	000d41a9 	.word	0x000d41a9

000d4c28 <expr>:


static te_expr *expr(state *s) {
   d4c28:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4c2c:	4605      	mov	r5, r0
    /* <expr>      =    <test_expr> {("&&" | "||") <test_expr>} */
    te_expr *ret = test_expr(s);
   d4c2e:	f7ff ffbd 	bl	d4bac <test_expr>

    while (s->type == TOK_INFIX && (s->function == logical_and || s->function == logical_or)) {
   d4c32:	f8df 8040 	ldr.w	r8, [pc, #64]	; d4c74 <expr+0x4c>
   d4c36:	4f0e      	ldr	r7, [pc, #56]	; (d4c70 <expr+0x48>)
}


static te_expr *expr(state *s) {
    /* <expr>      =    <test_expr> {("&&" | "||") <test_expr>} */
    te_expr *ret = test_expr(s);
   d4c38:	4604      	mov	r4, r0

    while (s->type == TOK_INFIX && (s->function == logical_and || s->function == logical_or)) {
   d4c3a:	68ab      	ldr	r3, [r5, #8]
   d4c3c:	2b20      	cmp	r3, #32
   d4c3e:	d113      	bne.n	d4c68 <expr+0x40>
   d4c40:	692e      	ldr	r6, [r5, #16]
   d4c42:	4546      	cmp	r6, r8
   d4c44:	d10e      	bne.n	d4c64 <expr+0x3c>
        te_fun2 t = s->function;
        next_token(s);
   d4c46:	4628      	mov	r0, r5
   d4c48:	f7ff fcb6 	bl	d45b8 <next_token>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, test_expr(s));
   d4c4c:	4628      	mov	r0, r5
   d4c4e:	9400      	str	r4, [sp, #0]
   d4c50:	f7ff ffac 	bl	d4bac <test_expr>
   d4c54:	4669      	mov	r1, sp
   d4c56:	9001      	str	r0, [sp, #4]
   d4c58:	202a      	movs	r0, #42	; 0x2a
   d4c5a:	f7ff fb91 	bl	d4380 <new_expr>
   d4c5e:	4604      	mov	r4, r0
        ret->function = t;
   d4c60:	6086      	str	r6, [r0, #8]
   d4c62:	e7ea      	b.n	d4c3a <expr+0x12>

static te_expr *expr(state *s) {
    /* <expr>      =    <test_expr> {("&&" | "||") <test_expr>} */
    te_expr *ret = test_expr(s);

    while (s->type == TOK_INFIX && (s->function == logical_and || s->function == logical_or)) {
   d4c64:	42be      	cmp	r6, r7
   d4c66:	d0ee      	beq.n	d4c46 <expr+0x1e>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, test_expr(s));
        ret->function = t;
    }

    return ret;
}
   d4c68:	4620      	mov	r0, r4
   d4c6a:	b002      	add	sp, #8
   d4c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4c70:	000d42a5 	.word	0x000d42a5
   d4c74:	000d4269 	.word	0x000d4269

000d4c78 <te_eval>:

#define TE_FUN(...) ((double(*)(__VA_ARGS__))n->function)
#define M(e) te_eval(n->parameters[e])


double te_eval(const te_expr *n) {
   d4c78:	b570      	push	{r4, r5, r6, lr}
    if (!n) return NAN;
   d4c7a:	4604      	mov	r4, r0

#define TE_FUN(...) ((double(*)(__VA_ARGS__))n->function)
#define M(e) te_eval(n->parameters[e])


double te_eval(const te_expr *n) {
   d4c7c:	ed2d 8b0c 	vpush	{d8-d13}
    if (!n) return NAN;
   d4c80:	2800      	cmp	r0, #0
   d4c82:	f000 82d1 	beq.w	d5228 <te_eval+0x5b0>

    switch(TYPE_MASK(n->type)) {
   d4c86:	6803      	ldr	r3, [r0, #0]
   d4c88:	f003 021f 	and.w	r2, r3, #31
   d4c8c:	2a0f      	cmp	r2, #15
   d4c8e:	dc08      	bgt.n	d4ca2 <te_eval+0x2a>
   d4c90:	2a08      	cmp	r2, #8
   d4c92:	da0e      	bge.n	d4cb2 <te_eval+0x3a>
   d4c94:	b14a      	cbz	r2, d4caa <te_eval+0x32>
   d4c96:	2a01      	cmp	r2, #1
   d4c98:	f040 82c6 	bne.w	d5228 <te_eval+0x5b0>
        case TE_CONSTANT: return n->value;
   d4c9c:	ed90 0b02 	vldr	d0, [r0, #8]
   d4ca0:	e2c4      	b.n	d522c <te_eval+0x5b4>


double te_eval(const te_expr *n) {
    if (!n) return NAN;

    switch(TYPE_MASK(n->type)) {
   d4ca2:	2a17      	cmp	r2, #23
   d4ca4:	f340 815b 	ble.w	d4f5e <te_eval+0x2e6>
   d4ca8:	e2be      	b.n	d5228 <te_eval+0x5b0>
        case TE_CONSTANT: return n->value;
        case TE_VARIABLE: return *n->bound;
   d4caa:	6883      	ldr	r3, [r0, #8]
   d4cac:	ed93 0b00 	vldr	d0, [r3]
   d4cb0:	e2bc      	b.n	d522c <te_eval+0x5b4>

        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
   d4cb2:	f013 0f18 	tst.w	r3, #24
   d4cb6:	6885      	ldr	r5, [r0, #8]
   d4cb8:	d00d      	beq.n	d4cd6 <te_eval+0x5e>
   d4cba:	f003 0307 	and.w	r3, r3, #7
   d4cbe:	3b01      	subs	r3, #1
   d4cc0:	2b06      	cmp	r3, #6
   d4cc2:	d808      	bhi.n	d4cd6 <te_eval+0x5e>
   d4cc4:	e8df f013 	tbh	[pc, r3, lsl #1]
   d4cc8:	0016000d 	.word	0x0016000d
   d4ccc:	0051002e 	.word	0x0051002e
   d4cd0:	00b8007f 	.word	0x00b8007f
   d4cd4:	00fc      	.short	0x00fc
            }

        default: return NAN;
    }

}
   d4cd6:	ecbd 8b0c 	vpop	{d8-d13}
        case TE_VARIABLE: return *n->bound;

        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
   d4cda:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4cdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case TE_VARIABLE: return *n->bound;

        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
   d4ce0:	4718      	bx	r3
                case 1: return TE_FUN(double)(M(0));
   d4ce2:	6900      	ldr	r0, [r0, #16]
   d4ce4:	f7ff ffc8 	bl	d4c78 <te_eval>
            }

        default: return NAN;
    }

}
   d4ce8:	ecbd 8b0c 	vpop	{d8-d13}

        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
   d4cec:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4cee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
   d4cf2:	4718      	bx	r3
                case 2: return TE_FUN(double, double)(M(0), M(1));
   d4cf4:	6900      	ldr	r0, [r0, #16]
   d4cf6:	f7ff ffbf 	bl	d4c78 <te_eval>
   d4cfa:	6960      	ldr	r0, [r4, #20]
   d4cfc:	eeb0 8a40 	vmov.f32	s16, s0
   d4d00:	eef0 8a60 	vmov.f32	s17, s1
   d4d04:	f7ff ffb8 	bl	d4c78 <te_eval>
   d4d08:	eeb0 1a40 	vmov.f32	s2, s0
   d4d0c:	eef0 1a60 	vmov.f32	s3, s1
   d4d10:	eeb0 0a48 	vmov.f32	s0, s16
   d4d14:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4d18:	ecbd 8b0c 	vpop	{d8-d13}
        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
   d4d1c:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4d1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
   d4d22:	4718      	bx	r3
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
   d4d24:	6900      	ldr	r0, [r0, #16]
   d4d26:	f7ff ffa7 	bl	d4c78 <te_eval>
   d4d2a:	6960      	ldr	r0, [r4, #20]
   d4d2c:	eeb0 8a40 	vmov.f32	s16, s0
   d4d30:	eef0 8a60 	vmov.f32	s17, s1
   d4d34:	f7ff ffa0 	bl	d4c78 <te_eval>
   d4d38:	69a0      	ldr	r0, [r4, #24]
   d4d3a:	eeb0 9a40 	vmov.f32	s18, s0
   d4d3e:	eef0 9a60 	vmov.f32	s19, s1
   d4d42:	f7ff ff99 	bl	d4c78 <te_eval>
   d4d46:	eeb0 1a49 	vmov.f32	s2, s18
   d4d4a:	eef0 1a69 	vmov.f32	s3, s19
   d4d4e:	eeb0 2a40 	vmov.f32	s4, s0
   d4d52:	eef0 2a60 	vmov.f32	s5, s1
   d4d56:	eeb0 0a48 	vmov.f32	s0, s16
   d4d5a:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4d5e:	ecbd 8b0c 	vpop	{d8-d13}
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
   d4d62:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4d64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
   d4d68:	4718      	bx	r3
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
   d4d6a:	6900      	ldr	r0, [r0, #16]
   d4d6c:	f7ff ff84 	bl	d4c78 <te_eval>
   d4d70:	6960      	ldr	r0, [r4, #20]
   d4d72:	eeb0 8a40 	vmov.f32	s16, s0
   d4d76:	eef0 8a60 	vmov.f32	s17, s1
   d4d7a:	f7ff ff7d 	bl	d4c78 <te_eval>
   d4d7e:	69a0      	ldr	r0, [r4, #24]
   d4d80:	eeb0 9a40 	vmov.f32	s18, s0
   d4d84:	eef0 9a60 	vmov.f32	s19, s1
   d4d88:	f7ff ff76 	bl	d4c78 <te_eval>
   d4d8c:	69e0      	ldr	r0, [r4, #28]
   d4d8e:	eeb0 aa40 	vmov.f32	s20, s0
   d4d92:	eef0 aa60 	vmov.f32	s21, s1
   d4d96:	f7ff ff6f 	bl	d4c78 <te_eval>
   d4d9a:	eeb0 2a4a 	vmov.f32	s4, s20
   d4d9e:	eef0 2a6a 	vmov.f32	s5, s21
   d4da2:	eeb0 1a49 	vmov.f32	s2, s18
   d4da6:	eef0 1a69 	vmov.f32	s3, s19
   d4daa:	eeb0 3a40 	vmov.f32	s6, s0
   d4dae:	eef0 3a60 	vmov.f32	s7, s1
   d4db2:	eeb0 0a48 	vmov.f32	s0, s16
   d4db6:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4dba:	ecbd 8b0c 	vpop	{d8-d13}
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
   d4dbe:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4dc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
   d4dc4:	4718      	bx	r3
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
   d4dc6:	6900      	ldr	r0, [r0, #16]
   d4dc8:	f7ff ff56 	bl	d4c78 <te_eval>
   d4dcc:	6960      	ldr	r0, [r4, #20]
   d4dce:	eeb0 8a40 	vmov.f32	s16, s0
   d4dd2:	eef0 8a60 	vmov.f32	s17, s1
   d4dd6:	f7ff ff4f 	bl	d4c78 <te_eval>
   d4dda:	69a0      	ldr	r0, [r4, #24]
   d4ddc:	eeb0 9a40 	vmov.f32	s18, s0
   d4de0:	eef0 9a60 	vmov.f32	s19, s1
   d4de4:	f7ff ff48 	bl	d4c78 <te_eval>
   d4de8:	69e0      	ldr	r0, [r4, #28]
   d4dea:	eeb0 aa40 	vmov.f32	s20, s0
   d4dee:	eef0 aa60 	vmov.f32	s21, s1
   d4df2:	f7ff ff41 	bl	d4c78 <te_eval>
   d4df6:	6a20      	ldr	r0, [r4, #32]
   d4df8:	eeb0 ba40 	vmov.f32	s22, s0
   d4dfc:	eef0 ba60 	vmov.f32	s23, s1
   d4e00:	f7ff ff3a 	bl	d4c78 <te_eval>
   d4e04:	eeb0 3a4b 	vmov.f32	s6, s22
   d4e08:	eef0 3a6b 	vmov.f32	s7, s23
   d4e0c:	eeb0 2a4a 	vmov.f32	s4, s20
   d4e10:	eef0 2a6a 	vmov.f32	s5, s21
   d4e14:	eeb0 4a40 	vmov.f32	s8, s0
   d4e18:	eef0 4a60 	vmov.f32	s9, s1
   d4e1c:	eeb0 1a49 	vmov.f32	s2, s18
   d4e20:	eef0 1a69 	vmov.f32	s3, s19
   d4e24:	eeb0 0a48 	vmov.f32	s0, s16
   d4e28:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4e2c:	ecbd 8b0c 	vpop	{d8-d13}
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
   d4e30:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4e32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
   d4e36:	4718      	bx	r3
                case 6: return TE_FUN(double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5));
   d4e38:	6900      	ldr	r0, [r0, #16]
   d4e3a:	f7ff ff1d 	bl	d4c78 <te_eval>
   d4e3e:	6960      	ldr	r0, [r4, #20]
   d4e40:	eeb0 8a40 	vmov.f32	s16, s0
   d4e44:	eef0 8a60 	vmov.f32	s17, s1
   d4e48:	f7ff ff16 	bl	d4c78 <te_eval>
   d4e4c:	69a0      	ldr	r0, [r4, #24]
   d4e4e:	eeb0 9a40 	vmov.f32	s18, s0
   d4e52:	eef0 9a60 	vmov.f32	s19, s1
   d4e56:	f7ff ff0f 	bl	d4c78 <te_eval>
   d4e5a:	69e0      	ldr	r0, [r4, #28]
   d4e5c:	eeb0 aa40 	vmov.f32	s20, s0
   d4e60:	eef0 aa60 	vmov.f32	s21, s1
   d4e64:	f7ff ff08 	bl	d4c78 <te_eval>
   d4e68:	6a20      	ldr	r0, [r4, #32]
   d4e6a:	eeb0 ba40 	vmov.f32	s22, s0
   d4e6e:	eef0 ba60 	vmov.f32	s23, s1
   d4e72:	f7ff ff01 	bl	d4c78 <te_eval>
   d4e76:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4e78:	eeb0 ca40 	vmov.f32	s24, s0
   d4e7c:	eef0 ca60 	vmov.f32	s25, s1
   d4e80:	f7ff fefa 	bl	d4c78 <te_eval>
   d4e84:	eeb0 4a4c 	vmov.f32	s8, s24
   d4e88:	eef0 4a6c 	vmov.f32	s9, s25
   d4e8c:	eeb0 3a4b 	vmov.f32	s6, s22
   d4e90:	eef0 3a6b 	vmov.f32	s7, s23
   d4e94:	eeb0 5a40 	vmov.f32	s10, s0
   d4e98:	eef0 5a60 	vmov.f32	s11, s1
   d4e9c:	eeb0 2a4a 	vmov.f32	s4, s20
   d4ea0:	eef0 2a6a 	vmov.f32	s5, s21
   d4ea4:	eeb0 1a49 	vmov.f32	s2, s18
   d4ea8:	eef0 1a69 	vmov.f32	s3, s19
   d4eac:	eeb0 0a48 	vmov.f32	s0, s16
   d4eb0:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4eb4:	ecbd 8b0c 	vpop	{d8-d13}
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5));
   d4eb8:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4eba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5));
   d4ebe:	4718      	bx	r3
                case 7: return TE_FUN(double, double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5), M(6));
   d4ec0:	6900      	ldr	r0, [r0, #16]
   d4ec2:	f7ff fed9 	bl	d4c78 <te_eval>
   d4ec6:	6960      	ldr	r0, [r4, #20]
   d4ec8:	eeb0 8a40 	vmov.f32	s16, s0
   d4ecc:	eef0 8a60 	vmov.f32	s17, s1
   d4ed0:	f7ff fed2 	bl	d4c78 <te_eval>
   d4ed4:	69a0      	ldr	r0, [r4, #24]
   d4ed6:	eeb0 9a40 	vmov.f32	s18, s0
   d4eda:	eef0 9a60 	vmov.f32	s19, s1
   d4ede:	f7ff fecb 	bl	d4c78 <te_eval>
   d4ee2:	69e0      	ldr	r0, [r4, #28]
   d4ee4:	eeb0 aa40 	vmov.f32	s20, s0
   d4ee8:	eef0 aa60 	vmov.f32	s21, s1
   d4eec:	f7ff fec4 	bl	d4c78 <te_eval>
   d4ef0:	6a20      	ldr	r0, [r4, #32]
   d4ef2:	eeb0 ba40 	vmov.f32	s22, s0
   d4ef6:	eef0 ba60 	vmov.f32	s23, s1
   d4efa:	f7ff febd 	bl	d4c78 <te_eval>
   d4efe:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4f00:	eeb0 ca40 	vmov.f32	s24, s0
   d4f04:	eef0 ca60 	vmov.f32	s25, s1
   d4f08:	f7ff feb6 	bl	d4c78 <te_eval>
   d4f0c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4f0e:	eeb0 da40 	vmov.f32	s26, s0
   d4f12:	eef0 da60 	vmov.f32	s27, s1
   d4f16:	f7ff feaf 	bl	d4c78 <te_eval>
   d4f1a:	eeb0 5a4d 	vmov.f32	s10, s26
   d4f1e:	eef0 5a6d 	vmov.f32	s11, s27
   d4f22:	eeb0 4a4c 	vmov.f32	s8, s24
   d4f26:	eef0 4a6c 	vmov.f32	s9, s25
   d4f2a:	eeb0 6a40 	vmov.f32	s12, s0
   d4f2e:	eef0 6a60 	vmov.f32	s13, s1
   d4f32:	eeb0 3a4b 	vmov.f32	s6, s22
   d4f36:	eef0 3a6b 	vmov.f32	s7, s23
   d4f3a:	eeb0 2a4a 	vmov.f32	s4, s20
   d4f3e:	eef0 2a6a 	vmov.f32	s5, s21
   d4f42:	eeb0 1a49 	vmov.f32	s2, s18
   d4f46:	eef0 1a69 	vmov.f32	s3, s19
   d4f4a:	eeb0 0a48 	vmov.f32	s0, s16
   d4f4e:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4f52:	ecbd 8b0c 	vpop	{d8-d13}
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5));
                case 7: return TE_FUN(double, double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5), M(6));
   d4f56:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4f58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5));
                case 7: return TE_FUN(double, double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5), M(6));
   d4f5c:	4718      	bx	r3
                default: return NAN;
            }

        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
   d4f5e:	f013 0f18 	tst.w	r3, #24
   d4f62:	6885      	ldr	r5, [r0, #8]
   d4f64:	d00d      	beq.n	d4f82 <te_eval+0x30a>
   d4f66:	f003 0307 	and.w	r3, r3, #7
   d4f6a:	3b01      	subs	r3, #1
   d4f6c:	2b06      	cmp	r3, #6
   d4f6e:	d808      	bhi.n	d4f82 <te_eval+0x30a>
   d4f70:	e8df f013 	tbh	[pc, r3, lsl #1]
   d4f74:	0019000e 	.word	0x0019000e
   d4f78:	00580033 	.word	0x00580033
   d4f7c:	00c30088 	.word	0x00c30088
   d4f80:	0109      	.short	0x0109
            }

        default: return NAN;
    }

}
   d4f82:	ecbd 8b0c 	vpop	{d8-d13}
            }

        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
   d4f86:	6920      	ldr	r0, [r4, #16]
   d4f88:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4f8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            }

        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
   d4f8e:	4718      	bx	r3
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
   d4f90:	6946      	ldr	r6, [r0, #20]
   d4f92:	6900      	ldr	r0, [r0, #16]
   d4f94:	f7ff fe70 	bl	d4c78 <te_eval>
            }

        default: return NAN;
    }

}
   d4f98:	ecbd 8b0c 	vpop	{d8-d13}

        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
   d4f9c:	4630      	mov	r0, r6
   d4f9e:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4fa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
   d4fa4:	4718      	bx	r3
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
   d4fa6:	6986      	ldr	r6, [r0, #24]
   d4fa8:	6900      	ldr	r0, [r0, #16]
   d4faa:	f7ff fe65 	bl	d4c78 <te_eval>
   d4fae:	6960      	ldr	r0, [r4, #20]
   d4fb0:	eeb0 8a40 	vmov.f32	s16, s0
   d4fb4:	eef0 8a60 	vmov.f32	s17, s1
   d4fb8:	f7ff fe5e 	bl	d4c78 <te_eval>
   d4fbc:	eeb0 1a40 	vmov.f32	s2, s0
   d4fc0:	eef0 1a60 	vmov.f32	s3, s1
   d4fc4:	eeb0 0a48 	vmov.f32	s0, s16
   d4fc8:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4fcc:	ecbd 8b0c 	vpop	{d8-d13}
        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
   d4fd0:	4630      	mov	r0, r6
   d4fd2:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4fd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
   d4fd8:	4718      	bx	r3
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
   d4fda:	69c6      	ldr	r6, [r0, #28]
   d4fdc:	6900      	ldr	r0, [r0, #16]
   d4fde:	f7ff fe4b 	bl	d4c78 <te_eval>
   d4fe2:	6960      	ldr	r0, [r4, #20]
   d4fe4:	eeb0 8a40 	vmov.f32	s16, s0
   d4fe8:	eef0 8a60 	vmov.f32	s17, s1
   d4fec:	f7ff fe44 	bl	d4c78 <te_eval>
   d4ff0:	69a0      	ldr	r0, [r4, #24]
   d4ff2:	eeb0 9a40 	vmov.f32	s18, s0
   d4ff6:	eef0 9a60 	vmov.f32	s19, s1
   d4ffa:	f7ff fe3d 	bl	d4c78 <te_eval>
   d4ffe:	eeb0 1a49 	vmov.f32	s2, s18
   d5002:	eef0 1a69 	vmov.f32	s3, s19
   d5006:	eeb0 2a40 	vmov.f32	s4, s0
   d500a:	eef0 2a60 	vmov.f32	s5, s1
   d500e:	eeb0 0a48 	vmov.f32	s0, s16
   d5012:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d5016:	ecbd 8b0c 	vpop	{d8-d13}
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
   d501a:	4630      	mov	r0, r6
   d501c:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d501e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
   d5022:	4718      	bx	r3
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
   d5024:	6a06      	ldr	r6, [r0, #32]
   d5026:	6900      	ldr	r0, [r0, #16]
   d5028:	f7ff fe26 	bl	d4c78 <te_eval>
   d502c:	6960      	ldr	r0, [r4, #20]
   d502e:	eeb0 8a40 	vmov.f32	s16, s0
   d5032:	eef0 8a60 	vmov.f32	s17, s1
   d5036:	f7ff fe1f 	bl	d4c78 <te_eval>
   d503a:	69a0      	ldr	r0, [r4, #24]
   d503c:	eeb0 9a40 	vmov.f32	s18, s0
   d5040:	eef0 9a60 	vmov.f32	s19, s1
   d5044:	f7ff fe18 	bl	d4c78 <te_eval>
   d5048:	69e0      	ldr	r0, [r4, #28]
   d504a:	eeb0 aa40 	vmov.f32	s20, s0
   d504e:	eef0 aa60 	vmov.f32	s21, s1
   d5052:	f7ff fe11 	bl	d4c78 <te_eval>
   d5056:	eeb0 2a4a 	vmov.f32	s4, s20
   d505a:	eef0 2a6a 	vmov.f32	s5, s21
   d505e:	eeb0 1a49 	vmov.f32	s2, s18
   d5062:	eef0 1a69 	vmov.f32	s3, s19
   d5066:	eeb0 3a40 	vmov.f32	s6, s0
   d506a:	eef0 3a60 	vmov.f32	s7, s1
   d506e:	eeb0 0a48 	vmov.f32	s0, s16
   d5072:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d5076:	ecbd 8b0c 	vpop	{d8-d13}
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
   d507a:	4630      	mov	r0, r6
   d507c:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d507e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
   d5082:	4718      	bx	r3
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
   d5084:	6a46      	ldr	r6, [r0, #36]	; 0x24
   d5086:	6900      	ldr	r0, [r0, #16]
   d5088:	f7ff fdf6 	bl	d4c78 <te_eval>
   d508c:	6960      	ldr	r0, [r4, #20]
   d508e:	eeb0 8a40 	vmov.f32	s16, s0
   d5092:	eef0 8a60 	vmov.f32	s17, s1
   d5096:	f7ff fdef 	bl	d4c78 <te_eval>
   d509a:	69a0      	ldr	r0, [r4, #24]
   d509c:	eeb0 9a40 	vmov.f32	s18, s0
   d50a0:	eef0 9a60 	vmov.f32	s19, s1
   d50a4:	f7ff fde8 	bl	d4c78 <te_eval>
   d50a8:	69e0      	ldr	r0, [r4, #28]
   d50aa:	eeb0 aa40 	vmov.f32	s20, s0
   d50ae:	eef0 aa60 	vmov.f32	s21, s1
   d50b2:	f7ff fde1 	bl	d4c78 <te_eval>
   d50b6:	6a20      	ldr	r0, [r4, #32]
   d50b8:	eeb0 ba40 	vmov.f32	s22, s0
   d50bc:	eef0 ba60 	vmov.f32	s23, s1
   d50c0:	f7ff fdda 	bl	d4c78 <te_eval>
   d50c4:	eeb0 3a4b 	vmov.f32	s6, s22
   d50c8:	eef0 3a6b 	vmov.f32	s7, s23
   d50cc:	eeb0 2a4a 	vmov.f32	s4, s20
   d50d0:	eef0 2a6a 	vmov.f32	s5, s21
   d50d4:	eeb0 4a40 	vmov.f32	s8, s0
   d50d8:	eef0 4a60 	vmov.f32	s9, s1
   d50dc:	eeb0 1a49 	vmov.f32	s2, s18
   d50e0:	eef0 1a69 	vmov.f32	s3, s19
   d50e4:	eeb0 0a48 	vmov.f32	s0, s16
   d50e8:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d50ec:	ecbd 8b0c 	vpop	{d8-d13}
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
   d50f0:	4630      	mov	r0, r6
   d50f2:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d50f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
   d50f8:	4718      	bx	r3
                case 6: return TE_FUN(void*, double, double, double, double, double, double)(n->parameters[6], M(0), M(1), M(2), M(3), M(4), M(5));
   d50fa:	6a86      	ldr	r6, [r0, #40]	; 0x28
   d50fc:	6900      	ldr	r0, [r0, #16]
   d50fe:	f7ff fdbb 	bl	d4c78 <te_eval>
   d5102:	6960      	ldr	r0, [r4, #20]
   d5104:	eeb0 8a40 	vmov.f32	s16, s0
   d5108:	eef0 8a60 	vmov.f32	s17, s1
   d510c:	f7ff fdb4 	bl	d4c78 <te_eval>
   d5110:	69a0      	ldr	r0, [r4, #24]
   d5112:	eeb0 9a40 	vmov.f32	s18, s0
   d5116:	eef0 9a60 	vmov.f32	s19, s1
   d511a:	f7ff fdad 	bl	d4c78 <te_eval>
   d511e:	69e0      	ldr	r0, [r4, #28]
   d5120:	eeb0 aa40 	vmov.f32	s20, s0
   d5124:	eef0 aa60 	vmov.f32	s21, s1
   d5128:	f7ff fda6 	bl	d4c78 <te_eval>
   d512c:	6a20      	ldr	r0, [r4, #32]
   d512e:	eeb0 ba40 	vmov.f32	s22, s0
   d5132:	eef0 ba60 	vmov.f32	s23, s1
   d5136:	f7ff fd9f 	bl	d4c78 <te_eval>
   d513a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d513c:	eeb0 ca40 	vmov.f32	s24, s0
   d5140:	eef0 ca60 	vmov.f32	s25, s1
   d5144:	f7ff fd98 	bl	d4c78 <te_eval>
   d5148:	eeb0 4a4c 	vmov.f32	s8, s24
   d514c:	eef0 4a6c 	vmov.f32	s9, s25
   d5150:	eeb0 3a4b 	vmov.f32	s6, s22
   d5154:	eef0 3a6b 	vmov.f32	s7, s23
   d5158:	eeb0 5a40 	vmov.f32	s10, s0
   d515c:	eef0 5a60 	vmov.f32	s11, s1
   d5160:	eeb0 2a4a 	vmov.f32	s4, s20
   d5164:	eef0 2a6a 	vmov.f32	s5, s21
   d5168:	eeb0 1a49 	vmov.f32	s2, s18
   d516c:	eef0 1a69 	vmov.f32	s3, s19
   d5170:	eeb0 0a48 	vmov.f32	s0, s16
   d5174:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d5178:	ecbd 8b0c 	vpop	{d8-d13}
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(void*, double, double, double, double, double, double)(n->parameters[6], M(0), M(1), M(2), M(3), M(4), M(5));
   d517c:	4630      	mov	r0, r6
   d517e:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d5180:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(void*, double, double, double, double, double, double)(n->parameters[6], M(0), M(1), M(2), M(3), M(4), M(5));
   d5184:	4718      	bx	r3
                case 7: return TE_FUN(void*, double, double, double, double, double, double, double)(n->parameters[7], M(0), M(1), M(2), M(3), M(4), M(5), M(6));
   d5186:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   d5188:	6900      	ldr	r0, [r0, #16]
   d518a:	f7ff fd75 	bl	d4c78 <te_eval>
   d518e:	6960      	ldr	r0, [r4, #20]
   d5190:	eeb0 8a40 	vmov.f32	s16, s0
   d5194:	eef0 8a60 	vmov.f32	s17, s1
   d5198:	f7ff fd6e 	bl	d4c78 <te_eval>
   d519c:	69a0      	ldr	r0, [r4, #24]
   d519e:	eeb0 9a40 	vmov.f32	s18, s0
   d51a2:	eef0 9a60 	vmov.f32	s19, s1
   d51a6:	f7ff fd67 	bl	d4c78 <te_eval>
   d51aa:	69e0      	ldr	r0, [r4, #28]
   d51ac:	eeb0 aa40 	vmov.f32	s20, s0
   d51b0:	eef0 aa60 	vmov.f32	s21, s1
   d51b4:	f7ff fd60 	bl	d4c78 <te_eval>
   d51b8:	6a20      	ldr	r0, [r4, #32]
   d51ba:	eeb0 ba40 	vmov.f32	s22, s0
   d51be:	eef0 ba60 	vmov.f32	s23, s1
   d51c2:	f7ff fd59 	bl	d4c78 <te_eval>
   d51c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d51c8:	eeb0 ca40 	vmov.f32	s24, s0
   d51cc:	eef0 ca60 	vmov.f32	s25, s1
   d51d0:	f7ff fd52 	bl	d4c78 <te_eval>
   d51d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d51d6:	eeb0 da40 	vmov.f32	s26, s0
   d51da:	eef0 da60 	vmov.f32	s27, s1
   d51de:	f7ff fd4b 	bl	d4c78 <te_eval>
   d51e2:	eeb0 5a4d 	vmov.f32	s10, s26
   d51e6:	eef0 5a6d 	vmov.f32	s11, s27
   d51ea:	eeb0 4a4c 	vmov.f32	s8, s24
   d51ee:	eef0 4a6c 	vmov.f32	s9, s25
   d51f2:	eeb0 6a40 	vmov.f32	s12, s0
   d51f6:	eef0 6a60 	vmov.f32	s13, s1
   d51fa:	eeb0 3a4b 	vmov.f32	s6, s22
   d51fe:	eef0 3a6b 	vmov.f32	s7, s23
   d5202:	eeb0 2a4a 	vmov.f32	s4, s20
   d5206:	eef0 2a6a 	vmov.f32	s5, s21
   d520a:	eeb0 1a49 	vmov.f32	s2, s18
   d520e:	eef0 1a69 	vmov.f32	s3, s19
   d5212:	eeb0 0a48 	vmov.f32	s0, s16
   d5216:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d521a:	ecbd 8b0c 	vpop	{d8-d13}
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(void*, double, double, double, double, double, double)(n->parameters[6], M(0), M(1), M(2), M(3), M(4), M(5));
                case 7: return TE_FUN(void*, double, double, double, double, double, double, double)(n->parameters[7], M(0), M(1), M(2), M(3), M(4), M(5), M(6));
   d521e:	4630      	mov	r0, r6
   d5220:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d5222:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(void*, double, double, double, double, double, double)(n->parameters[6], M(0), M(1), M(2), M(3), M(4), M(5));
                case 7: return TE_FUN(void*, double, double, double, double, double, double, double)(n->parameters[7], M(0), M(1), M(2), M(3), M(4), M(5), M(6));
   d5226:	4718      	bx	r3
                default: return NAN;
            }

        default: return NAN;
   d5228:	ed9f 0b03 	vldr	d0, [pc, #12]	; d5238 <te_eval+0x5c0>
    }

}
   d522c:	ecbd 8b0c 	vpop	{d8-d13}
   d5230:	bd70      	pop	{r4, r5, r6, pc}
   d5232:	bf00      	nop
   d5234:	f3af 8000 	nop.w
   d5238:	00000000 	.word	0x00000000
   d523c:	7ff80000 	.word	0x7ff80000

000d5240 <optimize>:

#undef TE_FUN
#undef M

static void optimize(te_expr *n) {
   d5240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5242:	ed2d 8b02 	vpush	{d8}
    /* Evaluates as much as possible. */
    if (n->type == TE_CONSTANT) return;
   d5246:	6802      	ldr	r2, [r0, #0]
    if (n->type == TE_VARIABLE) return;
   d5248:	2a01      	cmp	r2, #1
}

#undef TE_FUN
#undef M

static void optimize(te_expr *n) {
   d524a:	4604      	mov	r4, r0
    /* Evaluates as much as possible. */
    if (n->type == TE_CONSTANT) return;
    if (n->type == TE_VARIABLE) return;
   d524c:	d927      	bls.n	d529e <optimize+0x5e>

    /* Only optimize out functions flagged as pure. */
    if (IS_PURE(n->type)) {
   d524e:	0693      	lsls	r3, r2, #26
   d5250:	d525      	bpl.n	d529e <optimize+0x5e>
        const int arity = ARITY(n->type);
   d5252:	f012 0318 	ands.w	r3, r2, #24
   d5256:	bf18      	it	ne
   d5258:	f002 0307 	andne.w	r3, r2, #7
   d525c:	3303      	adds	r3, #3
   d525e:	f100 060c 	add.w	r6, r0, #12
   d5262:	eb00 0583 	add.w	r5, r0, r3, lsl #2
        int known = 1;
   d5266:	2701      	movs	r7, #1
        int i;
        for (i = 0; i < arity; ++i) {
   d5268:	42ae      	cmp	r6, r5
   d526a:	d009      	beq.n	d5280 <optimize+0x40>
            optimize(n->parameters[i]);
   d526c:	f856 0f04 	ldr.w	r0, [r6, #4]!
   d5270:	f7ff ffe6 	bl	d5240 <optimize>
            if (((te_expr*)(n->parameters[i]))->type != TE_CONSTANT) {
   d5274:	6833      	ldr	r3, [r6, #0]
   d5276:	681b      	ldr	r3, [r3, #0]
                known = 0;
   d5278:	2b01      	cmp	r3, #1
   d527a:	bf18      	it	ne
   d527c:	2700      	movne	r7, #0
   d527e:	e7f3      	b.n	d5268 <optimize+0x28>
            }
        }
        if (known) {
   d5280:	b16f      	cbz	r7, d529e <optimize+0x5e>
            const double value = te_eval(n);
   d5282:	4620      	mov	r0, r4
   d5284:	f7ff fcf8 	bl	d4c78 <te_eval>
            te_free_parameters(n);
   d5288:	4620      	mov	r0, r4
            if (((te_expr*)(n->parameters[i]))->type != TE_CONSTANT) {
                known = 0;
            }
        }
        if (known) {
            const double value = te_eval(n);
   d528a:	eeb0 8a40 	vmov.f32	s16, s0
   d528e:	eef0 8a60 	vmov.f32	s17, s1
            te_free_parameters(n);
   d5292:	f7ff f965 	bl	d4560 <te_free_parameters>
            n->type = TE_CONSTANT;
            n->value = value;
   d5296:	ed84 8b02 	vstr	d8, [r4, #8]
            }
        }
        if (known) {
            const double value = te_eval(n);
            te_free_parameters(n);
            n->type = TE_CONSTANT;
   d529a:	2301      	movs	r3, #1
   d529c:	6023      	str	r3, [r4, #0]
            n->value = value;
        }
    }
}
   d529e:	ecbd 8b02 	vpop	{d8}
   d52a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d52a4 <te_compile>:


te_expr *te_compile(const char *expression, const te_variable *variables, int var_count, int *error) {
   d52a4:	b530      	push	{r4, r5, lr}
   d52a6:	b08b      	sub	sp, #44	; 0x2c
   d52a8:	461d      	mov	r5, r3
    state s;
    s.start = s.next = expression;
   d52aa:	9001      	str	r0, [sp, #4]
   d52ac:	9000      	str	r0, [sp, #0]
    s.lookup = variables;
    s.lookup_len = var_count;

    next_token(&s);
   d52ae:	4668      	mov	r0, sp


te_expr *te_compile(const char *expression, const te_variable *variables, int var_count, int *error) {
    state s;
    s.start = s.next = expression;
    s.lookup = variables;
   d52b0:	9107      	str	r1, [sp, #28]
    s.lookup_len = var_count;
   d52b2:	9208      	str	r2, [sp, #32]

    next_token(&s);
   d52b4:	f7ff f980 	bl	d45b8 <next_token>
    te_expr *root = list(&s);
   d52b8:	4668      	mov	r0, sp
   d52ba:	f7ff fabb 	bl	d4834 <list>

    if (s.type != TOK_END) {
   d52be:	9b02      	ldr	r3, [sp, #8]
   d52c0:	2b1a      	cmp	r3, #26
    s.start = s.next = expression;
    s.lookup = variables;
    s.lookup_len = var_count;

    next_token(&s);
    te_expr *root = list(&s);
   d52c2:	4604      	mov	r4, r0

    if (s.type != TOK_END) {
   d52c4:	d00d      	beq.n	d52e2 <te_compile+0x3e>
        te_free(root);
   d52c6:	f7ff f940 	bl	d454a <te_free>
        if (error) {
   d52ca:	b90d      	cbnz	r5, d52d0 <te_compile+0x2c>
            *error = (s.next - s.start);
            if (*error == 0) *error = 1;
        }
        return 0;
   d52cc:	2000      	movs	r0, #0
   d52ce:	e00e      	b.n	d52ee <te_compile+0x4a>
    te_expr *root = list(&s);

    if (s.type != TOK_END) {
        te_free(root);
        if (error) {
            *error = (s.next - s.start);
   d52d0:	e89d 0005 	ldmia.w	sp, {r0, r2}
            if (*error == 0) *error = 1;
   d52d4:	1a10      	subs	r0, r2, r0
   d52d6:	d001      	beq.n	d52dc <te_compile+0x38>
    te_expr *root = list(&s);

    if (s.type != TOK_END) {
        te_free(root);
        if (error) {
            *error = (s.next - s.start);
   d52d8:	6028      	str	r0, [r5, #0]
   d52da:	e7f7      	b.n	d52cc <te_compile+0x28>
            if (*error == 0) *error = 1;
   d52dc:	2301      	movs	r3, #1
   d52de:	602b      	str	r3, [r5, #0]
   d52e0:	e005      	b.n	d52ee <te_compile+0x4a>
        }
        return 0;
    } else {
        optimize(root);
   d52e2:	f7ff ffad 	bl	d5240 <optimize>
        if (error) *error = 0;
   d52e6:	b10d      	cbz	r5, d52ec <te_compile+0x48>
   d52e8:	2300      	movs	r3, #0
   d52ea:	602b      	str	r3, [r5, #0]
        return root;
   d52ec:	4620      	mov	r0, r4
    }
}
   d52ee:	b00b      	add	sp, #44	; 0x2c
   d52f0:	bd30      	pop	{r4, r5, pc}

000d52f2 <_ZN8particle9LEDStatus6updateEm>:

inline bool particle::LEDStatus::isActive() const {
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
}

inline void particle::LEDStatus::update(system_tick_t ticks) {
   d52f2:	4770      	bx	lr

000d52f4 <_Z8ADXL_ISRv>:

//******************** ISR *********************
// Look for Interrupts and Triggered Action    
// Need to keep this short and must not include I2C etc.
void ADXL_ISR() {
  accelInterrupt=true; 
   d52f4:	4b01      	ldr	r3, [pc, #4]	; (d52fc <_Z8ADXL_ISRv+0x8>)
   d52f6:	2201      	movs	r2, #1
   d52f8:	701a      	strb	r2, [r3, #0]
   d52fa:	4770      	bx	lr
   d52fc:	2003dec4 	.word	0x2003dec4

000d5300 <_ZL14BLYNK_LOG_TIMEv>:
                                            BLYNK_PRINT.print(ip[2]); BLYNK_PRINT.print('.');  \
                                            BLYNK_PRINT.print(ip[1]); BLYNK_PRINT.print('.');  \
                                            BLYNK_PRINT.println(ip[0]); }

        static
        void BLYNK_LOG_TIME() {
   d5300:	b510      	push	{r4, lr}
            BLYNK_PRINT.print('[');
   d5302:	f006 ffe5 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d5306:	215b      	movs	r1, #91	; 0x5b
   d5308:	f005 ff56 	bl	db1b8 <_ZN5Print5printEc>
            BLYNK_PRINT.print(BlynkMillis());
   d530c:	f006 ffe0 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d5310:	4604      	mov	r4, r0
   d5312:	f005 f87b 	bl	da40c <_Z11BlynkMillisv>
   d5316:	220a      	movs	r2, #10
   d5318:	4601      	mov	r1, r0
   d531a:	4620      	mov	r0, r4
   d531c:	f005 ff85 	bl	db22a <_ZN5Print5printEmi>
            BLYNK_PRINT.print(BLYNK_F("] "));
   d5320:	f006 ffd6 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d5324:	4902      	ldr	r1, [pc, #8]	; (d5330 <_ZL14BLYNK_LOG_TIMEv+0x30>)
        }
   d5326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        static
        void BLYNK_LOG_TIME() {
            BLYNK_PRINT.print('[');
            BLYNK_PRINT.print(BlynkMillis());
            BLYNK_PRINT.print(BLYNK_F("] "));
   d532a:	f005 bf41 	b.w	db1b0 <_ZN5Print5printEPKc>
   d532e:	bf00      	nop
   d5330:	000e6b33 	.word	0x000e6b33

000d5334 <__tcf_0>:
String StateString = "RDY";

BlynkTimer sensorTimer; // Create a Timer object called "sensorTimer"!
BlynkTimer accelTimer; // Create an accelerometer Timer object

String i2cNames[] =
   d5334:	b538      	push	{r3, r4, r5, lr}
   d5336:	4d06      	ldr	r5, [pc, #24]	; (d5350 <__tcf_0+0x1c>)
   d5338:	2400      	movs	r4, #0
   d533a:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d533e:	4428      	add	r0, r5
   d5340:	3c10      	subs	r4, #16
   d5342:	f005 fd7f 	bl	dae44 <_ZN6StringD1Ev>
   d5346:	f114 0f70 	cmn.w	r4, #112	; 0x70
   d534a:	d1f6      	bne.n	d533a <__tcf_0+0x6>
   d534c:	bd38      	pop	{r3, r4, r5, pc}
   d534e:	bf00      	nop
   d5350:	2003d718 	.word	0x2003d718

000d5354 <_Z16gmtOffsetHandlerPKcS0_>:
    saveState();
    return true;
  }
}

void gmtOffsetHandler(const char *event, const char *data) {
   d5354:	b510      	push	{r4, lr}
  // Handle the integration response
  gmtOffsetSeconds=atoi(data);
   d5356:	4608      	mov	r0, r1
   d5358:	f00d fff9 	bl	e334e <atoi>
   d535c:	4c08      	ldr	r4, [pc, #32]	; (d5380 <_Z16gmtOffsetHandlerPKcS0_+0x2c>)
  gmtOffsetValid = true;
   d535e:	4b09      	ldr	r3, [pc, #36]	; (d5384 <_Z16gmtOffsetHandlerPKcS0_+0x30>)
  }
}

void gmtOffsetHandler(const char *event, const char *data) {
  // Handle the integration response
  gmtOffsetSeconds=atoi(data);
   d5360:	6020      	str	r0, [r4, #0]
  gmtOffsetValid = true;
   d5362:	2201      	movs	r2, #1
   d5364:	701a      	strb	r2, [r3, #0]
  DEBUG_PRINT("GMT seconds offset is: ");
   d5366:	f006 ffb3 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d536a:	4907      	ldr	r1, [pc, #28]	; (d5388 <_Z16gmtOffsetHandlerPKcS0_+0x34>)
   d536c:	f005 ff20 	bl	db1b0 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(gmtOffsetSeconds);
   d5370:	f006 ffae 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d5374:	6821      	ldr	r1, [r4, #0]
   d5376:	220a      	movs	r2, #10
}
   d5378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void gmtOffsetHandler(const char *event, const char *data) {
  // Handle the integration response
  gmtOffsetSeconds=atoi(data);
  gmtOffsetValid = true;
  DEBUG_PRINT("GMT seconds offset is: ");
  DEBUG_PRINTLN(gmtOffsetSeconds);
   d537c:	f005 bfa6 	b.w	db2cc <_ZN5Print7printlnEii>
   d5380:	2003d5a0 	.word	0x2003d5a0
   d5384:	2003e1ac 	.word	0x2003e1ac
   d5388:	000e6b36 	.word	0x000e6b36

000d538c <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.0>:
        #include <ctype.h>
        #define BLYNK_DBG_BREAK()    { for(;;); }
        #define BLYNK_ASSERT(expr)   { if(!(expr)) { BLYNK_LOG2(BLYNK_F("Assertion failed: "), BLYNK_F(#expr)); BLYNK_DBG_BREAK() } }

        static
        void BLYNK_DBG_DUMP(const char* msg, const void* addr, size_t len) {
   d538c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d538e:	4604      	mov	r4, r0
   d5390:	460e      	mov	r6, r1
   d5392:	4617      	mov	r7, r2
            if (len) {
                BLYNK_LOG_TIME();
   d5394:	f7ff ffb4 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
                BLYNK_PRINT.print(msg);
   d5398:	f006 ff9a 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d539c:	4621      	mov	r1, r4
   d539e:	f005 ff07 	bl	db1b0 <_ZN5Print5printEPKc>
   d53a2:	4437      	add	r7, r6
                int l2 = len;
                const uint8_t* octets = (const uint8_t*)addr;
                bool prev_print = true;
   d53a4:	2401      	movs	r4, #1
                while (l2--) {
   d53a6:	42be      	cmp	r6, r7
   d53a8:	d028      	beq.n	d53fc <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.0+0x70>
                    const uint8_t c = *octets++ & 0xFF;
   d53aa:	f816 5b01 	ldrb.w	r5, [r6], #1
                    if (c >= 32 && c < 127) {
   d53ae:	f1a5 0320 	sub.w	r3, r5, #32
   d53b2:	2b5e      	cmp	r3, #94	; 0x5e
   d53b4:	d80b      	bhi.n	d53ce <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.0+0x42>
                        if (!prev_print) { BLYNK_PRINT.print(']'); }
   d53b6:	b924      	cbnz	r4, d53c2 <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.0+0x36>
   d53b8:	f006 ff8a 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d53bc:	215d      	movs	r1, #93	; 0x5d
   d53be:	f005 fefb 	bl	db1b8 <_ZN5Print5printEc>
                        BLYNK_PRINT.print((char)c);
   d53c2:	f006 ff85 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d53c6:	4629      	mov	r1, r5
   d53c8:	f005 fef6 	bl	db1b8 <_ZN5Print5printEc>
   d53cc:	e7ea      	b.n	d53a4 <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.0+0x18>
                        prev_print = true;
                    } else {
                        BLYNK_PRINT.print(prev_print?'[':'|');
   d53ce:	f006 ff7f 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d53d2:	2c00      	cmp	r4, #0
   d53d4:	bf14      	ite	ne
   d53d6:	215b      	movne	r1, #91	; 0x5b
   d53d8:	217c      	moveq	r1, #124	; 0x7c
   d53da:	f005 feed 	bl	db1b8 <_ZN5Print5printEc>
                        if (c < 0x10) { BLYNK_PRINT.print('0'); }
   d53de:	2d0f      	cmp	r5, #15
   d53e0:	d804      	bhi.n	d53ec <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.0+0x60>
   d53e2:	f006 ff75 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d53e6:	2130      	movs	r1, #48	; 0x30
   d53e8:	f005 fee6 	bl	db1b8 <_ZN5Print5printEc>
                        BLYNK_PRINT.print(c, HEX);
   d53ec:	f006 ff70 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d53f0:	2210      	movs	r2, #16
   d53f2:	4629      	mov	r1, r5
   d53f4:	f005 ff26 	bl	db244 <_ZN5Print5printEhi>
                        prev_print = false;
   d53f8:	2400      	movs	r4, #0
   d53fa:	e7d4      	b.n	d53a6 <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.0+0x1a>
                    }
                }
                if (!prev_print) {
   d53fc:	b924      	cbnz	r4, d5408 <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.0+0x7c>
                    BLYNK_PRINT.print(']');
   d53fe:	f006 ff67 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d5402:	215d      	movs	r1, #93	; 0x5d
   d5404:	f005 fed8 	bl	db1b8 <_ZN5Print5printEc>
                }
                BLYNK_PRINT.println();
   d5408:	f006 ff62 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
            }
        }
   d540c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                    }
                }
                if (!prev_print) {
                    BLYNK_PRINT.print(']');
                }
                BLYNK_PRINT.println();
   d5410:	f005 bed5 	b.w	db1be <_ZN5Print7printlnEv>

000d5414 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.24.constprop.29>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d5414:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5416:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d541a:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d541c:	f88d 3000 	strb.w	r3, [sp]
   d5420:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d5422:	4605      	mov	r5, r0
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d5424:	f006 fc36 	bl	dbc94 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
   d5428:	4628      	mov	r0, r5
   d542a:	b003      	add	sp, #12
   d542c:	bd30      	pop	{r4, r5, pc}

000d542e <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d542e:	2200      	movs	r2, #0
   d5430:	4611      	mov	r1, r2
   d5432:	6840      	ldr	r0, [r0, #4]
   d5434:	f005 baf2 	b.w	daa1c <network_ready>

000d5438 <_ZN5spark9WiFiClass2onEv>:
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5438:	2300      	movs	r3, #0
   d543a:	461a      	mov	r2, r3
   d543c:	4619      	mov	r1, r3
   d543e:	6840      	ldr	r0, [r0, #4]
   d5440:	f005 baf4 	b.w	daa2c <network_on>

000d5444 <_ZN11SystemClass11sleepResultEv>:

    inline pin_t wakeUpPin() {
        return sleepResult().pin();
    }

    SleepResult sleepResult() {
   d5444:	b573      	push	{r0, r1, r4, r5, r6, lr}
        //         // Woken up from standby mode
        //         sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
        //     }
        // });
        static bool f = false;
        if (!f) {
   d5446:	4b0e      	ldr	r3, [pc, #56]	; (d5480 <_ZN11SystemClass11sleepResultEv+0x3c>)
   d5448:	781d      	ldrb	r5, [r3, #0]

    inline pin_t wakeUpPin() {
        return sleepResult().pin();
    }

    SleepResult sleepResult() {
   d544a:	4606      	mov	r6, r0
   d544c:	460c      	mov	r4, r1
        //         // Woken up from standby mode
        //         sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
        //     }
        // });
        static bool f = false;
        if (!f) {
   d544e:	b985      	cbnz	r5, d5472 <_ZN11SystemClass11sleepResultEv+0x2e>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d5450:	a802      	add	r0, sp, #8
        //         sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
        //     }
        // });
        static bool f = false;
        if (!f) {
            f = true;
   d5452:	2201      	movs	r2, #1
   d5454:	701a      	strb	r2, [r3, #0]
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d5456:	f840 5d04 	str.w	r5, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d545a:	462a      	mov	r2, r5
   d545c:	4629      	mov	r1, r5
   d545e:	f005 f8ad 	bl	da5bc <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d5462:	9b01      	ldr	r3, [sp, #4]
        //     }
        // });
        static bool f = false;
        if (!f) {
            f = true;
            if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
   d5464:	2b1e      	cmp	r3, #30
   d5466:	d104      	bne.n	d5472 <_ZN11SystemClass11sleepResultEv+0x2e>
                // Woken up from standby mode
                sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
   d5468:	2303      	movs	r3, #3
   d546a:	7023      	strb	r3, [r4, #0]
   d546c:	2308      	movs	r3, #8
   d546e:	8065      	strh	r5, [r4, #2]
   d5470:	80a3      	strh	r3, [r4, #4]
            }
        }
        return sleepResult_;
   d5472:	6823      	ldr	r3, [r4, #0]
   d5474:	6033      	str	r3, [r6, #0]
   d5476:	88a3      	ldrh	r3, [r4, #4]
   d5478:	80b3      	strh	r3, [r6, #4]
    }
   d547a:	4630      	mov	r0, r6
   d547c:	b002      	add	sp, #8
   d547e:	bd70      	pop	{r4, r5, r6, pc}
   d5480:	2003d6b4 	.word	0x2003d6b4

000d5484 <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
   d5484:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5486:	f005 f871 	bl	da56c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d548a:	4b03      	ldr	r3, [pc, #12]	; (d5498 <_ZN10CloudClass7processEv+0x14>)
   d548c:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
   d548e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d5492:	f005 bafb 	b.w	daa8c <spark_process>
   d5496:	bf00      	nop
   d5498:	2003e610 	.word	0x2003e610

000d549c <_ZN8particle9LEDStatus9setActiveEb>:
    setPriority(priority);
    setActive(true);
}

inline void particle::LEDStatus::setActive(bool active) {
    led_set_status_active(&d_, active, nullptr);
   d549c:	2200      	movs	r2, #0
   d549e:	3004      	adds	r0, #4
   d54a0:	f005 ba3c 	b.w	da91c <led_set_status_active>

000d54a4 <_ZN8particle9LEDStatusD1Ev>:

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d54a4:	b510      	push	{r4, lr}
   d54a6:	4b04      	ldr	r3, [pc, #16]	; (d54b8 <_ZN8particle9LEDStatusD1Ev+0x14>)
   d54a8:	6003      	str	r3, [r0, #0]
   d54aa:	4604      	mov	r4, r0
    setActive(false);
   d54ac:	2100      	movs	r1, #0
   d54ae:	f7ff fff5 	bl	d549c <_ZN8particle9LEDStatus9setActiveEb>
}
   d54b2:	4620      	mov	r0, r4
   d54b4:	bd10      	pop	{r4, pc}
   d54b6:	bf00      	nop
   d54b8:	000e6ad4 	.word	0x000e6ad4

000d54bc <_ZN8particle9LEDStatusD0Ev>:

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d54bc:	b510      	push	{r4, lr}
   d54be:	4604      	mov	r4, r0
    setActive(false);
}
   d54c0:	f7ff fff0 	bl	d54a4 <_ZN8particle9LEDStatusD1Ev>
   d54c4:	4620      	mov	r0, r4
   d54c6:	2120      	movs	r1, #32
   d54c8:	f007 fdb7 	bl	dd03a <_ZdlPvj>
   d54cc:	4620      	mov	r0, r4
   d54ce:	bd10      	pop	{r4, pc}

000d54d0 <_ZNK10BlynkParam8iterator5asIntEv>:
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d54d0:	6803      	ldr	r3, [r0, #0]
   d54d2:	b12b      	cbz	r3, d54e0 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   d54d4:	6842      	ldr	r2, [r0, #4]
   d54d6:	4293      	cmp	r3, r2
   d54d8:	d202      	bcs.n	d54e0 <_ZNK10BlynkParam8iterator5asIntEv+0x10>

        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   d54da:	4618      	mov	r0, r3
   d54dc:	f00d bf37 	b.w	e334e <atoi>
   d54e0:	2000      	movs	r0, #0
   d54e2:	4770      	bx	lr

000d54e4 <_ZN10BlynkParam8iteratorppEv>:
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
   d54e4:	b538      	push	{r3, r4, r5, lr}
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d54e6:	6805      	ldr	r5, [r0, #0]
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
   d54e8:	4604      	mov	r4, r0
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d54ea:	b145      	cbz	r5, d54fe <_ZN10BlynkParam8iteratorppEv+0x1a>
   d54ec:	6843      	ldr	r3, [r0, #4]
   d54ee:	429d      	cmp	r5, r3
   d54f0:	d205      	bcs.n	d54fe <_ZN10BlynkParam8iteratorppEv+0x1a>
        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
            if(isValid()) {
                ptr += strlen(ptr) + 1;
   d54f2:	4628      	mov	r0, r5
   d54f4:	f00f f80a 	bl	e450c <strlen>
   d54f8:	3001      	adds	r0, #1
   d54fa:	4405      	add	r5, r0
   d54fc:	6025      	str	r5, [r4, #0]
            }
            return *this;
        }
   d54fe:	4620      	mov	r0, r4
   d5500:	bd38      	pop	{r3, r4, r5, pc}

000d5502 <_ZN10BlynkParam3addEPKc>:
    len += l;
}

inline
void BlynkParam::add(const char* str)
{
   d5502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5504:	4604      	mov	r4, r0
    if (str == NULL) {
   d5506:	460f      	mov	r7, r1
   d5508:	6846      	ldr	r6, [r0, #4]
   d550a:	b921      	cbnz	r1, d5516 <_ZN10BlynkParam3addEPKc+0x14>
        buff[len++] = '\0';
   d550c:	6803      	ldr	r3, [r0, #0]
   d550e:	1c72      	adds	r2, r6, #1
   d5510:	6042      	str	r2, [r0, #4]
   d5512:	5599      	strb	r1, [r3, r6]
        return;
   d5514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    add(str, strlen(str)+1);
   d5516:	4608      	mov	r0, r1
   d5518:	f00e fff8 	bl	e450c <strlen>
}

inline
void BlynkParam::add(const void* b, size_t l)
{
    if (len + l > buff_size)
   d551c:	68a3      	ldr	r3, [r4, #8]
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
   d551e:	1c45      	adds	r5, r0, #1
}

inline
void BlynkParam::add(const void* b, size_t l)
{
    if (len + l > buff_size)
   d5520:	19aa      	adds	r2, r5, r6
   d5522:	429a      	cmp	r2, r3
   d5524:	d808      	bhi.n	d5538 <_ZN10BlynkParam3addEPKc+0x36>
        return;
    memcpy(buff+len, b, l);
   d5526:	6820      	ldr	r0, [r4, #0]
   d5528:	462a      	mov	r2, r5
   d552a:	4639      	mov	r1, r7
   d552c:	4430      	add	r0, r6
   d552e:	f00e f821 	bl	e3574 <memcpy>
    len += l;
   d5532:	6863      	ldr	r3, [r4, #4]
   d5534:	441d      	add	r5, r3
   d5536:	6065      	str	r5, [r4, #4]
   d5538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d553c <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   d553c:	b570      	push	{r4, r5, r6, lr}
   d553e:	4604      	mov	r4, r0
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   d5540:	6840      	ldr	r0, [r0, #4]
   d5542:	68a6      	ldr	r6, [r4, #8]
   d5544:	6825      	ldr	r5, [r4, #0]
   d5546:	4a05      	ldr	r2, [pc, #20]	; (d555c <_ZN10BlynkParam3addEi+0x20>)
   d5548:	460b      	mov	r3, r1
   d554a:	1a31      	subs	r1, r6, r0
   d554c:	4428      	add	r0, r5
   d554e:	f005 fafd 	bl	dab4c <snprintf>
   d5552:	6863      	ldr	r3, [r4, #4]
   d5554:	3001      	adds	r0, #1
   d5556:	4418      	add	r0, r3
   d5558:	6060      	str	r0, [r4, #4]
   d555a:	bd70      	pop	{r4, r5, r6, pc}
   d555c:	000e6b4e 	.word	0x000e6b4e

000d5560 <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   d5560:	b570      	push	{r4, r5, r6, lr}
   d5562:	4604      	mov	r4, r0
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   d5564:	6840      	ldr	r0, [r0, #4]
   d5566:	68a6      	ldr	r6, [r4, #8]
   d5568:	6825      	ldr	r5, [r4, #0]
   d556a:	4a05      	ldr	r2, [pc, #20]	; (d5580 <_ZN10BlynkParam3addEl+0x20>)
   d556c:	460b      	mov	r3, r1
   d556e:	1a31      	subs	r1, r6, r0
   d5570:	4428      	add	r0, r5
   d5572:	f005 faeb 	bl	dab4c <snprintf>
   d5576:	6863      	ldr	r3, [r4, #4]
   d5578:	3001      	adds	r0, #1
   d557a:	4418      	add	r0, r3
   d557c:	6060      	str	r0, [r4, #4]
   d557e:	bd70      	pop	{r4, r5, r6, pc}
   d5580:	000e6b51 	.word	0x000e6b51

000d5584 <_ZN22BlynkTransportParticle7connectEv>:
    void begin(const char* d, uint16_t p) {
        domain = d;
        port = p;
    }

    bool connect() {
   d5584:	b5f0      	push	{r4, r5, r6, r7, lr}
        if (domain) {
   d5586:	6b47      	ldr	r7, [r0, #52]	; 0x34
    void begin(const char* d, uint16_t p) {
        domain = d;
        port = p;
    }

    bool connect() {
   d5588:	b087      	sub	sp, #28
   d558a:	4604      	mov	r4, r0
        if (domain) {
   d558c:	b1ef      	cbz	r7, d55ca <_ZN22BlynkTransportParticle7connectEv+0x46>
            BLYNK_LOG4(BLYNK_F("Connecting to "), domain, ':', port);
   d558e:	f7ff feb7 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d5592:	f006 fe9d 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d5596:	492f      	ldr	r1, [pc, #188]	; (d5654 <_ZN22BlynkTransportParticle7connectEv+0xd0>)
   d5598:	f005 fe0a 	bl	db1b0 <_ZN5Print5printEPKc>
   d559c:	f006 fe98 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d55a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d55a2:	f005 fe05 	bl	db1b0 <_ZN5Print5printEPKc>
   d55a6:	f006 fe93 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d55aa:	213a      	movs	r1, #58	; 0x3a
   d55ac:	f005 fe04 	bl	db1b8 <_ZN5Print5printEc>
   d55b0:	f006 fe8e 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d55b4:	8f21      	ldrh	r1, [r4, #56]	; 0x38
   d55b6:	220a      	movs	r2, #10
   d55b8:	f005 fe88 	bl	db2cc <_ZN5Print7printlnEii>
            return (1 == client.connect(domain, port));
   d55bc:	2300      	movs	r3, #0
   d55be:	8f22      	ldrh	r2, [r4, #56]	; 0x38
   d55c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d55c2:	4620      	mov	r0, r4
   d55c4:	f007 f8f4 	bl	dc7b0 <_ZN9TCPClient7connectEPKctm>
   d55c8:	e03f      	b.n	d564a <_ZN22BlynkTransportParticle7connectEv+0xc6>
        } else {
            BLYNK_LOG_IP("Connecting to ", addr);
   d55ca:	f7ff fe99 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d55ce:	f006 fe7f 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d55d2:	4920      	ldr	r1, [pc, #128]	; (d5654 <_ZN22BlynkTransportParticle7connectEv+0xd0>)
   d55d4:	f005 fdec 	bl	db1b0 <_ZN5Print5printEPKc>
   d55d8:	f006 fe7a 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d55dc:	220a      	movs	r2, #10
   d55de:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
   d55e2:	f005 fe2f 	bl	db244 <_ZN5Print5printEhi>
   d55e6:	f006 fe73 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d55ea:	212e      	movs	r1, #46	; 0x2e
   d55ec:	f005 fde4 	bl	db1b8 <_ZN5Print5printEc>
   d55f0:	f006 fe6e 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d55f4:	220a      	movs	r2, #10
   d55f6:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
   d55fa:	f005 fe23 	bl	db244 <_ZN5Print5printEhi>
   d55fe:	f006 fe67 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d5602:	212e      	movs	r1, #46	; 0x2e
   d5604:	f005 fdd8 	bl	db1b8 <_ZN5Print5printEc>
   d5608:	4625      	mov	r5, r4
   d560a:	f006 fe61 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d560e:	220a      	movs	r2, #10
   d5610:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
   d5614:	f005 fe16 	bl	db244 <_ZN5Print5printEhi>
   d5618:	f006 fe5a 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d561c:	212e      	movs	r1, #46	; 0x2e
   d561e:	f005 fdcb 	bl	db1b8 <_ZN5Print5printEc>
   d5622:	f006 fe55 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d5626:	220a      	movs	r2, #10
   d5628:	f815 1f20 	ldrb.w	r1, [r5, #32]!
   d562c:	f005 fe0c 	bl	db248 <_ZN5Print7printlnEhi>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5630:	4b09      	ldr	r3, [pc, #36]	; (d5658 <_ZN22BlynkTransportParticle7connectEv+0xd4>)
   d5632:	9300      	str	r3, [sp, #0]
   d5634:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5636:	ae01      	add	r6, sp, #4
   d5638:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d563a:	682b      	ldr	r3, [r5, #0]
   d563c:	7033      	strb	r3, [r6, #0]
            return (1 == client.connect(addr, port));
   d563e:	8f22      	ldrh	r2, [r4, #56]	; 0x38
   d5640:	463b      	mov	r3, r7
   d5642:	4669      	mov	r1, sp
   d5644:	4620      	mov	r0, r4
   d5646:	f007 f935 	bl	dc8b4 <_ZN9TCPClient7connectE9IPAddresstm>
   d564a:	1e43      	subs	r3, r0, #1
   d564c:	4258      	negs	r0, r3
   d564e:	4158      	adcs	r0, r3
        }
        return 0;
    }
   d5650:	b007      	add	sp, #28
   d5652:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5654:	000e6b55 	.word	0x000e6b55
   d5658:	000e7e40 	.word	0x000e7e40

000d565c <_ZN13BlynkParticle6configEPKcS1_t>:
public:
    BlynkParticle(BlynkTransportParticle& transp)
        : Base(transp)
    {}

    void config(const char* auth,
   d565c:	b570      	push	{r4, r5, r6, lr}
    int readHeader(BlynkHeader& hdr);
    uint16_t getNextMsgId();

protected:
    void begin(const char* auth) {
        this->authkey = auth;
   d565e:	6041      	str	r1, [r0, #4]
   d5660:	4604      	mov	r4, r0
   d5662:	4616      	mov	r6, r2
   d5664:	461d      	mov	r5, r3
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d5666:	f004 fed1 	bl	da40c <_Z11BlynkMillisv>
   d566a:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d566e:	3808      	subs	r0, #8
   d5670:	6120      	str	r0, [r4, #16]
   d5672:	60e0      	str	r0, [r4, #12]
   d5674:	6160      	str	r0, [r4, #20]

    void printBanner() {
#if defined(BLYNK_NO_FANCY_LOGO)
        BLYNK_LOG1(BLYNK_F("Blynk v" BLYNK_VERSION " on " BLYNK_INFO_DEVICE));
#else
        BLYNK_LOG1(BLYNK_F(BLYNK_NEWLINE
   d5676:	f7ff fe43 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d567a:	f006 fe29 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d567e:	4903      	ldr	r1, [pc, #12]	; (d568c <_ZN13BlynkParticle6configEPKcS1_t+0x30>)
   d5680:	f005 fda9 	bl	db1d6 <_ZN5Print7printlnEPKc>
                const char* domain = BLYNK_DEFAULT_DOMAIN,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        Base::begin(auth);
        this->conn.begin(domain, port);
   d5684:	6821      	ldr	r1, [r4, #0]
        port = p;
        addr = a;
    }

    void begin(const char* d, uint16_t p) {
        domain = d;
   d5686:	634e      	str	r6, [r1, #52]	; 0x34
        port = p;
   d5688:	870d      	strh	r5, [r1, #56]	; 0x38
   d568a:	bd70      	pop	{r4, r5, r6, pc}
   d568c:	000e6b64 	.word	0x000e6b64

000d5690 <_Z15checkI2CDevicesP6StringPhjPb>:
  false
};

// check i2c devices with i2c names at i2c address of length i2c length returned in i2cExists
bool checkI2CDevices(String i2cNames[], byte i2cAddr[], size_t i2cLength, bool i2cExists[])
{
   d5690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5694:	4692      	mov	sl, r2
   d5696:	b08f      	sub	sp, #60	; 0x3c
   d5698:	4699      	mov	r9, r3
   d569a:	4606      	mov	r6, r0
   d569c:	461d      	mov	r5, r3
   d569e:	4688      	mov	r8, r1
  byte error, address;
  bool result = true;
   d56a0:	2401      	movs	r4, #1
  for (size_t i; i<i2cLength; ++i)
   d56a2:	ebc9 0305 	rsb	r3, r9, r5
   d56a6:	459a      	cmp	sl, r3
   d56a8:	d97b      	bls.n	d57a2 <_Z15checkI2CDevicesP6StringPhjPb+0x112>
  {
    // The i2c_scanner uses the return value of
    // the Write.endTransmisstion to see if
    // a device did acknowledge to the address.
    address = i2cAddr[i];
   d56aa:	f818 7b01 	ldrb.w	r7, [r8], #1
    Wire.beginTransmission(address);
   d56ae:	f007 fc9f 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d56b2:	4639      	mov	r1, r7
   d56b4:	f006 fea8 	bl	dc408 <_ZN7TwoWire17beginTransmissionEh>
    error = Wire.endTransmission();
   d56b8:	f007 fc9a 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d56bc:	f006 feaf 	bl	dc41e <_ZN7TwoWire15endTransmissionEv>

    if (!error==0)
   d56c0:	bb78      	cbnz	r0, d5722 <_Z15checkI2CDevicesP6StringPhjPb+0x92>
      error = Wire.endTransmission();
    }
 
    if (error == 0)
    {
      DEBUG_PRINTLN(String("Device "+i2cNames[i]+ " at"+" address:0x"+String(address, HEX)));
   d56c2:	f006 fe05 	bl	dc2d0 <_Z22__fetch_global_Serial1v>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d56c6:	4939      	ldr	r1, [pc, #228]	; (d57ac <_Z15checkI2CDevicesP6StringPhjPb+0x11c>)
   d56c8:	4683      	mov	fp, r0
   d56ca:	a802      	add	r0, sp, #8
   d56cc:	f005 fc01 	bl	daed2 <_ZN6StringC1EPK19__FlashStringHelper>
   d56d0:	4631      	mov	r1, r6
   d56d2:	a802      	add	r0, sp, #8
   d56d4:	f005 fc9c 	bl	db010 <_ZplRK15StringSumHelperRK6String>
   d56d8:	4935      	ldr	r1, [pc, #212]	; (d57b0 <_Z15checkI2CDevicesP6StringPhjPb+0x120>)
   d56da:	f005 fca5 	bl	db028 <_ZplRK15StringSumHelperPKc>
   d56de:	4935      	ldr	r1, [pc, #212]	; (d57b4 <_Z15checkI2CDevicesP6StringPhjPb+0x124>)
   d56e0:	f005 fca2 	bl	db028 <_ZplRK15StringSumHelperPKc>
   d56e4:	2210      	movs	r2, #16
   d56e6:	9001      	str	r0, [sp, #4]
   d56e8:	4639      	mov	r1, r7
   d56ea:	a806      	add	r0, sp, #24
   d56ec:	f005 fc54 	bl	daf98 <_ZN6StringC1Ehh>
   d56f0:	9b01      	ldr	r3, [sp, #4]
   d56f2:	a906      	add	r1, sp, #24
   d56f4:	4618      	mov	r0, r3
   d56f6:	f005 fc8b 	bl	db010 <_ZplRK15StringSumHelperRK6String>
   d56fa:	4601      	mov	r1, r0
   d56fc:	a80a      	add	r0, sp, #40	; 0x28
   d56fe:	f005 fc27 	bl	daf50 <_ZN6StringC1ERKS_>
   d5702:	990a      	ldr	r1, [sp, #40]	; 0x28
   d5704:	4658      	mov	r0, fp
   d5706:	f005 fd66 	bl	db1d6 <_ZN5Print7printlnEPKc>
   d570a:	a80a      	add	r0, sp, #40	; 0x28
   d570c:	f005 fb9a 	bl	dae44 <_ZN6StringD1Ev>
   d5710:	a806      	add	r0, sp, #24
   d5712:	f005 fb97 	bl	dae44 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d5716:	a802      	add	r0, sp, #8
   d5718:	f005 fb94 	bl	dae44 <_ZN6StringD1Ev>
      i2cExists[i]=true;
   d571c:	2301      	movs	r3, #1
   d571e:	702b      	strb	r3, [r5, #0]
   d5720:	e03c      	b.n	d579c <_Z15checkI2CDevicesP6StringPhjPb+0x10c>
    Wire.beginTransmission(address);
    error = Wire.endTransmission();

    if (!error==0)
    {
      Wire.reset();
   d5722:	f007 fc65 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d5726:	f006 fe81 	bl	dc42c <_ZN7TwoWire5resetEv>
      Wire.beginTransmission(address);
   d572a:	f007 fc61 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d572e:	4639      	mov	r1, r7
   d5730:	f006 fe6a 	bl	dc408 <_ZN7TwoWire17beginTransmissionEh>
      error = Wire.endTransmission();
   d5734:	f007 fc5c 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d5738:	f006 fe71 	bl	dc41e <_ZN7TwoWire15endTransmissionEv>
    }
 
    if (error == 0)
   d573c:	2800      	cmp	r0, #0
   d573e:	d0c0      	beq.n	d56c2 <_Z15checkI2CDevicesP6StringPhjPb+0x32>
      DEBUG_PRINTLN(String("Device "+i2cNames[i]+ " at"+" address:0x"+String(address, HEX)));
      i2cExists[i]=true;
    }
    else
    {
      DEBUG_PRINTLN(String("Device "+i2cNames[i]+ " NOT at"+" address:0x"+String(address, HEX)));
   d5740:	f006 fdc6 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d5744:	4919      	ldr	r1, [pc, #100]	; (d57ac <_Z15checkI2CDevicesP6StringPhjPb+0x11c>)
   d5746:	4604      	mov	r4, r0
   d5748:	a802      	add	r0, sp, #8
   d574a:	f005 fbc2 	bl	daed2 <_ZN6StringC1EPK19__FlashStringHelper>
   d574e:	4631      	mov	r1, r6
   d5750:	a802      	add	r0, sp, #8
   d5752:	f005 fc5d 	bl	db010 <_ZplRK15StringSumHelperRK6String>
   d5756:	4918      	ldr	r1, [pc, #96]	; (d57b8 <_Z15checkI2CDevicesP6StringPhjPb+0x128>)
   d5758:	f005 fc66 	bl	db028 <_ZplRK15StringSumHelperPKc>
   d575c:	4915      	ldr	r1, [pc, #84]	; (d57b4 <_Z15checkI2CDevicesP6StringPhjPb+0x124>)
   d575e:	f005 fc63 	bl	db028 <_ZplRK15StringSumHelperPKc>
   d5762:	2210      	movs	r2, #16
   d5764:	4683      	mov	fp, r0
   d5766:	4639      	mov	r1, r7
   d5768:	a806      	add	r0, sp, #24
   d576a:	f005 fc15 	bl	daf98 <_ZN6StringC1Ehh>
   d576e:	a906      	add	r1, sp, #24
   d5770:	4658      	mov	r0, fp
   d5772:	f005 fc4d 	bl	db010 <_ZplRK15StringSumHelperRK6String>
   d5776:	4601      	mov	r1, r0
   d5778:	a80a      	add	r0, sp, #40	; 0x28
   d577a:	f005 fbe9 	bl	daf50 <_ZN6StringC1ERKS_>
   d577e:	990a      	ldr	r1, [sp, #40]	; 0x28
   d5780:	4620      	mov	r0, r4
   d5782:	f005 fd28 	bl	db1d6 <_ZN5Print7printlnEPKc>
   d5786:	a80a      	add	r0, sp, #40	; 0x28
   d5788:	f005 fb5c 	bl	dae44 <_ZN6StringD1Ev>
   d578c:	a806      	add	r0, sp, #24
   d578e:	f005 fb59 	bl	dae44 <_ZN6StringD1Ev>
      i2cExists[i]=false;
   d5792:	2400      	movs	r4, #0

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d5794:	a802      	add	r0, sp, #8
   d5796:	f005 fb55 	bl	dae44 <_ZN6StringD1Ev>
   d579a:	702c      	strb	r4, [r5, #0]
   d579c:	3610      	adds	r6, #16
   d579e:	3501      	adds	r5, #1
// check i2c devices with i2c names at i2c address of length i2c length returned in i2cExists
bool checkI2CDevices(String i2cNames[], byte i2cAddr[], size_t i2cLength, bool i2cExists[])
{
  byte error, address;
  bool result = true;
  for (size_t i; i<i2cLength; ++i)
   d57a0:	e77f      	b.n	d56a2 <_Z15checkI2CDevicesP6StringPhjPb+0x12>
      i2cExists[i]=false;
      result = false;
    }
  }
  return result;
}
   d57a2:	4620      	mov	r0, r4
   d57a4:	b00f      	add	sp, #60	; 0x3c
   d57a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d57aa:	bf00      	nop
   d57ac:	000e6bf2 	.word	0x000e6bf2
   d57b0:	000e6c0a 	.word	0x000e6c0a
   d57b4:	000e6bfa 	.word	0x000e6bfa
   d57b8:	000e6c06 	.word	0x000e6c06

000d57bc <_Z9saveStatev>:
  DEBUG_PRINTLN();
  readingCount++;
}

void saveState()
{
   d57bc:	b510      	push	{r4, lr}
  // EEPROM.put(0, state);
  DEBUG_PRINTLN("Saving State");
   d57be:	f006 fd87 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d57c2:	4906      	ldr	r1, [pc, #24]	; (d57dc <_Z9saveStatev+0x20>)
   d57c4:	f005 fd07 	bl	db1d6 <_ZN5Print7printlnEPKc>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
        return t;
    }

    template <typename T> const T &put(size_t framAddr, const T &t) {
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d57c8:	f240 432c 	movw	r3, #1068	; 0x42c
   d57cc:	4a04      	ldr	r2, [pc, #16]	; (d57e0 <_Z9saveStatev+0x24>)
   d57ce:	4805      	ldr	r0, [pc, #20]	; (d57e4 <_Z9saveStatev+0x28>)
   d57d0:	2100      	movs	r1, #0
  fram.put(0,state);
}
   d57d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d57d6:	f003 bfd1 	b.w	d977c <_ZN10MB85RC256V9writeDataEjPKhj>
   d57da:	bf00      	nop
   d57dc:	000e6c52 	.word	0x000e6c52
   d57e0:	2003da80 	.word	0x2003da80
   d57e4:	2003d6e8 	.word	0x2003d6e8

000d57e8 <_Z9loadStatev>:

void loadState()
{
   d57e8:	b510      	push	{r4, lr}
  // EEPROM.get(0, state);
  DEBUG_PRINTLN("Loading State");
   d57ea:	f006 fd71 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d57ee:	4906      	ldr	r1, [pc, #24]	; (d5808 <_Z9loadStatev+0x20>)
   d57f0:	f005 fcf1 	bl	db1d6 <_ZN5Print7printlnEPKc>
	inline size_t length() { return MEMORY_SIZE; }

	bool erase();

    template <typename T> T &get(size_t framAddr, T &t) {
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d57f4:	f240 432c 	movw	r3, #1068	; 0x42c
   d57f8:	4a04      	ldr	r2, [pc, #16]	; (d580c <_Z9loadStatev+0x24>)
   d57fa:	4805      	ldr	r0, [pc, #20]	; (d5810 <_Z9loadStatev+0x28>)
   d57fc:	2100      	movs	r1, #0
  fram.get(0,state);
}
   d57fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5802:	f003 bf6f 	b.w	d96e4 <_ZN10MB85RC256V8readDataEjPhj>
   d5806:	bf00      	nop
   d5808:	000e6c5f 	.word	0x000e6c5f
   d580c:	2003da80 	.word	0x2003da80
   d5810:	2003d6e8 	.word	0x2003d6e8

000d5814 <BlynkWidgetWriteInternalPinADIS>:
  appConnected = true;
  setAppWidgets();
  DEBUG_PRINTLN("Connected");
}

BLYNK_APP_DISCONNECTED() {
   d5814:	b508      	push	{r3, lr}
// Your code here
 appConnected = false;
   d5816:	4b05      	ldr	r3, [pc, #20]	; (d582c <BlynkWidgetWriteInternalPinADIS+0x18>)
   d5818:	2200      	movs	r2, #0
   d581a:	701a      	strb	r2, [r3, #0]
 DEBUG_PRINTLN("Disconnected");
   d581c:	f006 fd58 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d5820:	4903      	ldr	r1, [pc, #12]	; (d5830 <BlynkWidgetWriteInternalPinADIS+0x1c>)
}
   d5822:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

BLYNK_APP_DISCONNECTED() {
// Your code here
 appConnected = false;
 DEBUG_PRINTLN("Disconnected");
   d5826:	f005 bcd6 	b.w	db1d6 <_ZN5Print7printlnEPKc>
   d582a:	bf00      	nop
   d582c:	2003da44 	.word	0x2003da44
   d5830:	000e6c6d 	.word	0x000e6c6d

000d5834 <BlynkWidgetWrite16>:
    runExpression(state.expression);
  }
}

BLYNK_WRITE(V16) //Email Expression
{
   d5834:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  String _email = param.asStr();
   d5836:	6809      	ldr	r1, [r1, #0]
   d5838:	4668      	mov	r0, sp
   d583a:	f005 fb4a 	bl	daed2 <_ZN6StringC1EPK19__FlashStringHelper>
  //Add validation later
  bool checkEmail = true;
  _email.toLowerCase();
   d583e:	4668      	mov	r0, sp
   d5840:	f005 fc45 	bl	db0ce <_ZN6String11toLowerCaseEv>
  if (checkEmail)
  {
    strcpy(state.email,_email.c_str());
   d5844:	9900      	ldr	r1, [sp, #0]
   d5846:	4805      	ldr	r0, [pc, #20]	; (d585c <BlynkWidgetWrite16+0x28>)
   d5848:	f00e f928 	bl	e3a9c <strcpy>
    saveState();
   d584c:	f7ff ffb6 	bl	d57bc <_Z9saveStatev>
  }
}

BLYNK_WRITE(V16) //Email Expression
{
  String _email = param.asStr();
   d5850:	4668      	mov	r0, sp
   d5852:	f005 faf7 	bl	dae44 <_ZN6StringD1Ev>
  else
  {
    Blynk.virtualWrite(V16, "Invalid address");
  }
  
}
   d5856:	b005      	add	sp, #20
   d5858:	f85d fb04 	ldr.w	pc, [sp], #4
   d585c:	2003db90 	.word	0x2003db90

000d5860 <BlynkWidgetWrite18>:

BLYNK_WRITE(V18) //Email Expression
{
   d5860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  String _email = param.asStr();
   d5862:	6809      	ldr	r1, [r1, #0]
   d5864:	4668      	mov	r0, sp
   d5866:	f005 fb34 	bl	daed2 <_ZN6StringC1EPK19__FlashStringHelper>
  //Add validation later
  bool checkEmail = true;
  _email.toLowerCase();
   d586a:	4668      	mov	r0, sp
   d586c:	f005 fc2f 	bl	db0ce <_ZN6String11toLowerCaseEv>
  if (checkEmail)
  {
    strcpy(state.batEmail,_email.c_str());
   d5870:	9900      	ldr	r1, [sp, #0]
   d5872:	4805      	ldr	r0, [pc, #20]	; (d5888 <BlynkWidgetWrite18+0x28>)
   d5874:	f00e f912 	bl	e3a9c <strcpy>
    saveState();
   d5878:	f7ff ffa0 	bl	d57bc <_Z9saveStatev>
  
}

BLYNK_WRITE(V18) //Email Expression
{
  String _email = param.asStr();
   d587c:	4668      	mov	r0, sp
   d587e:	f005 fae1 	bl	dae44 <_ZN6StringD1Ev>
  else
  {
    Blynk.virtualWrite(V18, "Invalid address");
  }
  
}
   d5882:	b005      	add	sp, #20
   d5884:	f85d fb04 	ldr.w	pc, [sp], #4
   d5888:	2003dc90 	.word	0x2003dc90

000d588c <BlynkWidgetWrite26>:

BLYNK_WRITE(V26) //Email Expression
{
   d588c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  String _email = param.asStr();
   d588e:	6809      	ldr	r1, [r1, #0]
   d5890:	4668      	mov	r0, sp
   d5892:	f005 fb1e 	bl	daed2 <_ZN6StringC1EPK19__FlashStringHelper>
  //Add validation later
  bool checkEmail = true;
  _email.toLowerCase();
   d5896:	4668      	mov	r0, sp
   d5898:	f005 fc19 	bl	db0ce <_ZN6String11toLowerCaseEv>
  if (checkEmail)
  {
    strcpy(state.tamperEmail,_email.c_str());
   d589c:	9900      	ldr	r1, [sp, #0]
   d589e:	4805      	ldr	r0, [pc, #20]	; (d58b4 <BlynkWidgetWrite26+0x28>)
   d58a0:	f00e f8fc 	bl	e3a9c <strcpy>
    saveState();
   d58a4:	f7ff ff8a 	bl	d57bc <_Z9saveStatev>
  
}

BLYNK_WRITE(V26) //Email Expression
{
  String _email = param.asStr();
   d58a8:	4668      	mov	r0, sp
   d58aa:	f005 facb 	bl	dae44 <_ZN6StringD1Ev>
  else
  {
    Blynk.virtualWrite(V26, "Invalid address");
  }
  
}
   d58ae:	b005      	add	sp, #20
   d58b0:	f85d fb04 	ldr.w	pc, [sp], #4
   d58b4:	2003dd90 	.word	0x2003dd90

000d58b8 <BlynkWidgetWrite25>:
  System.reset();
}

//Battery threshold
BLYNK_WRITE(V25) 
{
   d58b8:	b508      	push	{r3, lr}
    int         asInt() const       { return atoi(buff); }
    long        asLong() const      { return atol(buff); }
    //long long   asLongLong() const  { return atoll(buff); }
#ifndef BLYNK_NO_FLOAT
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
   d58ba:	6808      	ldr	r0, [r1, #0]
   d58bc:	f00d fd44 	bl	e3348 <atof>
  float thresh = param.asFloat();
  state.batThreshold=thresh;
   d58c0:	ec51 0b10 	vmov	r0, r1, d0
   d58c4:	f00d fcb4 	bl	e3230 <__aeabi_d2f>
   d58c8:	4b02      	ldr	r3, [pc, #8]	; (d58d4 <BlynkWidgetWrite25+0x1c>)
   d58ca:	6018      	str	r0, [r3, #0]
  saveState();
}
   d58cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
//Battery threshold
BLYNK_WRITE(V25) 
{
  float thresh = param.asFloat();
  state.batThreshold=thresh;
  saveState();
   d58d0:	f7ff bf74 	b.w	d57bc <_Z9saveStatev>
   d58d4:	2003de90 	.word	0x2003de90

000d58d8 <BlynkWidgetWrite17>:
}

BLYNK_WRITE(V17) 
{
   d58d8:	b508      	push	{r3, lr}
        : buff((char*)addr), len(length), buff_size(buffsize)
    {}

    const char* asStr() const       { return buff; }
    const char* asString() const    { return buff; }
    int         asInt() const       { return atoi(buff); }
   d58da:	6808      	ldr	r0, [r1, #0]
   d58dc:	f00d fd37 	bl	e334e <atoi>
   d58e0:	4b03      	ldr	r3, [pc, #12]	; (d58f0 <BlynkWidgetWrite17+0x18>)
    delay(200);  
    digitalWrite(buzzer, HIGH);
    delay(5);
    digitalWrite(buzzer, LOW);
  #endif
  if (param.asInt()==1)
   d58e2:	2801      	cmp	r0, #1
  {
    terminalDebug = false;
   d58e4:	bf0c      	ite	eq
   d58e6:	2200      	moveq	r2, #0
  }
  else
  {
    terminalDebug = true;
   d58e8:	2201      	movne	r2, #1
   d58ea:	701a      	strb	r2, [r3, #0]
   d58ec:	bd08      	pop	{r3, pc}
   d58ee:	bf00      	nop
   d58f0:	2003da45 	.word	0x2003da45

000d58f4 <BlynkWidgetWrite23>:
  }
}

// Update time zone
BLYNK_WRITE(V23) 
{
   d58f4:	b510      	push	{r4, lr}
   d58f6:	6808      	ldr	r0, [r1, #0]
    delay(200);  
    digitalWrite(buzzer, HIGH);
    delay(5);
    digitalWrite(buzzer, LOW);
    #endif
    state.deviceZone=param.asInt();
   d58f8:	4c0b      	ldr	r4, [pc, #44]	; (d5928 <BlynkWidgetWrite23+0x34>)
   d58fa:	f00d fd28 	bl	e334e <atoi>
   d58fe:	f8c4 0420 	str.w	r0, [r4, #1056]	; 0x420
#ifdef KURTDEBUG
    DEBUG_PRINT("*****Device Zone value is: ");
   d5902:	f006 fce5 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d5906:	4909      	ldr	r1, [pc, #36]	; (d592c <BlynkWidgetWrite23+0x38>)
   d5908:	f005 fc52 	bl	db1b0 <_ZN5Print5printEPKc>
    DEBUG_PRINTLN(state.deviceZone);
   d590c:	f006 fce0 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d5910:	220a      	movs	r2, #10
   d5912:	f8d4 1420 	ldr.w	r1, [r4, #1056]	; 0x420
   d5916:	f005 fcd9 	bl	db2cc <_ZN5Print7printlnEii>
#endif
    gmtOffsetValid=false;
   d591a:	4b05      	ldr	r3, [pc, #20]	; (d5930 <BlynkWidgetWrite23+0x3c>)
   d591c:	2200      	movs	r2, #0
   d591e:	701a      	strb	r2, [r3, #0]
  saveState();
}
   d5920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#ifdef KURTDEBUG
    DEBUG_PRINT("*****Device Zone value is: ");
    DEBUG_PRINTLN(state.deviceZone);
#endif
    gmtOffsetValid=false;
  saveState();
   d5924:	f7ff bf4a 	b.w	d57bc <_Z9saveStatev>
   d5928:	2003da80 	.word	0x2003da80
   d592c:	000e6c7a 	.word	0x000e6c7a
   d5930:	2003e1ac 	.word	0x2003e1ac

000d5934 <BlynkWidgetWrite24>:
}
// Update buzzerTamper flag
BLYNK_WRITE(V24) 
{
   d5934:	b510      	push	{r4, lr}
   d5936:	6808      	ldr	r0, [r1, #0]
    delay(200);  
    digitalWrite(buzzer, HIGH);
    delay(5);
    digitalWrite(buzzer, LOW);
    #endif
    state.buzzerTamper=param.asInt();
   d5938:	4c0b      	ldr	r4, [pc, #44]	; (d5968 <BlynkWidgetWrite24+0x34>)
   d593a:	f00d fd08 	bl	e334e <atoi>
   d593e:	3000      	adds	r0, #0
   d5940:	bf18      	it	ne
   d5942:	2001      	movne	r0, #1
   d5944:	f884 0417 	strb.w	r0, [r4, #1047]	; 0x417
  saveState();
   d5948:	f7ff ff38 	bl	d57bc <_Z9saveStatev>

#ifdef KURTDEBUG
    DEBUG_PRINT("*****Update buzzerTamper flag value is: ");
   d594c:	f006 fcc0 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d5950:	4906      	ldr	r1, [pc, #24]	; (d596c <BlynkWidgetWrite24+0x38>)
   d5952:	f005 fc2d 	bl	db1b0 <_ZN5Print5printEPKc>
    DEBUG_PRINTLN(state.buzzerTamper);
   d5956:	f006 fcbb 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d595a:	f894 1417 	ldrb.w	r1, [r4, #1047]	; 0x417
   d595e:	220a      	movs	r2, #10
#endif
}
   d5960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    state.buzzerTamper=param.asInt();
  saveState();

#ifdef KURTDEBUG
    DEBUG_PRINT("*****Update buzzerTamper flag value is: ");
    DEBUG_PRINTLN(state.buzzerTamper);
   d5964:	f005 bcb2 	b.w	db2cc <_ZN5Print7printlnEii>
   d5968:	2003da80 	.word	0x2003da80
   d596c:	000e6c96 	.word	0x000e6c96

000d5970 <BlynkWidgetWrite27>:
#endif
}
// Update buzzerVapor flag
BLYNK_WRITE(V27) 
{
   d5970:	b510      	push	{r4, lr}
   d5972:	6808      	ldr	r0, [r1, #0]
    delay(200);  
    digitalWrite(buzzer, HIGH);
    delay(5);
    digitalWrite(buzzer, LOW);
    #endif
    state.buzzerVapor=param.asInt();
   d5974:	4c0b      	ldr	r4, [pc, #44]	; (d59a4 <BlynkWidgetWrite27+0x34>)
   d5976:	f00d fcea 	bl	e334e <atoi>
   d597a:	3000      	adds	r0, #0
   d597c:	bf18      	it	ne
   d597e:	2001      	movne	r0, #1
   d5980:	f884 0418 	strb.w	r0, [r4, #1048]	; 0x418
  saveState();
   d5984:	f7ff ff1a 	bl	d57bc <_Z9saveStatev>
#ifdef KURTDEBUG
    DEBUG_PRINT("*****Update buzzerVapor flag value is: ");
   d5988:	f006 fca2 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d598c:	4906      	ldr	r1, [pc, #24]	; (d59a8 <BlynkWidgetWrite27+0x38>)
   d598e:	f005 fc0f 	bl	db1b0 <_ZN5Print5printEPKc>
    DEBUG_PRINTLN(state.buzzerVapor);
   d5992:	f006 fc9d 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d5996:	f894 1418 	ldrb.w	r1, [r4, #1048]	; 0x418
   d599a:	220a      	movs	r2, #10
#endif
}
   d599c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    #endif
    state.buzzerVapor=param.asInt();
  saveState();
#ifdef KURTDEBUG
    DEBUG_PRINT("*****Update buzzerVapor flag value is: ");
    DEBUG_PRINTLN(state.buzzerVapor);
   d59a0:	f005 bc94 	b.w	db2cc <_ZN5Print7printlnEii>
   d59a4:	2003da80 	.word	0x2003da80
   d59a8:	000e6cbf 	.word	0x000e6cbf

000d59ac <BlynkWidgetWrite28>:
#endif
}
// Update notifyVapor flag
BLYNK_WRITE(V28) 
{
   d59ac:	b510      	push	{r4, lr}
   d59ae:	6808      	ldr	r0, [r1, #0]
    delay(200);  
    digitalWrite(buzzer, HIGH);
    delay(5);
    digitalWrite(buzzer, LOW);
    #endif
    state.notifyVapor=param.asInt();
   d59b0:	4c0b      	ldr	r4, [pc, #44]	; (d59e0 <BlynkWidgetWrite28+0x34>)
   d59b2:	f00d fccc 	bl	e334e <atoi>
   d59b6:	3000      	adds	r0, #0
   d59b8:	bf18      	it	ne
   d59ba:	2001      	movne	r0, #1
   d59bc:	f884 0419 	strb.w	r0, [r4, #1049]	; 0x419
  saveState();
   d59c0:	f7ff fefc 	bl	d57bc <_Z9saveStatev>
#ifdef KURTDEBUG
    DEBUG_PRINT("*****Update notifyVapor flag value is: ");
   d59c4:	f006 fc84 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d59c8:	4906      	ldr	r1, [pc, #24]	; (d59e4 <BlynkWidgetWrite28+0x38>)
   d59ca:	f005 fbf1 	bl	db1b0 <_ZN5Print5printEPKc>
    DEBUG_PRINTLN(state.notifyVapor);
   d59ce:	f006 fc7f 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d59d2:	f894 1419 	ldrb.w	r1, [r4, #1049]	; 0x419
   d59d6:	220a      	movs	r2, #10
#endif
}
   d59d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    #endif
    state.notifyVapor=param.asInt();
  saveState();
#ifdef KURTDEBUG
    DEBUG_PRINT("*****Update notifyVapor flag value is: ");
    DEBUG_PRINTLN(state.notifyVapor);
   d59dc:	f005 bc76 	b.w	db2cc <_ZN5Print7printlnEii>
   d59e0:	2003da80 	.word	0x2003da80
   d59e4:	000e6ce7 	.word	0x000e6ce7

000d59e8 <BlynkWidgetWrite29>:
#endif
}
// Update notifyTamper flag
BLYNK_WRITE(V29) 
{
   d59e8:	b510      	push	{r4, lr}
   d59ea:	6808      	ldr	r0, [r1, #0]
    delay(200);  
    digitalWrite(buzzer, HIGH);
    delay(5);
    digitalWrite(buzzer, LOW);
    #endif
    state.notifyTamper=param.asInt();
   d59ec:	4c0b      	ldr	r4, [pc, #44]	; (d5a1c <BlynkWidgetWrite29+0x34>)
   d59ee:	f00d fcae 	bl	e334e <atoi>
   d59f2:	3000      	adds	r0, #0
   d59f4:	bf18      	it	ne
   d59f6:	2001      	movne	r0, #1
   d59f8:	f884 041a 	strb.w	r0, [r4, #1050]	; 0x41a
  saveState();
   d59fc:	f7ff fede 	bl	d57bc <_Z9saveStatev>
#ifdef KURTDEBUG
    DEBUG_PRINT("*****Update notifyTamper flag value is: ");
   d5a00:	f006 fc66 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d5a04:	4906      	ldr	r1, [pc, #24]	; (d5a20 <BlynkWidgetWrite29+0x38>)
   d5a06:	f005 fbd3 	bl	db1b0 <_ZN5Print5printEPKc>
    DEBUG_PRINTLN(state.notifyTamper);
   d5a0a:	f006 fc61 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d5a0e:	f894 141a 	ldrb.w	r1, [r4, #1050]	; 0x41a
   d5a12:	220a      	movs	r2, #10
#endif
}
   d5a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    #endif
    state.notifyTamper=param.asInt();
  saveState();
#ifdef KURTDEBUG
    DEBUG_PRINT("*****Update notifyTamper flag value is: ");
    DEBUG_PRINTLN(state.notifyTamper);
   d5a18:	f005 bc58 	b.w	db2cc <_ZN5Print7printlnEii>
   d5a1c:	2003da80 	.word	0x2003da80
   d5a20:	000e6d0f 	.word	0x000e6d0f

000d5a24 <BlynkWidgetWrite31>:
#endif
}

//Accelerometer threshold
BLYNK_WRITE(V31) 
{
   d5a24:	b570      	push	{r4, r5, r6, lr}
   d5a26:	6808      	ldr	r0, [r1, #0]
  int thresh = param.asInt();
  int oldvalue=state.ActivityThreshold;
   d5a28:	4c1e      	ldr	r4, [pc, #120]	; (d5aa4 <BlynkWidgetWrite31+0x80>)
   d5a2a:	f00d fc90 	bl	e334e <atoi>
   d5a2e:	f8d4 641c 	ldr.w	r6, [r4, #1052]	; 0x41c
   d5a32:	4605      	mov	r5, r0

#ifdef KURTDEBUG
    DEBUG_PRINT("*****Update Accelerometer threshold value is: ");
   d5a34:	f006 fc4c 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d5a38:	491b      	ldr	r1, [pc, #108]	; (d5aa8 <BlynkWidgetWrite31+0x84>)
   d5a3a:	f005 fbb9 	bl	db1b0 <_ZN5Print5printEPKc>
    DEBUG_PRINTLN(thresh);
   d5a3e:	f006 fc47 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d5a42:	220a      	movs	r2, #10
   d5a44:	4629      	mov	r1, r5
   d5a46:	f005 fc41 	bl	db2cc <_ZN5Print7printlnEii>
#endif
  state.ActivityThreshold=100;
  if (thresh==3)
   d5a4a:	2d03      	cmp	r5, #3
   d5a4c:	4623      	mov	r3, r4
   d5a4e:	d101      	bne.n	d5a54 <BlynkWidgetWrite31+0x30>
  	state.ActivityThreshold=144;
   d5a50:	2290      	movs	r2, #144	; 0x90
   d5a52:	e003      	b.n	d5a5c <BlynkWidgetWrite31+0x38>
  if (thresh==2)
  	state.ActivityThreshold=100;
  if (thresh==1)
   d5a54:	2d01      	cmp	r5, #1

#ifdef KURTDEBUG
    DEBUG_PRINT("*****Update Accelerometer threshold value is: ");
    DEBUG_PRINTLN(thresh);
#endif
  state.ActivityThreshold=100;
   d5a56:	bf14      	ite	ne
   d5a58:	2264      	movne	r2, #100	; 0x64
  if (thresh==3)
  	state.ActivityThreshold=144;
  if (thresh==2)
  	state.ActivityThreshold=100;
  if (thresh==1)
  	state.ActivityThreshold=72;
   d5a5a:	2248      	moveq	r2, #72	; 0x48
   d5a5c:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  // If value changed since the acceleromter will need to be reinitalized save the new value and reset
  if (state.ActivityThreshold != oldvalue)
   d5a60:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   d5a64:	429e      	cmp	r6, r3
   d5a66:	d01b      	beq.n	d5aa0 <BlynkWidgetWrite31+0x7c>
  {
#ifdef KURTDEBUG
    DEBUG_PRINT("Update Accelerometer value is: ");
   d5a68:	f006 fc32 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d5a6c:	490f      	ldr	r1, [pc, #60]	; (d5aac <BlynkWidgetWrite31+0x88>)
   d5a6e:	f005 fb9f 	bl	db1b0 <_ZN5Print5printEPKc>
    DEBUG_PRINTLN(state.ActivityThreshold);
   d5a72:	f006 fc2d 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d5a76:	4b0b      	ldr	r3, [pc, #44]	; (d5aa4 <BlynkWidgetWrite31+0x80>)
   d5a78:	220a      	movs	r2, #10
   d5a7a:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
   d5a7e:	f005 fc25 	bl	db2cc <_ZN5Print7printlnEii>
    DEBUG_PRINT("Will reset system ");
   d5a82:	f006 fc25 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d5a86:	490a      	ldr	r1, [pc, #40]	; (d5ab0 <BlynkWidgetWrite31+0x8c>)
   d5a88:	f005 fb92 	bl	db1b0 <_ZN5Print5printEPKc>
#endif
    saveState();
   d5a8c:	f7ff fe96 	bl	d57bc <_Z9saveStatev>
    delay(4000);
   d5a90:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
   d5a94:	f005 feb0 	bl	db7f8 <delay>
    System.reset();
  }
}
   d5a98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    DEBUG_PRINTLN(state.ActivityThreshold);
    DEBUG_PRINT("Will reset system ");
#endif
    saveState();
    delay(4000);
    System.reset();
   d5a9c:	f005 b916 	b.w	daccc <_ZN11SystemClass5resetEv>
   d5aa0:	bd70      	pop	{r4, r5, r6, pc}
   d5aa2:	bf00      	nop
   d5aa4:	2003da80 	.word	0x2003da80
   d5aa8:	000e6d38 	.word	0x000e6d38
   d5aac:	000e6d67 	.word	0x000e6d67
   d5ab0:	000e6d87 	.word	0x000e6d87

000d5ab4 <BlynkWidgetWrite32>:
  }
}

// Update notifyBattery flag
BLYNK_WRITE(V32) 
{
   d5ab4:	b510      	push	{r4, lr}
   d5ab6:	6808      	ldr	r0, [r1, #0]
    delay(200);  
    digitalWrite(buzzer, HIGH);
    delay(5);
    digitalWrite(buzzer, LOW);
    #endif
    state.notifyBattery=param.asInt();
   d5ab8:	4c0b      	ldr	r4, [pc, #44]	; (d5ae8 <BlynkWidgetWrite32+0x34>)
   d5aba:	f00d fc48 	bl	e334e <atoi>
   d5abe:	3000      	adds	r0, #0
   d5ac0:	bf18      	it	ne
   d5ac2:	2001      	movne	r0, #1
   d5ac4:	f884 041b 	strb.w	r0, [r4, #1051]	; 0x41b
  saveState();
   d5ac8:	f7ff fe78 	bl	d57bc <_Z9saveStatev>
#ifdef KURTDEBUG
    DEBUG_PRINT("Update notifyBattery flag value is: ");
   d5acc:	f006 fc00 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d5ad0:	4906      	ldr	r1, [pc, #24]	; (d5aec <BlynkWidgetWrite32+0x38>)
   d5ad2:	f005 fb6d 	bl	db1b0 <_ZN5Print5printEPKc>
    DEBUG_PRINTLN(state.notifyBattery);
   d5ad6:	f006 fbfb 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d5ada:	f894 141b 	ldrb.w	r1, [r4, #1051]	; 0x41b
   d5ade:	220a      	movs	r2, #10
#endif
}
   d5ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    #endif
    state.notifyBattery=param.asInt();
  saveState();
#ifdef KURTDEBUG
    DEBUG_PRINT("Update notifyBattery flag value is: ");
    DEBUG_PRINTLN(state.notifyBattery);
   d5ae4:	f005 bbf2 	b.w	db2cc <_ZN5Print7printlnEii>
   d5ae8:	2003da80 	.word	0x2003da80
   d5aec:	000e6d9a 	.word	0x000e6d9a

000d5af0 <_Z12alertChangedv>:
  } 
}

// Checks if alert status changed and resets lastAlert if it has
bool alertChanged()
{
   d5af0:	b508      	push	{r3, lr}
  if (currentAlert==state.lastAlert)
   d5af2:	4b07      	ldr	r3, [pc, #28]	; (d5b10 <_Z12alertChangedv+0x20>)
   d5af4:	781a      	ldrb	r2, [r3, #0]
   d5af6:	4b07      	ldr	r3, [pc, #28]	; (d5b14 <_Z12alertChangedv+0x24>)
   d5af8:	f893 1414 	ldrb.w	r1, [r3, #1044]	; 0x414
   d5afc:	4291      	cmp	r1, r2
   d5afe:	d005      	beq.n	d5b0c <_Z12alertChangedv+0x1c>
  {
    return false;
  }
  else
  {
    state.lastAlert=currentAlert;
   d5b00:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    saveState();
   d5b04:	f7ff fe5a 	bl	d57bc <_Z9saveStatev>
    return true;
   d5b08:	2001      	movs	r0, #1
   d5b0a:	bd08      	pop	{r3, pc}
// Checks if alert status changed and resets lastAlert if it has
bool alertChanged()
{
  if (currentAlert==state.lastAlert)
  {
    return false;
   d5b0c:	2000      	movs	r0, #0
  {
    state.lastAlert=currentAlert;
    saveState();
    return true;
  }
}
   d5b0e:	bd08      	pop	{r3, pc}
   d5b10:	2003e21c 	.word	0x2003e21c
   d5b14:	2003da80 	.word	0x2003da80

000d5b18 <_Z15batAlertChangedv>:

// Checks if alert status changed and resets lastAlert if it has
bool batAlertChanged()
{
   d5b18:	b508      	push	{r3, lr}
  if (batCurrentAlert==state.batLastAlert)
   d5b1a:	4b07      	ldr	r3, [pc, #28]	; (d5b38 <_Z15batAlertChangedv+0x20>)
   d5b1c:	781a      	ldrb	r2, [r3, #0]
   d5b1e:	4b07      	ldr	r3, [pc, #28]	; (d5b3c <_Z15batAlertChangedv+0x24>)
   d5b20:	f893 1415 	ldrb.w	r1, [r3, #1045]	; 0x415
   d5b24:	4291      	cmp	r1, r2
   d5b26:	d005      	beq.n	d5b34 <_Z15batAlertChangedv+0x1c>
  {
    return false;
  }
  else
  {
    state.batLastAlert=batCurrentAlert;
   d5b28:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    saveState();
   d5b2c:	f7ff fe46 	bl	d57bc <_Z9saveStatev>
    return true;
   d5b30:	2001      	movs	r0, #1
   d5b32:	bd08      	pop	{r3, pc}
// Checks if alert status changed and resets lastAlert if it has
bool batAlertChanged()
{
  if (batCurrentAlert==state.batLastAlert)
  {
    return false;
   d5b34:	2000      	movs	r0, #0
  {
    state.batLastAlert=batCurrentAlert;
    saveState();
    return true;
  }
}
   d5b36:	bd08      	pop	{r3, pc}
   d5b38:	2003decd 	.word	0x2003decd
   d5b3c:	2003da80 	.word	0x2003da80

000d5b40 <_Z18tamperAlertChangedv>:

// Checks if tamper alert status changed 
bool tamperAlertChanged()
{
   d5b40:	b508      	push	{r3, lr}
  if (tamperCurrentAlert==state.tamperLastAlert)
   d5b42:	4b07      	ldr	r3, [pc, #28]	; (d5b60 <_Z18tamperAlertChangedv+0x20>)
   d5b44:	781a      	ldrb	r2, [r3, #0]
   d5b46:	4b07      	ldr	r3, [pc, #28]	; (d5b64 <_Z18tamperAlertChangedv+0x24>)
   d5b48:	f893 1416 	ldrb.w	r1, [r3, #1046]	; 0x416
   d5b4c:	4291      	cmp	r1, r2
   d5b4e:	d005      	beq.n	d5b5c <_Z18tamperAlertChangedv+0x1c>
  {
    return false;
  }
  else
  {
    state.tamperLastAlert=tamperCurrentAlert;
   d5b50:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
    saveState();
   d5b54:	f7ff fe32 	bl	d57bc <_Z9saveStatev>
    return true;
   d5b58:	2001      	movs	r0, #1
   d5b5a:	bd08      	pop	{r3, pc}
// Checks if tamper alert status changed 
bool tamperAlertChanged()
{
  if (tamperCurrentAlert==state.tamperLastAlert)
  {
    return false;
   d5b5c:	2000      	movs	r0, #0
  {
    state.tamperLastAlert=tamperCurrentAlert;
    saveState();
    return true;
  }
}
   d5b5e:	bd08      	pop	{r3, pc}
   d5b60:	2003decc 	.word	0x2003decc
   d5b64:	2003da80 	.word	0x2003da80

000d5b68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d5b68:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d5b6a:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d5b6c:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d5b6e:	b17c      	cbz	r4, d5b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5b70:	6863      	ldr	r3, [r4, #4]
   d5b72:	3b01      	subs	r3, #1
   d5b74:	6063      	str	r3, [r4, #4]
   d5b76:	b95b      	cbnz	r3, d5b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d5b78:	6823      	ldr	r3, [r4, #0]
   d5b7a:	4620      	mov	r0, r4
   d5b7c:	689b      	ldr	r3, [r3, #8]
   d5b7e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5b80:	68a3      	ldr	r3, [r4, #8]
   d5b82:	3b01      	subs	r3, #1
   d5b84:	60a3      	str	r3, [r4, #8]
   d5b86:	b91b      	cbnz	r3, d5b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d5b88:	6823      	ldr	r3, [r4, #0]
   d5b8a:	4620      	mov	r0, r4
   d5b8c:	68db      	ldr	r3, [r3, #12]
   d5b8e:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d5b90:	4628      	mov	r0, r5
   d5b92:	bd38      	pop	{r3, r4, r5, pc}

000d5b94 <_Z23publishGMTOffsetRequestv>:
  }
  return connected;
}

void publishGMTOffsetRequest()
{
   d5b94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // Send to https://timezonedb.com webhook for gmtOffset
  DEBUG_PRINT("publishGMTOffsetRequest Device Zone value is: ");
  DEBUG_PRINTLN(state.deviceZone);
   d5b96:	4c19      	ldr	r4, [pc, #100]	; (d5bfc <_Z23publishGMTOffsetRequestv+0x68>)
}

void publishGMTOffsetRequest()
{
  // Send to https://timezonedb.com webhook for gmtOffset
  DEBUG_PRINT("publishGMTOffsetRequest Device Zone value is: ");
   d5b98:	f006 fb9a 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d5b9c:	4918      	ldr	r1, [pc, #96]	; (d5c00 <_Z23publishGMTOffsetRequestv+0x6c>)
   d5b9e:	f005 fb07 	bl	db1b0 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(state.deviceZone);
   d5ba2:	f006 fb95 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d5ba6:	220a      	movs	r2, #10
   d5ba8:	f8d4 1420 	ldr.w	r1, [r4, #1056]	; 0x420
   d5bac:	f005 fb8e 	bl	db2cc <_ZN5Print7printlnEii>
  switch (state.deviceZone)
   d5bb0:	f8d4 1420 	ldr.w	r1, [r4, #1056]	; 0x420
   d5bb4:	4b13      	ldr	r3, [pc, #76]	; (d5c04 <_Z23publishGMTOffsetRequestv+0x70>)
   d5bb6:	2200      	movs	r2, #0
   d5bb8:	2903      	cmp	r1, #3
   d5bba:	d812      	bhi.n	d5be2 <_Z23publishGMTOffsetRequestv+0x4e>
   d5bbc:	e8df f001 	tbb	[pc, r1]
   d5bc0:	0c070211 	.word	0x0c070211
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d5bc4:	781b      	ldrb	r3, [r3, #0]
      // America/New_York
      Particle.publish("gmtOffset", "America/New_York", PRIVATE);
      break;
    case 1:
      // America/Chicago
      Particle.publish("gmtOffset", "America/Chicago", PRIVATE);
   d5bc6:	f88d 2000 	strb.w	r2, [sp]
   d5bca:	4a0f      	ldr	r2, [pc, #60]	; (d5c08 <_Z23publishGMTOffsetRequestv+0x74>)
   d5bcc:	e00d      	b.n	d5bea <_Z23publishGMTOffsetRequestv+0x56>
   d5bce:	781b      	ldrb	r3, [r3, #0]
      break;
    case 2:
      // America/Phoenix
      Particle.publish("gmtOffset", "America/Phoenix", PRIVATE);
   d5bd0:	f88d 2000 	strb.w	r2, [sp]
   d5bd4:	4a0d      	ldr	r2, [pc, #52]	; (d5c0c <_Z23publishGMTOffsetRequestv+0x78>)
   d5bd6:	e008      	b.n	d5bea <_Z23publishGMTOffsetRequestv+0x56>
   d5bd8:	781b      	ldrb	r3, [r3, #0]
      break;
    case 3:
      // America/Los_Angeles
      Particle.publish("gmtOffset", "America/Los_Angeles", PRIVATE);
   d5bda:	f88d 2000 	strb.w	r2, [sp]
   d5bde:	4a0c      	ldr	r2, [pc, #48]	; (d5c10 <_Z23publishGMTOffsetRequestv+0x7c>)
   d5be0:	e003      	b.n	d5bea <_Z23publishGMTOffsetRequestv+0x56>
   d5be2:	781b      	ldrb	r3, [r3, #0]
      break;
    default:
      // America/New_York
      Particle.publish("gmtOffset", "America/New_York", PRIVATE);  
   d5be4:	f88d 2000 	strb.w	r2, [sp]
   d5be8:	4a0a      	ldr	r2, [pc, #40]	; (d5c14 <_Z23publishGMTOffsetRequestv+0x80>)
   d5bea:	490b      	ldr	r1, [pc, #44]	; (d5c18 <_Z23publishGMTOffsetRequestv+0x84>)
   d5bec:	a802      	add	r0, sp, #8
   d5bee:	f7ff fc11 	bl	d5414 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.24.constprop.29>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5bf2:	a803      	add	r0, sp, #12
   d5bf4:	f7ff ffb8 	bl	d5b68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
}
   d5bf8:	b004      	add	sp, #16
   d5bfa:	bd10      	pop	{r4, pc}
   d5bfc:	2003da80 	.word	0x2003da80
   d5c00:	000e6dfd 	.word	0x000e6dfd
   d5c04:	2003d714 	.word	0x2003d714
   d5c08:	000e6e3d 	.word	0x000e6e3d
   d5c0c:	000e6e4d 	.word	0x000e6e4d
   d5c10:	000e6e5d 	.word	0x000e6e5d
   d5c14:	000e6e2c 	.word	0x000e6e2c
   d5c18:	000e772b 	.word	0x000e772b

000d5c1c <_ZN22BlynkTransportParticleD1Ev>:
#define BlynkParticle_h

#include "BlynkApiParticle.h"
#include "Blynk/BlynkProtocol.h"

class BlynkTransportParticle
   d5c1c:	b510      	push	{r4, lr}
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d5c1e:	4b04      	ldr	r3, [pc, #16]	; (d5c30 <_ZN22BlynkTransportParticleD1Ev+0x14>)
   d5c20:	4604      	mov	r4, r0
   d5c22:	f840 3b18 	str.w	r3, [r0], #24
   d5c26:	f7ff ff9f 	bl	d5b68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5c2a:	4620      	mov	r0, r4
   d5c2c:	bd10      	pop	{r4, pc}
   d5c2e:	bf00      	nop
   d5c30:	000e7f2c 	.word	0x000e7f2c

000d5c34 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
   d5c34:	b508      	push	{r3, lr}
        state = CONNECTING;
   d5c36:	2300      	movs	r3, #0
   d5c38:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d5c3a:	6800      	ldr	r0, [r0, #0]
   d5c3c:	f006 feb4 	bl	dc9a8 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   d5c40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
private:

    void internalReconnect() {
        state = CONNECTING;
        conn.disconnect();
        BlynkOnDisconnected();
   d5c44:	f004 bbea 	b.w	da41c <BlynkNoOpCbk>

000d5c48 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d5c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d5c4c:	188e      	adds	r6, r1, r2
   d5c4e:	b08e      	sub	sp, #56	; 0x38
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   d5c50:	42b1      	cmp	r1, r6
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d5c52:	4680      	mov	r8, r0
   d5c54:	460d      	mov	r5, r1
   d5c56:	4617      	mov	r7, r2
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d5c58:	9105      	str	r1, [sp, #20]
   d5c5a:	9606      	str	r6, [sp, #24]
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   d5c5c:	f080 813d 	bcs.w	d5eda <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
   d5c60:	880b      	ldrh	r3, [r1, #0]
   d5c62:	f8ad 3012 	strh.w	r3, [sp, #18]
    if (++it >= param.end())
   d5c66:	a805      	add	r0, sp, #20
   d5c68:	f7ff fc3c 	bl	d54e4 <_ZN10BlynkParam8iteratorppEv>
   d5c6c:	6803      	ldr	r3, [r0, #0]
   d5c6e:	429e      	cmp	r6, r3
   d5c70:	f240 8133 	bls.w	d5eda <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
   d5c74:	9805      	ldr	r0, [sp, #20]
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
   d5c76:	7803      	ldrb	r3, [r0, #0]
   d5c78:	2b41      	cmp	r3, #65	; 0x41
   d5c7a:	d112      	bne.n	d5ca2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x5a>
   d5c7c:	3001      	adds	r0, #1
   d5c7e:	f00d fb66 	bl	e334e <atoi>
   d5c82:	2805      	cmp	r0, #5
   d5c84:	dd01      	ble.n	d5c8a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x42>
   d5c86:	24ff      	movs	r4, #255	; 0xff
   d5c88:	e00f      	b.n	d5caa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x62>
   d5c8a:	9805      	ldr	r0, [sp, #20]
   d5c8c:	3001      	adds	r0, #1
   d5c8e:	f00d fb5e 	bl	e334e <atoi>
   d5c92:	2800      	cmp	r0, #0
   d5c94:	dbf7      	blt.n	d5c86 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x3e>
   d5c96:	9805      	ldr	r0, [sp, #20]
   d5c98:	3001      	adds	r0, #1
   d5c9a:	f00d fb58 	bl	e334e <atoi>
   d5c9e:	300e      	adds	r0, #14
   d5ca0:	e002      	b.n	d5ca8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x60>
   d5ca2:	a805      	add	r0, sp, #20
   d5ca4:	f7ff fc14 	bl	d54d0 <_ZNK10BlynkParam8iterator5asIntEv>
   d5ca8:	b2c4      	uxtb	r4, r0

    switch(cmd16) {
   d5caa:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   d5cae:	f247 2276 	movw	r2, #29302	; 0x7276
   d5cb2:	4293      	cmp	r3, r2
   d5cb4:	f000 80b7 	beq.w	d5e26 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1de>
   d5cb8:	d80d      	bhi.n	d5cd6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x8e>
   d5cba:	f247 2261 	movw	r2, #29281	; 0x7261
   d5cbe:	4293      	cmp	r3, r2
   d5cc0:	d07d      	beq.n	d5dbe <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x176>
   d5cc2:	f247 2264 	movw	r2, #29284	; 0x7264
   d5cc6:	4293      	cmp	r3, r2
   d5cc8:	d051      	beq.n	d5d6e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x126>
   d5cca:	f646 5270 	movw	r2, #28016	; 0x6d70
   d5cce:	4293      	cmp	r3, r2
   d5cd0:	f040 80d4 	bne.w	d5e7c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x234>
   d5cd4:	e027      	b.n	d5d26 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xde>
   d5cd6:	f247 7264 	movw	r2, #30564	; 0x7764
   d5cda:	4293      	cmp	r3, r2
   d5cdc:	d059      	beq.n	d5d92 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x14a>
   d5cde:	f247 7276 	movw	r2, #30582	; 0x7776
   d5ce2:	4293      	cmp	r3, r2
   d5ce4:	f000 80b0 	beq.w	d5e48 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x200>
   d5ce8:	f247 7261 	movw	r2, #30561	; 0x7761
   d5cec:	4293      	cmp	r3, r2
   d5cee:	f040 80c5 	bne.w	d5e7c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x234>
   d5cf2:	e085      	b.n	d5e00 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1b8>

#ifndef BLYNK_NO_BUILTIN

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   d5cf4:	7803      	ldrb	r3, [r0, #0]
   d5cf6:	2b41      	cmp	r3, #65	; 0x41
   d5cf8:	d125      	bne.n	d5d46 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xfe>
   d5cfa:	3001      	adds	r0, #1
   d5cfc:	f00d fb27 	bl	e334e <atoi>
   d5d00:	2805      	cmp	r0, #5
   d5d02:	dd14      	ble.n	d5d2e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xe6>
   d5d04:	24ff      	movs	r4, #255	; 0xff
            ++it;
   d5d06:	a805      	add	r0, sp, #20
   d5d08:	f7ff fbec 	bl	d54e4 <_ZN10BlynkParam8iteratorppEv>
   d5d0c:	9d05      	ldr	r5, [sp, #20]
            if (!strcmp(it.asStr(), "in")) {
   d5d0e:	4974      	ldr	r1, [pc, #464]	; (d5ee0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x298>)
   d5d10:	4628      	mov	r0, r5
   d5d12:	f00d feb9 	bl	e3a88 <strcmp>
   d5d16:	4601      	mov	r1, r0
   d5d18:	b9d0      	cbnz	r0, d5d50 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x108>
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
                pinMode(pin, OUTPUT);
   d5d1a:	4620      	mov	r0, r4
   d5d1c:	f007 f8cc 	bl	dceb8 <pinMode>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   d5d20:	a805      	add	r0, sp, #20
   d5d22:	f7ff fbdf 	bl	d54e4 <_ZN10BlynkParam8iteratorppEv>
   d5d26:	9805      	ldr	r0, [sp, #20]
    switch(cmd16) {

#ifndef BLYNK_NO_BUILTIN

    case BLYNK_HW_PM: {
        while (it < param.end()) {
   d5d28:	4286      	cmp	r6, r0
   d5d2a:	d8e3      	bhi.n	d5cf4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xac>
   d5d2c:	e0d5      	b.n	d5eda <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   d5d2e:	9805      	ldr	r0, [sp, #20]
   d5d30:	3001      	adds	r0, #1
   d5d32:	f00d fb0c 	bl	e334e <atoi>
   d5d36:	2800      	cmp	r0, #0
   d5d38:	dbe4      	blt.n	d5d04 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xbc>
   d5d3a:	9805      	ldr	r0, [sp, #20]
   d5d3c:	3001      	adds	r0, #1
   d5d3e:	f00d fb06 	bl	e334e <atoi>
   d5d42:	300e      	adds	r0, #14
   d5d44:	e002      	b.n	d5d4c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x104>
   d5d46:	a805      	add	r0, sp, #20
   d5d48:	f7ff fbc2 	bl	d54d0 <_ZNK10BlynkParam8iterator5asIntEv>
   d5d4c:	b2c4      	uxtb	r4, r0
   d5d4e:	e7da      	b.n	d5d06 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xbe>
            ++it;
            if (!strcmp(it.asStr(), "in")) {
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   d5d50:	4964      	ldr	r1, [pc, #400]	; (d5ee4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x29c>)
   d5d52:	4628      	mov	r0, r5
   d5d54:	f00d fe98 	bl	e3a88 <strcmp>
   d5d58:	2800      	cmp	r0, #0
   d5d5a:	f000 80a4 	beq.w	d5ea6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x25e>
   d5d5e:	4962      	ldr	r1, [pc, #392]	; (d5ee8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x2a0>)
   d5d60:	4628      	mov	r0, r5
   d5d62:	f00d fe91 	bl	e3a88 <strcmp>
   d5d66:	2800      	cmp	r0, #0
   d5d68:	f000 809d 	beq.w	d5ea6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x25e>
   d5d6c:	e09d      	b.n	d5eaa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x262>
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d5d6e:	ab0a      	add	r3, sp, #40	; 0x28
   d5d70:	9307      	str	r3, [sp, #28]
        }
    } break;
    case BLYNK_HW_DR: {
        char mem[16];
        BlynkParam rsp(mem, 0, sizeof(mem));
        rsp.add("dw");
   d5d72:	a807      	add	r0, sp, #28
   d5d74:	2310      	movs	r3, #16
   d5d76:	2500      	movs	r5, #0
   d5d78:	495c      	ldr	r1, [pc, #368]	; (d5eec <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x2a4>)
   d5d7a:	9309      	str	r3, [sp, #36]	; 0x24
   d5d7c:	9508      	str	r5, [sp, #32]
   d5d7e:	f7ff fbc0 	bl	d5502 <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   d5d82:	a807      	add	r0, sp, #28
   d5d84:	4621      	mov	r1, r4
   d5d86:	f7ff fbd9 	bl	d553c <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   d5d8a:	4620      	mov	r0, r4
   d5d8c:	f007 f8be 	bl	dcf0c <digitalRead>
   d5d90:	e026      	b.n	d5de0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x198>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
    } break;
    case BLYNK_HW_DW: {
        // Should be 1 parameter (value)
        if (++it >= param.end())
   d5d92:	a805      	add	r0, sp, #20
   d5d94:	f7ff fba6 	bl	d54e4 <_ZN10BlynkParam8iteratorppEv>
   d5d98:	6803      	ldr	r3, [r0, #0]
   d5d9a:	429e      	cmp	r6, r3
   d5d9c:	f240 809d 	bls.w	d5eda <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
#ifdef ESP8266
        // Disable PWM...
        analogWrite(pin, 0);
#endif
#ifndef BLYNK_MINIMIZE_PINMODE_USAGE
        pinMode(pin, OUTPUT);
   d5da0:	b2a4      	uxth	r4, r4
   d5da2:	2101      	movs	r1, #1
   d5da4:	4620      	mov	r0, r4
   d5da6:	f007 f887 	bl	dceb8 <pinMode>
#endif
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   d5daa:	a805      	add	r0, sp, #20
   d5dac:	f7ff fb90 	bl	d54d0 <_ZNK10BlynkParam8iterator5asIntEv>
   d5db0:	1c01      	adds	r1, r0, #0
   d5db2:	bf18      	it	ne
   d5db4:	2101      	movne	r1, #1
   d5db6:	4620      	mov	r0, r4
   d5db8:	f007 f88f 	bl	dceda <digitalWrite>
    } break;
   d5dbc:	e08d      	b.n	d5eda <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
   d5dbe:	ab0a      	add	r3, sp, #40	; 0x28
   d5dc0:	9307      	str	r3, [sp, #28]
    case BLYNK_HW_AR: {
        char mem[16];
        BlynkParam rsp(mem, 0, sizeof(mem));
        rsp.add("aw");
   d5dc2:	494b      	ldr	r1, [pc, #300]	; (d5ef0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x2a8>)
   d5dc4:	2310      	movs	r3, #16
   d5dc6:	a807      	add	r0, sp, #28
   d5dc8:	2500      	movs	r5, #0
   d5dca:	9309      	str	r3, [sp, #36]	; 0x24
   d5dcc:	9508      	str	r5, [sp, #32]
   d5dce:	f7ff fb98 	bl	d5502 <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   d5dd2:	a807      	add	r0, sp, #28
   d5dd4:	4621      	mov	r1, r4
   d5dd6:	f7ff fbb1 	bl	d553c <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   d5dda:	4620      	mov	r0, r4
   d5ddc:	f007 f8a9 	bl	dcf32 <analogRead>
   d5de0:	4601      	mov	r1, r0
   d5de2:	a807      	add	r0, sp, #28
   d5de4:	f7ff fbbc 	bl	d5560 <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   d5de8:	9b08      	ldr	r3, [sp, #32]
   d5dea:	9502      	str	r5, [sp, #8]
   d5dec:	3b01      	subs	r3, #1
   d5dee:	9300      	str	r3, [sp, #0]
   d5df0:	9b07      	ldr	r3, [sp, #28]
   d5df2:	9501      	str	r5, [sp, #4]
   d5df4:	462a      	mov	r2, r5
   d5df6:	2114      	movs	r1, #20
   d5df8:	4640      	mov	r0, r8
   d5dfa:	f000 fb73 	bl	d64e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    } break;
   d5dfe:	e06c      	b.n	d5eda <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
    case BLYNK_HW_AW: {
        // Should be 1 parameter (value)
        if (++it >= param.end())
   d5e00:	a805      	add	r0, sp, #20
   d5e02:	f7ff fb6f 	bl	d54e4 <_ZN10BlynkParam8iteratorppEv>
   d5e06:	6803      	ldr	r3, [r0, #0]
   d5e08:	429e      	cmp	r6, r3
   d5e0a:	d966      	bls.n	d5eda <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
            return;

#ifndef BLYNK_MINIMIZE_PINMODE_USAGE
        pinMode(pin, OUTPUT);
   d5e0c:	b2a4      	uxth	r4, r4
   d5e0e:	2101      	movs	r1, #1
   d5e10:	4620      	mov	r0, r4
   d5e12:	f007 f851 	bl	dceb8 <pinMode>
#endif
        analogWrite(pin, it.asInt());
   d5e16:	a805      	add	r0, sp, #20
   d5e18:	f7ff fb5a 	bl	d54d0 <_ZNK10BlynkParam8iterator5asIntEv>
   d5e1c:	4601      	mov	r1, r0
   d5e1e:	4620      	mov	r0, r4
   d5e20:	f007 f89e 	bl	dcf60 <_Z11analogWritetm>
    } break;
   d5e24:	e059      	b.n	d5eda <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>

#endif

    case BLYNK_HW_VR: {
        BlynkReq req = { pin };
   d5e26:	ad0e      	add	r5, sp, #56	; 0x38
        WidgetReadHandler handler = GetReadHandler(pin);
   d5e28:	4620      	mov	r0, r4
    } break;

#endif

    case BLYNK_HW_VR: {
        BlynkReq req = { pin };
   d5e2a:	f805 4d10 	strb.w	r4, [r5, #-16]!
        WidgetReadHandler handler = GetReadHandler(pin);
   d5e2e:	f004 faf7 	bl	da420 <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   d5e32:	4603      	mov	r3, r0
            handler(req);
   d5e34:	4628      	mov	r0, r5
#endif

    case BLYNK_HW_VR: {
        BlynkReq req = { pin };
        WidgetReadHandler handler = GetReadHandler(pin);
        if (handler && (handler != BlynkWidgetRead)) {
   d5e36:	b123      	cbz	r3, d5e42 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1fa>
   d5e38:	4a2e      	ldr	r2, [pc, #184]	; (d5ef4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x2ac>)
   d5e3a:	4293      	cmp	r3, r2
   d5e3c:	d001      	beq.n	d5e42 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1fa>
            handler(req);
   d5e3e:	4798      	blx	r3
   d5e40:	e04b      	b.n	d5eda <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
        } else {
            BlynkWidgetReadDefault(req);
   d5e42:	f004 fae9 	bl	da418 <BlynkWidgetRead>
        }
    } break;
   d5e46:	e048      	b.n	d5eda <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
    case BLYNK_HW_VW: {
        ++it;
   d5e48:	a805      	add	r0, sp, #20
   d5e4a:	f7ff fb4b 	bl	d54e4 <_ZN10BlynkParam8iteratorppEv>
   d5e4e:	9b05      	ldr	r3, [sp, #20]
    };

public:
    explicit
    BlynkParam(const void* addr, size_t length)
        : buff((char*)addr), len(length), buff_size(length)
   d5e50:	930a      	str	r3, [sp, #40]	; 0x28
        char* start = (char*)it.asStr();
        BlynkParam param2(start, len - (start - (char*)buff));
   d5e52:	1b5d      	subs	r5, r3, r5
   d5e54:	1b7f      	subs	r7, r7, r5
        BlynkReq req = { pin };
        WidgetWriteHandler handler = GetWriteHandler(pin);
   d5e56:	4620      	mov	r0, r4
   d5e58:	970b      	str	r7, [sp, #44]	; 0x2c
   d5e5a:	970c      	str	r7, [sp, #48]	; 0x30
    } break;
    case BLYNK_HW_VW: {
        ++it;
        char* start = (char*)it.asStr();
        BlynkParam param2(start, len - (start - (char*)buff));
        BlynkReq req = { pin };
   d5e5c:	f88d 401c 	strb.w	r4, [sp, #28]
        WidgetWriteHandler handler = GetWriteHandler(pin);
   d5e60:	f004 fae8 	bl	da434 <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   d5e64:	4603      	mov	r3, r0
            handler(req, param2);
   d5e66:	a90a      	add	r1, sp, #40	; 0x28
   d5e68:	a807      	add	r0, sp, #28
        ++it;
        char* start = (char*)it.asStr();
        BlynkParam param2(start, len - (start - (char*)buff));
        BlynkReq req = { pin };
        WidgetWriteHandler handler = GetWriteHandler(pin);
        if (handler && (handler != BlynkWidgetWrite)) {
   d5e6a:	b123      	cbz	r3, d5e76 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x22e>
   d5e6c:	4a22      	ldr	r2, [pc, #136]	; (d5ef8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x2b0>)
   d5e6e:	4293      	cmp	r3, r2
   d5e70:	d001      	beq.n	d5e76 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x22e>
            handler(req, param2);
   d5e72:	4798      	blx	r3
   d5e74:	e031      	b.n	d5eda <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
        } else {
            BlynkWidgetWriteDefault(req, param2);
   d5e76:	f004 fad0 	bl	da41a <BlynkWidgetWrite>
        }
    } break;
   d5e7a:	e02e      	b.n	d5eda <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
   d5e7c:	f7ff fa40 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d5e80:	f006 fa26 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d5e84:	491d      	ldr	r1, [pc, #116]	; (d5efc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x2b4>)
   d5e86:	f005 f993 	bl	db1b0 <_ZN5Print5printEPKc>
   d5e8a:	f006 fa21 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d5e8e:	4629      	mov	r1, r5
   d5e90:	f005 f9a1 	bl	db1d6 <_ZN5Print7printlnEPKc>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   d5e94:	2300      	movs	r3, #0
   d5e96:	2102      	movs	r1, #2
   d5e98:	9100      	str	r1, [sp, #0]
   d5e9a:	f8b8 201a 	ldrh.w	r2, [r8, #26]
   d5e9e:	9302      	str	r3, [sp, #8]
   d5ea0:	9301      	str	r3, [sp, #4]
   d5ea2:	4619      	mov	r1, r3
   d5ea4:	e7a8      	b.n	d5df8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1b0>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
                pinMode(pin, OUTPUT);
   d5ea6:	2101      	movs	r1, #1
   d5ea8:	e737      	b.n	d5d1a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd2>
            } else if (!strcmp(it.asStr(), "pd")) {
                pinMode(pin, INPUT_PULLDOWN);
#endif
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
   d5eaa:	f7ff fa29 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d5eae:	f006 fa0f 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d5eb2:	4913      	ldr	r1, [pc, #76]	; (d5f00 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x2b8>)
   d5eb4:	f005 f97c 	bl	db1b0 <_ZN5Print5printEPKc>
   d5eb8:	f006 fa0a 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d5ebc:	220a      	movs	r2, #10
   d5ebe:	4621      	mov	r1, r4
   d5ec0:	f005 f9c0 	bl	db244 <_ZN5Print5printEhi>
   d5ec4:	f006 fa04 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d5ec8:	490e      	ldr	r1, [pc, #56]	; (d5f04 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x2bc>)
   d5eca:	f005 f971 	bl	db1b0 <_ZN5Print5printEPKc>
   d5ece:	f006 f9ff 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d5ed2:	9905      	ldr	r1, [sp, #20]
   d5ed4:	f005 f97f 	bl	db1d6 <_ZN5Print7printlnEPKc>
   d5ed8:	e722      	b.n	d5d20 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd8>
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
    }
}
   d5eda:	b00e      	add	sp, #56	; 0x38
   d5edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5ee0:	000e7383 	.word	0x000e7383
   d5ee4:	000e6f85 	.word	0x000e6f85
   d5ee8:	000e6e71 	.word	0x000e6e71
   d5eec:	000e6e75 	.word	0x000e6e75
   d5ef0:	000e6e78 	.word	0x000e6e78
   d5ef4:	000da419 	.word	0x000da419
   d5ef8:	000da41b 	.word	0x000da41b
   d5efc:	000e6e7b 	.word	0x000e6e7b
   d5f00:	000e6e8c 	.word	0x000e6e8c
   d5f04:	000e6e99 	.word	0x000e6e99

000d5f08 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   d5f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5f0c:	b08e      	sub	sp, #56	; 0x38
   d5f0e:	af04      	add	r7, sp, #16
   d5f10:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   d5f12:	2205      	movs	r2, #5
   d5f14:	f107 010c 	add.w	r1, r7, #12
   d5f18:	6800      	ldr	r0, [r0, #0]
   d5f1a:	f005 faf0 	bl	db4fe <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   d5f1e:	4605      	mov	r5, r0
   d5f20:	2800      	cmp	r0, #0
   d5f22:	f000 81fd 	beq.w	d6320 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x418>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   d5f26:	2805      	cmp	r0, #5
   d5f28:	d11a      	bne.n	d5f60 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x58>
   d5f2a:	4602      	mov	r2, r0
   d5f2c:	f107 010c 	add.w	r1, r7, #12
   d5f30:	48b5      	ldr	r0, [pc, #724]	; (d6208 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x300>)
   d5f32:	f7ff fa2b 	bl	d538c <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.0>
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d5f36:	f8b7 200d 	ldrh.w	r2, [r7, #13]
    hdr.length = ntohs(hdr.length);
   d5f3a:	f8b7 800f 	ldrh.w	r8, [r7, #15]
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d5f3e:	0a13      	lsrs	r3, r2, #8
   d5f40:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr.length = ntohs(hdr.length);
   d5f44:	ea4f 2218 	mov.w	r2, r8, lsr #8
   d5f48:	ea42 2808 	orr.w	r8, r2, r8, lsl #8
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d5f4c:	b29b      	uxth	r3, r3
    hdr.length = ntohs(hdr.length);
   d5f4e:	fa1f f888 	uxth.w	r8, r8
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d5f52:	f8a7 300d 	strh.w	r3, [r7, #13]
    hdr.length = ntohs(hdr.length);
   d5f56:	f8a7 800f 	strh.w	r8, [r7, #15]

    if (ret == 0) {
        return true; // Considered OK (no data on input)
    }

    if (ret < 0 || hdr.msg_id == 0) {
   d5f5a:	b993      	cbnz	r3, d5f82 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x7a>
    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
    hdr.length = ntohs(hdr.length);

    return rlen;
   d5f5c:	462c      	mov	r4, r5
   d5f5e:	e001      	b.n	d5f64 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x5c>
    if (rlen == 0) {
        return 0;
    }

    if (sizeof(hdr) != rlen) {
        return -1;
   d5f60:	f04f 34ff 	mov.w	r4, #4294967295
        return true; // Considered OK (no data on input)
    }

    if (ret < 0 || hdr.msg_id == 0) {
#ifdef BLYNK_DEBUG
        BLYNK_LOG2(BLYNK_F("Bad hdr len: "), ret);
   d5f64:	f7ff f9cc 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d5f68:	f006 f9b2 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d5f6c:	49a7      	ldr	r1, [pc, #668]	; (d620c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x304>)
   d5f6e:	f005 f91f 	bl	db1b0 <_ZN5Print5printEPKc>
   d5f72:	f006 f9ad 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d5f76:	220a      	movs	r2, #10
   d5f78:	4621      	mov	r1, r4
   d5f7a:	f005 f9a7 	bl	db2cc <_ZN5Print7printlnEii>
#endif
        return false;
   d5f7e:	2000      	movs	r0, #0
   d5f80:	e1d3      	b.n	d632a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x422>
    }

    if (hdr.type == BLYNK_CMD_RESPONSE) {
   d5f82:	7b3b      	ldrb	r3, [r7, #12]
   d5f84:	2b00      	cmp	r3, #0
   d5f86:	d15d      	bne.n	d6044 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x13c>
        lastActivityIn = BlynkMillis();
   d5f88:	f004 fa40 	bl	da40c <_Z11BlynkMillisv>

#ifndef BLYNK_USE_DIRECT_CONNECT
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   d5f8c:	7f65      	ldrb	r5, [r4, #29]
#endif
        return false;
    }

    if (hdr.type == BLYNK_CMD_RESPONSE) {
        lastActivityIn = BlynkMillis();
   d5f8e:	60e0      	str	r0, [r4, #12]
   d5f90:	f8b7 000f 	ldrh.w	r0, [r7, #15]

#ifndef BLYNK_USE_DIRECT_CONNECT
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   d5f94:	2d00      	cmp	r5, #0
   d5f96:	d151      	bne.n	d603c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x134>
   d5f98:	f8b7 300d 	ldrh.w	r3, [r7, #13]
   d5f9c:	2b01      	cmp	r3, #1
   d5f9e:	d14d      	bne.n	d603c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x134>
            switch (hdr.length) {
   d5fa0:	2809      	cmp	r0, #9
   d5fa2:	d034      	beq.n	d600e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x106>
   d5fa4:	28c8      	cmp	r0, #200	; 0xc8
   d5fa6:	d001      	beq.n	d5fac <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xa4>
   d5fa8:	2804      	cmp	r0, #4
   d5faa:	d13a      	bne.n	d6022 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x11a>
            case BLYNK_SUCCESS:
            case BLYNK_ALREADY_REGISTERED:
                BLYNK_LOG3(BLYNK_F("Ready (ping: "), lastActivityIn-lastHeartbeat, BLYNK_F("ms)."));
   d5fac:	f7ff f9a8 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d5fb0:	f006 f98e 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d5fb4:	4996      	ldr	r1, [pc, #600]	; (d6210 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x308>)
   d5fb6:	f005 f8fb 	bl	db1b0 <_ZN5Print5printEPKc>
   d5fba:	f006 f989 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d5fbe:	6963      	ldr	r3, [r4, #20]
   d5fc0:	68e1      	ldr	r1, [r4, #12]
   d5fc2:	220a      	movs	r2, #10
   d5fc4:	1ac9      	subs	r1, r1, r3
   d5fc6:	f005 f930 	bl	db22a <_ZN5Print5printEmi>
   d5fca:	f006 f981 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d5fce:	4991      	ldr	r1, [pc, #580]	; (d6214 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x30c>)
   d5fd0:	f005 f901 	bl	db1d6 <_ZN5Print7printlnEPKc>
                lastHeartbeat = lastActivityIn;
   d5fd4:	68e3      	ldr	r3, [r4, #12]
   d5fd6:	6163      	str	r3, [r4, #20]
                state = CONNECTED;
   d5fd8:	2301      	movs	r3, #1
   d5fda:	7763      	strb	r3, [r4, #29]
#ifdef BLYNK_DEBUG
                if (size_t ram = BlynkFreeRam()) {
   d5fdc:	f004 fa18 	bl	da410 <_Z12BlynkFreeRamv>
   d5fe0:	4605      	mov	r5, r0
   d5fe2:	b160      	cbz	r0, d5ffe <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xf6>
                    BLYNK_LOG2(BLYNK_F("Free RAM: "), ram);
   d5fe4:	f7ff f98c 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d5fe8:	f006 f972 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d5fec:	498a      	ldr	r1, [pc, #552]	; (d6218 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x310>)
   d5fee:	f005 f8df 	bl	db1b0 <_ZN5Print5printEPKc>
   d5ff2:	f006 f96d 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d5ff6:	220a      	movs	r2, #10
   d5ff8:	4629      	mov	r1, r5
   d5ffa:	f005 f931 	bl	db260 <_ZN5Print7printlnEji>
                }
#endif
                this->sendInfo();
   d5ffe:	4620      	mov	r0, r4
   d6000:	f000 fb84 	bl	d670c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   d6004:	f7ff fa3e 	bl	d5484 <_ZN10CloudClass7processEv>
                BlynkOnConnected();
   d6008:	f000 ff5e 	bl	d6ec8 <BlynkOnConnected>
   d600c:	e188      	b.n	d6320 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x418>
                return true;
            case BLYNK_INVALID_TOKEN:
                BLYNK_LOG1(BLYNK_F("Invalid auth token"));
   d600e:	f7ff f977 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d6012:	f006 f95d 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d6016:	4981      	ldr	r1, [pc, #516]	; (d621c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x314>)
   d6018:	f005 f8dd 	bl	db1d6 <_ZN5Print7printlnEPKc>
                state = TOKEN_INVALID;
   d601c:	2303      	movs	r3, #3
   d601e:	7763      	strb	r3, [r4, #29]
   d6020:	e7ad      	b.n	d5f7e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x76>
                break;
            default:
                BLYNK_LOG2(BLYNK_F("Connect failed. code: "), hdr.length);
   d6022:	f7ff f96d 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d6026:	f006 f953 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d602a:	497d      	ldr	r1, [pc, #500]	; (d6220 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x318>)
   d602c:	f005 f8c0 	bl	db1b0 <_ZN5Print5printEPKc>
   d6030:	f006 f94e 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d6034:	220a      	movs	r2, #10
   d6036:	f8b7 100f 	ldrh.w	r1, [r7, #15]
   d603a:	e79e      	b.n	d5f7a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x72>
            }
            return false;
        }
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   d603c:	3805      	subs	r0, #5
   d603e:	bf18      	it	ne
   d6040:	2001      	movne	r0, #1
   d6042:	e172      	b.n	d632a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x422>
#endif
        // TODO: return code may indicate App presence
        return true;
    }

    if (hdr.length > BLYNK_MAX_READBYTES) {
   d6044:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
   d6048:	d911      	bls.n	d606e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x166>
        BLYNK_LOG2(BLYNK_F("Packet too big: "), hdr.length);
   d604a:	f7ff f959 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d604e:	f006 f93f 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d6052:	4974      	ldr	r1, [pc, #464]	; (d6224 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x31c>)
   d6054:	f005 f8ac 	bl	db1b0 <_ZN5Print5printEPKc>
   d6058:	f006 f93a 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d605c:	220a      	movs	r2, #10
   d605e:	f8b7 100f 	ldrh.w	r1, [r7, #15]
   d6062:	f005 f933 	bl	db2cc <_ZN5Print7printlnEii>
        // TODO: Flush
        internalReconnect();
   d6066:	4620      	mov	r0, r4
   d6068:	f7ff fde4 	bl	d5c34 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d606c:	e158      	b.n	d6320 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x418>
        return true;
    }

    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   d606e:	f108 0308 	add.w	r3, r8, #8
   d6072:	f023 0307 	bic.w	r3, r3, #7
   d6076:	466e      	mov	r6, sp
   d6078:	ebad 0d03 	sub.w	sp, sp, r3
   d607c:	ad04      	add	r5, sp, #16
   d607e:	4642      	mov	r2, r8
   d6080:	4629      	mov	r1, r5
   d6082:	6820      	ldr	r0, [r4, #0]
   d6084:	f005 fa3b 	bl	db4fe <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   d6088:	4580      	cmp	r8, r0
   d608a:	d007      	beq.n	d609c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x194>
#ifdef BLYNK_DEBUG
        BLYNK_LOG1(BLYNK_F("Can't read body"));
   d608c:	f7ff f938 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d6090:	f006 f91e 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d6094:	4964      	ldr	r1, [pc, #400]	; (d6228 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x320>)
   d6096:	f005 f89e 	bl	db1d6 <_ZN5Print7printlnEPKc>
   d609a:	e063      	b.n	d6164 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x25c>
#endif
        return false;
    }
    inputBuffer[hdr.length] = '\0';
   d609c:	f8b7 200f 	ldrh.w	r2, [r7, #15]
   d60a0:	2300      	movs	r3, #0
   d60a2:	54ab      	strb	r3, [r5, r2]
        #define BLYNK_DBG_BREAK()    { for(;;); }
        #define BLYNK_ASSERT(expr)   { if(!(expr)) { BLYNK_LOG2(BLYNK_F("Assertion failed: "), BLYNK_F(#expr)); BLYNK_DBG_BREAK() } }

        static
        void BLYNK_DBG_DUMP(const char* msg, const void* addr, size_t len) {
            if (len) {
   d60a4:	b11a      	cbz	r2, d60ae <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a6>
   d60a6:	4629      	mov	r1, r5
   d60a8:	4857      	ldr	r0, [pc, #348]	; (d6208 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x300>)
   d60aa:	f7ff f96f 	bl	d538c <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.0>

    BLYNK_DBG_DUMP(">", inputBuffer, hdr.length);

    lastActivityIn = BlynkMillis();
   d60ae:	f004 f9ad 	bl	da40c <_Z11BlynkMillisv>

    switch (hdr.type)
   d60b2:	7b3b      	ldrb	r3, [r7, #12]
    }
    inputBuffer[hdr.length] = '\0';

    BLYNK_DBG_DUMP(">", inputBuffer, hdr.length);

    lastActivityIn = BlynkMillis();
   d60b4:	60e0      	str	r0, [r4, #12]

    switch (hdr.type)
   d60b6:	2b11      	cmp	r3, #17
   d60b8:	f000 80bc 	beq.w	d6234 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x32c>
   d60bc:	d808      	bhi.n	d60d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c8>
   d60be:	2b06      	cmp	r3, #6
   d60c0:	d036      	beq.n	d6130 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x228>
   d60c2:	2b0f      	cmp	r3, #15
   d60c4:	f000 8092 	beq.w	d61ec <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2e4>
   d60c8:	2b02      	cmp	r3, #2
   d60ca:	f040 8116 	bne.w	d62fa <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3f2>
   d60ce:	e00c      	b.n	d60ea <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1e2>
   d60d0:	2b1d      	cmp	r3, #29
   d60d2:	d00a      	beq.n	d60ea <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1e2>
   d60d4:	d803      	bhi.n	d60de <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1d6>
   d60d6:	2b14      	cmp	r3, #20
   d60d8:	f000 8088 	beq.w	d61ec <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2e4>
   d60dc:	e10d      	b.n	d62fa <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3f2>
   d60de:	2b29      	cmp	r3, #41	; 0x29
   d60e0:	d032      	beq.n	d6148 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x240>
   d60e2:	2b37      	cmp	r3, #55	; 0x37
   d60e4:	f000 80f9 	beq.w	d62da <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3d2>
   d60e8:	e107      	b.n	d62fa <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3f2>
            BLYNK_LOG1(BLYNK_F("Invalid token"));
            sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_INVALID_TOKEN);
            break;
        }
#endif
        if (state == CONNECTING) {
   d60ea:	7f63      	ldrb	r3, [r4, #29]
   d60ec:	bb03      	cbnz	r3, d6130 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x228>
            BLYNK_LOG1(BLYNK_F("Ready"));
   d60ee:	f7ff f907 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d60f2:	f006 f8ed 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d60f6:	494d      	ldr	r1, [pc, #308]	; (d622c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x324>)
   d60f8:	f005 f86d 	bl	db1d6 <_ZN5Print7printlnEPKc>
            state = CONNECTED;
   d60fc:	2301      	movs	r3, #1
   d60fe:	7763      	strb	r3, [r4, #29]
#ifdef BLYNK_DEBUG
            if (size_t ram = BlynkFreeRam()) {
   d6100:	f004 f986 	bl	da410 <_Z12BlynkFreeRamv>
   d6104:	4605      	mov	r5, r0
   d6106:	b160      	cbz	r0, d6122 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x21a>
                BLYNK_LOG2(BLYNK_F("Free RAM: "), ram);
   d6108:	f7ff f8fa 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d610c:	f006 f8e0 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d6110:	4941      	ldr	r1, [pc, #260]	; (d6218 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x310>)
   d6112:	f005 f84d 	bl	db1b0 <_ZN5Print5printEPKc>
   d6116:	f006 f8db 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d611a:	220a      	movs	r2, #10
   d611c:	4629      	mov	r1, r5
   d611e:	f005 f89f 	bl	db260 <_ZN5Print7printlnEji>
            }
#endif
            this->sendInfo();
   d6122:	4620      	mov	r0, r4
   d6124:	f000 faf2 	bl	d670c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   d6128:	f7ff f9ac 	bl	d5484 <_ZN10CloudClass7processEv>
            BlynkOnConnected();
   d612c:	f000 fecc 	bl	d6ec8 <BlynkOnConnected>
        }
        sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_SUCCESS);
    } break;
    case BLYNK_CMD_PING: {
        sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_SUCCESS);
   d6130:	2300      	movs	r3, #0
   d6132:	21c8      	movs	r1, #200	; 0xc8
   d6134:	f8b7 200d 	ldrh.w	r2, [r7, #13]
   d6138:	9100      	str	r1, [sp, #0]
   d613a:	9302      	str	r3, [sp, #8]
   d613c:	9301      	str	r3, [sp, #4]
   d613e:	4619      	mov	r1, r3
   d6140:	4620      	mov	r0, r4
   d6142:	f000 f9cf 	bl	d64e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   d6146:	e0e8      	b.n	d631a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x412>
    } break;
    case BLYNK_CMD_REDIRECT: {
        if (!redir_serv) {
   d6148:	68a3      	ldr	r3, [r4, #8]
   d614a:	b91b      	cbnz	r3, d6154 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24c>
             redir_serv = (char*)malloc(32);
   d614c:	2020      	movs	r0, #32
   d614e:	f004 fcd5 	bl	daafc <malloc>
   d6152:	60a0      	str	r0, [r4, #8]
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d6154:	f8b7 800f 	ldrh.w	r8, [r7, #15]
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d6158:	61fd      	str	r5, [r7, #28]
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d615a:	44a8      	add	r8, r5
        }
        BlynkParam param(inputBuffer, hdr.length);
        uint16_t redir_port = BLYNK_DEFAULT_PORT; // TODO: Fixit

        BlynkParam::iterator it = param.begin();
        if (it >= param.end())
   d615c:	4545      	cmp	r5, r8
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d615e:	f8c7 8020 	str.w	r8, [r7, #32]
   d6162:	d301      	bcc.n	d6168 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x260>
            return false;
   d6164:	2000      	movs	r0, #0
   d6166:	e0d9      	b.n	d631c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x414>

        strncpy(redir_serv, it.asStr(), 32);
   d6168:	4629      	mov	r1, r5
   d616a:	2220      	movs	r2, #32
   d616c:	68a0      	ldr	r0, [r4, #8]
   d616e:	f00e f9ea 	bl	e4546 <strncpy>
        redir_serv[31] = '\0';
   d6172:	68a3      	ldr	r3, [r4, #8]
   d6174:	2500      	movs	r5, #0
   d6176:	77dd      	strb	r5, [r3, #31]

        if (++it < param.end())
   d6178:	f107 001c 	add.w	r0, r7, #28
   d617c:	f7ff f9b2 	bl	d54e4 <_ZN10BlynkParam8iteratorppEv>
   d6180:	6803      	ldr	r3, [r0, #0]
   d6182:	4543      	cmp	r3, r8
   d6184:	d208      	bcs.n	d6198 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x290>
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d6186:	69f8      	ldr	r0, [r7, #28]
   d6188:	b120      	cbz	r0, d6194 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x28c>
   d618a:	6a3b      	ldr	r3, [r7, #32]
   d618c:	4298      	cmp	r0, r3
   d618e:	f0c0 80c9 	bcc.w	d6324 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x41c>
        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   d6192:	4628      	mov	r0, r5
            redir_port = it.asLong();
   d6194:	b285      	uxth	r5, r0
   d6196:	e000      	b.n	d619a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x292>
    case BLYNK_CMD_REDIRECT: {
        if (!redir_serv) {
             redir_serv = (char*)malloc(32);
        }
        BlynkParam param(inputBuffer, hdr.length);
        uint16_t redir_port = BLYNK_DEFAULT_PORT; // TODO: Fixit
   d6198:	2550      	movs	r5, #80	; 0x50
        strncpy(redir_serv, it.asStr(), 32);
        redir_serv[31] = '\0';

        if (++it < param.end())
            redir_port = it.asLong();
        BLYNK_LOG4(BLYNK_F("Redirecting to "), redir_serv, ':', redir_port);
   d619a:	f7ff f8b1 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d619e:	f006 f897 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d61a2:	4923      	ldr	r1, [pc, #140]	; (d6230 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x328>)
   d61a4:	f005 f804 	bl	db1b0 <_ZN5Print5printEPKc>
   d61a8:	f006 f892 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d61ac:	68a1      	ldr	r1, [r4, #8]
   d61ae:	f004 ffff 	bl	db1b0 <_ZN5Print5printEPKc>
   d61b2:	f006 f88d 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d61b6:	213a      	movs	r1, #58	; 0x3a
   d61b8:	f004 fffe 	bl	db1b8 <_ZN5Print5printEc>
   d61bc:	f006 f888 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d61c0:	220a      	movs	r2, #10
   d61c2:	4629      	mov	r1, r5
   d61c4:	f005 f882 	bl	db2cc <_ZN5Print7printlnEii>
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d61c8:	6820      	ldr	r0, [r4, #0]
   d61ca:	f006 fbed 	bl	dc9a8 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        conn.begin(redir_serv, redir_port);
   d61ce:	6823      	ldr	r3, [r4, #0]
   d61d0:	68a2      	ldr	r2, [r4, #8]
        port = p;
        addr = a;
    }

    void begin(const char* d, uint16_t p) {
        domain = d;
   d61d2:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   d61d4:	871d      	strh	r5, [r3, #56]	; 0x38
        state = CONNECTING;
   d61d6:	2300      	movs	r3, #0
   d61d8:	7763      	strb	r3, [r4, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d61da:	f004 f917 	bl	da40c <_Z11BlynkMillisv>
   d61de:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d61e2:	3808      	subs	r0, #8
   d61e4:	6120      	str	r0, [r4, #16]
   d61e6:	60e0      	str	r0, [r4, #12]
   d61e8:	6160      	str	r0, [r4, #20]
   d61ea:	e096      	b.n	d631a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x412>
    } break;
    case BLYNK_CMD_HARDWARE:
    case BLYNK_CMD_BRIDGE: {
        msgIdOutOverride = hdr.msg_id;
   d61ec:	68fb      	ldr	r3, [r7, #12]
   d61ee:	f3c3 230f 	ubfx	r3, r3, #8, #16
   d61f2:	8363      	strh	r3, [r4, #26]
        this->processCmd(inputBuffer, hdr.length);
   d61f4:	f8b7 200f 	ldrh.w	r2, [r7, #15]
   d61f8:	4629      	mov	r1, r5
   d61fa:	4620      	mov	r0, r4
   d61fc:	f7ff fd24 	bl	d5c48 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   d6200:	2300      	movs	r3, #0
   d6202:	8363      	strh	r3, [r4, #26]
   d6204:	e089      	b.n	d631a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x412>
   d6206:	bf00      	nop
   d6208:	000e6ea0 	.word	0x000e6ea0
   d620c:	000e6ea2 	.word	0x000e6ea2
   d6210:	000e6eb0 	.word	0x000e6eb0
   d6214:	000e6ebe 	.word	0x000e6ebe
   d6218:	000e6ec3 	.word	0x000e6ec3
   d621c:	000e6ece 	.word	0x000e6ece
   d6220:	000e6ee1 	.word	0x000e6ee1
   d6224:	000e6ef8 	.word	0x000e6ef8
   d6228:	000e6f09 	.word	0x000e6f09
   d622c:	000e6f19 	.word	0x000e6f19
   d6230:	000e6f1f 	.word	0x000e6f1f
    } break;
    case BLYNK_CMD_INTERNAL: {
        BlynkReq req = { 0 };
   d6234:	2300      	movs	r3, #0
   d6236:	713b      	strb	r3, [r7, #4]
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d6238:	f8b7 300f 	ldrh.w	r3, [r7, #15]
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d623c:	617d      	str	r5, [r7, #20]
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d623e:	442b      	add	r3, r5
        BlynkParam param(inputBuffer, hdr.length);
        BlynkParam::iterator it = param.begin();
        if (it >= param.end())
   d6240:	429d      	cmp	r5, r3
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d6242:	61bb      	str	r3, [r7, #24]
   d6244:	d269      	bcs.n	d631a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x412>
            return true;

        uint32_t cmd32;
        memcpy(&cmd32, it.asStr(), sizeof(cmd32));
   d6246:	6828      	ldr	r0, [r5, #0]
   d6248:	60b8      	str	r0, [r7, #8]

        ++it;
   d624a:	f107 0014 	add.w	r0, r7, #20
   d624e:	f7ff f949 	bl	d54e4 <_ZN10BlynkParam8iteratorppEv>
   d6252:	697a      	ldr	r2, [r7, #20]
        char* start = (char*)(it).asStr();
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   d6254:	f8b7 300f 	ldrh.w	r3, [r7, #15]
    };

public:
    explicit
    BlynkParam(const void* addr, size_t length)
        : buff((char*)addr), len(length), buff_size(length)
   d6258:	61fa      	str	r2, [r7, #28]
   d625a:	1b51      	subs	r1, r2, r5
   d625c:	1a5b      	subs	r3, r3, r1
   d625e:	623b      	str	r3, [r7, #32]
   d6260:	627b      	str	r3, [r7, #36]	; 0x24
        BlynkParam param2(start, length);

        switch (cmd32) {
   d6262:	4a34      	ldr	r2, [pc, #208]	; (d6334 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x42c>)
   d6264:	68bb      	ldr	r3, [r7, #8]
   d6266:	4293      	cmp	r3, r2
   d6268:	d02b      	beq.n	d62c2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3ba>
   d626a:	d80d      	bhi.n	d6288 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x380>
   d626c:	4a32      	ldr	r2, [pc, #200]	; (d6338 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x430>)
   d626e:	4293      	cmp	r3, r2
   d6270:	d01b      	beq.n	d62aa <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3a2>
   d6272:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
   d6276:	3203      	adds	r2, #3
   d6278:	4293      	cmp	r3, r2
   d627a:	d128      	bne.n	d62ce <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3c6>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   d627c:	f107 011c 	add.w	r1, r7, #28
   d6280:	1d38      	adds	r0, r7, #4
   d6282:	f004 f8ca 	bl	da41a <BlynkWidgetWrite>
   d6286:	e048      	b.n	d631a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x412>
        ++it;
        char* start = (char*)(it).asStr();
        unsigned length = hdr.length - (start - (char*)inputBuffer);
        BlynkParam param2(start, length);

        switch (cmd32) {
   d6288:	4a2c      	ldr	r2, [pc, #176]	; (d633c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x434>)
   d628a:	4293      	cmp	r3, r2
   d628c:	d013      	beq.n	d62b6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3ae>
   d628e:	f102 629f 	add.w	r2, r2, #83361792	; 0x4f80000
   d6292:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
   d6296:	f502 7280 	add.w	r2, r2, #256	; 0x100
   d629a:	4293      	cmp	r3, r2
   d629c:	d117      	bne.n	d62ce <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3c6>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   d629e:	f107 011c 	add.w	r1, r7, #28
   d62a2:	1d38      	adds	r0, r7, #4
   d62a4:	f7ff fab6 	bl	d5814 <BlynkWidgetWriteInternalPinADIS>
   d62a8:	e037      	b.n	d631a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x412>
        unsigned length = hdr.length - (start - (char*)inputBuffer);
        BlynkParam param2(start, length);

        switch (cmd32) {
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   d62aa:	f107 011c 	add.w	r1, r7, #28
   d62ae:	1d38      	adds	r0, r7, #4
   d62b0:	f004 f8b3 	bl	da41a <BlynkWidgetWrite>
   d62b4:	e031      	b.n	d631a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x412>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   d62b6:	f107 011c 	add.w	r1, r7, #28
   d62ba:	1d38      	adds	r0, r7, #4
   d62bc:	f000 fbfe 	bl	d6abc <BlynkWidgetWriteInternalPinACON>
   d62c0:	e02b      	b.n	d631a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x412>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
   d62c2:	f107 011c 	add.w	r1, r7, #28
   d62c6:	1d38      	adds	r0, r7, #4
   d62c8:	f004 f8a7 	bl	da41a <BlynkWidgetWrite>
   d62cc:	e025      	b.n	d631a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x412>
#ifdef BLYNK_DEBUG
        default:             BLYNK_LOG2(BLYNK_F("Invalid internal cmd:"), param.asStr());
   d62ce:	f7ff f817 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d62d2:	f005 fffd 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d62d6:	491a      	ldr	r1, [pc, #104]	; (d6340 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x438>)
   d62d8:	e007      	b.n	d62ea <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3e2>
#endif
        }
    } break;
    case BLYNK_CMD_DEBUG_PRINT: {
        if (hdr.length) {
   d62da:	f8b7 300f 	ldrh.w	r3, [r7, #15]
   d62de:	b1e3      	cbz	r3, d631a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x412>
            BLYNK_LOG2(BLYNK_F("Server: "), (char*)inputBuffer);
   d62e0:	f7ff f80e 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d62e4:	f005 fff4 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d62e8:	4916      	ldr	r1, [pc, #88]	; (d6344 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x43c>)
   d62ea:	f004 ff61 	bl	db1b0 <_ZN5Print5printEPKc>
   d62ee:	f005 ffef 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d62f2:	4629      	mov	r1, r5
   d62f4:	f004 ff6f 	bl	db1d6 <_ZN5Print7printlnEPKc>
   d62f8:	e00f      	b.n	d631a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x412>
        }
    } break;
    default: {
#ifdef BLYNK_DEBUG
        BLYNK_LOG2(BLYNK_F("Invalid header type: "), hdr.type);
   d62fa:	f7ff f801 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d62fe:	f005 ffe7 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d6302:	4911      	ldr	r1, [pc, #68]	; (d6348 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x440>)
   d6304:	f004 ff54 	bl	db1b0 <_ZN5Print5printEPKc>
   d6308:	f005 ffe2 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d630c:	220a      	movs	r2, #10
   d630e:	7b39      	ldrb	r1, [r7, #12]
   d6310:	f004 ff9a 	bl	db248 <_ZN5Print7printlnEhi>
#endif
        // TODO: Flush
        internalReconnect();
   d6314:	4620      	mov	r0, r4
   d6316:	f7ff fc8d 	bl	d5c34 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
    } break;
    }

    return true;
   d631a:	2001      	movs	r0, #1
   d631c:	46b5      	mov	sp, r6
   d631e:	e004      	b.n	d632a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x422>
{
    BlynkHeader hdr;
    const int ret = readHeader(hdr);

    if (ret == 0) {
        return true; // Considered OK (no data on input)
   d6320:	2001      	movs	r0, #1
   d6322:	e002      	b.n	d632a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x422>
        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   d6324:	f00d f817 	bl	e3356 <atol>
   d6328:	e734      	b.n	d6194 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x28c>
        internalReconnect();
    } break;
    }

    return true;
}
   d632a:	3728      	adds	r7, #40	; 0x28
   d632c:	46bd      	mov	sp, r7
   d632e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6332:	bf00      	nop
   d6334:	6174656d 	.word	0x6174656d
   d6338:	0061746f 	.word	0x0061746f
   d633c:	6e6f6361 	.word	0x6e6f6361
   d6340:	000e6f2f 	.word	0x000e6f2f
   d6344:	000e6f45 	.word	0x000e6f45
   d6348:	000e6f4e 	.word	0x000e6f4e

000d634c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>:
protected:
    BlynkState state;
};

template <class Transp>
bool BlynkProtocol<Transp>::run(bool avail)
   d634c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d6350:	4604      	mov	r4, r0
   d6352:	460d      	mov	r5, r1
{
    BLYNK_RUN_YIELD();
   d6354:	f7ff f896 	bl	d5484 <_ZN10CloudClass7processEv>

    if (state == DISCONNECTED) {
   d6358:	7f63      	ldrb	r3, [r4, #29]
   d635a:	2b02      	cmp	r3, #2
   d635c:	f000 80a7 	beq.w	d64ae <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x162>
  return ~crc;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   d6360:	7f23      	ldrb	r3, [r4, #28]
        return false;
    }

    // Detect nesting
    BlynkHelperAutoInc guard(nesting);
    if (msgIdOutOverride || nesting > 2) {
   d6362:	8b62      	ldrh	r2, [r4, #26]
   d6364:	3301      	adds	r3, #1
   d6366:	b2db      	uxtb	r3, r3
   d6368:	7723      	strb	r3, [r4, #28]
   d636a:	2a00      	cmp	r2, #0
   d636c:	d164      	bne.n	d6438 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xec>
   d636e:	2b02      	cmp	r3, #2
   d6370:	d862      	bhi.n	d6438 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xec>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d6372:	6820      	ldr	r0, [r4, #0]
   d6374:	f006 f945 	bl	dc602 <_ZN9TCPClient9connectedEv>
      //BLYNK_LOG1(BLYNK_F("Nested run() skipped"));
      return true;
    }

    if (conn.connected()) {
   d6378:	b140      	cbz	r0, d638c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x40>
        while (avail || conn.available() > 0) {
   d637a:	2d00      	cmp	r5, #0
   d637c:	f040 8099 	bne.w	d64b2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x166>
    int available() { return client.available(); }
   d6380:	6820      	ldr	r0, [r4, #0]
   d6382:	f006 fb29 	bl	dc9d8 <_ZN9TCPClient9availableEv>
   d6386:	2800      	cmp	r0, #0
   d6388:	f300 8093 	bgt.w	d64b2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x166>
            avail = false;
            //BLYNK_LOG2(BLYNK_F("Proc time: "), micros() - t);
        }
    }

    const millis_time_t t = BlynkMillis();
   d638c:	f004 f83e 	bl	da40c <_Z11BlynkMillisv>
   d6390:	4607      	mov	r7, r0
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d6392:	6820      	ldr	r0, [r4, #0]
   d6394:	f006 f935 	bl	dc602 <_ZN9TCPClient9connectedEv>

    // Update connection status after running commands
    const bool tconn = conn.connected();

    if (state == CONNECTED) {
   d6398:	7f65      	ldrb	r5, [r4, #29]
   d639a:	2d01      	cmp	r5, #1
   d639c:	4606      	mov	r6, r0
   d639e:	d14d      	bne.n	d643c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xf0>
        if (!tconn) {
   d63a0:	b928      	cbnz	r0, d63ae <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
            lastHeartbeat = t;
   d63a2:	6167      	str	r7, [r4, #20]
            internalReconnect();
   d63a4:	4620      	mov	r0, r4
   d63a6:	f7ff fc45 	bl	d5c34 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d63aa:	4635      	mov	r5, r6
   d63ac:	e07b      	b.n	d64a6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x15a>
        }

        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   d63ae:	68e3      	ldr	r3, [r4, #12]
   d63b0:	4a48      	ldr	r2, [pc, #288]	; (d64d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x188>)
   d63b2:	1afb      	subs	r3, r7, r3
   d63b4:	4293      	cmp	r3, r2
   d63b6:	d927      	bls.n	d6408 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xbc>
#ifdef BLYNK_DEBUG
            BLYNK_LOG6(BLYNK_F("Heartbeat timeout: "), t, BLYNK_F(", "), lastActivityIn, BLYNK_F(", "), lastHeartbeat);
   d63b8:	f7fe ffa2 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d63bc:	f005 ff88 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d63c0:	4945      	ldr	r1, [pc, #276]	; (d64d8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x18c>)
   d63c2:	f004 fef5 	bl	db1b0 <_ZN5Print5printEPKc>
   d63c6:	f005 ff83 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d63ca:	220a      	movs	r2, #10
   d63cc:	4639      	mov	r1, r7
   d63ce:	f004 ff2c 	bl	db22a <_ZN5Print5printEmi>
   d63d2:	f005 ff7d 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d63d6:	4941      	ldr	r1, [pc, #260]	; (d64dc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x190>)
   d63d8:	f004 feea 	bl	db1b0 <_ZN5Print5printEPKc>
   d63dc:	f005 ff78 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d63e0:	220a      	movs	r2, #10
   d63e2:	68e1      	ldr	r1, [r4, #12]
   d63e4:	f004 ff21 	bl	db22a <_ZN5Print5printEmi>
   d63e8:	f005 ff72 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d63ec:	493b      	ldr	r1, [pc, #236]	; (d64dc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x190>)
   d63ee:	f004 fedf 	bl	db1b0 <_ZN5Print5printEPKc>
   d63f2:	f005 ff6d 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d63f6:	220a      	movs	r2, #10
   d63f8:	6961      	ldr	r1, [r4, #20]
   d63fa:	f004 ff3b 	bl	db274 <_ZN5Print7printlnEmi>
#else
            BLYNK_LOG1(BLYNK_F("Heartbeat timeout"));
#endif
            internalReconnect();
   d63fe:	4620      	mov	r0, r4
   d6400:	f7ff fc18 	bl	d5c34 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d6404:	2500      	movs	r5, #0
   d6406:	e04e      	b.n	d64a6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x15a>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   d6408:	f64e 2260 	movw	r2, #60000	; 0xea60
   d640c:	4293      	cmp	r3, r2
   d640e:	d803      	bhi.n	d6418 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xcc>
   d6410:	6923      	ldr	r3, [r4, #16]
   d6412:	1afb      	subs	r3, r7, r3
   d6414:	4293      	cmp	r3, r2
   d6416:	d90f      	bls.n	d6438 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xec>
   d6418:	6963      	ldr	r3, [r4, #20]
   d641a:	f640 32b8 	movw	r2, #3000	; 0xbb8
   d641e:	1afb      	subs	r3, r7, r3
   d6420:	4293      	cmp	r3, r2
   d6422:	d909      	bls.n	d6438 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xec>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
        {
            // Send ping if we didn't either send or receive something
            // for BLYNK_HEARTBEAT seconds
            sendCmd(BLYNK_CMD_PING);
   d6424:	2300      	movs	r3, #0
   d6426:	9302      	str	r3, [sp, #8]
   d6428:	9301      	str	r3, [sp, #4]
   d642a:	9300      	str	r3, [sp, #0]
   d642c:	461a      	mov	r2, r3
   d642e:	2106      	movs	r1, #6
   d6430:	4620      	mov	r0, r4
   d6432:	f000 f857 	bl	d64e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastHeartbeat = t;
   d6436:	6167      	str	r7, [r4, #20]
            lastLogin = lastActivityOut;
            return true;
        }
#endif
    }
    return true;
   d6438:	2501      	movs	r5, #1
   d643a:	e034      	b.n	d64a6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x15a>
            // Send ping if we didn't either send or receive something
            // for BLYNK_HEARTBEAT seconds
            sendCmd(BLYNK_CMD_PING);
            lastHeartbeat = t;
        }
    } else if (state == CONNECTING) {
   d643c:	2d00      	cmp	r5, #0
   d643e:	d1fb      	bne.n	d6438 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xec>
   d6440:	6961      	ldr	r1, [r4, #20]
#ifdef BLYNK_USE_DIRECT_CONNECT
        if (!tconn)
            conn.connect();
#else
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   d6442:	1a79      	subs	r1, r7, r1
   d6444:	b178      	cbz	r0, d6466 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x11a>
   d6446:	f640 33b8 	movw	r3, #3000	; 0xbb8
   d644a:	4299      	cmp	r1, r3
   d644c:	d9f4      	bls.n	d6438 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xec>
            BLYNK_LOG1(BLYNK_F("Login timeout"));
   d644e:	f7fe ff57 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d6452:	f005 ff3d 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d6456:	4922      	ldr	r1, [pc, #136]	; (d64e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x194>)
   d6458:	f004 febd 	bl	db1d6 <_ZN5Print7printlnEPKc>
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d645c:	6820      	ldr	r0, [r4, #0]
   d645e:	f006 faa3 	bl	dc9a8 <_ZN9TCPClient4stopEv>
            conn.disconnect();
            state = CONNECTING;
   d6462:	7765      	strb	r5, [r4, #29]
            return false;
   d6464:	e01f      	b.n	d64a6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x15a>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   d6466:	f241 3388 	movw	r3, #5000	; 0x1388
   d646a:	4299      	cmp	r1, r3
   d646c:	d9e4      	bls.n	d6438 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xec>
   d646e:	6820      	ldr	r0, [r4, #0]
   d6470:	f006 fa9a 	bl	dc9a8 <_ZN9TCPClient4stopEv>
            conn.disconnect();
            if (!conn.connect()) {
   d6474:	6820      	ldr	r0, [r4, #0]
   d6476:	f7ff f885 	bl	d5584 <_ZN22BlynkTransportParticle7connectEv>
   d647a:	4605      	mov	r5, r0
   d647c:	b908      	cbnz	r0, d6482 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x136>
                lastLogin = t;
   d647e:	6167      	str	r7, [r4, #20]
                return false;
   d6480:	e011      	b.n	d64a6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x15a>
            }

            msgIdOut = 1;
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d6482:	f8d4 8004 	ldr.w	r8, [r4, #4]
            if (!conn.connect()) {
                lastLogin = t;
                return false;
            }

            msgIdOut = 1;
   d6486:	2701      	movs	r7, #1
   d6488:	8327      	strh	r7, [r4, #24]
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d648a:	4640      	mov	r0, r8
   d648c:	f00e f83e 	bl	e450c <strlen>
   d6490:	4643      	mov	r3, r8
   d6492:	e88d 0041 	stmia.w	sp, {r0, r6}
   d6496:	9602      	str	r6, [sp, #8]
   d6498:	463a      	mov	r2, r7
   d649a:	211d      	movs	r1, #29
   d649c:	4620      	mov	r0, r4
   d649e:	f000 f821 	bl	d64e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   d64a2:	6923      	ldr	r3, [r4, #16]
   d64a4:	6163      	str	r3, [r4, #20]
    ~BlynkHelperAutoInc() { --c; }
   d64a6:	7f23      	ldrb	r3, [r4, #28]
   d64a8:	3b01      	subs	r3, #1
   d64aa:	7723      	strb	r3, [r4, #28]
   d64ac:	e00e      	b.n	d64cc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x180>
bool BlynkProtocol<Transp>::run(bool avail)
{
    BLYNK_RUN_YIELD();

    if (state == DISCONNECTED) {
        return false;
   d64ae:	2500      	movs	r5, #0
   d64b0:	e00c      	b.n	d64cc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x180>

    if (conn.connected()) {
        while (avail || conn.available() > 0) {
            //BLYNK_LOG2(BLYNK_F("Available: "), conn.available());
            //const unsigned long t = micros();
            if (!processInput()) {
   d64b2:	4620      	mov	r0, r4
   d64b4:	f7ff fd28 	bl	d5f08 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   d64b8:	4605      	mov	r5, r0
   d64ba:	2800      	cmp	r0, #0
   d64bc:	f47f af60 	bne.w	d6380 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x34>
   d64c0:	6820      	ldr	r0, [r4, #0]
   d64c2:	f006 fa71 	bl	dc9a8 <_ZN9TCPClient4stopEv>
                conn.disconnect();
// TODO: Only when in direct mode?
#ifdef BLYNK_USE_DIRECT_CONNECT
                state = CONNECTING;
#endif
                BlynkOnDisconnected();
   d64c6:	f003 ffa9 	bl	da41c <BlynkNoOpCbk>
                return false;
   d64ca:	e7ec      	b.n	d64a6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x15a>
            return true;
        }
#endif
    }
    return true;
}
   d64cc:	4628      	mov	r0, r5
   d64ce:	b004      	add	sp, #16
   d64d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d64d4:	00010d88 	.word	0x00010d88
   d64d8:	000e6f64 	.word	0x000e6f64
   d64dc:	000e6f78 	.word	0x000e6f78
   d64e0:	000e6f7b 	.word	0x000e6f7b

000d64e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   d64e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d64e8:	b083      	sub	sp, #12
   d64ea:	af00      	add	r7, sp, #0
   d64ec:	4604      	mov	r4, r0
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d64ee:	6800      	ldr	r0, [r0, #0]
   d64f0:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   d64f2:	4689      	mov	r9, r1
   d64f4:	4616      	mov	r6, r2
   d64f6:	469b      	mov	fp, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   d64f8:	46ea      	mov	sl, sp
   d64fa:	f006 f882 	bl	dc602 <_ZN9TCPClient9connectedEv>
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
{
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
   d64fe:	2800      	cmp	r0, #0
   d6500:	d071      	beq.n	d65e6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x102>
   d6502:	f1b9 0f1d 	cmp.w	r9, #29
   d6506:	d805      	bhi.n	d6514 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x30>
   d6508:	4b67      	ldr	r3, [pc, #412]	; (d66a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1c4>)
   d650a:	fa23 f309 	lsr.w	r3, r3, r9
   d650e:	07db      	lsls	r3, r3, #31
   d6510:	f100 80c5 	bmi.w	d669e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1ba>
   d6514:	7f63      	ldrb	r3, [r4, #29]
   d6516:	2b01      	cmp	r3, #1
   d6518:	d165      	bne.n	d65e6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x102>
        BLYNK_LOG2(BLYNK_F("Cmd skipped:"), cmd);
#endif
        return;
    }

    if (0 == id) {
   d651a:	b916      	cbnz	r6, d6522 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x3e>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   d651c:	8b66      	ldrh	r6, [r4, #26]
   d651e:	2e00      	cmp	r6, #0
   d6520:	d066      	beq.n	d65f0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x10c>
    if (0 == id) {
        id = getNextMsgId();
    }

#if defined(BLYNK_MSG_LIMIT) && BLYNK_MSG_LIMIT > 0
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
   d6522:	f1a9 030c 	sub.w	r3, r9, #12
   d6526:	2b08      	cmp	r3, #8
   d6528:	d96a      	bls.n	d6600 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11c>
    }
#endif

    const size_t full_length = (sizeof(BlynkHeader)) +
                               (data  ? length  : 0) +
                               (data2 ? length2 : 0);
   d652a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   d652c:	f1bb 0f00 	cmp.w	fp, #0
   d6530:	bf14      	ite	ne
   d6532:	46a8      	movne	r8, r5
   d6534:	f04f 0800 	moveq.w	r8, #0
   d6538:	2a00      	cmp	r2, #0
   d653a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d653c:	f108 0305 	add.w	r3, r8, #5
   d6540:	bf14      	ite	ne
   d6542:	4690      	movne	r8, r2
   d6544:	f04f 0800 	moveq.w	r8, #0
   d6548:	4498      	add	r8, r3

#if defined(BLYNK_SEND_ATOMIC) || defined(ESP8266) || defined(ESP32) || defined(SPARK) || defined(PARTICLE) || defined(ENERGIA)
    // Those have more RAM and like single write at a time...

    uint8_t buff[full_length];
   d654a:	f108 0307 	add.w	r3, r8, #7
   d654e:	f023 0307 	bic.w	r3, r3, #7

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);
   d6552:	18aa      	adds	r2, r5, r2
                               (data2 ? length2 : 0);

#if defined(BLYNK_SEND_ATOMIC) || defined(ESP8266) || defined(ESP32) || defined(SPARK) || defined(PARTICLE) || defined(ENERGIA)
    // Those have more RAM and like single write at a time...

    uint8_t buff[full_length];
   d6554:	ebad 0d03 	sub.w	sp, sp, r3

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);
   d6558:	f3c2 2307 	ubfx	r3, r2, #8, #8

    uint8_t buff[full_length];

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
   d655c:	ba76      	rev16	r6, r6
    hdr->length = htons(length+length2);
   d655e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                               (data2 ? length2 : 0);

#if defined(BLYNK_SEND_ATOMIC) || defined(ESP8266) || defined(ESP32) || defined(SPARK) || defined(PARTICLE) || defined(ENERGIA)
    // Those have more RAM and like single write at a time...

    uint8_t buff[full_length];
   d6562:	f8c7 d004 	str.w	sp, [r7, #4]

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
   d6566:	f88d 9000 	strb.w	r9, [sp]
    hdr->msg_id = htons(id);
   d656a:	f8ad 6001 	strh.w	r6, [sp, #1]
    hdr->length = htons(length+length2);
   d656e:	f8ad 3003 	strh.w	r3, [sp, #3]

    size_t pos = sizeof(BlynkHeader);
    if (data && length) {
   d6572:	f1bb 0f00 	cmp.w	fp, #0
   d6576:	d063      	beq.n	d6640 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x15c>
   d6578:	2d00      	cmp	r5, #0
   d657a:	d061      	beq.n	d6640 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x15c>
        memcpy(buff + pos, data, length);
   d657c:	462a      	mov	r2, r5
   d657e:	4659      	mov	r1, fp
   d6580:	f10d 0005 	add.w	r0, sp, #5
   d6584:	f00c fff6 	bl	e3574 <memcpy>
        pos += length;
   d6588:	1d68      	adds	r0, r5, #5
    }
    if (data2 && length2) {
   d658a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   d658c:	2b00      	cmp	r3, #0
   d658e:	d159      	bne.n	d6644 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x160>
    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);

    size_t pos = sizeof(BlynkHeader);
   d6590:	2500      	movs	r5, #0
    if (data2 && length2) {
        memcpy(buff + pos, data2, length2);
    }

    size_t wlen = 0;
    while (wlen < full_length) {
   d6592:	4545      	cmp	r5, r8
   d6594:	d262      	bcs.n	d665c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x178>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   d6596:	ebc5 0608 	rsb	r6, r5, r8
#define BlynkUtility_h

template<class T>
const T& BlynkMin(const T& a, const T& b)
{
    return (b < a) ? b : a;
   d659a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
        BLYNK_DBG_DUMP("<", buff + wlen, chunk);
   d659e:	687b      	ldr	r3, [r7, #4]
   d65a0:	bf28      	it	cs
   d65a2:	f44f 6680 	movcs.w	r6, #1024	; 0x400
   d65a6:	eb03 0905 	add.w	r9, r3, r5
   d65aa:	b126      	cbz	r6, d65b6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xd2>
   d65ac:	4632      	mov	r2, r6
   d65ae:	4649      	mov	r1, r9
   d65b0:	483e      	ldr	r0, [pc, #248]	; (d66ac <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1c8>)
   d65b2:	f7fe feeb 	bl	d538c <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.0>
    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
    }

    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
   d65b6:	4632      	mov	r2, r6
   d65b8:	4649      	mov	r1, r9
   d65ba:	6820      	ldr	r0, [r4, #0]
   d65bc:	f006 f80b 	bl	dc5d6 <_ZN9TCPClient5writeEPKhj>
   d65c0:	4606      	mov	r6, r0
        const size_t w = conn.write(buff + wlen, chunk);
        BlynkDelay(BLYNK_SEND_THROTTLE);
   d65c2:	2000      	movs	r0, #0
   d65c4:	f003 ff20 	bl	da408 <_Z10BlynkDelaym>
        if (w == 0) {
   d65c8:	2e00      	cmp	r6, #0
   d65ca:	d145      	bne.n	d6658 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x174>
#ifdef BLYNK_DEBUG
            BLYNK_LOG1(BLYNK_F("Cmd error"));
   d65cc:	f7fe fe98 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d65d0:	f005 fe7e 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d65d4:	4936      	ldr	r1, [pc, #216]	; (d66b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1cc>)
   d65d6:	f004 fdfe 	bl	db1d6 <_ZN5Print7printlnEPKc>
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d65da:	6820      	ldr	r0, [r4, #0]
   d65dc:	f006 f9e4 	bl	dc9a8 <_ZN9TCPClient4stopEv>
#endif
            conn.disconnect();
            state = CONNECTING;
   d65e0:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
   d65e2:	f003 ff1b 	bl	da41c <BlynkNoOpCbk>
        return;
    }

    lastActivityOut = BlynkMillis();

}
   d65e6:	370c      	adds	r7, #12
{
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
#ifdef BLYNK_DEBUG_ALL
        BLYNK_LOG2(BLYNK_F("Cmd skipped:"), cmd);
#endif
        return;
   d65e8:	46d5      	mov	sp, sl
        return;
    }

    lastActivityOut = BlynkMillis();

}
   d65ea:	46bd      	mov	sp, r7
   d65ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   d65f0:	8b23      	ldrh	r3, [r4, #24]
   d65f2:	3301      	adds	r3, #1
   d65f4:	b29b      	uxth	r3, r3
   d65f6:	b903      	cbnz	r3, d65fa <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x116>
        msgIdOut = 1;
   d65f8:	2301      	movs	r3, #1
   d65fa:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
   d65fc:	8b26      	ldrh	r6, [r4, #24]
   d65fe:	e790      	b.n	d6522 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x3e>
        id = getNextMsgId();
    }

#if defined(BLYNK_MSG_LIMIT) && BLYNK_MSG_LIMIT > 0
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   d6600:	68e3      	ldr	r3, [r4, #12]
   d6602:	6922      	ldr	r2, [r4, #16]
   d6604:	4293      	cmp	r3, r2
   d6606:	bf38      	it	cc
   d6608:	4613      	movcc	r3, r2
   d660a:	f103 0842 	add.w	r8, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   d660e:	f003 fefd 	bl	da40c <_Z11BlynkMillisv>
        if (wait_time >= 0) {
   d6612:	ebc0 0008 	rsb	r0, r0, r8
   d6616:	2800      	cmp	r0, #0
   d6618:	db0a      	blt.n	d6630 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x14c>
#ifdef BLYNK_DEBUG_ALL
            BLYNK_LOG2(BLYNK_F("Waiting:"), wait_time);
#endif
            while (wait_time >= 0) {
                run();
   d661a:	2100      	movs	r1, #0
   d661c:	4620      	mov	r0, r4
   d661e:	f7ff fe95 	bl	d634c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
                wait_time = allowed_time - BlynkMillis();
   d6622:	f003 fef3 	bl	da40c <_Z11BlynkMillisv>
        int32_t wait_time = allowed_time - BlynkMillis();
        if (wait_time >= 0) {
#ifdef BLYNK_DEBUG_ALL
            BLYNK_LOG2(BLYNK_F("Waiting:"), wait_time);
#endif
            while (wait_time >= 0) {
   d6626:	ebc0 0008 	rsb	r0, r0, r8
   d662a:	2800      	cmp	r0, #0
   d662c:	daf5      	bge.n	d661a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x136>
   d662e:	e77c      	b.n	d652a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x46>
                run();
                wait_time = allowed_time - BlynkMillis();
            }
        } else if (nesting == 0) {
   d6630:	7f21      	ldrb	r1, [r4, #28]
   d6632:	2900      	cmp	r1, #0
   d6634:	f47f af79 	bne.w	d652a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x46>
            run();
   d6638:	4620      	mov	r0, r4
   d663a:	f7ff fe87 	bl	d634c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
   d663e:	e774      	b.n	d652a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x46>
    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);

    size_t pos = sizeof(BlynkHeader);
   d6640:	2005      	movs	r0, #5
   d6642:	e7a2      	b.n	d658a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xa6>
    if (data && length) {
        memcpy(buff + pos, data, length);
        pos += length;
    }
    if (data2 && length2) {
   d6644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   d6646:	2b00      	cmp	r3, #0
   d6648:	d0a2      	beq.n	d6590 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xac>
        memcpy(buff + pos, data2, length2);
   d664a:	461a      	mov	r2, r3
   d664c:	687b      	ldr	r3, [r7, #4]
   d664e:	6b79      	ldr	r1, [r7, #52]	; 0x34
   d6650:	4418      	add	r0, r3
   d6652:	f00c ff8f 	bl	e3574 <memcpy>
   d6656:	e79b      	b.n	d6590 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xac>
            conn.disconnect();
            state = CONNECTING;
            BlynkOnDisconnected();
            return;
        }
        wlen += w;
   d6658:	4435      	add	r5, r6
    if (data2 && length2) {
        memcpy(buff + pos, data2, length2);
    }

    size_t wlen = 0;
    while (wlen < full_length) {
   d665a:	e79a      	b.n	d6592 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xae>
        }
    }

#endif

    if (wlen != full_length) {
   d665c:	d01b      	beq.n	d6696 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1b2>
#ifdef BLYNK_DEBUG
        BLYNK_LOG4(BLYNK_F("Sent "), wlen, '/', full_length);
   d665e:	f7fe fe4f 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d6662:	f005 fe35 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d6666:	4913      	ldr	r1, [pc, #76]	; (d66b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1d0>)
   d6668:	f004 fda2 	bl	db1b0 <_ZN5Print5printEPKc>
   d666c:	f005 fe30 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d6670:	220a      	movs	r2, #10
   d6672:	4629      	mov	r1, r5
   d6674:	f004 fdf2 	bl	db25c <_ZN5Print5printEji>
   d6678:	f005 fe2a 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d667c:	212f      	movs	r1, #47	; 0x2f
   d667e:	f004 fd9b 	bl	db1b8 <_ZN5Print5printEc>
   d6682:	f005 fe25 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d6686:	220a      	movs	r2, #10
   d6688:	4641      	mov	r1, r8
   d668a:	f004 fde9 	bl	db260 <_ZN5Print7printlnEji>
#endif
        internalReconnect();
   d668e:	4620      	mov	r0, r4
   d6690:	f7ff fad0 	bl	d5c34 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   d6694:	e7a7      	b.n	d65e6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x102>
    }

    lastActivityOut = BlynkMillis();
   d6696:	f003 feb9 	bl	da40c <_Z11BlynkMillisv>
   d669a:	6120      	str	r0, [r4, #16]
   d669c:	e7a3      	b.n	d65e6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x102>
        BLYNK_LOG2(BLYNK_F("Cmd skipped:"), cmd);
#endif
        return;
    }

    if (0 == id) {
   d669e:	2e00      	cmp	r6, #0
   d66a0:	f47f af43 	bne.w	d652a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x46>
   d66a4:	e73a      	b.n	d651c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x38>
   d66a6:	bf00      	nop
   d66a8:	20000045 	.word	0x20000045
   d66ac:	000e6f89 	.word	0x000e6f89
   d66b0:	000e6f8b 	.word	0x000e6f8b
   d66b4:	000e6f95 	.word	0x000e6f95

000d66b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d66b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d66ba:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d66be:	ab08      	add	r3, sp, #32
   d66c0:	2400      	movs	r4, #0
   d66c2:	4605      	mov	r5, r0
   d66c4:	460f      	mov	r7, r1
   d66c6:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d66c8:	a805      	add	r0, sp, #20
   d66ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d66ce:	490e      	ldr	r1, [pc, #56]	; (d6708 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_+0x50>)
   d66d0:	9307      	str	r3, [sp, #28]
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d66d2:	4616      	mov	r6, r2
   d66d4:	9406      	str	r4, [sp, #24]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d66d6:	f7fe ff14 	bl	d5502 <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d66da:	4639      	mov	r1, r7
   d66dc:	a805      	add	r0, sp, #20
   d66de:	f7fe ff2d 	bl	d553c <_ZN10BlynkParam3addEi>
#endif
#endif

    template<typename T, typename... Args>
    void add_multi(T last) {
        add(last);
   d66e2:	4631      	mov	r1, r6
   d66e4:	a805      	add	r0, sp, #20
   d66e6:	f7fe ff29 	bl	d553c <_ZN10BlynkParam3addEi>
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d66ea:	9b06      	ldr	r3, [sp, #24]
   d66ec:	9402      	str	r4, [sp, #8]
   d66ee:	3b01      	subs	r3, #1
   d66f0:	9300      	str	r3, [sp, #0]
   d66f2:	9401      	str	r4, [sp, #4]
   d66f4:	9b05      	ldr	r3, [sp, #20]
   d66f6:	4622      	mov	r2, r4
   d66f8:	2114      	movs	r1, #20
   d66fa:	4628      	mov	r0, r5
   d66fc:	f7ff fef2 	bl	d64e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d6700:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d6704:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6706:	bf00      	nop
   d6708:	000e6f9b 	.word	0x000e6f9b

000d670c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:

#else

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::sendInfo()
   d670c:	b500      	push	{lr}
   d670e:	b095      	sub	sp, #84	; 0x54
#ifdef BLYNK_HAS_PROGMEM
    char mem[profile_len];
    memcpy_P(mem, profile+8, profile_len);
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, mem, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
#else
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
   d6710:	ab04      	add	r3, sp, #16
   d6712:	2200      	movs	r2, #0
   d6714:	9301      	str	r3, [sp, #4]
   d6716:	2349      	movs	r3, #73	; 0x49
   d6718:	9300      	str	r3, [sp, #0]
   d671a:	9202      	str	r2, [sp, #8]
   d671c:	4b03      	ldr	r3, [pc, #12]	; (d672c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x20>)
   d671e:	2111      	movs	r1, #17
   d6720:	f7ff fee0 	bl	d64e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
#endif
    return;
}
   d6724:	b015      	add	sp, #84	; 0x54
   d6726:	f85d fb04 	ldr.w	pc, [sp], #4
   d672a:	bf00      	nop
   d672c:	000e6ae8 	.word	0x000e6ae8

000d6730 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d6730:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6732:	f2ad 4d34 	subw	sp, sp, #1076	; 0x434
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d6736:	ab0c      	add	r3, sp, #48	; 0x30
   d6738:	2400      	movs	r4, #0
   d673a:	4605      	mov	r5, r0
   d673c:	460f      	mov	r7, r1
   d673e:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6740:	a805      	add	r0, sp, #20
   d6742:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d6746:	4911      	ldr	r1, [pc, #68]	; (d678c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_+0x5c>)
   d6748:	9307      	str	r3, [sp, #28]
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d674a:	4616      	mov	r6, r2
   d674c:	9406      	str	r4, [sp, #24]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d674e:	f7fe fed8 	bl	d5502 <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d6752:	4639      	mov	r1, r7
   d6754:	a805      	add	r0, sp, #20
   d6756:	f7fe fef1 	bl	d553c <_ZN10BlynkParam3addEi>
        cmd.add_multi(values...);
   d675a:	4631      	mov	r1, r6
   d675c:	a808      	add	r0, sp, #32
   d675e:	f004 fbf7 	bl	daf50 <_ZN6StringC1ERKS_>
    size_t len = str.length()+1;
    char buff[len];
    const_cast<String&>(str).toCharArray(buff, len);
    add(buff, len);
#else
    add(str.c_str());
   d6762:	9908      	ldr	r1, [sp, #32]
   d6764:	a805      	add	r0, sp, #20
   d6766:	f7fe fecc 	bl	d5502 <_ZN10BlynkParam3addEPKc>
   d676a:	a808      	add	r0, sp, #32
   d676c:	f004 fb6a 	bl	dae44 <_ZN6StringD1Ev>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d6770:	9b06      	ldr	r3, [sp, #24]
   d6772:	9402      	str	r4, [sp, #8]
   d6774:	3b01      	subs	r3, #1
   d6776:	9300      	str	r3, [sp, #0]
   d6778:	9401      	str	r4, [sp, #4]
   d677a:	9b05      	ldr	r3, [sp, #20]
   d677c:	4622      	mov	r2, r4
   d677e:	2114      	movs	r1, #20
   d6780:	4628      	mov	r0, r5
   d6782:	f7ff feaf 	bl	d64e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d6786:	f20d 4d34 	addw	sp, sp, #1076	; 0x434
   d678a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d678c:	000e6f9b 	.word	0x000e6f9b

000d6790 <_Z9deepSleepv>:
  saveState();
  setAppWidgets();
}

void deepSleep()
{
   d6790:	b570      	push	{r4, r5, r6, lr}
   d6792:	b092      	sub	sp, #72	; 0x48
  String statusMessage;
   d6794:	4962      	ldr	r1, [pc, #392]	; (d6920 <_Z9deepSleepv+0x190>)
  StateString = "STBY";
  unsigned long elapsed = millis() - CycleOnTime;
  state.OnTime=state.OnTime+elapsed;
   d6796:	4c63      	ldr	r4, [pc, #396]	; (d6924 <_Z9deepSleepv+0x194>)
  setAppWidgets();
}

void deepSleep()
{
  String statusMessage;
   d6798:	a806      	add	r0, sp, #24
   d679a:	f004 fb9a 	bl	daed2 <_ZN6StringC1EPK19__FlashStringHelper>
  StateString = "STBY";
   d679e:	4962      	ldr	r1, [pc, #392]	; (d6928 <_Z9deepSleepv+0x198>)
   d67a0:	4862      	ldr	r0, [pc, #392]	; (d692c <_Z9deepSleepv+0x19c>)
   d67a2:	f004 fbe8 	bl	daf76 <_ZN6StringaSEPKc>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d67a6:	f003 fee1 	bl	da56c <HAL_Timer_Get_Milli_Seconds>
  unsigned long elapsed = millis() - CycleOnTime;
  state.OnTime=state.OnTime+elapsed;
   d67aa:	4a61      	ldr	r2, [pc, #388]	; (d6930 <_Z9deepSleepv+0x1a0>)
   d67ac:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
   d67b0:	6812      	ldr	r2, [r2, #0]
   d67b2:	1a9b      	subs	r3, r3, r2
   d67b4:	4418      	add	r0, r3
   d67b6:	f8c4 0428 	str.w	r0, [r4, #1064]	; 0x428
  //Save
  saveState();
   d67ba:	f7fe ffff 	bl	d57bc <_Z9saveStatev>

  if (timeSynced)
   d67be:	4b5d      	ldr	r3, [pc, #372]	; (d6934 <_Z9deepSleepv+0x1a4>)
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d67c0:	495a      	ldr	r1, [pc, #360]	; (d692c <_Z9deepSleepv+0x19c>)
   d67c2:	781b      	ldrb	r3, [r3, #0]
   d67c4:	b343      	cbz	r3, d6818 <_Z9deepSleepv+0x88>
   d67c6:	a80a      	add	r0, sp, #40	; 0x28
   d67c8:	f004 fbc2 	bl	daf50 <_ZN6StringC1ERKS_>
  {
       statusMessage = StateString+" "+Time.format(rtc.rtcNow()+gmtOffsetSeconds,"%h%e %R")+" "+field7+"%";
   d67cc:	495a      	ldr	r1, [pc, #360]	; (d6938 <_Z9deepSleepv+0x1a8>)
   d67ce:	a80a      	add	r0, sp, #40	; 0x28
   d67d0:	f004 fc2a 	bl	db028 <_ZplRK15StringSumHelperPKc>
   d67d4:	4605      	mov	r5, r0
   d67d6:	4859      	ldr	r0, [pc, #356]	; (d693c <_Z9deepSleepv+0x1ac>)
   d67d8:	f002 ff3f 	bl	d965a <_ZN8MCP7941x6rtcNowEv>
   d67dc:	4b58      	ldr	r3, [pc, #352]	; (d6940 <_Z9deepSleepv+0x1b0>)
   d67de:	4959      	ldr	r1, [pc, #356]	; (d6944 <_Z9deepSleepv+0x1b4>)
   d67e0:	681a      	ldr	r2, [r3, #0]
   d67e2:	4b59      	ldr	r3, [pc, #356]	; (d6948 <_Z9deepSleepv+0x1b8>)
   d67e4:	4402      	add	r2, r0
   d67e6:	a80e      	add	r0, sp, #56	; 0x38
   d67e8:	f004 ffa2 	bl	db730 <_ZN9TimeClass6formatElPKc>
   d67ec:	a90e      	add	r1, sp, #56	; 0x38
   d67ee:	4628      	mov	r0, r5
   d67f0:	f004 fc0e 	bl	db010 <_ZplRK15StringSumHelperRK6String>
   d67f4:	4950      	ldr	r1, [pc, #320]	; (d6938 <_Z9deepSleepv+0x1a8>)
   d67f6:	f004 fc17 	bl	db028 <_ZplRK15StringSumHelperPKc>
   d67fa:	4954      	ldr	r1, [pc, #336]	; (d694c <_Z9deepSleepv+0x1bc>)
   d67fc:	f004 fc08 	bl	db010 <_ZplRK15StringSumHelperRK6String>
   d6800:	4953      	ldr	r1, [pc, #332]	; (d6950 <_Z9deepSleepv+0x1c0>)
   d6802:	f004 fc11 	bl	db028 <_ZplRK15StringSumHelperPKc>
   d6806:	4601      	mov	r1, r0
   d6808:	a806      	add	r0, sp, #24
   d680a:	f004 fb92 	bl	daf32 <_ZN6StringaSERKS_>
   d680e:	a80e      	add	r0, sp, #56	; 0x38
   d6810:	f004 fb18 	bl	dae44 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d6814:	a80a      	add	r0, sp, #40	; 0x28
   d6816:	e011      	b.n	d683c <_Z9deepSleepv+0xac>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d6818:	a80e      	add	r0, sp, #56	; 0x38
   d681a:	f004 fb99 	bl	daf50 <_ZN6StringC1ERKS_>

  }
  else
  {
       statusMessage = StateString+"                "+field7+"%";
   d681e:	494d      	ldr	r1, [pc, #308]	; (d6954 <_Z9deepSleepv+0x1c4>)
   d6820:	a80e      	add	r0, sp, #56	; 0x38
   d6822:	f004 fc01 	bl	db028 <_ZplRK15StringSumHelperPKc>
   d6826:	4949      	ldr	r1, [pc, #292]	; (d694c <_Z9deepSleepv+0x1bc>)
   d6828:	f004 fbf2 	bl	db010 <_ZplRK15StringSumHelperRK6String>
   d682c:	4948      	ldr	r1, [pc, #288]	; (d6950 <_Z9deepSleepv+0x1c0>)
   d682e:	f004 fbfb 	bl	db028 <_ZplRK15StringSumHelperPKc>
   d6832:	4601      	mov	r1, r0
   d6834:	a806      	add	r0, sp, #24
   d6836:	f004 fb7c 	bl	daf32 <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d683a:	a80e      	add	r0, sp, #56	; 0x38
   d683c:	f004 fb02 	bl	dae44 <_ZN6StringD1Ev>
  }
  Blynk.virtualWrite(V30,statusMessage);
   d6840:	a906      	add	r1, sp, #24
   d6842:	a80e      	add	r0, sp, #56	; 0x38
   d6844:	f004 fb84 	bl	daf50 <_ZN6StringC1ERKS_>
   d6848:	aa0e      	add	r2, sp, #56	; 0x38
   d684a:	211e      	movs	r1, #30
   d684c:	4842      	ldr	r0, [pc, #264]	; (d6958 <_Z9deepSleepv+0x1c8>)
   d684e:	f7ff ff6f 	bl	d6730 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d6852:	a80e      	add	r0, sp, #56	; 0x38
   d6854:	f004 faf6 	bl	dae44 <_ZN6StringD1Ev>
  delay(3000);
   d6858:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d685c:	f004 ffcc 	bl	db7f8 <delay>
  power.setPowerON(EXT3V3,false);
   d6860:	2200      	movs	r2, #0
   d6862:	2102      	movs	r1, #2
   d6864:	483d      	ldr	r0, [pc, #244]	; (d695c <_Z9deepSleepv+0x1cc>)
   d6866:	f003 f883 	bl	d9970 <_ZN12IoTNodePower10setPowerONE9powerNameb>
  power.setPowerON(EXT5V,false);
   d686a:	2200      	movs	r2, #0
   d686c:	2103      	movs	r1, #3
   d686e:	483b      	ldr	r0, [pc, #236]	; (d695c <_Z9deepSleepv+0x1cc>)
   d6870:	f003 f87e 	bl	d9970 <_ZN12IoTNodePower10setPowerONE9powerNameb>
  // Release I2C bus for expander
  if (!Wire.isEnabled()) {
   d6874:	f006 fbbc 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d6878:	f005 fdd4 	bl	dc424 <_ZN7TwoWire9isEnabledEv>
   d687c:	b918      	cbnz	r0, d6886 <_Z9deepSleepv+0xf6>
    Wire.end();
   d687e:	f006 fbb7 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d6882:	f005 fda7 	bl	dc3d4 <_ZN7TwoWire3endEv>
  }  

  DEBUG_PRINTLN("Going to sleep");
   d6886:	f005 fd23 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d688a:	4935      	ldr	r1, [pc, #212]	; (d6960 <_Z9deepSleepv+0x1d0>)
    Cellular.off();
  #endif
  #if Wiring_WiFi
  WiFi.off();
  // For wifi FORCE DEEPSLEEP no stanby
  state.bSleepModeStandby=false;
   d688c:	4d25      	ldr	r5, [pc, #148]	; (d6924 <_Z9deepSleepv+0x194>)
  // Release I2C bus for expander
  if (!Wire.isEnabled()) {
    Wire.end();
  }  

  DEBUG_PRINTLN("Going to sleep");
   d688e:	f004 fca2 	bl	db1d6 <_ZN5Print7printlnEPKc>
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d6892:	4834      	ldr	r0, [pc, #208]	; (d6964 <_Z9deepSleepv+0x1d4>)
   d6894:	2300      	movs	r3, #0
   d6896:	461a      	mov	r2, r3
   d6898:	4619      	mov	r1, r3
   d689a:	6840      	ldr	r0, [r0, #4]
   d689c:	f004 f8ce 	bl	daa3c <network_off>
    Cellular.off();
  #endif
  #if Wiring_WiFi
  WiFi.off();
  // For wifi FORCE DEEPSLEEP no stanby
  state.bSleepModeStandby=false;
   d68a0:	2300      	movs	r3, #0
  state.bInSleepMode=false;
  #endif  

  delay(1000);
   d68a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    Cellular.off();
  #endif
  #if Wiring_WiFi
  WiFi.off();
  // For wifi FORCE DEEPSLEEP no stanby
  state.bSleepModeStandby=false;
   d68a6:	f884 3424 	strb.w	r3, [r4, #1060]	; 0x424
  state.bInSleepMode=false;
   d68aa:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
  #endif  

  delay(1000);
   d68ae:	f004 ffa3 	bl	db7f8 <delay>
  if (state.bSleepModeStandby){
   d68b2:	f894 4424 	ldrb.w	r4, [r4, #1060]	; 0x424
   d68b6:	b1cc      	cbz	r4, d68ec <_Z9deepSleepv+0x15c>
    DEBUG_PRINTLN("Going to standby sleep");
   d68b8:	f005 fd0a 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d68bc:	492a      	ldr	r1, [pc, #168]	; (d6968 <_Z9deepSleepv+0x1d8>)
   d68be:	f004 fc8a 	bl	db1d6 <_ZN5Print7printlnEPKc>
   d68c2:	4b2a      	ldr	r3, [pc, #168]	; (d696c <_Z9deepSleepv+0x1dc>)
   d68c4:	6819      	ldr	r1, [r3, #0]
   d68c6:	2308      	movs	r3, #8
   d68c8:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
   d68cc:	ab12      	add	r3, sp, #72	; 0x48
    state.bInSleepMode=true;
   d68ce:	2201      	movs	r2, #1
   d68d0:	f885 2425 	strb.w	r2, [r5, #1061]	; 0x425
   d68d4:	f803 2d31 	strb.w	r2, [r3, #-49]!
        return sleep(sleepMode, seconds, flag);
    }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) {
        return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag);
   d68d8:	9102      	str	r1, [sp, #8]
   d68da:	f44f 7161 	mov.w	r1, #900	; 0x384
   d68de:	9101      	str	r1, [sp, #4]
   d68e0:	9200      	str	r2, [sp, #0]
   d68e2:	a90a      	add	r1, sp, #40	; 0x28
   d68e4:	a80e      	add	r0, sp, #56	; 0x38
   d68e6:	f004 fa25 	bl	dad34 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
   d68ea:	e014      	b.n	d6916 <_Z9deepSleepv+0x186>
    System.sleep(D8, RISING, 900, SLEEP_NETWORK_STANDBY);
    return;
  }
  else{
    DEBUG_PRINTLN("Going to deep sleep");
   d68ec:	f005 fcf0 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d68f0:	491f      	ldr	r1, [pc, #124]	; (d6970 <_Z9deepSleepv+0x1e0>)
   d68f2:	f004 fc70 	bl	db1d6 <_ZN5Print7printlnEPKc>
    state.bSleepModeStandby=false;
    state.bInSleepMode=true;
   d68f6:	2601      	movs	r6, #1
    delay(2000);
   d68f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    System.sleep(D8, RISING, 900, SLEEP_NETWORK_STANDBY);
    return;
  }
  else{
    DEBUG_PRINTLN("Going to deep sleep");
    state.bSleepModeStandby=false;
   d68fc:	f885 4424 	strb.w	r4, [r5, #1060]	; 0x424
    state.bInSleepMode=true;
   d6900:	f885 6425 	strb.w	r6, [r5, #1061]	; 0x425
    delay(2000);
   d6904:	f004 ff78 	bl	db7f8 <delay>
    System.sleep(SLEEP_MODE_DEEP); 
   d6908:	4b1a      	ldr	r3, [pc, #104]	; (d6974 <_Z9deepSleepv+0x1e4>)
   d690a:	4622      	mov	r2, r4
   d690c:	681b      	ldr	r3, [r3, #0]
   d690e:	4631      	mov	r1, r6
   d6910:	a80e      	add	r0, sp, #56	; 0x38
   d6912:	f004 f9df 	bl	dacd4 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
  setAppWidgets();
}

void deepSleep()
{
  String statusMessage;
   d6916:	a806      	add	r0, sp, #24
   d6918:	f004 fa94 	bl	dae44 <_ZN6StringD1Ev>
    state.bSleepModeStandby=false;
    state.bInSleepMode=true;
    delay(2000);
    System.sleep(SLEEP_MODE_DEEP); 
    }
}
   d691c:	b012      	add	sp, #72	; 0x48
   d691e:	bd70      	pop	{r4, r5, r6, pc}
   d6920:	000e6bf1 	.word	0x000e6bf1
   d6924:	2003da80 	.word	0x2003da80
   d6928:	000e6f9e 	.word	0x000e6f9e
   d692c:	2003d7d8 	.word	0x2003d7d8
   d6930:	2003e178 	.word	0x2003e178
   d6934:	2003dead 	.word	0x2003dead
   d6938:	000e6fbc 	.word	0x000e6fbc
   d693c:	2003e174 	.word	0x2003e174
   d6940:	2003d5a0 	.word	0x2003d5a0
   d6944:	2003e2ac 	.word	0x2003e2ac
   d6948:	000e6fa3 	.word	0x000e6fa3
   d694c:	2003d7e8 	.word	0x2003d7e8
   d6950:	000e6fab 	.word	0x000e6fab
   d6954:	000e6fad 	.word	0x000e6fad
   d6958:	2003e234 	.word	0x2003e234
   d695c:	2003deac 	.word	0x2003deac
   d6960:	000e6fbe 	.word	0x000e6fbe
   d6964:	2003e5e0 	.word	0x2003e5e0
   d6968:	000e6fcd 	.word	0x000e6fcd
   d696c:	2003dec8 	.word	0x2003dec8
   d6970:	000e6fe4 	.word	0x000e6fe4
   d6974:	2003e170 	.word	0x2003e170

000d6978 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII15StringSumHelperEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d6978:	b5f0      	push	{r4, r5, r6, r7, lr}
   d697a:	f2ad 4d34 	subw	sp, sp, #1076	; 0x434
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d697e:	ab0c      	add	r3, sp, #48	; 0x30
   d6980:	2400      	movs	r4, #0
   d6982:	4605      	mov	r5, r0
   d6984:	460f      	mov	r7, r1
   d6986:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6988:	a805      	add	r0, sp, #20
   d698a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d698e:	4911      	ldr	r1, [pc, #68]	; (d69d4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII15StringSumHelperEEEviDpT_+0x5c>)
   d6990:	9307      	str	r3, [sp, #28]
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d6992:	4616      	mov	r6, r2
   d6994:	9406      	str	r4, [sp, #24]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6996:	f7fe fdb4 	bl	d5502 <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d699a:	4639      	mov	r1, r7
   d699c:	a805      	add	r0, sp, #20
   d699e:	f7fe fdcd 	bl	d553c <_ZN10BlynkParam3addEi>
   d69a2:	4631      	mov	r1, r6
   d69a4:	a808      	add	r0, sp, #32
   d69a6:	f004 fad3 	bl	daf50 <_ZN6StringC1ERKS_>
    size_t len = str.length()+1;
    char buff[len];
    const_cast<String&>(str).toCharArray(buff, len);
    add(buff, len);
#else
    add(str.c_str());
   d69aa:	9908      	ldr	r1, [sp, #32]
   d69ac:	a805      	add	r0, sp, #20
   d69ae:	f7fe fda8 	bl	d5502 <_ZN10BlynkParam3addEPKc>
   d69b2:	a808      	add	r0, sp, #32
   d69b4:	f004 fa46 	bl	dae44 <_ZN6StringD1Ev>
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d69b8:	9b06      	ldr	r3, [sp, #24]
   d69ba:	9402      	str	r4, [sp, #8]
   d69bc:	3b01      	subs	r3, #1
   d69be:	9300      	str	r3, [sp, #0]
   d69c0:	9401      	str	r4, [sp, #4]
   d69c2:	9b05      	ldr	r3, [sp, #20]
   d69c4:	4622      	mov	r2, r4
   d69c6:	2114      	movs	r1, #20
   d69c8:	4628      	mov	r0, r5
   d69ca:	f7ff fd8b 	bl	d64e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d69ce:	f20d 4d34 	addw	sp, sp, #1076	; 0x434
   d69d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d69d4:	000e6f9b 	.word	0x000e6f9b

000d69d8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d69d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d69da:	f2ad 4d2c 	subw	sp, sp, #1068	; 0x42c
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d69de:	ab0a      	add	r3, sp, #40	; 0x28
   d69e0:	2400      	movs	r4, #0
   d69e2:	4606      	mov	r6, r0
   d69e4:	460d      	mov	r5, r1
   d69e6:	9307      	str	r3, [sp, #28]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d69e8:	a807      	add	r0, sp, #28
   d69ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d69ee:	4917      	ldr	r1, [pc, #92]	; (d6a4c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_+0x74>)
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d69f0:	ed8d 0a05 	vstr	s0, [sp, #20]
   d69f4:	9309      	str	r3, [sp, #36]	; 0x24
   d69f6:	9408      	str	r4, [sp, #32]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d69f8:	f7fe fd83 	bl	d5502 <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d69fc:	4629      	mov	r1, r5
   d69fe:	a807      	add	r0, sp, #28
   d6a00:	f7fe fd9c 	bl	d553c <_ZN10BlynkParam3addEi>
#else

    inline
    void BlynkParam::add(float value)
    {
        len += snprintf(buff+len, buff_size-len, "%2.3f", value)+1;
   d6a04:	ed9d 0a05 	vldr	s0, [sp, #20]
   d6a08:	9b08      	ldr	r3, [sp, #32]
   d6a0a:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6a0c:	9d07      	ldr	r5, [sp, #28]
   d6a0e:	ee10 0a10 	vmov	r0, s0
   d6a12:	1acf      	subs	r7, r1, r3
   d6a14:	441d      	add	r5, r3
   d6a16:	f00c f8bf 	bl	e2b98 <__aeabi_f2d>
   d6a1a:	4a0d      	ldr	r2, [pc, #52]	; (d6a50 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_+0x78>)
   d6a1c:	e9cd 0100 	strd	r0, r1, [sp]
   d6a20:	4639      	mov	r1, r7
   d6a22:	4628      	mov	r0, r5
   d6a24:	f004 f892 	bl	dab4c <snprintf>
   d6a28:	9b08      	ldr	r3, [sp, #32]
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d6a2a:	9402      	str	r4, [sp, #8]
   d6a2c:	3001      	adds	r0, #1
   d6a2e:	4418      	add	r0, r3
   d6a30:	9008      	str	r0, [sp, #32]
   d6a32:	3801      	subs	r0, #1
   d6a34:	9000      	str	r0, [sp, #0]
   d6a36:	9401      	str	r4, [sp, #4]
   d6a38:	9b07      	ldr	r3, [sp, #28]
   d6a3a:	4622      	mov	r2, r4
   d6a3c:	2114      	movs	r1, #20
   d6a3e:	4630      	mov	r0, r6
   d6a40:	f7ff fd50 	bl	d64e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d6a44:	f20d 4d2c 	addw	sp, sp, #1068	; 0x42c
   d6a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6a4a:	bf00      	nop
   d6a4c:	000e6f9b 	.word	0x000e6f9b
   d6a50:	000e6ffc 	.word	0x000e6ffc

000d6a54 <_Z13setAppWidgetsv>:
 DEBUG_PRINTLN("Disconnected");
}

// Update the App UI widgets as needed
void setAppWidgets()
{
   d6a54:	b538      	push	{r3, r4, r5, lr}
  Blynk.virtualWrite(V11, state.numberOfReadings);
   d6a56:	4d09      	ldr	r5, [pc, #36]	; (d6a7c <_Z13setAppWidgetsv+0x28>)
   d6a58:	4c09      	ldr	r4, [pc, #36]	; (d6a80 <_Z13setAppWidgetsv+0x2c>)
   d6a5a:	686a      	ldr	r2, [r5, #4]
   d6a5c:	4620      	mov	r0, r4
   d6a5e:	210b      	movs	r1, #11
   d6a60:	f7ff fe2a 	bl	d66b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  Blynk.virtualWrite(V13, state.secondsBetweenReadings);
   d6a64:	4620      	mov	r0, r4
   d6a66:	68aa      	ldr	r2, [r5, #8]
   d6a68:	210d      	movs	r1, #13
   d6a6a:	f7ff fe25 	bl	d66b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  Blynk.virtualWrite(V15, state.zeroOff);
   d6a6e:	ed95 0a03 	vldr	s0, [r5, #12]
   d6a72:	210f      	movs	r1, #15
   d6a74:	4620      	mov	r0, r4
   d6a76:	f7ff ffaf 	bl	d69d8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
   d6a7a:	bd38      	pop	{r3, r4, r5, pc}
   d6a7c:	2003da80 	.word	0x2003da80
   d6a80:	2003e234 	.word	0x2003e234

000d6a84 <BlynkWidgetWrite10>:
}

// BLYNK_WRITE is a function called every time device gets an update of Virtual Pin value from the server (or app):
// Get the desired number of readings from the app
BLYNK_WRITE(V10)
{   
   d6a84:	b508      	push	{r3, lr}
        : buff((char*)addr), len(length), buff_size(buffsize)
    {}

    const char* asStr() const       { return buff; }
    const char* asString() const    { return buff; }
    int         asInt() const       { return atoi(buff); }
   d6a86:	6808      	ldr	r0, [r1, #0]
   d6a88:	f00c fc61 	bl	e334e <atoi>
  state.numberOfReadings = param.asInt(); // Get value as integer
   d6a8c:	4b03      	ldr	r3, [pc, #12]	; (d6a9c <BlynkWidgetWrite10+0x18>)
   d6a8e:	6058      	str	r0, [r3, #4]
  //Save
  saveState();
   d6a90:	f7fe fe94 	bl	d57bc <_Z9saveStatev>
  setAppWidgets();
}
   d6a94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
BLYNK_WRITE(V10)
{   
  state.numberOfReadings = param.asInt(); // Get value as integer
  //Save
  saveState();
  setAppWidgets();
   d6a98:	f7ff bfdc 	b.w	d6a54 <_Z13setAppWidgetsv>
   d6a9c:	2003da80 	.word	0x2003da80

000d6aa0 <BlynkWidgetWrite12>:
}

BLYNK_WRITE(V12)
{   
   d6aa0:	b508      	push	{r3, lr}
   d6aa2:	6808      	ldr	r0, [r1, #0]
   d6aa4:	f00c fc53 	bl	e334e <atoi>
  state.secondsBetweenReadings = param.asInt(); // Get value as integer
   d6aa8:	4b03      	ldr	r3, [pc, #12]	; (d6ab8 <BlynkWidgetWrite12+0x18>)
   d6aaa:	6098      	str	r0, [r3, #8]
  //Save to FRAM
  saveState();
   d6aac:	f7fe fe86 	bl	d57bc <_Z9saveStatev>
  setAppWidgets();
}
   d6ab0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
BLYNK_WRITE(V12)
{   
  state.secondsBetweenReadings = param.asInt(); // Get value as integer
  //Save to FRAM
  saveState();
  setAppWidgets();
   d6ab4:	f7ff bfce 	b.w	d6a54 <_Z13setAppWidgetsv>
   d6ab8:	2003da80 	.word	0x2003da80

000d6abc <BlynkWidgetWriteInternalPinACON>:
    System.sleep(SLEEP_MODE_DEEP); 
    }
}

// Update app connection state
BLYNK_APP_CONNECTED() {
   d6abc:	b508      	push	{r3, lr}
  appConnected = true;
   d6abe:	4b06      	ldr	r3, [pc, #24]	; (d6ad8 <BlynkWidgetWriteInternalPinACON+0x1c>)
   d6ac0:	2201      	movs	r2, #1
   d6ac2:	701a      	strb	r2, [r3, #0]
  setAppWidgets();
   d6ac4:	f7ff ffc6 	bl	d6a54 <_Z13setAppWidgetsv>
  DEBUG_PRINTLN("Connected");
   d6ac8:	f005 fc02 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d6acc:	4903      	ldr	r1, [pc, #12]	; (d6adc <BlynkWidgetWriteInternalPinACON+0x20>)
}
   d6ace:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

// Update app connection state
BLYNK_APP_CONNECTED() {
  appConnected = true;
  setAppWidgets();
  DEBUG_PRINTLN("Connected");
   d6ad2:	f004 bb80 	b.w	db1d6 <_ZN5Print7printlnEPKc>
   d6ad6:	bf00      	nop
   d6ad8:	2003da44 	.word	0x2003da44
   d6adc:	000e7002 	.word	0x000e7002

000d6ae0 <BlynkWidgetWrite14>:
  }
  
}
// Calibration
BLYNK_WRITE(V14) 
{
   d6ae0:	b510      	push	{r4, lr}
   d6ae2:	6808      	ldr	r0, [r1, #0]
   d6ae4:	f00c fc33 	bl	e334e <atoi>
  if (param.asInt()==1)
   d6ae8:	2801      	cmp	r0, #1
   d6aea:	d10d      	bne.n	d6b08 <BlynkWidgetWrite14+0x28>
  {
    state.zeroOff = sensor1.zero();
   d6aec:	480d      	ldr	r0, [pc, #52]	; (d6b24 <BlynkWidgetWrite14+0x44>)
   d6aee:	4c0e      	ldr	r4, [pc, #56]	; (d6b28 <BlynkWidgetWrite14+0x48>)
   d6af0:	f002 fb3a 	bl	d9168 <_ZN3ULP4zeroEv>
   d6af4:	ed84 0a03 	vstr	s0, [r4, #12]
    saveState();
   d6af8:	f7fe fe60 	bl	d57bc <_Z9saveStatev>
    Blynk.virtualWrite(V15, state.zeroOff);
   d6afc:	ed94 0a03 	vldr	s0, [r4, #12]
   d6b00:	480a      	ldr	r0, [pc, #40]	; (d6b2c <BlynkWidgetWrite14+0x4c>)
   d6b02:	210f      	movs	r1, #15
   d6b04:	f7ff ff68 	bl	d69d8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
  }
  Blynk.virtualWrite(V14, 0);
   d6b08:	2200      	movs	r2, #0
   d6b0a:	210e      	movs	r1, #14
   d6b0c:	4807      	ldr	r0, [pc, #28]	; (d6b2c <BlynkWidgetWrite14+0x4c>)
   d6b0e:	f7ff fdd3 	bl	d66b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  // Since data will be invalid save the new calibration and reset
  delay(4000);
   d6b12:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
   d6b16:	f004 fe6f 	bl	db7f8 <delay>
  System.reset();
}
   d6b1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Blynk.virtualWrite(V15, state.zeroOff);
  }
  Blynk.virtualWrite(V14, 0);
  // Since data will be invalid save the new calibration and reset
  delay(4000);
  System.reset();
   d6b1e:	f004 b8d5 	b.w	daccc <_ZN11SystemClass5resetEv>
   d6b22:	bf00      	nop
   d6b24:	2003ded0 	.word	0x2003ded0
   d6b28:	2003da80 	.word	0x2003da80
   d6b2c:	2003e234 	.word	0x2003e234

000d6b30 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d6b30:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6b32:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d6b36:	ab08      	add	r3, sp, #32
   d6b38:	2400      	movs	r4, #0
   d6b3a:	4605      	mov	r5, r0
   d6b3c:	460f      	mov	r7, r1
   d6b3e:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6b40:	a805      	add	r0, sp, #20
   d6b42:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d6b46:	490e      	ldr	r1, [pc, #56]	; (d6b80 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_+0x50>)
   d6b48:	9307      	str	r3, [sp, #28]
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d6b4a:	4616      	mov	r6, r2
   d6b4c:	9406      	str	r4, [sp, #24]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6b4e:	f7fe fcd8 	bl	d5502 <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d6b52:	4639      	mov	r1, r7
   d6b54:	a805      	add	r0, sp, #20
   d6b56:	f7fe fcf1 	bl	d553c <_ZN10BlynkParam3addEi>
#endif
#endif

    template<typename T, typename... Args>
    void add_multi(T last) {
        add(last);
   d6b5a:	4631      	mov	r1, r6
   d6b5c:	a805      	add	r0, sp, #20
   d6b5e:	f7fe fcd0 	bl	d5502 <_ZN10BlynkParam3addEPKc>
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d6b62:	9b06      	ldr	r3, [sp, #24]
   d6b64:	9402      	str	r4, [sp, #8]
   d6b66:	3b01      	subs	r3, #1
   d6b68:	9300      	str	r3, [sp, #0]
   d6b6a:	9401      	str	r4, [sp, #4]
   d6b6c:	9b05      	ldr	r3, [sp, #20]
   d6b6e:	4622      	mov	r2, r4
   d6b70:	2114      	movs	r1, #20
   d6b72:	4628      	mov	r0, r5
   d6b74:	f7ff fcb6 	bl	d64e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d6b78:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d6b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6b7e:	bf00      	nop
   d6b80:	000e6f9b 	.word	0x000e6f9b

000d6b84 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d6b84:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6b86:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d6b8a:	ab08      	add	r3, sp, #32
   d6b8c:	2400      	movs	r4, #0
   d6b8e:	4605      	mov	r5, r0
   d6b90:	460f      	mov	r7, r1
   d6b92:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6b94:	a805      	add	r0, sp, #20
   d6b96:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d6b9a:	490e      	ldr	r1, [pc, #56]	; (d6bd4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_+0x50>)
   d6b9c:	9307      	str	r3, [sp, #28]
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d6b9e:	4616      	mov	r6, r2
   d6ba0:	9406      	str	r4, [sp, #24]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6ba2:	f7fe fcae 	bl	d5502 <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d6ba6:	4639      	mov	r1, r7
   d6ba8:	a805      	add	r0, sp, #20
   d6baa:	f7fe fcc7 	bl	d553c <_ZN10BlynkParam3addEi>
#endif
#endif

    template<typename T, typename... Args>
    void add_multi(T last) {
        add(last);
   d6bae:	4631      	mov	r1, r6
   d6bb0:	a805      	add	r0, sp, #20
   d6bb2:	f7fe fcc3 	bl	d553c <_ZN10BlynkParam3addEi>
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d6bb6:	9b06      	ldr	r3, [sp, #24]
   d6bb8:	9402      	str	r4, [sp, #8]
   d6bba:	3b01      	subs	r3, #1
   d6bbc:	9300      	str	r3, [sp, #0]
   d6bbe:	9401      	str	r4, [sp, #4]
   d6bc0:	9b05      	ldr	r3, [sp, #20]
   d6bc2:	4622      	mov	r2, r4
   d6bc4:	2114      	movs	r1, #20
   d6bc6:	4628      	mov	r0, r5
   d6bc8:	f7ff fc8c 	bl	d64e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d6bcc:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d6bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6bd2:	bf00      	nop
   d6bd4:	000e6f9b 	.word	0x000e6f9b

000d6bd8 <_Z20initializeAppWidgetsv>:
  Blynk.virtualWrite(V13, state.secondsBetweenReadings);
  Blynk.virtualWrite(V15, state.zeroOff);
}

void initializeAppWidgets()
{
   d6bd8:	b510      	push	{r4, lr}
  Blynk.virtualWrite(V10, state.numberOfReadings);
   d6bda:	4c46      	ldr	r4, [pc, #280]	; (d6cf4 <_Z20initializeAppWidgetsv+0x11c>)
   d6bdc:	4846      	ldr	r0, [pc, #280]	; (d6cf8 <_Z20initializeAppWidgetsv+0x120>)
   d6bde:	6862      	ldr	r2, [r4, #4]
   d6be0:	210a      	movs	r1, #10
   d6be2:	f7ff fd69 	bl	d66b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  Blynk.virtualWrite(V12, state.secondsBetweenReadings);
   d6be6:	68a2      	ldr	r2, [r4, #8]
   d6be8:	4843      	ldr	r0, [pc, #268]	; (d6cf8 <_Z20initializeAppWidgetsv+0x120>)
   d6bea:	210c      	movs	r1, #12
   d6bec:	f7ff fd64 	bl	d66b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  Blynk.virtualWrite(V11, state.numberOfReadings);
   d6bf0:	6862      	ldr	r2, [r4, #4]
   d6bf2:	4841      	ldr	r0, [pc, #260]	; (d6cf8 <_Z20initializeAppWidgetsv+0x120>)
   d6bf4:	210b      	movs	r1, #11
   d6bf6:	f7ff fd5f 	bl	d66b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  Blynk.virtualWrite(V13, state.secondsBetweenReadings);
   d6bfa:	68a2      	ldr	r2, [r4, #8]
   d6bfc:	483e      	ldr	r0, [pc, #248]	; (d6cf8 <_Z20initializeAppWidgetsv+0x120>)
   d6bfe:	210d      	movs	r1, #13
   d6c00:	f7ff fd5a 	bl	d66b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  Blynk.virtualWrite(V20, state.expression);
   d6c04:	f104 0210 	add.w	r2, r4, #16
   d6c08:	2114      	movs	r1, #20
   d6c0a:	483b      	ldr	r0, [pc, #236]	; (d6cf8 <_Z20initializeAppWidgetsv+0x120>)
   d6c0c:	f7ff ff90 	bl	d6b30 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
  Blynk.virtualWrite(V16, state.email);
   d6c10:	f504 7288 	add.w	r2, r4, #272	; 0x110
   d6c14:	2110      	movs	r1, #16
   d6c16:	4838      	ldr	r0, [pc, #224]	; (d6cf8 <_Z20initializeAppWidgetsv+0x120>)
   d6c18:	f7ff ff8a 	bl	d6b30 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
  Blynk.virtualWrite(V18, state.batEmail);
   d6c1c:	f504 7204 	add.w	r2, r4, #528	; 0x210
   d6c20:	2112      	movs	r1, #18
   d6c22:	4835      	ldr	r0, [pc, #212]	; (d6cf8 <_Z20initializeAppWidgetsv+0x120>)
   d6c24:	f7ff ff84 	bl	d6b30 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
  Blynk.virtualWrite(V26, state.tamperEmail);
   d6c28:	f504 7244 	add.w	r2, r4, #784	; 0x310
   d6c2c:	211a      	movs	r1, #26
   d6c2e:	4832      	ldr	r0, [pc, #200]	; (d6cf8 <_Z20initializeAppWidgetsv+0x120>)
   d6c30:	f7ff ff7e 	bl	d6b30 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
  Blynk.virtualWrite(V15, state.zeroOff);
   d6c34:	ed94 0a03 	vldr	s0, [r4, #12]
   d6c38:	482f      	ldr	r0, [pc, #188]	; (d6cf8 <_Z20initializeAppWidgetsv+0x120>)
   d6c3a:	210f      	movs	r1, #15
   d6c3c:	f7ff fecc 	bl	d69d8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
  Blynk.virtualWrite(V25, state.batThreshold);
   d6c40:	f504 6382 	add.w	r3, r4, #1040	; 0x410
   d6c44:	ed93 0a00 	vldr	s0, [r3]
   d6c48:	482b      	ldr	r0, [pc, #172]	; (d6cf8 <_Z20initializeAppWidgetsv+0x120>)
   d6c4a:	2119      	movs	r1, #25
   d6c4c:	f7ff fec4 	bl	d69d8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
  Blynk.virtualWrite(V23, state.deviceZone);
   d6c50:	f8d4 2420 	ldr.w	r2, [r4, #1056]	; 0x420
   d6c54:	4828      	ldr	r0, [pc, #160]	; (d6cf8 <_Z20initializeAppWidgetsv+0x120>)
   d6c56:	2117      	movs	r1, #23
   d6c58:	f7ff fd2e 	bl	d66b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
 // Blynk.virtualWrite(V24, state.buzzerActivated);
  Blynk.virtualWrite(V22,"Enter code to reset");
   d6c5c:	4a27      	ldr	r2, [pc, #156]	; (d6cfc <_Z20initializeAppWidgetsv+0x124>)
   d6c5e:	4826      	ldr	r0, [pc, #152]	; (d6cf8 <_Z20initializeAppWidgetsv+0x120>)
   d6c60:	2116      	movs	r1, #22
   d6c62:	f7ff ff65 	bl	d6b30 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
  // New Pins
  Blynk.virtualWrite(V24, state.buzzerTamper); // Buzzer Tamper
   d6c66:	f894 2417 	ldrb.w	r2, [r4, #1047]	; 0x417
   d6c6a:	4823      	ldr	r0, [pc, #140]	; (d6cf8 <_Z20initializeAppWidgetsv+0x120>)
   d6c6c:	2118      	movs	r1, #24
   d6c6e:	f7ff ff89 	bl	d6b84 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_>
  Blynk.virtualWrite(V27, state.buzzerVapor); // Vapor Buzzer
   d6c72:	f894 2418 	ldrb.w	r2, [r4, #1048]	; 0x418
   d6c76:	4820      	ldr	r0, [pc, #128]	; (d6cf8 <_Z20initializeAppWidgetsv+0x120>)
   d6c78:	211b      	movs	r1, #27
   d6c7a:	f7ff ff83 	bl	d6b84 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_>
  Blynk.virtualWrite(V28, state.notifyVapor); // Vapor Notify
   d6c7e:	f894 2419 	ldrb.w	r2, [r4, #1049]	; 0x419
   d6c82:	481d      	ldr	r0, [pc, #116]	; (d6cf8 <_Z20initializeAppWidgetsv+0x120>)
   d6c84:	211c      	movs	r1, #28
   d6c86:	f7ff ff7d 	bl	d6b84 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_>
  Blynk.virtualWrite(V29, state.notifyTamper); // Tamper Notify
   d6c8a:	f894 241a 	ldrb.w	r2, [r4, #1050]	; 0x41a
   d6c8e:	481a      	ldr	r0, [pc, #104]	; (d6cf8 <_Z20initializeAppWidgetsv+0x120>)
   d6c90:	211d      	movs	r1, #29
   d6c92:	f7ff ff77 	bl	d6b84 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_>
  Blynk.virtualWrite(V32, state.notifyBattery); // Battery Notify
   d6c96:	f894 241b 	ldrb.w	r2, [r4, #1051]	; 0x41b
   d6c9a:	4817      	ldr	r0, [pc, #92]	; (d6cf8 <_Z20initializeAppWidgetsv+0x120>)
   d6c9c:	2120      	movs	r1, #32
   d6c9e:	f7ff ff71 	bl	d6b84 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_>
  if (state.ActivityThreshold==144)
   d6ca2:	f8d4 341c 	ldr.w	r3, [r4, #1052]	; 0x41c
   d6ca6:	2b90      	cmp	r3, #144	; 0x90
   d6ca8:	d101      	bne.n	d6cae <_Z20initializeAppWidgetsv+0xd6>
  	Blynk.virtualWrite(V31, 3); // Tamper Setting Hammer
   d6caa:	2203      	movs	r2, #3
   d6cac:	e003      	b.n	d6cb6 <_Z20initializeAppWidgetsv+0xde>
  else  if (state.ActivityThreshold==72)
   d6cae:	2b48      	cmp	r3, #72	; 0x48
  	Blynk.virtualWrite(V31, 1); // Tamper Setting feather
   d6cb0:	bf0c      	ite	eq
   d6cb2:	2201      	moveq	r2, #1
  else
  	Blynk.virtualWrite(V31, 2); // Tamper Setting default
   d6cb4:	2202      	movne	r2, #2
   d6cb6:	211f      	movs	r1, #31
   d6cb8:	480f      	ldr	r0, [pc, #60]	; (d6cf8 <_Z20initializeAppWidgetsv+0x120>)
   d6cba:	f7ff fcfd 	bl	d66b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>

  if (terminalDebug) Blynk.virtualWrite(V21, "Initialized default values");
   d6cbe:	4b10      	ldr	r3, [pc, #64]	; (d6d00 <_Z20initializeAppWidgetsv+0x128>)
   d6cc0:	781b      	ldrb	r3, [r3, #0]
   d6cc2:	b123      	cbz	r3, d6cce <_Z20initializeAppWidgetsv+0xf6>
   d6cc4:	4a0f      	ldr	r2, [pc, #60]	; (d6d04 <_Z20initializeAppWidgetsv+0x12c>)
   d6cc6:	480c      	ldr	r0, [pc, #48]	; (d6cf8 <_Z20initializeAppWidgetsv+0x120>)
   d6cc8:	2115      	movs	r1, #21
   d6cca:	f7ff ff31 	bl	d6b30 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
  state.firstRunCheck = firstRunValue;
   d6cce:	4b0e      	ldr	r3, [pc, #56]	; (d6d08 <_Z20initializeAppWidgetsv+0x130>)
   d6cd0:	681b      	ldr	r3, [r3, #0]
   d6cd2:	6023      	str	r3, [r4, #0]
  state.bSleepModeStandby=true;
   d6cd4:	2301      	movs	r3, #1
   d6cd6:	f884 3424 	strb.w	r3, [r4, #1060]	; 0x424
  state.bInSleepMode=false;
   d6cda:	2300      	movs	r3, #0
   d6cdc:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
  DEBUG_PRINTLN("Finished Initialization");
   d6ce0:	f005 faf6 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d6ce4:	4909      	ldr	r1, [pc, #36]	; (d6d0c <_Z20initializeAppWidgetsv+0x134>)
   d6ce6:	f004 fa76 	bl	db1d6 <_ZN5Print7printlnEPKc>
  saveState();
}
   d6cea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if (terminalDebug) Blynk.virtualWrite(V21, "Initialized default values");
  state.firstRunCheck = firstRunValue;
  state.bSleepModeStandby=true;
  state.bInSleepMode=false;
  DEBUG_PRINTLN("Finished Initialization");
  saveState();
   d6cee:	f7fe bd65 	b.w	d57bc <_Z9saveStatev>
   d6cf2:	bf00      	nop
   d6cf4:	2003da80 	.word	0x2003da80
   d6cf8:	2003e234 	.word	0x2003e234
   d6cfc:	000e700c 	.word	0x000e700c
   d6d00:	2003da45 	.word	0x2003da45
   d6d04:	000e7020 	.word	0x000e7020
   d6d08:	2003d574 	.word	0x2003d574
   d6d0c:	000e703b 	.word	0x000e703b

000d6d10 <BlynkWidgetWrite22>:
}

BLYNK_WRITE(V22) //Reset Expression
{
   d6d10:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  String _resetKey = param.asStr();
   d6d14:	6809      	ldr	r1, [r1, #0]
   d6d16:	4668      	mov	r0, sp
   d6d18:	f004 f8db 	bl	daed2 <_ZN6StringC1EPK19__FlashStringHelper>
  if (_resetKey.equals("resetme"))
   d6d1c:	4961      	ldr	r1, [pc, #388]	; (d6ea4 <BlynkWidgetWrite22+0x194>)
   d6d1e:	4668      	mov	r0, sp
   d6d20:	f004 f994 	bl	db04c <_ZNK6String6equalsEPKc>
   d6d24:	2800      	cmp	r0, #0
   d6d26:	f000 80b6 	beq.w	d6e96 <BlynkWidgetWrite22+0x186>
  {
    Blynk.virtualWrite(V22,"Enter code to reset");
    state.numberOfReadings = 15;
   d6d2a:	4c5f      	ldr	r4, [pc, #380]	; (d6ea8 <BlynkWidgetWrite22+0x198>)
BLYNK_WRITE(V22) //Reset Expression
{
  String _resetKey = param.asStr();
  if (_resetKey.equals("resetme"))
  {
    Blynk.virtualWrite(V22,"Enter code to reset");
   d6d2c:	4a5f      	ldr	r2, [pc, #380]	; (d6eac <BlynkWidgetWrite22+0x19c>)
   d6d2e:	4860      	ldr	r0, [pc, #384]	; (d6eb0 <BlynkWidgetWrite22+0x1a0>)
   d6d30:	2116      	movs	r1, #22
   d6d32:	f7ff fefd 	bl	d6b30 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
    state.numberOfReadings = 15;
    state.secondsBetweenReadings=5;
   d6d36:	2305      	movs	r3, #5
    state.firstRunCheck = 0;
   d6d38:	2500      	movs	r5, #0
    state.bSleepModeStandby=true;
   d6d3a:	2701      	movs	r7, #1
{
  String _resetKey = param.asStr();
  if (_resetKey.equals("resetme"))
  {
    Blynk.virtualWrite(V22,"Enter code to reset");
    state.numberOfReadings = 15;
   d6d3c:	f04f 080f 	mov.w	r8, #15
    state.secondsBetweenReadings=5;
   d6d40:	60a3      	str	r3, [r4, #8]
    state.firstRunCheck = 0;
    state.bSleepModeStandby=true;
    state.bInSleepMode=false;
    state.zeroOff = 0;
    strcpy(state.expression,"Enter expression here");
   d6d42:	495c      	ldr	r1, [pc, #368]	; (d6eb4 <BlynkWidgetWrite22+0x1a4>)
{
  String _resetKey = param.asStr();
  if (_resetKey.equals("resetme"))
  {
    Blynk.virtualWrite(V22,"Enter code to reset");
    state.numberOfReadings = 15;
   d6d44:	f8c4 8004 	str.w	r8, [r4, #4]
    state.secondsBetweenReadings=5;
    state.firstRunCheck = 0;
    state.bSleepModeStandby=true;
    state.bInSleepMode=false;
    state.zeroOff = 0;
   d6d48:	2300      	movs	r3, #0
    strcpy(state.expression,"Enter expression here");
   d6d4a:	f104 0010 	add.w	r0, r4, #16
    state.numberOfReadings = 15;
    state.secondsBetweenReadings=5;
    state.firstRunCheck = 0;
    state.bSleepModeStandby=true;
    state.bInSleepMode=false;
    state.zeroOff = 0;
   d6d4e:	60e3      	str	r3, [r4, #12]
  if (_resetKey.equals("resetme"))
  {
    Blynk.virtualWrite(V22,"Enter code to reset");
    state.numberOfReadings = 15;
    state.secondsBetweenReadings=5;
    state.firstRunCheck = 0;
   d6d50:	6025      	str	r5, [r4, #0]
    state.bSleepModeStandby=true;
   d6d52:	f884 7424 	strb.w	r7, [r4, #1060]	; 0x424
    state.bInSleepMode=false;
   d6d56:	f884 5425 	strb.w	r5, [r4, #1061]	; 0x425
    state.zeroOff = 0;
    strcpy(state.expression,"Enter expression here");
   d6d5a:	f00c fe9f 	bl	e3a9c <strcpy>
    strcpy(state.email,"Enter email here");
   d6d5e:	4956      	ldr	r1, [pc, #344]	; (d6eb8 <BlynkWidgetWrite22+0x1a8>)
   d6d60:	f504 7088 	add.w	r0, r4, #272	; 0x110
   d6d64:	f00c fe9a 	bl	e3a9c <strcpy>
    strcpy(state.batEmail,"Enter email here");
   d6d68:	4953      	ldr	r1, [pc, #332]	; (d6eb8 <BlynkWidgetWrite22+0x1a8>)
   d6d6a:	f504 7004 	add.w	r0, r4, #528	; 0x210
   d6d6e:	f00c fe95 	bl	e3a9c <strcpy>
    strcpy(state.tamperEmail,"Enter email here");
    state.deviceZone=0;
    state.batThreshold = 20;
   d6d72:	f504 6682 	add.w	r6, r4, #1040	; 0x410
    state.bInSleepMode=false;
    state.zeroOff = 0;
    strcpy(state.expression,"Enter expression here");
    strcpy(state.email,"Enter email here");
    strcpy(state.batEmail,"Enter email here");
    strcpy(state.tamperEmail,"Enter email here");
   d6d76:	4950      	ldr	r1, [pc, #320]	; (d6eb8 <BlynkWidgetWrite22+0x1a8>)
   d6d78:	f504 7044 	add.w	r0, r4, #784	; 0x310
   d6d7c:	f00c fe8e 	bl	e3a9c <strcpy>
    state.deviceZone=0;
    state.batThreshold = 20;
   d6d80:	4b4e      	ldr	r3, [pc, #312]	; (d6ebc <BlynkWidgetWrite22+0x1ac>)
   d6d82:	6033      	str	r3, [r6, #0]
    state.buzzerVapor=false; // Vapor Buzzer
    state.notifyVapor=true; // Vapor Notify
    state.notifyTamper=true; // Tamper Notify
    state.notifyBattery=true; // Battery Notify
    state.OnTime=0;
    Blynk.virtualWrite(V10, state.numberOfReadings);
   d6d84:	4642      	mov	r2, r8
    strcpy(state.tamperEmail,"Enter email here");
    state.deviceZone=0;
    state.batThreshold = 20;
    state.lastAlert=false;
    state.batLastAlert=false;
    state.ActivityThreshold=100; // Which is set to 1 in Blynk
   d6d86:	2364      	movs	r3, #100	; 0x64
    state.buzzerVapor=false; // Vapor Buzzer
    state.notifyVapor=true; // Vapor Notify
    state.notifyTamper=true; // Tamper Notify
    state.notifyBattery=true; // Battery Notify
    state.OnTime=0;
    Blynk.virtualWrite(V10, state.numberOfReadings);
   d6d88:	210a      	movs	r1, #10
   d6d8a:	4849      	ldr	r0, [pc, #292]	; (d6eb0 <BlynkWidgetWrite22+0x1a0>)
    strcpy(state.tamperEmail,"Enter email here");
    state.deviceZone=0;
    state.batThreshold = 20;
    state.lastAlert=false;
    state.batLastAlert=false;
    state.ActivityThreshold=100; // Which is set to 1 in Blynk
   d6d8c:	f8c4 341c 	str.w	r3, [r4, #1052]	; 0x41c
    state.zeroOff = 0;
    strcpy(state.expression,"Enter expression here");
    strcpy(state.email,"Enter email here");
    strcpy(state.batEmail,"Enter email here");
    strcpy(state.tamperEmail,"Enter email here");
    state.deviceZone=0;
   d6d90:	f8c4 5420 	str.w	r5, [r4, #1056]	; 0x420
    state.batThreshold = 20;
    state.lastAlert=false;
   d6d94:	f884 5414 	strb.w	r5, [r4, #1044]	; 0x414
    state.batLastAlert=false;
   d6d98:	f884 5415 	strb.w	r5, [r4, #1045]	; 0x415
    state.ActivityThreshold=100; // Which is set to 1 in Blynk
    state.buzzerTamper=true;  // Buzzer Tamper
   d6d9c:	f884 7417 	strb.w	r7, [r4, #1047]	; 0x417
    state.buzzerVapor=false; // Vapor Buzzer
   d6da0:	f884 5418 	strb.w	r5, [r4, #1048]	; 0x418
    state.notifyVapor=true; // Vapor Notify
   d6da4:	f884 7419 	strb.w	r7, [r4, #1049]	; 0x419
    state.notifyTamper=true; // Tamper Notify
   d6da8:	f884 741a 	strb.w	r7, [r4, #1050]	; 0x41a
    state.notifyBattery=true; // Battery Notify
   d6dac:	f884 741b 	strb.w	r7, [r4, #1051]	; 0x41b
    state.OnTime=0;
   d6db0:	f8c4 5428 	str.w	r5, [r4, #1064]	; 0x428
    Blynk.virtualWrite(V10, state.numberOfReadings);
   d6db4:	f7ff fc80 	bl	d66b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
    Blynk.virtualWrite(V12, state.secondsBetweenReadings);
   d6db8:	68a2      	ldr	r2, [r4, #8]
   d6dba:	483d      	ldr	r0, [pc, #244]	; (d6eb0 <BlynkWidgetWrite22+0x1a0>)
   d6dbc:	210c      	movs	r1, #12
   d6dbe:	f7ff fc7b 	bl	d66b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
    Blynk.virtualWrite(V11, state.numberOfReadings);
   d6dc2:	6862      	ldr	r2, [r4, #4]
   d6dc4:	483a      	ldr	r0, [pc, #232]	; (d6eb0 <BlynkWidgetWrite22+0x1a0>)
   d6dc6:	210b      	movs	r1, #11
   d6dc8:	f7ff fc76 	bl	d66b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
    Blynk.virtualWrite(V13, state.secondsBetweenReadings);
   d6dcc:	68a2      	ldr	r2, [r4, #8]
   d6dce:	4838      	ldr	r0, [pc, #224]	; (d6eb0 <BlynkWidgetWrite22+0x1a0>)
   d6dd0:	210d      	movs	r1, #13
   d6dd2:	f7ff fc71 	bl	d66b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
    Blynk.virtualWrite(V20, state.expression);
   d6dd6:	f104 0210 	add.w	r2, r4, #16
   d6dda:	2114      	movs	r1, #20
   d6ddc:	4834      	ldr	r0, [pc, #208]	; (d6eb0 <BlynkWidgetWrite22+0x1a0>)
   d6dde:	f7ff fea7 	bl	d6b30 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
    Blynk.virtualWrite(V16, state.email);
   d6de2:	f504 7288 	add.w	r2, r4, #272	; 0x110
   d6de6:	2110      	movs	r1, #16
   d6de8:	4831      	ldr	r0, [pc, #196]	; (d6eb0 <BlynkWidgetWrite22+0x1a0>)
   d6dea:	f7ff fea1 	bl	d6b30 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
    Blynk.virtualWrite(V18, state.batEmail);
   d6dee:	f504 7204 	add.w	r2, r4, #528	; 0x210
   d6df2:	2112      	movs	r1, #18
   d6df4:	482e      	ldr	r0, [pc, #184]	; (d6eb0 <BlynkWidgetWrite22+0x1a0>)
   d6df6:	f7ff fe9b 	bl	d6b30 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
    Blynk.virtualWrite(V26, state.tamperEmail);
   d6dfa:	f504 7244 	add.w	r2, r4, #784	; 0x310
   d6dfe:	211a      	movs	r1, #26
   d6e00:	482b      	ldr	r0, [pc, #172]	; (d6eb0 <BlynkWidgetWrite22+0x1a0>)
   d6e02:	f7ff fe95 	bl	d6b30 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
    Blynk.virtualWrite(V15, state.zeroOff);
   d6e06:	ed94 0a03 	vldr	s0, [r4, #12]
   d6e0a:	4829      	ldr	r0, [pc, #164]	; (d6eb0 <BlynkWidgetWrite22+0x1a0>)
   d6e0c:	4641      	mov	r1, r8
   d6e0e:	f7ff fde3 	bl	d69d8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
    Blynk.virtualWrite(V25, state.batThreshold);
   d6e12:	ed96 0a00 	vldr	s0, [r6]
   d6e16:	4826      	ldr	r0, [pc, #152]	; (d6eb0 <BlynkWidgetWrite22+0x1a0>)
   d6e18:	2119      	movs	r1, #25
   d6e1a:	f7ff fddd 	bl	d69d8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
    Blynk.virtualWrite(V23, state.deviceZone);
   d6e1e:	f8d4 2420 	ldr.w	r2, [r4, #1056]	; 0x420
   d6e22:	4823      	ldr	r0, [pc, #140]	; (d6eb0 <BlynkWidgetWrite22+0x1a0>)
   d6e24:	2117      	movs	r1, #23
   d6e26:	f7ff fc47 	bl	d66b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
    Blynk.virtualWrite(V24, state.buzzerTamper);  // Buzzer Tamper
   d6e2a:	f894 2417 	ldrb.w	r2, [r4, #1047]	; 0x417
   d6e2e:	4820      	ldr	r0, [pc, #128]	; (d6eb0 <BlynkWidgetWrite22+0x1a0>)
   d6e30:	2118      	movs	r1, #24
   d6e32:	f7ff fea7 	bl	d6b84 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_>
    Blynk.virtualWrite(V27, state.buzzerVapor); // Vapor Buzzer
   d6e36:	f894 2418 	ldrb.w	r2, [r4, #1048]	; 0x418
   d6e3a:	481d      	ldr	r0, [pc, #116]	; (d6eb0 <BlynkWidgetWrite22+0x1a0>)
   d6e3c:	211b      	movs	r1, #27
   d6e3e:	f7ff fea1 	bl	d6b84 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_>
    Blynk.virtualWrite(V28, state.notifyVapor); // Vapor Notify
   d6e42:	f894 2419 	ldrb.w	r2, [r4, #1049]	; 0x419
   d6e46:	481a      	ldr	r0, [pc, #104]	; (d6eb0 <BlynkWidgetWrite22+0x1a0>)
   d6e48:	211c      	movs	r1, #28
   d6e4a:	f7ff fe9b 	bl	d6b84 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_>
    Blynk.virtualWrite(V29, state.notifyTamper); // Tamper Notify
   d6e4e:	f894 241a 	ldrb.w	r2, [r4, #1050]	; 0x41a
   d6e52:	4817      	ldr	r0, [pc, #92]	; (d6eb0 <BlynkWidgetWrite22+0x1a0>)
   d6e54:	211d      	movs	r1, #29
   d6e56:	f7ff fe95 	bl	d6b84 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_>
    Blynk.virtualWrite(V31, 2); // Which is 100 for the accelerometer
   d6e5a:	2202      	movs	r2, #2
   d6e5c:	211f      	movs	r1, #31
   d6e5e:	4814      	ldr	r0, [pc, #80]	; (d6eb0 <BlynkWidgetWrite22+0x1a0>)
   d6e60:	f7ff fc2a 	bl	d66b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
    Blynk.virtualWrite(V32, state.notifyBattery); // Battery Notify
   d6e64:	f894 241b 	ldrb.w	r2, [r4, #1051]	; 0x41b
   d6e68:	4811      	ldr	r0, [pc, #68]	; (d6eb0 <BlynkWidgetWrite22+0x1a0>)
   d6e6a:	2120      	movs	r1, #32
   d6e6c:	f7ff fe8a 	bl	d6b84 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_>
    // EEPROM.clear();
    fram.erase();
   d6e70:	4813      	ldr	r0, [pc, #76]	; (d6ec0 <BlynkWidgetWrite22+0x1b0>)
   d6e72:	f002 fcb8 	bl	d97e6 <_ZN10MB85RC256V5eraseEv>
    Blynk.virtualWrite(V21, "Hard Resetting");
   d6e76:	4a13      	ldr	r2, [pc, #76]	; (d6ec4 <BlynkWidgetWrite22+0x1b4>)
   d6e78:	480d      	ldr	r0, [pc, #52]	; (d6eb0 <BlynkWidgetWrite22+0x1a0>)
   d6e7a:	2115      	movs	r1, #21
   d6e7c:	f7ff fe58 	bl	d6b30 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
    DEBUG_PRINTLN("Hard Resetting");
   d6e80:	f005 fa26 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d6e84:	490f      	ldr	r1, [pc, #60]	; (d6ec4 <BlynkWidgetWrite22+0x1b4>)
   d6e86:	f004 f9a6 	bl	db1d6 <_ZN5Print7printlnEPKc>
    delay(500);
   d6e8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d6e8e:	f004 fcb3 	bl	db7f8 <delay>
    System.reset();
   d6e92:	f003 ff1b 	bl	daccc <_ZN11SystemClass5resetEv>
  saveState();
}

BLYNK_WRITE(V22) //Reset Expression
{
  String _resetKey = param.asStr();
   d6e96:	4668      	mov	r0, sp
   d6e98:	f003 ffd4 	bl	dae44 <_ZN6StringD1Ev>
    Blynk.virtualWrite(V21, "Hard Resetting");
    DEBUG_PRINTLN("Hard Resetting");
    delay(500);
    System.reset();
  }
}
   d6e9c:	b004      	add	sp, #16
   d6e9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6ea2:	bf00      	nop
   d6ea4:	000e7053 	.word	0x000e7053
   d6ea8:	2003da80 	.word	0x2003da80
   d6eac:	000e700c 	.word	0x000e700c
   d6eb0:	2003e234 	.word	0x2003e234
   d6eb4:	000e705b 	.word	0x000e705b
   d6eb8:	000e7071 	.word	0x000e7071
   d6ebc:	41a00000 	.word	0x41a00000
   d6ec0:	2003d6e8 	.word	0x2003d6e8
   d6ec4:	000e7082 	.word	0x000e7082

000d6ec8 <BlynkOnConnected>:

// This function will run every time Blynk connection is established
BLYNK_CONNECTED() {
   d6ec8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // Request Blynk server to re-send latest values for all pins
  DEBUG_PRINTLN("Blynk is now connected - syncing all pins.");
   d6eca:	f005 fa01 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d6ece:	490b      	ldr	r1, [pc, #44]	; (d6efc <BlynkOnConnected+0x34>)
   d6ed0:	f004 f981 	bl	db1d6 <_ZN5Print7printlnEPKc>
  if (state.firstRunCheck != firstRunValue)
   d6ed4:	4b0a      	ldr	r3, [pc, #40]	; (d6f00 <BlynkOnConnected+0x38>)
   d6ed6:	681a      	ldr	r2, [r3, #0]
   d6ed8:	4b0a      	ldr	r3, [pc, #40]	; (d6f04 <BlynkOnConnected+0x3c>)
   d6eda:	681b      	ldr	r3, [r3, #0]
   d6edc:	429a      	cmp	r2, r3
   d6ede:	d001      	beq.n	d6ee4 <BlynkOnConnected+0x1c>
  {
    initializeAppWidgets();
   d6ee0:	f7ff fe7a 	bl	d6bd8 <_Z20initializeAppWidgetsv>

    /**
     * Requests Server to re-send current values for all widgets.
     */
    void syncAll() {
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE_SYNC);
   d6ee4:	2300      	movs	r3, #0
   d6ee6:	9302      	str	r3, [sp, #8]
   d6ee8:	9301      	str	r3, [sp, #4]
   d6eea:	9300      	str	r3, [sp, #0]
   d6eec:	461a      	mov	r2, r3
   d6eee:	2110      	movs	r1, #16
   d6ef0:	4805      	ldr	r0, [pc, #20]	; (d6f08 <BlynkOnConnected+0x40>)
   d6ef2:	f7ff faf7 	bl	d64e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
  }
  Blynk.syncAll();
  // You can also update individual virtual pins like this:
  //Blynk.syncVirtual(V0, V2);
}
   d6ef6:	b005      	add	sp, #20
   d6ef8:	f85d fb04 	ldr.w	pc, [sp], #4
   d6efc:	000e7091 	.word	0x000e7091
   d6f00:	2003da80 	.word	0x2003da80
   d6f04:	2003d574 	.word	0x2003d574
   d6f08:	2003e234 	.word	0x2003e234

000d6f0c <_Z13runExpressionPc>:
    DEBUG_PRINT("Update notifyBattery flag value is: ");
    DEBUG_PRINTLN(state.notifyBattery);
#endif
}
bool runExpression(char *expression)
{   
   d6f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6f10:	f2ad 4dd4 	subw	sp, sp, #1236	; 0x4d4
   d6f14:	4605      	mov	r5, r0
  double pm1, pm2, pm4, pm10, conc, temp;
  // Store variable names and pointers. 
  te_variable vars[] = {{"pm1", &pm1}, {"pm2", &pm2}, {"pm4", &pm4}, {"pm10", &pm10}, {"conc", &conc}, {"temp", &temp}};
   d6f16:	2260      	movs	r2, #96	; 0x60
   d6f18:	2100      	movs	r1, #0
   d6f1a:	a81c      	add	r0, sp, #112	; 0x70
   d6f1c:	f00c fb35 	bl	e358a <memset>
   d6f20:	4b7e      	ldr	r3, [pc, #504]	; (d711c <_Z13runExpressionPc+0x210>)
   d6f22:	931c      	str	r3, [sp, #112]	; 0x70
   d6f24:	4b7e      	ldr	r3, [pc, #504]	; (d7120 <_Z13runExpressionPc+0x214>)
   d6f26:	9320      	str	r3, [sp, #128]	; 0x80
   d6f28:	4b7e      	ldr	r3, [pc, #504]	; (d7124 <_Z13runExpressionPc+0x218>)
   d6f2a:	9324      	str	r3, [sp, #144]	; 0x90
   d6f2c:	4b7e      	ldr	r3, [pc, #504]	; (d7128 <_Z13runExpressionPc+0x21c>)
   d6f2e:	9328      	str	r3, [sp, #160]	; 0xa0
  if (terminalDebug) Blynk.virtualWrite(V21, expression); 
   d6f30:	4c7e      	ldr	r4, [pc, #504]	; (d712c <_Z13runExpressionPc+0x220>)
}
bool runExpression(char *expression)
{   
  double pm1, pm2, pm4, pm10, conc, temp;
  // Store variable names and pointers. 
  te_variable vars[] = {{"pm1", &pm1}, {"pm2", &pm2}, {"pm4", &pm4}, {"pm10", &pm10}, {"conc", &conc}, {"temp", &temp}};
   d6f32:	4b7f      	ldr	r3, [pc, #508]	; (d7130 <_Z13runExpressionPc+0x224>)
   d6f34:	932c      	str	r3, [sp, #176]	; 0xb0
   d6f36:	4b7f      	ldr	r3, [pc, #508]	; (d7134 <_Z13runExpressionPc+0x228>)
   d6f38:	9330      	str	r3, [sp, #192]	; 0xc0
  if (terminalDebug) Blynk.virtualWrite(V21, expression); 
   d6f3a:	7823      	ldrb	r3, [r4, #0]
}
bool runExpression(char *expression)
{   
  double pm1, pm2, pm4, pm10, conc, temp;
  // Store variable names and pointers. 
  te_variable vars[] = {{"pm1", &pm1}, {"pm2", &pm2}, {"pm4", &pm4}, {"pm10", &pm10}, {"conc", &conc}, {"temp", &temp}};
   d6f3c:	f10d 0b20 	add.w	fp, sp, #32
   d6f40:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
   d6f44:	f10d 0930 	add.w	r9, sp, #48	; 0x30
   d6f48:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   d6f4c:	af10      	add	r7, sp, #64	; 0x40
   d6f4e:	ae12      	add	r6, sp, #72	; 0x48
   d6f50:	f8cd b074 	str.w	fp, [sp, #116]	; 0x74
   d6f54:	f8cd a084 	str.w	sl, [sp, #132]	; 0x84
   d6f58:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   d6f5c:	f8cd 80a4 	str.w	r8, [sp, #164]	; 0xa4
   d6f60:	972d      	str	r7, [sp, #180]	; 0xb4
   d6f62:	9631      	str	r6, [sp, #196]	; 0xc4
  if (terminalDebug) Blynk.virtualWrite(V21, expression); 
   d6f64:	b123      	cbz	r3, d6f70 <_Z13runExpressionPc+0x64>
   d6f66:	462a      	mov	r2, r5
   d6f68:	2115      	movs	r1, #21
   d6f6a:	4873      	ldr	r0, [pc, #460]	; (d7138 <_Z13runExpressionPc+0x22c>)
   d6f6c:	f7ff fde0 	bl	d6b30 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
  int err;
  // Compile the expression with variables.
  // te_expr *expr = te_compile(_expression.c_str(), vars, 6, &err);
  te_expr *expr = te_compile(expression, vars, 6, &err);
   d6f70:	ab07      	add	r3, sp, #28
   d6f72:	2206      	movs	r2, #6
   d6f74:	a91c      	add	r1, sp, #112	; 0x70
   d6f76:	4628      	mov	r0, r5
   d6f78:	f7fe f994 	bl	d52a4 <te_compile>

  if (expr) {
   d6f7c:	9005      	str	r0, [sp, #20]
   d6f7e:	2800      	cmp	r0, #0
   d6f80:	f000 809d 	beq.w	d70be <_Z13runExpressionPc+0x1b2>

      pm1 = (double)Sensor.massPM1;
   d6f84:	4d6d      	ldr	r5, [pc, #436]	; (d713c <_Z13runExpressionPc+0x230>)
   d6f86:	6868      	ldr	r0, [r5, #4]
   d6f88:	f00b fe06 	bl	e2b98 <__aeabi_f2d>
   d6f8c:	e9cb 0100 	strd	r0, r1, [fp]
      pm2 = (double)Sensor.massPM25;
   d6f90:	68a8      	ldr	r0, [r5, #8]
   d6f92:	f00b fe01 	bl	e2b98 <__aeabi_f2d>
   d6f96:	e9ca 0100 	strd	r0, r1, [sl]
      pm4 = (double)Sensor.massPM4;
   d6f9a:	68e8      	ldr	r0, [r5, #12]
   d6f9c:	f00b fdfc 	bl	e2b98 <__aeabi_f2d>
   d6fa0:	e9c9 0100 	strd	r0, r1, [r9]
      pm10 = (double)Sensor.massPM10;
   d6fa4:	6928      	ldr	r0, [r5, #16]
   d6fa6:	f00b fdf7 	bl	e2b98 <__aeabi_f2d>
      conc = (double)conc1;
   d6faa:	4a65      	ldr	r2, [pc, #404]	; (d7140 <_Z13runExpressionPc+0x234>)
  if (expr) {

      pm1 = (double)Sensor.massPM1;
      pm2 = (double)Sensor.massPM25;
      pm4 = (double)Sensor.massPM4;
      pm10 = (double)Sensor.massPM10;
   d6fac:	e9c8 0100 	strd	r0, r1, [r8]
      conc = (double)conc1;
   d6fb0:	6810      	ldr	r0, [r2, #0]
   d6fb2:	f00b fdf1 	bl	e2b98 <__aeabi_f2d>
      temp = (double)temp1;
   d6fb6:	4a63      	ldr	r2, [pc, #396]	; (d7144 <_Z13runExpressionPc+0x238>)

      pm1 = (double)Sensor.massPM1;
      pm2 = (double)Sensor.massPM25;
      pm4 = (double)Sensor.massPM4;
      pm10 = (double)Sensor.massPM10;
      conc = (double)conc1;
   d6fb8:	e9c7 0100 	strd	r0, r1, [r7]
      temp = (double)temp1;
   d6fbc:	6810      	ldr	r0, [r2, #0]
   d6fbe:	f00b fdeb 	bl	e2b98 <__aeabi_f2d>
      const double h2 = te_eval(expr);
   d6fc2:	9b05      	ldr	r3, [sp, #20]
      pm1 = (double)Sensor.massPM1;
      pm2 = (double)Sensor.massPM25;
      pm4 = (double)Sensor.massPM4;
      pm10 = (double)Sensor.massPM10;
      conc = (double)conc1;
      temp = (double)temp1;
   d6fc4:	e9c6 0100 	strd	r0, r1, [r6]
      const double h2 = te_eval(expr);
   d6fc8:	4618      	mov	r0, r3
   d6fca:	f7fd fe55 	bl	d4c78 <te_eval>
      if (terminalDebug) Blynk.virtualWrite(V21, datastring);
   d6fce:	7823      	ldrb	r3, [r4, #0]
      pm2 = (double)Sensor.massPM25;
      pm4 = (double)Sensor.massPM4;
      pm10 = (double)Sensor.massPM10;
      conc = (double)conc1;
      temp = (double)temp1;
      const double h2 = te_eval(expr);
   d6fd0:	ec57 6b10 	vmov	r6, r7, d0
      if (terminalDebug) Blynk.virtualWrite(V21, datastring);
   d6fd4:	b15b      	cbz	r3, d6fee <_Z13runExpressionPc+0xe2>
   d6fd6:	495c      	ldr	r1, [pc, #368]	; (d7148 <_Z13runExpressionPc+0x23c>)
   d6fd8:	a834      	add	r0, sp, #208	; 0xd0
   d6fda:	f003 ffb9 	bl	daf50 <_ZN6StringC1ERKS_>
   d6fde:	4856      	ldr	r0, [pc, #344]	; (d7138 <_Z13runExpressionPc+0x22c>)
   d6fe0:	aa34      	add	r2, sp, #208	; 0xd0
   d6fe2:	2115      	movs	r1, #21
   d6fe4:	f7ff fba4 	bl	d6730 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d6fe8:	a834      	add	r0, sp, #208	; 0xd0
   d6fea:	f003 ff2b 	bl	dae44 <_ZN6StringD1Ev>
      if (terminalDebug) Blynk.virtualWrite(V21, h2);
   d6fee:	7823      	ldrb	r3, [r4, #0]
   d6ff0:	b333      	cbz	r3, d7040 <_Z13runExpressionPc+0x134>
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d6ff2:	ab34      	add	r3, sp, #208	; 0xd0
   d6ff4:	2500      	movs	r5, #0
   d6ff6:	9318      	str	r3, [sp, #96]	; 0x60
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6ff8:	4954      	ldr	r1, [pc, #336]	; (d714c <_Z13runExpressionPc+0x240>)
   d6ffa:	9519      	str	r5, [sp, #100]	; 0x64
   d6ffc:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d7000:	a818      	add	r0, sp, #96	; 0x60
   d7002:	931a      	str	r3, [sp, #104]	; 0x68
   d7004:	f7fe fa7d 	bl	d5502 <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d7008:	2115      	movs	r1, #21
   d700a:	a818      	add	r0, sp, #96	; 0x60
   d700c:	f7fe fa96 	bl	d553c <_ZN10BlynkParam3addEi>
    }

    inline
    void BlynkParam::add(double value)
    {
        len += snprintf(buff+len, buff_size-len, "%2.7f", value)+1;
   d7010:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d7012:	991a      	ldr	r1, [sp, #104]	; 0x68
   d7014:	9818      	ldr	r0, [sp, #96]	; 0x60
   d7016:	4a4e      	ldr	r2, [pc, #312]	; (d7150 <_Z13runExpressionPc+0x244>)
   d7018:	1ac9      	subs	r1, r1, r3
   d701a:	4418      	add	r0, r3
   d701c:	e9cd 6700 	strd	r6, r7, [sp]
   d7020:	f003 fd94 	bl	dab4c <snprintf>
   d7024:	9b19      	ldr	r3, [sp, #100]	; 0x64
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d7026:	9502      	str	r5, [sp, #8]
   d7028:	3001      	adds	r0, #1
   d702a:	4418      	add	r0, r3
   d702c:	9019      	str	r0, [sp, #100]	; 0x64
   d702e:	3801      	subs	r0, #1
   d7030:	9000      	str	r0, [sp, #0]
   d7032:	9501      	str	r5, [sp, #4]
   d7034:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d7036:	4840      	ldr	r0, [pc, #256]	; (d7138 <_Z13runExpressionPc+0x22c>)
   d7038:	462a      	mov	r2, r5
   d703a:	2114      	movs	r1, #20
   d703c:	f7ff fa52 	bl	d64e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
      if (terminalDebug) Blynk.virtualWrite(V21, InstallLocation);
   d7040:	7823      	ldrb	r3, [r4, #0]
   d7042:	b15b      	cbz	r3, d705c <_Z13runExpressionPc+0x150>
   d7044:	4943      	ldr	r1, [pc, #268]	; (d7154 <_Z13runExpressionPc+0x248>)
   d7046:	a834      	add	r0, sp, #208	; 0xd0
   d7048:	f003 ff82 	bl	daf50 <_ZN6StringC1ERKS_>
   d704c:	483a      	ldr	r0, [pc, #232]	; (d7138 <_Z13runExpressionPc+0x22c>)
   d704e:	aa34      	add	r2, sp, #208	; 0xd0
   d7050:	2115      	movs	r1, #21
   d7052:	f7ff fb6d 	bl	d6730 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d7056:	a834      	add	r0, sp, #208	; 0xd0
   d7058:	f003 fef4 	bl	dae44 <_ZN6StringD1Ev>
      if (terminalDebug) Blynk.virtualWrite(V21, iSoftwareVersion);
   d705c:	7823      	ldrb	r3, [r4, #0]
   d705e:	b1eb      	cbz	r3, d709c <_Z13runExpressionPc+0x190>
   d7060:	493d      	ldr	r1, [pc, #244]	; (d7158 <_Z13runExpressionPc+0x24c>)
   d7062:	a834      	add	r0, sp, #208	; 0xd0
   d7064:	f003 ff74 	bl	daf50 <_ZN6StringC1ERKS_>
   d7068:	aa34      	add	r2, sp, #208	; 0xd0
   d706a:	2115      	movs	r1, #21
   d706c:	4832      	ldr	r0, [pc, #200]	; (d7138 <_Z13runExpressionPc+0x22c>)
   d706e:	f7ff fb5f 	bl	d6730 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d7072:	a834      	add	r0, sp, #208	; 0xd0
   d7074:	f003 fee6 	bl	dae44 <_ZN6StringD1Ev>

      if (h2==1.0)
   d7078:	2200      	movs	r2, #0
   d707a:	4b38      	ldr	r3, [pc, #224]	; (d715c <_Z13runExpressionPc+0x250>)
   d707c:	4630      	mov	r0, r6
   d707e:	4639      	mov	r1, r7
   d7080:	f00c f846 	bl	e3110 <__aeabi_dcmpeq>
   d7084:	b190      	cbz	r0, d70ac <_Z13runExpressionPc+0x1a0>
      {
        if (terminalDebug) Blynk.virtualWrite(V21, "The expression is True");
   d7086:	4b29      	ldr	r3, [pc, #164]	; (d712c <_Z13runExpressionPc+0x220>)
   d7088:	781c      	ldrb	r4, [r3, #0]
   d708a:	b90c      	cbnz	r4, d7090 <_Z13runExpressionPc+0x184>
        return true;
   d708c:	2401      	movs	r4, #1
   d708e:	e03f      	b.n	d7110 <_Z13runExpressionPc+0x204>
      if (terminalDebug) Blynk.virtualWrite(V21, InstallLocation);
      if (terminalDebug) Blynk.virtualWrite(V21, iSoftwareVersion);

      if (h2==1.0)
      {
        if (terminalDebug) Blynk.virtualWrite(V21, "The expression is True");
   d7090:	4a33      	ldr	r2, [pc, #204]	; (d7160 <_Z13runExpressionPc+0x254>)
   d7092:	4829      	ldr	r0, [pc, #164]	; (d7138 <_Z13runExpressionPc+0x22c>)
   d7094:	2115      	movs	r1, #21
   d7096:	f7ff fd4b 	bl	d6b30 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
   d709a:	e039      	b.n	d7110 <_Z13runExpressionPc+0x204>
      if (terminalDebug) Blynk.virtualWrite(V21, datastring);
      if (terminalDebug) Blynk.virtualWrite(V21, h2);
      if (terminalDebug) Blynk.virtualWrite(V21, InstallLocation);
      if (terminalDebug) Blynk.virtualWrite(V21, iSoftwareVersion);

      if (h2==1.0)
   d709c:	2200      	movs	r2, #0
   d709e:	4b2f      	ldr	r3, [pc, #188]	; (d715c <_Z13runExpressionPc+0x250>)
   d70a0:	4630      	mov	r0, r6
   d70a2:	4639      	mov	r1, r7
   d70a4:	f00c f834 	bl	e3110 <__aeabi_dcmpeq>
   d70a8:	2800      	cmp	r0, #0
   d70aa:	d1ef      	bne.n	d708c <_Z13runExpressionPc+0x180>
        if (terminalDebug) Blynk.virtualWrite(V21, "The expression is True");
        return true;
      }
      else
      {
        if (terminalDebug) Blynk.virtualWrite(V21, "The expression is False");
   d70ac:	7824      	ldrb	r4, [r4, #0]
   d70ae:	2c00      	cmp	r4, #0
   d70b0:	d02e      	beq.n	d7110 <_Z13runExpressionPc+0x204>
   d70b2:	4a2c      	ldr	r2, [pc, #176]	; (d7164 <_Z13runExpressionPc+0x258>)
   d70b4:	4820      	ldr	r0, [pc, #128]	; (d7138 <_Z13runExpressionPc+0x22c>)
   d70b6:	2115      	movs	r1, #21
   d70b8:	f7ff fd3a 	bl	d6b30 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
   d70bc:	e027      	b.n	d710e <_Z13runExpressionPc+0x202>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d70be:	492a      	ldr	r1, [pc, #168]	; (d7168 <_Z13runExpressionPc+0x25c>)
   d70c0:	a834      	add	r0, sp, #208	; 0xd0
   d70c2:	f003 ff06 	bl	daed2 <_ZN6StringC1EPK19__FlashStringHelper>
        return false;        
      }     
      te_free(expr);
  } else {
      String mess = "Error near char: " + String(err);
   d70c6:	220a      	movs	r2, #10
   d70c8:	9907      	ldr	r1, [sp, #28]
   d70ca:	a818      	add	r0, sp, #96	; 0x60
   d70cc:	f003 ff76 	bl	dafbc <_ZN6StringC1Eih>
   d70d0:	a918      	add	r1, sp, #96	; 0x60
   d70d2:	a834      	add	r0, sp, #208	; 0xd0
   d70d4:	f003 ff9c 	bl	db010 <_ZplRK15StringSumHelperRK6String>
   d70d8:	4601      	mov	r1, r0
   d70da:	a814      	add	r0, sp, #80	; 0x50
   d70dc:	f003 ff38 	bl	daf50 <_ZN6StringC1ERKS_>
   d70e0:	a818      	add	r0, sp, #96	; 0x60
   d70e2:	f003 feaf 	bl	dae44 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d70e6:	a834      	add	r0, sp, #208	; 0xd0
   d70e8:	f003 feac 	bl	dae44 <_ZN6StringD1Ev>
      // DEBUG_PRINTF("Parse error at %d\n", err);
      if (terminalDebug) Blynk.virtualWrite(V21, mess);
   d70ec:	7823      	ldrb	r3, [r4, #0]
   d70ee:	b15b      	cbz	r3, d7108 <_Z13runExpressionPc+0x1fc>
   d70f0:	a914      	add	r1, sp, #80	; 0x50
   d70f2:	a834      	add	r0, sp, #208	; 0xd0
   d70f4:	f003 ff2c 	bl	daf50 <_ZN6StringC1ERKS_>
   d70f8:	480f      	ldr	r0, [pc, #60]	; (d7138 <_Z13runExpressionPc+0x22c>)
   d70fa:	aa34      	add	r2, sp, #208	; 0xd0
   d70fc:	2115      	movs	r1, #21
   d70fe:	f7ff fb17 	bl	d6730 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d7102:	a834      	add	r0, sp, #208	; 0xd0
   d7104:	f003 fe9e 	bl	dae44 <_ZN6StringD1Ev>
        if (terminalDebug) Blynk.virtualWrite(V21, "The expression is False");
        return false;        
      }     
      te_free(expr);
  } else {
      String mess = "Error near char: " + String(err);
   d7108:	a814      	add	r0, sp, #80	; 0x50
   d710a:	f003 fe9b 	bl	dae44 <_ZN6StringD1Ev>
      // DEBUG_PRINTF("Parse error at %d\n", err);
      if (terminalDebug) Blynk.virtualWrite(V21, mess);
      return false;
   d710e:	2400      	movs	r4, #0
  } 
}
   d7110:	4620      	mov	r0, r4
   d7112:	f20d 4dd4 	addw	sp, sp, #1236	; 0x4d4
   d7116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d711a:	bf00      	nop
   d711c:	000e70bc 	.word	0x000e70bc
   d7120:	000e70c0 	.word	0x000e70c0
   d7124:	000e70c4 	.word	0x000e70c4
   d7128:	000e70c8 	.word	0x000e70c8
   d712c:	2003da45 	.word	0x2003da45
   d7130:	000e70cd 	.word	0x000e70cd
   d7134:	000e70d2 	.word	0x000e70d2
   d7138:	2003e234 	.word	0x2003e234
   d713c:	2003e1ec 	.word	0x2003e1ec
   d7140:	2003e15c 	.word	0x2003e15c
   d7144:	2003e268 	.word	0x2003e268
   d7148:	2003deb0 	.word	0x2003deb0
   d714c:	000e6f9b 	.word	0x000e6f9b
   d7150:	000e70d7 	.word	0x000e70d7
   d7154:	2003e190 	.word	0x2003e190
   d7158:	2003e220 	.word	0x2003e220
   d715c:	3ff00000 	.word	0x3ff00000
   d7160:	000e70dd 	.word	0x000e70dd
   d7164:	000e70f4 	.word	0x000e70f4
   d7168:	000e710c 	.word	0x000e710c

000d716c <BlynkWidgetWrite20>:
  // You can also update individual virtual pins like this:
  //Blynk.syncVirtual(V0, V2);
}

BLYNK_WRITE(V20) //Alarm Expression
{
   d716c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  String _expression = param.asStr();
   d716e:	6809      	ldr	r1, [r1, #0]
   d7170:	4668      	mov	r0, sp
   d7172:	f003 feae 	bl	daed2 <_ZN6StringC1EPK19__FlashStringHelper>
  //Only lower case is allowed
  _expression.toLowerCase();
   d7176:	4668      	mov	r0, sp
   d7178:	f003 ffa9 	bl	db0ce <_ZN6String11toLowerCaseEv>
  strcpy(state.expression,_expression.c_str());
   d717c:	9900      	ldr	r1, [sp, #0]
   d717e:	4808      	ldr	r0, [pc, #32]	; (d71a0 <BlynkWidgetWrite20+0x34>)
   d7180:	f00c fc8c 	bl	e3a9c <strcpy>
  saveState();
   d7184:	f7fe fb1a 	bl	d57bc <_Z9saveStatev>
  if (sensorValid)
   d7188:	4b06      	ldr	r3, [pc, #24]	; (d71a4 <BlynkWidgetWrite20+0x38>)
   d718a:	781b      	ldrb	r3, [r3, #0]
   d718c:	b113      	cbz	r3, d7194 <BlynkWidgetWrite20+0x28>
  {
    runExpression(state.expression);
   d718e:	4804      	ldr	r0, [pc, #16]	; (d71a0 <BlynkWidgetWrite20+0x34>)
   d7190:	f7ff febc 	bl	d6f0c <_Z13runExpressionPc>
  //Blynk.syncVirtual(V0, V2);
}

BLYNK_WRITE(V20) //Alarm Expression
{
  String _expression = param.asStr();
   d7194:	4668      	mov	r0, sp
   d7196:	f003 fe55 	bl	dae44 <_ZN6StringD1Ev>
  saveState();
  if (sensorValid)
  {
    runExpression(state.expression);
  }
}
   d719a:	b005      	add	sp, #20
   d719c:	f85d fb04 	ldr.w	pc, [sp], #4
   d71a0:	2003da90 	.word	0x2003da90
   d71a4:	2003e17c 	.word	0x2003e17c

000d71a8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8logEventIA13_cEEvRKT_>:
        cmd.add(property);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_PROPERTY, 0, cmd.getBuffer(), cmd.getLength(), param.getBuffer(), param.getLength());
    }

    template <typename NAME>
    void logEvent(const NAME& event_name) {
   d71a8:	b530      	push	{r4, r5, lr}
   d71aa:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d71ae:	ab08      	add	r3, sp, #32
   d71b0:	2400      	movs	r4, #0
   d71b2:	4605      	mov	r5, r0
   d71b4:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add(event_name);
   d71b6:	a805      	add	r0, sp, #20
   d71b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d71bc:	9307      	str	r3, [sp, #28]
   d71be:	9406      	str	r4, [sp, #24]
   d71c0:	f7fe f99f 	bl	d5502 <_ZN10BlynkParam3addEPKc>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_EVENT_LOG, 0, cmd.getBuffer(), cmd.getLength()-1);
   d71c4:	9b06      	ldr	r3, [sp, #24]
   d71c6:	9402      	str	r4, [sp, #8]
   d71c8:	3b01      	subs	r3, #1
   d71ca:	9300      	str	r3, [sp, #0]
   d71cc:	9401      	str	r4, [sp, #4]
   d71ce:	9b05      	ldr	r3, [sp, #20]
   d71d0:	4622      	mov	r2, r4
   d71d2:	2140      	movs	r1, #64	; 0x40
   d71d4:	4628      	mov	r0, r5
   d71d6:	f7ff f985 	bl	d64e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d71da:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d71de:	bd30      	pop	{r4, r5, pc}

000d71e0 <_Z10checkAccelv>:
void ADXL_ISR() {
  accelInterrupt=true; 
}

void checkAccel()
{
   d71e0:	b570      	push	{r4, r5, r6, lr}
  // Not ideal to have this in the loop
  if (accelInterrupt)
   d71e2:	4b2f      	ldr	r3, [pc, #188]	; (d72a0 <_Z10checkAccelv+0xc0>)
   d71e4:	4c2f      	ldr	r4, [pc, #188]	; (d72a4 <_Z10checkAccelv+0xc4>)
   d71e6:	781a      	ldrb	r2, [r3, #0]
   d71e8:	461e      	mov	r6, r3
   d71ea:	2a00      	cmp	r2, #0
   d71ec:	d041      	beq.n	d7272 <_Z10checkAccelv+0x92>
  {
    DEBUG_PRINTLN("*** ACCEL INTERRUPTED ***");
   d71ee:	f005 f86f 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d71f2:	492d      	ldr	r1, [pc, #180]	; (d72a8 <_Z10checkAccelv+0xc8>)
   d71f4:	f003 ffef 	bl	db1d6 <_ZN5Print7printlnEPKc>
    // Turn off Interrupts for Activity(1 == ON, 0 == OFF)
    adxl.InactivityINT(0);
   d71f8:	2100      	movs	r1, #0
   d71fa:	482c      	ldr	r0, [pc, #176]	; (d72ac <_Z10checkAccelv+0xcc>)
   d71fc:	f002 fda0 	bl	d9d40 <_ZN7ADXL34513InactivityINTEb>
    adxl.ActivityINT(0);
   d7200:	2100      	movs	r1, #0
   d7202:	482a      	ldr	r0, [pc, #168]	; (d72ac <_Z10checkAccelv+0xcc>)
   d7204:	f002 fd96 	bl	d9d34 <_ZN7ADXL34511ActivityINTEb>
    // getInterruptSource clears all triggered actions after returning value
    // Do not call again until you need to recheck for triggered actions
    byte interrupts = adxl.getInterruptSource();
   d7208:	4828      	ldr	r0, [pc, #160]	; (d72ac <_Z10checkAccelv+0xcc>)
   d720a:	f002 fcde 	bl	d9bca <_ZN7ADXL34518getInterruptSourceEv>

    // Inactivity
    if(adxl.triggered(interrupts, ADXL345_INACTIVITY)){
   d720e:	2203      	movs	r2, #3
    // Turn off Interrupts for Activity(1 == ON, 0 == OFF)
    adxl.InactivityINT(0);
    adxl.ActivityINT(0);
    // getInterruptSource clears all triggered actions after returning value
    // Do not call again until you need to recheck for triggered actions
    byte interrupts = adxl.getInterruptSource();
   d7210:	4605      	mov	r5, r0

    // Inactivity
    if(adxl.triggered(interrupts, ADXL345_INACTIVITY)){
   d7212:	4601      	mov	r1, r0
   d7214:	4825      	ldr	r0, [pc, #148]	; (d72ac <_Z10checkAccelv+0xcc>)
   d7216:	f002 fcd3 	bl	d9bc0 <_ZN7ADXL3459triggeredEhi>
   d721a:	b160      	cbz	r0, d7236 <_Z10checkAccelv+0x56>
      DEBUG_PRINTLN("*** INACTIVITY ***");
   d721c:	f005 f858 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d7220:	4923      	ldr	r1, [pc, #140]	; (d72b0 <_Z10checkAccelv+0xd0>)
   d7222:	f003 ffd8 	bl	db1d6 <_ZN5Print7printlnEPKc>
      // *Temp Debug* Turn off the LED.
      // digitalWrite(ledPin, LOW);
      //Robert add code here for Blynk to do when inactivity is sensed
      tamperCurrentAlert = false;
   d7226:	2300      	movs	r3, #0
   d7228:	7023      	strb	r3, [r4, #0]
      if (tamperAlertChanged())
   d722a:	f7fe fc89 	bl	d5b40 <_Z18tamperAlertChangedv>
        #else
        Blynk.email(state.tamperEmail, "{DEVICE_NAME} : Tamper alarm ended", "{DEVICE_NAME} tamper alarm ended.");
        #endif  */   
      }
      // Toggle interrupts - i.e after inactivity check for activity
      adxl.ActivityINT(1);
   d722e:	2101      	movs	r1, #1
   d7230:	481e      	ldr	r0, [pc, #120]	; (d72ac <_Z10checkAccelv+0xcc>)
   d7232:	f002 fd7f 	bl	d9d34 <_ZN7ADXL34511ActivityINTEb>
    }
    // Activity
    if(adxl.triggered(interrupts, ADXL345_ACTIVITY)){
   d7236:	2204      	movs	r2, #4
   d7238:	4629      	mov	r1, r5
   d723a:	481c      	ldr	r0, [pc, #112]	; (d72ac <_Z10checkAccelv+0xcc>)
   d723c:	f002 fcc0 	bl	d9bc0 <_ZN7ADXL3459triggeredEhi>
   d7240:	b1a8      	cbz	r0, d726e <_Z10checkAccelv+0x8e>
      DEBUG_PRINTLN("*** ACTIVITY ***"); 
   d7242:	f005 f845 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d7246:	491b      	ldr	r1, [pc, #108]	; (d72b4 <_Z10checkAccelv+0xd4>)
   d7248:	f003 ffc5 	bl	db1d6 <_ZN5Print7printlnEPKc>
      // *Temp Debug* Turn on the LED.
      // digitalWrite(ledPin, HIGH);
      //Robert add code here for Blynk to do when activity is sensed
      tamperCurrentAlert = true;
   d724c:	2301      	movs	r3, #1
   d724e:	7023      	strb	r3, [r4, #0]
      if (tamperAlertChanged())
   d7250:	f7fe fc76 	bl	d5b40 <_Z18tamperAlertChangedv>
   d7254:	b138      	cbz	r0, d7266 <_Z10checkAccelv+0x86>
      {
        #ifdef Version_2
        if (state.notifyTamper==true)
   d7256:	4b18      	ldr	r3, [pc, #96]	; (d72b8 <_Z10checkAccelv+0xd8>)
   d7258:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
   d725c:	b11b      	cbz	r3, d7266 <_Z10checkAccelv+0x86>
          Blynk.logEvent("tamper_alert");
   d725e:	4917      	ldr	r1, [pc, #92]	; (d72bc <_Z10checkAccelv+0xdc>)
   d7260:	4817      	ldr	r0, [pc, #92]	; (d72c0 <_Z10checkAccelv+0xe0>)
   d7262:	f7ff ffa1 	bl	d71a8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8logEventIA13_cEEvRKT_>
        #else
        Blynk.email(state.tamperEmail, "{DEVICE_NAME} : Tamper alarm", "{DEVICE_NAME} tamper alarm!");
        #endif      
      }
      // Toggle interrupts - i.e after activity check for inactivity
      adxl.InactivityINT(1);
   d7266:	2101      	movs	r1, #1
   d7268:	4810      	ldr	r0, [pc, #64]	; (d72ac <_Z10checkAccelv+0xcc>)
   d726a:	f002 fd69 	bl	d9d40 <_ZN7ADXL34513InactivityINTEb>
    }
    accelInterrupt=false;
   d726e:	2300      	movs	r3, #0
   d7270:	7033      	strb	r3, [r6, #0]
  }

// Only buzzer for tamper 
  if ((tamperCurrentAlert==false)&&(!VapeBuzzerOn))
   d7272:	7823      	ldrb	r3, [r4, #0]
   d7274:	b933      	cbnz	r3, d7284 <_Z10checkAccelv+0xa4>
   d7276:	4b13      	ldr	r3, [pc, #76]	; (d72c4 <_Z10checkAccelv+0xe4>)
   d7278:	7819      	ldrb	r1, [r3, #0]
   d727a:	b919      	cbnz	r1, d7284 <_Z10checkAccelv+0xa4>
  {
    //Buzzer Off
    digitalWrite(buzzer, LOW);
   d727c:	4b12      	ldr	r3, [pc, #72]	; (d72c8 <_Z10checkAccelv+0xe8>)
   d727e:	8818      	ldrh	r0, [r3, #0]
   d7280:	f005 fe2b 	bl	dceda <digitalWrite>
  }

  if ((tamperCurrentAlert==true)&&(state.buzzerTamper==true))
   d7284:	7823      	ldrb	r3, [r4, #0]
   d7286:	b153      	cbz	r3, d729e <_Z10checkAccelv+0xbe>
   d7288:	4b0b      	ldr	r3, [pc, #44]	; (d72b8 <_Z10checkAccelv+0xd8>)
   d728a:	f893 3417 	ldrb.w	r3, [r3, #1047]	; 0x417
   d728e:	b133      	cbz	r3, d729e <_Z10checkAccelv+0xbe>
  {
    //Buzzer On
    if (state.buzzerTamper)
      digitalWrite(buzzer, HIGH);
   d7290:	4b0d      	ldr	r3, [pc, #52]	; (d72c8 <_Z10checkAccelv+0xe8>)
   d7292:	2101      	movs	r1, #1
   d7294:	8818      	ldrh	r0, [r3, #0]
  }

}
   d7296:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  if ((tamperCurrentAlert==true)&&(state.buzzerTamper==true))
  {
    //Buzzer On
    if (state.buzzerTamper)
      digitalWrite(buzzer, HIGH);
   d729a:	f005 be1e 	b.w	dceda <digitalWrite>
   d729e:	bd70      	pop	{r4, r5, r6, pc}
   d72a0:	2003dec4 	.word	0x2003dec4
   d72a4:	2003decc 	.word	0x2003decc
   d72a8:	000e711e 	.word	0x000e711e
   d72ac:	2003da48 	.word	0x2003da48
   d72b0:	000e7138 	.word	0x000e7138
   d72b4:	000e714b 	.word	0x000e714b
   d72b8:	2003da80 	.word	0x2003da80
   d72bc:	000e715c 	.word	0x000e715c
   d72c0:	2003e234 	.word	0x2003e234
   d72c4:	2003d7f8 	.word	0x2003d7f8
   d72c8:	2003d56c 	.word	0x2003d56c

000d72cc <_ZN13BlynkProtocolI22BlynkTransportParticleE7connectEm>:

    bool connected() const { return state == CONNECTED; }

    bool isTokenInvalid() const { return state == TOKEN_INVALID; }

    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
   d72cc:	b570      	push	{r4, r5, r6, lr}
   d72ce:	4604      	mov	r4, r0
   d72d0:	6800      	ldr	r0, [r0, #0]
   d72d2:	460e      	mov	r6, r1
   d72d4:	f005 fb68 	bl	dc9a8 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        state = CONNECTING;
   d72d8:	2300      	movs	r3, #0
   d72da:	7763      	strb	r3, [r4, #29]
        millis_time_t started = BlynkMillis();
   d72dc:	f003 f896 	bl	da40c <_Z11BlynkMillisv>
   d72e0:	4605      	mov	r5, r0
        while ((state != CONNECTED) &&
   d72e2:	7f63      	ldrb	r3, [r4, #29]
   d72e4:	2b01      	cmp	r3, #1
   d72e6:	d009      	beq.n	d72fc <_ZN13BlynkProtocolI22BlynkTransportParticleE7connectEm+0x30>
               (BlynkMillis() - started < timeout))
   d72e8:	f003 f890 	bl	da40c <_Z11BlynkMillisv>

    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
        conn.disconnect();
        state = CONNECTING;
        millis_time_t started = BlynkMillis();
        while ((state != CONNECTED) &&
   d72ec:	1b40      	subs	r0, r0, r5
   d72ee:	42b0      	cmp	r0, r6
   d72f0:	d204      	bcs.n	d72fc <_ZN13BlynkProtocolI22BlynkTransportParticleE7connectEm+0x30>
               (BlynkMillis() - started < timeout))
        {
            run();
   d72f2:	2100      	movs	r1, #0
   d72f4:	4620      	mov	r0, r4
   d72f6:	f7ff f829 	bl	d634c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>

    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
        conn.disconnect();
        state = CONNECTING;
        millis_time_t started = BlynkMillis();
        while ((state != CONNECTED) &&
   d72fa:	e7f2      	b.n	d72e2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7connectEm+0x16>
               (BlynkMillis() - started < timeout))
        {
            run();
        }
        return state == CONNECTED;
   d72fc:	7f60      	ldrb	r0, [r4, #29]
    }
   d72fe:	1e43      	subs	r3, r0, #1
   d7300:	4258      	negs	r0, r3
   d7302:	4158      	adcs	r0, r3
   d7304:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7308 <_Z7connectv>:
    
}

// Adding explicit connect routine that has to work before the rest of the code runs
void connect()
{
   d7308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  {
    DEBUG_PRINTLN("Cellular ready");
  }
  #endif
  #if Wiring_WiFi
  bool cellready=WiFi.ready();
   d730a:	4d55      	ldr	r5, [pc, #340]	; (d7460 <_Z7connectv+0x158>)
   d730c:	4628      	mov	r0, r5
   d730e:	f7fe f88e 	bl	d542e <_ZN5spark9WiFiClass5readyEv>
  if (!cellready)
   d7312:	4604      	mov	r4, r0
   d7314:	bb30      	cbnz	r0, d7364 <_Z7connectv+0x5c>
  {
    DEBUG_PRINTLN("Attempting to connect WiFi...");
   d7316:	f004 ffdb 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d731a:	4952      	ldr	r1, [pc, #328]	; (d7464 <_Z7connectv+0x15c>)


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d731c:	4e52      	ldr	r6, [pc, #328]	; (d7468 <_Z7connectv+0x160>)
   d731e:	f003 ff5a 	bl	db1d6 <_ZN5Print7printlnEPKc>
    WiFi.on();
   d7322:	4628      	mov	r0, r5
   d7324:	f7fe f888 	bl	d5438 <_ZN5spark9WiFiClass2onEv>
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7328:	4623      	mov	r3, r4
   d732a:	4622      	mov	r2, r4
   d732c:	4621      	mov	r1, r4
   d732e:	6868      	ldr	r0, [r5, #4]
   d7330:	f003 fb5c 	bl	da9ec <network_connect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d7334:	4620      	mov	r0, r4
   d7336:	f003 f931 	bl	da59c <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d733a:	2500      	movs	r5, #0
   d733c:	4604      	mov	r4, r0
   d733e:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d7340:	2000      	movs	r0, #0
   d7342:	f003 f92b 	bl	da59c <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d7346:	1b00      	subs	r0, r0, r4
   d7348:	eb61 0105 	sbc.w	r1, r1, r5
   d734c:	428f      	cmp	r7, r1
   d734e:	bf08      	it	eq
   d7350:	4286      	cmpeq	r6, r0
   d7352:	d35f      	bcc.n	d7414 <_Z7connectv+0x10c>
    WiFi.connect();
    waitFor(WiFi.ready,180000);
   d7354:	4842      	ldr	r0, [pc, #264]	; (d7460 <_Z7connectv+0x158>)
   d7356:	f7fe f86a 	bl	d542e <_ZN5spark9WiFiClass5readyEv>
   d735a:	2800      	cmp	r0, #0
   d735c:	d15a      	bne.n	d7414 <_Z7connectv+0x10c>
            spark_process();
   d735e:	f003 fb95 	bl	daa8c <spark_process>
   d7362:	e7ed      	b.n	d7340 <_Z7connectv+0x38>
    System.reset();
    }
  }
  else
  {
    DEBUG_PRINTLN("WiFi ready");
   d7364:	f004 ffb4 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d7368:	4940      	ldr	r1, [pc, #256]	; (d746c <_Z7connectv+0x164>)
   d736a:	f003 ff34 	bl	db1d6 <_ZN5Print7printlnEPKc>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d736e:	f003 fb9d 	bl	daaac <spark_cloud_flag_connected>
  }
  #endif  
//*** Commented out for testing without particle connected ***
  bool partconnected=Particle.connected();
  if (!partconnected)
   d7372:	4604      	mov	r4, r0
   d7374:	b9f8      	cbnz	r0, d73b6 <_Z7connectv+0xae>
  {
    DEBUG_PRINTLN("Attempting to connect to Particle...");
   d7376:	f004 ffab 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d737a:	493d      	ldr	r1, [pc, #244]	; (d7470 <_Z7connectv+0x168>)
   d737c:	f003 ff2b 	bl	db1d6 <_ZN5Print7printlnEPKc>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d7380:	f003 fb8c 	bl	daa9c <spark_cloud_flag_connect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d7384:	4620      	mov	r0, r4
   d7386:	f003 f909 	bl	da59c <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d738a:	2500      	movs	r5, #0
   d738c:	4604      	mov	r4, r0
   d738e:	f64e 265f 	movw	r6, #59999	; 0xea5f
   d7392:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d7394:	2000      	movs	r0, #0
   d7396:	f003 f901 	bl	da59c <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d739a:	1b00      	subs	r0, r0, r4
   d739c:	eb61 0105 	sbc.w	r1, r1, r5
   d73a0:	428f      	cmp	r7, r1
   d73a2:	bf08      	it	eq
   d73a4:	4286      	cmpeq	r6, r0
   d73a6:	d348      	bcc.n	d743a <_Z7connectv+0x132>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d73a8:	f003 fb80 	bl	daaac <spark_cloud_flag_connected>
   d73ac:	2800      	cmp	r0, #0
   d73ae:	d144      	bne.n	d743a <_Z7connectv+0x132>
            spark_process();
   d73b0:	f003 fb6c 	bl	daa8c <spark_process>
   d73b4:	e7ee      	b.n	d7394 <_Z7connectv+0x8c>
      System.reset();
    } 
  }
  else
  {
    DEBUG_PRINTLN("Particle connected");
   d73b6:	f004 ff8b 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d73ba:	492e      	ldr	r1, [pc, #184]	; (d7474 <_Z7connectv+0x16c>)
   d73bc:	f003 ff0b 	bl	db1d6 <_ZN5Print7printlnEPKc>
   d73c0:	4c2d      	ldr	r4, [pc, #180]	; (d7478 <_Z7connectv+0x170>)
  }
//*** Commented out for testing without particle connected ***
  bool blynkconnected=Blynk.connected();
  if (!blynkconnected)
   d73c2:	7f63      	ldrb	r3, [r4, #29]
   d73c4:	2b01      	cmp	r3, #1
   d73c6:	d01e      	beq.n	d7406 <_Z7connectv+0xfe>
  {
    DEBUG_PRINTLN("Attempting to connect to Blynk...");
   d73c8:	f004 ff82 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d73cc:	492b      	ldr	r1, [pc, #172]	; (d747c <_Z7connectv+0x174>)
   d73ce:	f003 ff02 	bl	db1d6 <_ZN5Print7printlnEPKc>
    #ifdef Version_2
    Blynk.config(auth, "zeptosense2.blynk.cc",portBlynk);
   d73d2:	4b2b      	ldr	r3, [pc, #172]	; (d7480 <_Z7connectv+0x178>)
   d73d4:	492b      	ldr	r1, [pc, #172]	; (d7484 <_Z7connectv+0x17c>)
   d73d6:	881b      	ldrh	r3, [r3, #0]
   d73d8:	4a2b      	ldr	r2, [pc, #172]	; (d7488 <_Z7connectv+0x180>)
   d73da:	4620      	mov	r0, r4
   d73dc:	f7fe f93e 	bl	d565c <_ZN13BlynkParticle6configEPKcS1_t>
    #else
    Blynk.config(auth, "zeptosense.blynk.cc");
    #endif
    if (!Blynk.connect())
   d73e0:	f242 3128 	movw	r1, #9000	; 0x2328
   d73e4:	4620      	mov	r0, r4
   d73e6:	f7ff ff71 	bl	d72cc <_ZN13BlynkProtocolI22BlynkTransportParticleE7connectEm>
   d73ea:	2800      	cmp	r0, #0
   d73ec:	d136      	bne.n	d745c <_Z7connectv+0x154>
    {
      DEBUG_PRINTLN("Blynk not connected");
   d73ee:	f004 ff6f 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d73f2:	4926      	ldr	r1, [pc, #152]	; (d748c <_Z7connectv+0x184>)
   d73f4:	f003 feef 	bl	db1d6 <_ZN5Print7printlnEPKc>
      delay(200);
   d73f8:	20c8      	movs	r0, #200	; 0xc8
   d73fa:	f004 f9fd 	bl	db7f8 <delay>
  }
  else
  {
    DEBUG_PRINTLN("Blynk connected");
  }
}
   d73fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    if (!Blynk.connect())
    {
      DEBUG_PRINTLN("Blynk not connected");
      delay(200);
      // timerSleep(3);
      System.reset();      
   d7402:	f003 bc63 	b.w	daccc <_ZN11SystemClass5resetEv>
    }
  }
  else
  {
    DEBUG_PRINTLN("Blynk connected");
   d7406:	f004 ff63 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d740a:	4921      	ldr	r1, [pc, #132]	; (d7490 <_Z7connectv+0x188>)
  }
}
   d740c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      System.reset();      
    }
  }
  else
  {
    DEBUG_PRINTLN("Blynk connected");
   d7410:	f003 bee1 	b.w	db1d6 <_ZN5Print7printlnEPKc>
  if (!cellready)
  {
    DEBUG_PRINTLN("Attempting to connect WiFi...");
    WiFi.on();
    WiFi.connect();
    waitFor(WiFi.ready,180000);
   d7414:	4812      	ldr	r0, [pc, #72]	; (d7460 <_Z7connectv+0x158>)
   d7416:	f7fe f80a 	bl	d542e <_ZN5spark9WiFiClass5readyEv>
    if (!WiFi.ready())
   d741a:	4811      	ldr	r0, [pc, #68]	; (d7460 <_Z7connectv+0x158>)
   d741c:	f7fe f807 	bl	d542e <_ZN5spark9WiFiClass5readyEv>
   d7420:	2800      	cmp	r0, #0
   d7422:	d1a4      	bne.n	d736e <_Z7connectv+0x66>
    {
    DEBUG_PRINTLN("WiFi not ready");
   d7424:	f004 ff54 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d7428:	491a      	ldr	r1, [pc, #104]	; (d7494 <_Z7connectv+0x18c>)
   d742a:	f003 fed4 	bl	db1d6 <_ZN5Print7printlnEPKc>
    delay(200);
   d742e:	20c8      	movs	r0, #200	; 0xc8
   d7430:	f004 f9e2 	bl	db7f8 <delay>
    // timerSleep(3);
    System.reset();
   d7434:	f003 fc4a 	bl	daccc <_ZN11SystemClass5resetEv>
   d7438:	e799      	b.n	d736e <_Z7connectv+0x66>
   d743a:	f003 fb37 	bl	daaac <spark_cloud_flag_connected>
   d743e:	f003 fb35 	bl	daaac <spark_cloud_flag_connected>
  if (!partconnected)
  {
    DEBUG_PRINTLN("Attempting to connect to Particle...");
    Particle.connect();
    waitFor(Particle.connected,60000);
    if (!Particle.connected())
   d7442:	2800      	cmp	r0, #0
   d7444:	d1bc      	bne.n	d73c0 <_Z7connectv+0xb8>
    {
      DEBUG_PRINTLN("Particle not connected");
   d7446:	f004 ff43 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d744a:	4913      	ldr	r1, [pc, #76]	; (d7498 <_Z7connectv+0x190>)
   d744c:	f003 fec3 	bl	db1d6 <_ZN5Print7printlnEPKc>
      delay(200);
   d7450:	20c8      	movs	r0, #200	; 0xc8
   d7452:	f004 f9d1 	bl	db7f8 <delay>
      // timerSleep(3);
      System.reset();
   d7456:	f003 fc39 	bl	daccc <_ZN11SystemClass5resetEv>
   d745a:	e7b1      	b.n	d73c0 <_Z7connectv+0xb8>
   d745c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d745e:	bf00      	nop
   d7460:	2003e5e0 	.word	0x2003e5e0
   d7464:	000e7169 	.word	0x000e7169
   d7468:	0002bf1f 	.word	0x0002bf1f
   d746c:	000e7187 	.word	0x000e7187
   d7470:	000e7192 	.word	0x000e7192
   d7474:	000e71ce 	.word	0x000e71ce
   d7478:	2003e234 	.word	0x2003e234
   d747c:	000e71e1 	.word	0x000e71e1
   d7480:	2003d570 	.word	0x2003d570
   d7484:	2003d57c 	.word	0x2003d57c
   d7488:	000e7203 	.word	0x000e7203
   d748c:	000e6de9 	.word	0x000e6de9
   d7490:	000e7218 	.word	0x000e7218
   d7494:	000e6dda 	.word	0x000e6dda
   d7498:	000e71b7 	.word	0x000e71b7

000d749c <_Z21connectWithoutWaitingv>:
    DEBUG_PRINTLN("Blynk connected");
  }
}

void connectWithoutWaiting()
{
   d749c:	b570      	push	{r4, r5, r6, lr}
      Cellular.connect();
    }
  }
  #endif
  #if Wiring_WiFi
  bool wifiready=WiFi.ready();
   d749e:	4c2e      	ldr	r4, [pc, #184]	; (d7558 <_Z21connectWithoutWaitingv+0xbc>)
   d74a0:	4620      	mov	r0, r4
   d74a2:	f7fd ffc4 	bl	d542e <_ZN5spark9WiFiClass5readyEv>
  if (!wifiready)
   d74a6:	4605      	mov	r5, r0
   d74a8:	b9e0      	cbnz	r0, d74e4 <_Z21connectWithoutWaitingv+0x48>
  {
    DEBUG_PRINTLN("WiFi not ready");
   d74aa:	f004 ff11 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d74ae:	492b      	ldr	r1, [pc, #172]	; (d755c <_Z21connectWithoutWaitingv+0xc0>)
   d74b0:	f003 fe91 	bl	db1d6 <_ZN5Print7printlnEPKc>
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d74b4:	462a      	mov	r2, r5
   d74b6:	4629      	mov	r1, r5
   d74b8:	6860      	ldr	r0, [r4, #4]
   d74ba:	f003 fa9f 	bl	da9fc <network_connecting>
    if (!WiFi.connecting())
   d74be:	4605      	mov	r5, r0
   d74c0:	2800      	cmp	r0, #0
   d74c2:	d148      	bne.n	d7556 <_Z21connectWithoutWaitingv+0xba>
    {
      DEBUG_PRINTLN("Attempting to connect WiFi...");
   d74c4:	f004 ff04 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d74c8:	4925      	ldr	r1, [pc, #148]	; (d7560 <_Z21connectWithoutWaitingv+0xc4>)
   d74ca:	f003 fe84 	bl	db1d6 <_ZN5Print7printlnEPKc>
      WiFi.on();
   d74ce:	4620      	mov	r0, r4
   d74d0:	f7fd ffb2 	bl	d5438 <_ZN5spark9WiFiClass2onEv>
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d74d4:	462b      	mov	r3, r5
   d74d6:	462a      	mov	r2, r5
   d74d8:	4629      	mov	r1, r5
   d74da:	6860      	ldr	r0, [r4, #4]
    }
  //*** Commented out for testing without particle connected ***
  }


}  
   d74dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d74e0:	f003 ba84 	b.w	da9ec <network_connect>
   d74e4:	4c1f      	ldr	r4, [pc, #124]	; (d7564 <_Z21connectWithoutWaitingv+0xc8>)
  {
    #if Wiring_Cellular
    DEBUG_PRINTLN("Cellular ready");
    #endif
    #if Wiring_WiFi
    DEBUG_PRINTLN("WiFi ready");
   d74e6:	f004 fef3 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d74ea:	491f      	ldr	r1, [pc, #124]	; (d7568 <_Z21connectWithoutWaitingv+0xcc>)
   d74ec:	f003 fe73 	bl	db1d6 <_ZN5Print7printlnEPKc>
    #endif    
    bool blynkconnected=Blynk.connected();
    if (!blynkconnected)
   d74f0:	7f63      	ldrb	r3, [r4, #29]
   d74f2:	2b01      	cmp	r3, #1
   d74f4:	d012      	beq.n	d751c <_Z21connectWithoutWaitingv+0x80>
    {
      DEBUG_PRINTLN("Attempting to connect to Blynk...");
   d74f6:	f004 feeb 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d74fa:	491c      	ldr	r1, [pc, #112]	; (d756c <_Z21connectWithoutWaitingv+0xd0>)
   d74fc:	f003 fe6b 	bl	db1d6 <_ZN5Print7printlnEPKc>

      Blynk.run();
   d7500:	2100      	movs	r1, #0
   d7502:	4620      	mov	r0, r4
   d7504:	f7fe ff22 	bl	d634c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
      if (!Blynk.connect())
   d7508:	f242 3128 	movw	r1, #9000	; 0x2328
   d750c:	4620      	mov	r0, r4
   d750e:	f7ff fedd 	bl	d72cc <_ZN13BlynkProtocolI22BlynkTransportParticleE7connectEm>
   d7512:	b940      	cbnz	r0, d7526 <_Z21connectWithoutWaitingv+0x8a>
      {
        DEBUG_PRINTLN("Blynk not connected");
   d7514:	f004 fedc 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d7518:	4915      	ldr	r1, [pc, #84]	; (d7570 <_Z21connectWithoutWaitingv+0xd4>)
   d751a:	e002      	b.n	d7522 <_Z21connectWithoutWaitingv+0x86>
      }
    }
    else
    {
      DEBUG_PRINTLN("Blynk connected");
   d751c:	f004 fed8 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d7520:	4914      	ldr	r1, [pc, #80]	; (d7574 <_Z21connectWithoutWaitingv+0xd8>)
   d7522:	f003 fe58 	bl	db1d6 <_ZN5Print7printlnEPKc>
   d7526:	f003 fac1 	bl	daaac <spark_cloud_flag_connected>
    }

  //*** Commented out for testing without particle connected ***
    bool partconnected=Particle.connected();
    if (!partconnected)
   d752a:	b968      	cbnz	r0, d7548 <_Z21connectWithoutWaitingv+0xac>
    {
      DEBUG_PRINTLN("Attempting to connect to Particle...");
   d752c:	f004 fed0 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d7530:	4911      	ldr	r1, [pc, #68]	; (d7578 <_Z21connectWithoutWaitingv+0xdc>)
   d7532:	f003 fe50 	bl	db1d6 <_ZN5Print7printlnEPKc>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d7536:	f003 fab1 	bl	daa9c <spark_cloud_flag_connect>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d753a:	f003 fab7 	bl	daaac <spark_cloud_flag_connected>
      Particle.connect();
      if (!Particle.connected())
   d753e:	b950      	cbnz	r0, d7556 <_Z21connectWithoutWaitingv+0xba>
      {
        DEBUG_PRINTLN("Particle not connected");
   d7540:	f004 fec6 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d7544:	490d      	ldr	r1, [pc, #52]	; (d757c <_Z21connectWithoutWaitingv+0xe0>)
   d7546:	e002      	b.n	d754e <_Z21connectWithoutWaitingv+0xb2>
      } 
    }
    else
    {
      DEBUG_PRINTLN("Particle connected");
   d7548:	f004 fec2 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d754c:	490c      	ldr	r1, [pc, #48]	; (d7580 <_Z21connectWithoutWaitingv+0xe4>)
    }
  //*** Commented out for testing without particle connected ***
  }


}  
   d754e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        DEBUG_PRINTLN("Particle not connected");
      } 
    }
    else
    {
      DEBUG_PRINTLN("Particle connected");
   d7552:	f003 be40 	b.w	db1d6 <_ZN5Print7printlnEPKc>
   d7556:	bd70      	pop	{r4, r5, r6, pc}
   d7558:	2003e5e0 	.word	0x2003e5e0
   d755c:	000e6dda 	.word	0x000e6dda
   d7560:	000e7169 	.word	0x000e7169
   d7564:	2003e234 	.word	0x2003e234
   d7568:	000e7187 	.word	0x000e7187
   d756c:	000e71e1 	.word	0x000e71e1
   d7570:	000e6de9 	.word	0x000e6de9
   d7574:	000e7218 	.word	0x000e7218
   d7578:	000e7192 	.word	0x000e7192
   d757c:	000e71b7 	.word	0x000e71b7
   d7580:	000e71ce 	.word	0x000e71ce
   d7584:	00000000 	.word	0x00000000

000d7588 <_Z11readSensorsv>:
//float ULP::_Vsup =3.3;  //voltage supplied to V+ of ULP, ideally 3.3 Volts 

///////////////////////

void readSensors()
{
   d7588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d758c:	ed2d 8b02 	vpush	{d8}
   d7590:	b0a5      	sub	sp, #148	; 0x94
  DEBUG_PRINTLN("start readSensors");
#ifdef KURTDEBUG
  DEBUG_PRINT("State values are: Buzzer Tamper ");
  DEBUG_PRINTLN(state.buzzerTamper);
   d7592:	4ca5      	ldr	r4, [pc, #660]	; (d7828 <_Z11readSensorsv+0x2a0>)

///////////////////////

void readSensors()
{
  DEBUG_PRINTLN("start readSensors");
   d7594:	f004 fe9c 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d7598:	49a4      	ldr	r1, [pc, #656]	; (d782c <_Z11readSensorsv+0x2a4>)
   d759a:	f003 fe1c 	bl	db1d6 <_ZN5Print7printlnEPKc>
#ifdef KURTDEBUG
  DEBUG_PRINT("State values are: Buzzer Tamper ");
   d759e:	f004 fe97 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d75a2:	49a3      	ldr	r1, [pc, #652]	; (d7830 <_Z11readSensorsv+0x2a8>)
   d75a4:	f003 fe04 	bl	db1b0 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(state.buzzerTamper);
   d75a8:	f004 fe92 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d75ac:	220a      	movs	r2, #10
   d75ae:	f894 1417 	ldrb.w	r1, [r4, #1047]	; 0x417
   d75b2:	f003 fe8b 	bl	db2cc <_ZN5Print7printlnEii>
  DEBUG_PRINT("Buzzer Vapor ");
   d75b6:	f004 fe8b 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d75ba:	499e      	ldr	r1, [pc, #632]	; (d7834 <_Z11readSensorsv+0x2ac>)
   d75bc:	f003 fdf8 	bl	db1b0 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(state.buzzerVapor);
   d75c0:	f004 fe86 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d75c4:	220a      	movs	r2, #10
   d75c6:	f894 1418 	ldrb.w	r1, [r4, #1048]	; 0x418
   d75ca:	f003 fe7f 	bl	db2cc <_ZN5Print7printlnEii>
  DEBUG_PRINT("Notify Vapor ");
   d75ce:	f004 fe7f 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d75d2:	4999      	ldr	r1, [pc, #612]	; (d7838 <_Z11readSensorsv+0x2b0>)
   d75d4:	f003 fdec 	bl	db1b0 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(state.notifyVapor);
   d75d8:	f004 fe7a 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d75dc:	220a      	movs	r2, #10
   d75de:	f894 1419 	ldrb.w	r1, [r4, #1049]	; 0x419
   d75e2:	f003 fe73 	bl	db2cc <_ZN5Print7printlnEii>
  DEBUG_PRINT("Notify Tamper ");
   d75e6:	f004 fe73 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d75ea:	4994      	ldr	r1, [pc, #592]	; (d783c <_Z11readSensorsv+0x2b4>)
   d75ec:	f003 fde0 	bl	db1b0 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(state.notifyTamper);
   d75f0:	f004 fe6e 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d75f4:	220a      	movs	r2, #10
   d75f6:	f894 141a 	ldrb.w	r1, [r4, #1050]	; 0x41a
   d75fa:	f003 fe67 	bl	db2cc <_ZN5Print7printlnEii>
  DEBUG_PRINT("Notify Battery ");
   d75fe:	f004 fe67 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d7602:	498f      	ldr	r1, [pc, #572]	; (d7840 <_Z11readSensorsv+0x2b8>)
   d7604:	f003 fdd4 	bl	db1b0 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(state.notifyBattery);
   d7608:	f004 fe62 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d760c:	220a      	movs	r2, #10
   d760e:	f894 141b 	ldrb.w	r1, [r4, #1051]	; 0x41b
   d7612:	f003 fe5b 	bl	db2cc <_ZN5Print7printlnEii>
  DEBUG_PRINT("Activity Threshold ");
   d7616:	f004 fe5b 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d761a:	498a      	ldr	r1, [pc, #552]	; (d7844 <_Z11readSensorsv+0x2bc>)
   d761c:	f003 fdc8 	bl	db1b0 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(state.ActivityThreshold);
   d7620:	f004 fe56 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d7624:	220a      	movs	r2, #10
   d7626:	f8d4 141c 	ldr.w	r1, [r4, #1052]	; 0x41c
   d762a:	f003 fe4f 	bl	db2cc <_ZN5Print7printlnEii>
  DEBUG_PRINT("Device Zone ");
   d762e:	f004 fe4f 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d7632:	4985      	ldr	r1, [pc, #532]	; (d7848 <_Z11readSensorsv+0x2c0>)
   d7634:	f003 fdbc 	bl	db1b0 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(state.deviceZone);
   d7638:	f004 fe4a 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d763c:	220a      	movs	r2, #10
   d763e:	f8d4 1420 	ldr.w	r1, [r4, #1056]	; 0x420
   d7642:	f003 fe43 	bl	db2cc <_ZN5Print7printlnEii>
#endif 
  // Woke up out of a sleep - setup the HW
  if (state.bInSleepMode){
   d7646:	f894 3425 	ldrb.w	r3, [r4, #1061]	; 0x425
   d764a:	4625      	mov	r5, r4
   d764c:	2b00      	cmp	r3, #0
   d764e:	f000 81f8 	beq.w	d7a42 <_Z11readSensorsv+0x4ba>
    
    Wire.setSpeed(20000);
   d7652:	f005 fccd 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d7656:	f644 6120 	movw	r1, #20000	; 0x4e20
   d765a:	f004 feb1 	bl	dc3c0 <_ZN7TwoWire8setSpeedEm>
    // Debug console
    pinMode(D8, INPUT_PULLDOWN);
   d765e:	2103      	movs	r1, #3
   d7660:	2008      	movs	r0, #8
   d7662:	f005 fc29 	bl	dceb8 <pinMode>
    Serial.begin(115200);
   d7666:	f004 fd81 	bl	dc16c <_Z16_fetch_usbserialv>
   d766a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d766e:	f004 fd71 	bl	dc154 <_ZN9USBSerial5beginEl>
    // Used to monitor debug without USB connection
    Serial1.begin(115200);
    delay(100);

    // Buzzer connected to D7
    pinMode(buzzer, OUTPUT);
   d7672:	4c76      	ldr	r4, [pc, #472]	; (d784c <_Z11readSensorsv+0x2c4>)
    Wire.setSpeed(20000);
    // Debug console
    pinMode(D8, INPUT_PULLDOWN);
    Serial.begin(115200);
    // Used to monitor debug without USB connection
    Serial1.begin(115200);
   d7674:	f004 fe2c 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d7678:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d767c:	f004 fe22 	bl	dc2c4 <_ZN11USARTSerial5beginEm>
    delay(100);
   d7680:	2064      	movs	r0, #100	; 0x64
   d7682:	f004 f8b9 	bl	db7f8 <delay>

    // Buzzer connected to D7
    pinMode(buzzer, OUTPUT);
   d7686:	2101      	movs	r1, #1
   d7688:	8820      	ldrh	r0, [r4, #0]
   d768a:	f005 fc15 	bl	dceb8 <pinMode>
    digitalWrite(buzzer, LOW);
   d768e:	2100      	movs	r1, #0
   d7690:	8820      	ldrh	r0, [r4, #0]
   d7692:	f005 fc22 	bl	dceda <digitalWrite>

    Wire.begin();
   d7696:	f005 fcab 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d769a:	f004 fe95 	bl	dc3c8 <_ZN7TwoWire5beginEv>
    delay(100);
   d769e:	2064      	movs	r0, #100	; 0x64
   d76a0:	f004 f8aa 	bl	db7f8 <delay>
    DEBUG_PRINTLN("Start Setup section after a sleep");
   d76a4:	f004 fe14 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d76a8:	4969      	ldr	r1, [pc, #420]	; (d7850 <_Z11readSensorsv+0x2c8>)
   d76aa:	f003 fd94 	bl	db1d6 <_ZN5Print7printlnEPKc>
    // the Write.endTransmisstion to see if
    // a device did acknowledge to the address.
    byte expandererror, expanderaddress;

    expanderaddress = 0x20; // MCP23017 address
    Wire.beginTransmission(expanderaddress);
   d76ae:	f005 fc9f 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d76b2:	2120      	movs	r1, #32
   d76b4:	f004 fea8 	bl	dc408 <_ZN7TwoWire17beginTransmissionEh>
    expandererror = Wire.endTransmission();
   d76b8:	f005 fc9a 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d76bc:	f004 feaf 	bl	dc41e <_ZN7TwoWire15endTransmissionEv>

    // Try again if there is an error
    if (!expandererror==0)
   d76c0:	2800      	cmp	r0, #0
   d76c2:	d041      	beq.n	d7748 <_Z11readSensorsv+0x1c0>
    {
      Wire.reset();
   d76c4:	f005 fc94 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d76c8:	f004 feb0 	bl	dc42c <_ZN7TwoWire5resetEv>
      Wire.beginTransmission(expanderaddress);
   d76cc:	f005 fc90 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d76d0:	2120      	movs	r1, #32
   d76d2:	f004 fe99 	bl	dc408 <_ZN7TwoWire17beginTransmissionEh>
      expandererror = Wire.endTransmission();
   d76d6:	f005 fc8b 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d76da:	f004 fea0 	bl	dc41e <_ZN7TwoWire15endTransmissionEv>
    }

    // Blink LED and reset if there is an error
    if (!expandererror == 0)
   d76de:	b398      	cbz	r0, d7748 <_Z11readSensorsv+0x1c0>
    {
      DEBUG_PRINTLN("Unable to read Expander - resetting in 9 seconds");
   d76e0:	f004 fdf6 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d76e4:	495b      	ldr	r1, [pc, #364]	; (d7854 <_Z11readSensorsv+0x2cc>)
   d76e6:	f003 fd76 	bl	db1d6 <_ZN5Print7printlnEPKc>
   d76ea:	4b5b      	ldr	r3, [pc, #364]	; (d7858 <_Z11readSensorsv+0x2d0>)
      Particle.publish("Error","Unable to read Expander - resetting in 9 seconds",PRIVATE);
   d76ec:	4a59      	ldr	r2, [pc, #356]	; (d7854 <_Z11readSensorsv+0x2cc>)
   d76ee:	781b      	ldrb	r3, [r3, #0]
   d76f0:	495a      	ldr	r1, [pc, #360]	; (d785c <_Z11readSensorsv+0x2d4>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d76f2:	2400      	movs	r4, #0
   d76f4:	a81b      	add	r0, sp, #108	; 0x6c
   d76f6:	f88d 4000 	strb.w	r4, [sp]
   d76fa:	f7fd fe8b 	bl	d5414 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.24.constprop.29>
   d76fe:	a81c      	add	r0, sp, #112	; 0x70
   d7700:	f7fe fa32 	bl	d5b68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      blinkRed.setActive(true);
   d7704:	2101      	movs	r1, #1
   d7706:	4856      	ldr	r0, [pc, #344]	; (d7860 <_Z11readSensorsv+0x2d8>)
   d7708:	f7fd fec8 	bl	d549c <_ZN8particle9LEDStatus9setActiveEb>
      delay(3000);
   d770c:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d7710:	f004 f872 	bl	db7f8 <delay>
      blinkRed.setActive(false);
   d7714:	4621      	mov	r1, r4
   d7716:	4852      	ldr	r0, [pc, #328]	; (d7860 <_Z11readSensorsv+0x2d8>)
   d7718:	f7fd fec0 	bl	d549c <_ZN8particle9LEDStatus9setActiveEb>
      blinkYellow.setActive(true);
   d771c:	2101      	movs	r1, #1
   d771e:	4851      	ldr	r0, [pc, #324]	; (d7864 <_Z11readSensorsv+0x2dc>)
   d7720:	f7fd febc 	bl	d549c <_ZN8particle9LEDStatus9setActiveEb>
      delay(3000);
   d7724:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d7728:	f004 f866 	bl	db7f8 <delay>
      blinkYellow.setActive(false);
   d772c:	4621      	mov	r1, r4
   d772e:	484d      	ldr	r0, [pc, #308]	; (d7864 <_Z11readSensorsv+0x2dc>)
   d7730:	f7fd feb4 	bl	d549c <_ZN8particle9LEDStatus9setActiveEb>
      blinkRed.setActive(true);
   d7734:	2101      	movs	r1, #1
   d7736:	484a      	ldr	r0, [pc, #296]	; (d7860 <_Z11readSensorsv+0x2d8>)
   d7738:	f7fd feb0 	bl	d549c <_ZN8particle9LEDStatus9setActiveEb>
      delay(3000);
   d773c:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d7740:	f004 f85a 	bl	db7f8 <delay>
      System.reset();
   d7744:	f003 fac2 	bl	daccc <_ZN11SystemClass5resetEv>
    }
    // END CHECK
    //////////////////////////////////////////////////////////

    // Need this to switch on the power
    power.begin();
   d7748:	4847      	ldr	r0, [pc, #284]	; (d7868 <_Z11readSensorsv+0x2e0>)
   d774a:	f8df 8134 	ldr.w	r8, [pc, #308]	; d7880 <_Z11readSensorsv+0x2f8>

    for (size_t x=0; x<i2cLength;++x)
    {
      DEBUG_PRINT(i2cNames[x]);
      DEBUG_PRINT(": ");
      DEBUG_PRINTLN(i2cExists[x]);
   d774e:	4f47      	ldr	r7, [pc, #284]	; (d786c <_Z11readSensorsv+0x2e4>)
    }
    // END CHECK
    //////////////////////////////////////////////////////////

    // Need this to switch on the power
    power.begin();
   d7750:	f002 f864 	bl	d981c <_ZN12IoTNodePower5beginEv>
    power.setPowerON(EXT3V3,true);
   d7754:	2201      	movs	r2, #1
   d7756:	2102      	movs	r1, #2
   d7758:	4843      	ldr	r0, [pc, #268]	; (d7868 <_Z11readSensorsv+0x2e0>)
   d775a:	f002 f909 	bl	d9970 <_ZN12IoTNodePower10setPowerONE9powerNameb>
    power.setPowerON(EXT5V,true);
   d775e:	2201      	movs	r2, #1
   d7760:	2103      	movs	r1, #3
   d7762:	4841      	ldr	r0, [pc, #260]	; (d7868 <_Z11readSensorsv+0x2e0>)
   d7764:	f002 f904 	bl	d9970 <_ZN12IoTNodePower10setPowerONE9powerNameb>
    // Allow time to settle
    delay(100);
   d7768:	2064      	movs	r0, #100	; 0x64
   d776a:	f004 f845 	bl	db7f8 <delay>

    uint32_t d1=0;
   d776e:	aa24      	add	r2, sp, #144	; 0x90
   d7770:	2400      	movs	r4, #0
   d7772:	f842 4d34 	str.w	r4, [r2, #-52]!
    fram.readData(0, (uint8_t *)&d1, sizeof(d1));
   d7776:	2304      	movs	r3, #4
   d7778:	4621      	mov	r1, r4
   d777a:	483d      	ldr	r0, [pc, #244]	; (d7870 <_Z11readSensorsv+0x2e8>)
   d777c:	f001 ffb2 	bl	d96e4 <_ZN10MB85RC256V8readDataEjPhj>
    Serial1.printlnf("d1=%u", d1);
   d7780:	f004 fda6 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d7784:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7786:	4a3b      	ldr	r2, [pc, #236]	; (d7874 <_Z11readSensorsv+0x2ec>)
   d7788:	2101      	movs	r1, #1
   d778a:	f003 fe69 	bl	db460 <_ZN5Print11printf_implEbPKcz>

    DEBUG_PRINTLN("Checking i2c devices...");
   d778e:	f004 fd9f 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d7792:	4939      	ldr	r1, [pc, #228]	; (d7878 <_Z11readSensorsv+0x2f0>)
   d7794:	f003 fd1f 	bl	db1d6 <_ZN5Print7printlnEPKc>

    bool i2cOK = checkI2CDevices(i2cNames, i2cAddr, i2cLength, i2cExists);
   d7798:	4b34      	ldr	r3, [pc, #208]	; (d786c <_Z11readSensorsv+0x2e4>)
   d779a:	4938      	ldr	r1, [pc, #224]	; (d787c <_Z11readSensorsv+0x2f4>)
   d779c:	4838      	ldr	r0, [pc, #224]	; (d7880 <_Z11readSensorsv+0x2f8>)
   d779e:	2207      	movs	r2, #7
   d77a0:	f7fd ff76 	bl	d5690 <_Z15checkI2CDevicesP6StringPhjPb>
   d77a4:	4606      	mov	r6, r0

    for (size_t x=0; x<i2cLength;++x)
    {
      DEBUG_PRINT(i2cNames[x]);
   d77a6:	f004 fd93 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d77aa:	0123      	lsls	r3, r4, #4
   d77ac:	f853 1008 	ldr.w	r1, [r3, r8]
   d77b0:	f003 fcfe 	bl	db1b0 <_ZN5Print5printEPKc>
      DEBUG_PRINT(": ");
   d77b4:	f004 fd8c 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d77b8:	4932      	ldr	r1, [pc, #200]	; (d7884 <_Z11readSensorsv+0x2fc>)
   d77ba:	f003 fcf9 	bl	db1b0 <_ZN5Print5printEPKc>
      DEBUG_PRINTLN(i2cExists[x]);
   d77be:	f004 fd87 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d77c2:	5d39      	ldrb	r1, [r7, r4]
   d77c4:	220a      	movs	r2, #10

    DEBUG_PRINTLN("Checking i2c devices...");

    bool i2cOK = checkI2CDevices(i2cNames, i2cAddr, i2cLength, i2cExists);

    for (size_t x=0; x<i2cLength;++x)
   d77c6:	3401      	adds	r4, #1
    {
      DEBUG_PRINT(i2cNames[x]);
      DEBUG_PRINT(": ");
      DEBUG_PRINTLN(i2cExists[x]);
   d77c8:	f003 fd80 	bl	db2cc <_ZN5Print7printlnEii>

    DEBUG_PRINTLN("Checking i2c devices...");

    bool i2cOK = checkI2CDevices(i2cNames, i2cAddr, i2cLength, i2cExists);

    for (size_t x=0; x<i2cLength;++x)
   d77cc:	2c07      	cmp	r4, #7
   d77ce:	d1ea      	bne.n	d77a6 <_Z11readSensorsv+0x21e>
    {
      DEBUG_PRINT(i2cNames[x]);
      DEBUG_PRINT(": ");
      DEBUG_PRINTLN(i2cExists[x]);
    }
    if (!i2cOK)
   d77d0:	2e00      	cmp	r6, #0
   d77d2:	d15f      	bne.n	d7894 <_Z11readSensorsv+0x30c>
    {
      StateString = "ERR";
   d77d4:	492c      	ldr	r1, [pc, #176]	; (d7888 <_Z11readSensorsv+0x300>)
   d77d6:	482d      	ldr	r0, [pc, #180]	; (d788c <_Z11readSensorsv+0x304>)
   d77d8:	f003 fbcd 	bl	daf76 <_ZN6StringaSEPKc>
      DEBUG_PRINTLN("I2C Issue");
   d77dc:	f004 fd78 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d77e0:	492b      	ldr	r1, [pc, #172]	; (d7890 <_Z11readSensorsv+0x308>)
   d77e2:	f003 fcf8 	bl	db1d6 <_ZN5Print7printlnEPKc>
      RGB.control(true);
   d77e6:	2001      	movs	r0, #1
   d77e8:	f004 f843 	bl	db872 <_ZN8RGBClass7controlEb>
      // the following sets the RGB LED to red
      RGB.color(255, 0, 0);
   d77ec:	4632      	mov	r2, r6
   d77ee:	4631      	mov	r1, r6
   d77f0:	20ff      	movs	r0, #255	; 0xff
   d77f2:	f004 f84e 	bl	db892 <_ZN8RGBClass5colorEiii>
      delay(3000);
   d77f6:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d77fa:	f003 fffd 	bl	db7f8 <delay>
      // resume normal operation
      RGB.control(false);    
   d77fe:	4630      	mov	r0, r6
   d7800:	f004 f837 	bl	db872 <_ZN8RGBClass7controlEb>
      digitalWrite(buzzer, HIGH);
      delay(100);
      digitalWrite(buzzer, LOW);
  #endif
      //Generate 9 pulses on SCL to tell slave to release the bus 
      Wire.reset();     
   d7804:	f005 fbf4 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d7808:	f004 fe10 	bl	dc42c <_ZN7TwoWire5resetEv>
      if (!Wire.isEnabled()) {
   d780c:	f005 fbf0 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d7810:	f004 fe08 	bl	dc424 <_ZN7TwoWire9isEnabledEv>
   d7814:	b918      	cbnz	r0, d781e <_Z11readSensorsv+0x296>
        Wire.begin();
   d7816:	f005 fbeb 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d781a:	f004 fdd5 	bl	dc3c8 <_ZN7TwoWire5beginEv>
      }
      Wire.end();
   d781e:	f005 fbe7 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d7822:	f004 fdd7 	bl	dc3d4 <_ZN7TwoWire3endEv>
   d7826:	e03e      	b.n	d78a6 <_Z11readSensorsv+0x31e>
   d7828:	2003da80 	.word	0x2003da80
   d782c:	000e7228 	.word	0x000e7228
   d7830:	000e723a 	.word	0x000e723a
   d7834:	000e725b 	.word	0x000e725b
   d7838:	000e7269 	.word	0x000e7269
   d783c:	000e7277 	.word	0x000e7277
   d7840:	000e7286 	.word	0x000e7286
   d7844:	000e7296 	.word	0x000e7296
   d7848:	000e72aa 	.word	0x000e72aa
   d784c:	2003d56c 	.word	0x2003d56c
   d7850:	000e72b7 	.word	0x000e72b7
   d7854:	000e72d9 	.word	0x000e72d9
   d7858:	2003d714 	.word	0x2003d714
   d785c:	000e730a 	.word	0x000e730a
   d7860:	2003d6c8 	.word	0x2003d6c8
   d7864:	2003d6f4 	.word	0x2003d6f4
   d7868:	2003deac 	.word	0x2003deac
   d786c:	2003df10 	.word	0x2003df10
   d7870:	2003d6e8 	.word	0x2003d6e8
   d7874:	000e7310 	.word	0x000e7310
   d7878:	000e7316 	.word	0x000e7316
   d787c:	2003d5a4 	.word	0x2003d5a4
   d7880:	2003d718 	.word	0x2003d718
   d7884:	000e7dac 	.word	0x000e7dac
   d7888:	000e732e 	.word	0x000e732e
   d788c:	2003d7d8 	.word	0x2003d7d8
   d7890:	000e7332 	.word	0x000e7332
    }
    else
    {
      StateString = "RDY";
   d7894:	49b6      	ldr	r1, [pc, #728]	; (d7b70 <_Z11readSensorsv+0x5e8>)
   d7896:	48b7      	ldr	r0, [pc, #732]	; (d7b74 <_Z11readSensorsv+0x5ec>)
   d7898:	f003 fb6d 	bl	daf76 <_ZN6StringaSEPKc>
      DEBUG_PRINTLN("I2C OK");
   d789c:	f004 fd18 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d78a0:	49b5      	ldr	r1, [pc, #724]	; (d7b78 <_Z11readSensorsv+0x5f0>)
   d78a2:	f003 fc98 	bl	db1d6 <_ZN5Print7printlnEPKc>
      digitalWrite(buzzer, HIGH);
      delay(5);
      digitalWrite(buzzer, LOW);
      #endif
    }
    delay(200);
   d78a6:	20c8      	movs	r0, #200	; 0xc8
   d78a8:	f003 ffa6 	bl	db7f8 <delay>
    if (!i2cOK)
   d78ac:	b90e      	cbnz	r6, d78b2 <_Z11readSensorsv+0x32a>
    {
      System.reset();
   d78ae:	f003 fa0d 	bl	daccc <_ZN11SystemClass5resetEv>
    }

    long int clockTime = rtc.rtcNow();
   d78b2:	48b2      	ldr	r0, [pc, #712]	; (d7b7c <_Z11readSensorsv+0x5f4>)
    DEBUG_PRINTLN("Before");
    DEBUG_PRINT(clockTime);
    DEBUG_PRINTLN(": ");
    DEBUG_PRINTLN(String(Time.format(clockTime, TIME_FORMAT_ISO8601_FULL)));
   d78b4:	4eb2      	ldr	r6, [pc, #712]	; (d7b80 <_Z11readSensorsv+0x5f8>)
    if (!i2cOK)
    {
      System.reset();
    }

    long int clockTime = rtc.rtcNow();
   d78b6:	f001 fed0 	bl	d965a <_ZN8MCP7941x6rtcNowEv>
   d78ba:	4604      	mov	r4, r0
    DEBUG_PRINTLN("Before");
   d78bc:	f004 fd08 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d78c0:	49b0      	ldr	r1, [pc, #704]	; (d7b84 <_Z11readSensorsv+0x5fc>)
   d78c2:	f003 fc88 	bl	db1d6 <_ZN5Print7printlnEPKc>
    DEBUG_PRINT(clockTime);
   d78c6:	f004 fd03 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d78ca:	220a      	movs	r2, #10
   d78cc:	4621      	mov	r1, r4
   d78ce:	f003 fcdb 	bl	db288 <_ZN5Print5printEli>
    DEBUG_PRINTLN(": ");
   d78d2:	f004 fcfd 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d78d6:	49ac      	ldr	r1, [pc, #688]	; (d7b88 <_Z11readSensorsv+0x600>)
   d78d8:	f003 fc7d 	bl	db1d6 <_ZN5Print7printlnEPKc>
    DEBUG_PRINTLN(String(Time.format(clockTime, TIME_FORMAT_ISO8601_FULL)));
   d78dc:	f004 fcf8 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d78e0:	6833      	ldr	r3, [r6, #0]
   d78e2:	49aa      	ldr	r1, [pc, #680]	; (d7b8c <_Z11readSensorsv+0x604>)
   d78e4:	4622      	mov	r2, r4
   d78e6:	4607      	mov	r7, r0
   d78e8:	a81b      	add	r0, sp, #108	; 0x6c
   d78ea:	f003 ff21 	bl	db730 <_ZN9TimeClass6formatElPKc>
   d78ee:	991b      	ldr	r1, [sp, #108]	; 0x6c
   d78f0:	4638      	mov	r0, r7
   d78f2:	f003 fc70 	bl	db1d6 <_ZN5Print7printlnEPKc>
   d78f6:	a81b      	add	r0, sp, #108	; 0x6c
   d78f8:	f003 faa4 	bl	dae44 <_ZN6StringD1Ev>
    if (clockTime<946684800||clockTime>4102444799)
   d78fc:	4ba4      	ldr	r3, [pc, #656]	; (d7b90 <_Z11readSensorsv+0x608>)
   d78fe:	429c      	cmp	r4, r3
   d7900:	dc27      	bgt.n	d7952 <_Z11readSensorsv+0x3ca>
    {
      // 2019-01-01T00:00:00+00:00 in ISO 8601
      // Actual time is not important for rtc reset but needs to be a positive unix time
      rtc.setUnixTime(1262304000);
   d7902:	49a4      	ldr	r1, [pc, #656]	; (d7b94 <_Z11readSensorsv+0x60c>)
   d7904:	489d      	ldr	r0, [pc, #628]	; (d7b7c <_Z11readSensorsv+0x5f4>)
   d7906:	f001 fe5f 	bl	d95c8 <_ZN8MCP7941x11setUnixTimeEm>
      long int clockTime = rtc.rtcNow();
   d790a:	489c      	ldr	r0, [pc, #624]	; (d7b7c <_Z11readSensorsv+0x5f4>)
   d790c:	f001 fea5 	bl	d965a <_ZN8MCP7941x6rtcNowEv>
   d7910:	4604      	mov	r4, r0
      DEBUG_PRINTLN("After");
   d7912:	f004 fcdd 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d7916:	49a0      	ldr	r1, [pc, #640]	; (d7b98 <_Z11readSensorsv+0x610>)
   d7918:	f003 fc5d 	bl	db1d6 <_ZN5Print7printlnEPKc>
      DEBUG_PRINT(clockTime);
   d791c:	f004 fcd8 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d7920:	220a      	movs	r2, #10
   d7922:	4621      	mov	r1, r4
   d7924:	f003 fcb0 	bl	db288 <_ZN5Print5printEli>
      DEBUG_PRINTLN(": ");
   d7928:	f004 fcd2 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d792c:	4996      	ldr	r1, [pc, #600]	; (d7b88 <_Z11readSensorsv+0x600>)
   d792e:	f003 fc52 	bl	db1d6 <_ZN5Print7printlnEPKc>
      DEBUG_PRINTLN(String(Time.format(clockTime, TIME_FORMAT_ISO8601_FULL)));
   d7932:	f004 fccd 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d7936:	6833      	ldr	r3, [r6, #0]
   d7938:	4994      	ldr	r1, [pc, #592]	; (d7b8c <_Z11readSensorsv+0x604>)
   d793a:	4607      	mov	r7, r0
   d793c:	4622      	mov	r2, r4
   d793e:	a81b      	add	r0, sp, #108	; 0x6c
   d7940:	f003 fef6 	bl	db730 <_ZN9TimeClass6formatElPKc>
   d7944:	991b      	ldr	r1, [sp, #108]	; 0x6c
   d7946:	4638      	mov	r0, r7
   d7948:	f003 fc45 	bl	db1d6 <_ZN5Print7printlnEPKc>
   d794c:	a81b      	add	r0, sp, #108	; 0x6c
   d794e:	f003 fa79 	bl	dae44 <_ZN6StringD1Ev>
    }
    timeSynced=false;
   d7952:	4b92      	ldr	r3, [pc, #584]	; (d7b9c <_Z11readSensorsv+0x614>)
   d7954:	2400      	movs	r4, #0
   d7956:	701c      	strb	r4, [r3, #0]
class SPS30
{
  public:
	SPS30(void);

	boolean begin(TwoWire &wirePort = Wire); //By default use Wire port
   d7958:	f005 fb4a 	bl	dcff0 <_Z19__fetch_global_Wirev>
    Sensor.begin();
   d795c:	4601      	mov	r1, r0
   d795e:	4890      	ldr	r0, [pc, #576]	; (d7ba0 <_Z11readSensorsv+0x618>)
   d7960:	f002 fc7c 	bl	da25c <_ZN5SPS305beginER7TwoWire>

    // Load state
    loadState();
   d7964:	f7fd ff40 	bl	d57e8 <_Z9loadStatev>
 
   /////////////
  // Setup ADXL345
    DEBUG_PRINT("ADXL345 Setup");
   d7968:	f004 fcb2 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d796c:	498d      	ldr	r1, [pc, #564]	; (d7ba4 <_Z11readSensorsv+0x61c>)
   d796e:	f003 fc1f 	bl	db1b0 <_ZN5Print5printEPKc>
    DEBUG_PRINTLN();
   d7972:	f004 fcad 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d7976:	f003 fc22 	bl	db1be <_ZN5Print7printlnEv>
    // // *Temp Debug* Set the pin mode to output, so you may control it.
    // pinMode(ledPin, OUTPUT);
    // Power on the ADXL345
    adxl.powerOn();
   d797a:	488b      	ldr	r0, [pc, #556]	; (d7ba8 <_Z11readSensorsv+0x620>)
   d797c:	f002 f8a1 	bl	d9ac2 <_ZN7ADXL3457powerOnEv>

  // Configure Chip
    adxl.setRangeSetting(4);            // Give the range settings
   d7980:	2104      	movs	r1, #4
   d7982:	4889      	ldr	r0, [pc, #548]	; (d7ba8 <_Z11readSensorsv+0x620>)
   d7984:	f002 f8ea 	bl	d9b5c <_ZN7ADXL34515setRangeSettingEi>
                                        // Accepted values are 2g, 4g, 8g or 16g
                                        // Higher Values = Wider Measurement Range
                                        // Lower Values = Greater Sensitivity

    // No TAP or Freefall detection only Activity
    adxl.setActivityXYZ(1, 1, 1);       // Set to activate movement detection in the axes "adxl.setActivityXYZ(X, Y, Z);" (1 == ON, 0 == OFF)
   d7988:	2301      	movs	r3, #1
   d798a:	461a      	mov	r2, r3
   d798c:	4619      	mov	r1, r3
   d798e:	4886      	ldr	r0, [pc, #536]	; (d7ba8 <_Z11readSensorsv+0x620>)
   d7990:	f002 f953 	bl	d9c3a <_ZN7ADXL34514setActivityXYZEbbb>
    adxl.setActivityThreshold(state.ActivityThreshold);      // 62.5mg per increment   // Set activity   // Inactivity thresholds (0-255) 36,72,100 or 144
   d7994:	f8d5 141c 	ldr.w	r1, [r5, #1052]	; 0x41c
   d7998:	4883      	ldr	r0, [pc, #524]	; (d7ba8 <_Z11readSensorsv+0x620>)
   d799a:	f002 f8ff 	bl	d9b9c <_ZN7ADXL34520setActivityThresholdEi>
  
    adxl.setInactivityXYZ(1, 1, 1);     // Set to detect inactivity in all the axes "adxl.setInactivityXYZ(X, Y, Z);" (1 == ON, 0 == OFF)
   d799e:	2301      	movs	r3, #1
   d79a0:	461a      	mov	r2, r3
   d79a2:	4619      	mov	r1, r3
   d79a4:	4880      	ldr	r0, [pc, #512]	; (d7ba8 <_Z11readSensorsv+0x620>)
   d79a6:	f002 f967 	bl	d9c78 <_ZN7ADXL34516setInactivityXYZEbbb>
    adxl.setInactivityThreshold(state.ActivityThreshold);    // 62.5mg per increment   // Set inactivity // Inactivity thresholds (0-255)
   d79aa:	f8d5 141c 	ldr.w	r1, [r5, #1052]	; 0x41c
   d79ae:	487e      	ldr	r0, [pc, #504]	; (d7ba8 <_Z11readSensorsv+0x620>)
   d79b0:	f002 f8fa 	bl	d9ba8 <_ZN7ADXL34522setInactivityThresholdEi>
    adxl.setTimeInactivity(10);         // How many seconds of no activity is inactive?

      // Setting all interupts to take place on INT1 pin
    adxl.setImportantInterruptMapping(0, 0, 0, 1, 1);     // Sets "adxl.setEveryInterruptMapping(single tap, double tap, free fall, activity, inactivity);" 
   d79b4:	2601      	movs	r6, #1
    adxl.setActivityXYZ(1, 1, 1);       // Set to activate movement detection in the axes "adxl.setActivityXYZ(X, Y, Z);" (1 == ON, 0 == OFF)
    adxl.setActivityThreshold(state.ActivityThreshold);      // 62.5mg per increment   // Set activity   // Inactivity thresholds (0-255) 36,72,100 or 144
  
    adxl.setInactivityXYZ(1, 1, 1);     // Set to detect inactivity in all the axes "adxl.setInactivityXYZ(X, Y, Z);" (1 == ON, 0 == OFF)
    adxl.setInactivityThreshold(state.ActivityThreshold);    // 62.5mg per increment   // Set inactivity // Inactivity thresholds (0-255)
    adxl.setTimeInactivity(10);         // How many seconds of no activity is inactive?
   d79b6:	210a      	movs	r1, #10
   d79b8:	487b      	ldr	r0, [pc, #492]	; (d7ba8 <_Z11readSensorsv+0x620>)
   d79ba:	f002 f8fb 	bl	d9bb4 <_ZN7ADXL34517setTimeInactivityEi>

      // Setting all interupts to take place on INT1 pin
    adxl.setImportantInterruptMapping(0, 0, 0, 1, 1);     // Sets "adxl.setEveryInterruptMapping(single tap, double tap, free fall, activity, inactivity);" 
   d79be:	4623      	mov	r3, r4
   d79c0:	4622      	mov	r2, r4
   d79c2:	4621      	mov	r1, r4
   d79c4:	9601      	str	r6, [sp, #4]
   d79c6:	9600      	str	r6, [sp, #0]
   d79c8:	4877      	ldr	r0, [pc, #476]	; (d7ba8 <_Z11readSensorsv+0x620>)
   d79ca:	f002 f96a 	bl	d9ca2 <_ZN7ADXL34528setImportantInterruptMappingEiiiii>
                                                          // Accepts only 1 or 2 values for pins INT1 and INT2. This chooses the pin on the ADXL345 to use for Interrupts.
        
  // Turn on Interrupts for Activity(1 == ON, 0 == OFF)
  // These are both set on to start and then toggled
    adxl.InactivityINT(1);
   d79ce:	4631      	mov	r1, r6
   d79d0:	4875      	ldr	r0, [pc, #468]	; (d7ba8 <_Z11readSensorsv+0x620>)
   d79d2:	f002 f9b5 	bl	d9d40 <_ZN7ADXL34513InactivityINTEb>
    adxl.ActivityINT(1);
   d79d6:	4631      	mov	r1, r6

    // Need to set int1 pin as an input before calling atttachInterrupt
    pinMode(interruptPin,INPUT);
   d79d8:	4e74      	ldr	r6, [pc, #464]	; (d7bac <_Z11readSensorsv+0x624>)
                                                          // Accepts only 1 or 2 values for pins INT1 and INT2. This chooses the pin on the ADXL345 to use for Interrupts.
        
  // Turn on Interrupts for Activity(1 == ON, 0 == OFF)
  // These are both set on to start and then toggled
    adxl.InactivityINT(1);
    adxl.ActivityINT(1);
   d79da:	4873      	ldr	r0, [pc, #460]	; (d7ba8 <_Z11readSensorsv+0x620>)
   d79dc:	f002 f9aa 	bl	d9d34 <_ZN7ADXL34511ActivityINTEb>

    // Need to set int1 pin as an input before calling atttachInterrupt
    pinMode(interruptPin,INPUT);
   d79e0:	4621      	mov	r1, r4
   d79e2:	8830      	ldrh	r0, [r6, #0]
   d79e4:	f005 fa68 	bl	dceb8 <pinMode>
    attachInterrupt(interruptPin, ADXL_ISR, CHANGE);
   d79e8:	4622      	mov	r2, r4
   d79ea:	f04f 33ff 	mov.w	r3, #4294967295
   d79ee:	4970      	ldr	r1, [pc, #448]	; (d7bb0 <_Z11readSensorsv+0x628>)
   d79f0:	8830      	ldrh	r0, [r6, #0]
   d79f2:	9400      	str	r4, [sp, #0]
   d79f4:	f004 fbe2 	bl	dc1bc <_Z15attachInterrupttPFvvE13InterruptModeah>
 
    delay(300);  
   d79f8:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d79fc:	f003 fefc 	bl	db7f8 <delay>
   d7a00:	f002 fdb4 	bl	da56c <HAL_Timer_Get_Milli_Seconds>
   d7a04:	4604      	mov	r4, r0
   d7a06:	f002 fdb1 	bl	da56c <HAL_Timer_Get_Milli_Seconds>

    // SPS30 checks
    bool sps30OK = false;
    uint32_t sps30start = millis();

    while (!sps30OK && millis()-sps30start<8000)
   d7a0a:	1b00      	subs	r0, r0, r4
   d7a0c:	f5b0 5ffa 	cmp.w	r0, #8000	; 0x1f40
   d7a10:	f0c0 851a 	bcc.w	d8448 <_Z11readSensorsv+0xec0>
   d7a14:	f000 bd74 	b.w	d8500 <_Z11readSensorsv+0xf78>
        DEBUG_PRINTLN("Unable to read SPS30 - trying again");
        delay(1000);
      }
      else
      {
        DEBUG_PRINTLN("Read SPS30");
   d7a18:	f004 fc5a 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d7a1c:	4965      	ldr	r1, [pc, #404]	; (d7bb4 <_Z11readSensorsv+0x62c>)
   d7a1e:	f003 fbda 	bl	db1d6 <_ZN5Print7printlnEPKc>
   d7a22:	f002 fda3 	bl	da56c <HAL_Timer_Get_Milli_Seconds>
      System.reset();    
    }

    // Delay 8 seconds or until the SPS30 is ready
    unsigned long waitForSPS30 = millis();
    while ((!Sensor.dataAvailable()) && (millis()-waitForSPS30<8100))
   d7a26:	f641 76a3 	movw	r6, #8099	; 0x1fa3
   d7a2a:	4604      	mov	r4, r0
   d7a2c:	485c      	ldr	r0, [pc, #368]	; (d7ba0 <_Z11readSensorsv+0x618>)
   d7a2e:	f002 fa82 	bl	d9f36 <_ZN5SPS3013dataAvailableEv>
   d7a32:	2800      	cmp	r0, #0
   d7a34:	f000 851c 	beq.w	d8470 <_Z11readSensorsv+0xee8>
    {
      delay(100);
      checkAccel();
    }

    readingCount=0;
   d7a38:	4a5f      	ldr	r2, [pc, #380]	; (d7bb8 <_Z11readSensorsv+0x630>)
   d7a3a:	2300      	movs	r3, #0
   d7a3c:	6013      	str	r3, [r2, #0]
    state.bInSleepMode=false;
   d7a3e:	f885 3425 	strb.w	r3, [r5, #1061]	; 0x425
  }
  StateString = "RDY";
   d7a42:	494b      	ldr	r1, [pc, #300]	; (d7b70 <_Z11readSensorsv+0x5e8>)
   d7a44:	484b      	ldr	r0, [pc, #300]	; (d7b74 <_Z11readSensorsv+0x5ec>)
   d7a46:	f003 fa96 	bl	daf76 <_ZN6StringaSEPKc>
  connectWithoutWaiting();
   d7a4a:	f7ff fd27 	bl	d749c <_Z21connectWithoutWaitingv>
  // Sync time if needed
  if (Time.isValid()&&!timeSynced)
   d7a4e:	f003 fea1 	bl	db794 <_ZN9TimeClass7isValidEv>
   d7a52:	b328      	cbz	r0, d7aa0 <_Z11readSensorsv+0x518>
   d7a54:	4b51      	ldr	r3, [pc, #324]	; (d7b9c <_Z11readSensorsv+0x614>)
   d7a56:	781a      	ldrb	r2, [r3, #0]
   d7a58:	461e      	mov	r6, r3
   d7a5a:	bb0a      	cbnz	r2, d7aa0 <_Z11readSensorsv+0x518>
  {
    rtc.setUnixTime(Time.now());
   d7a5c:	f003 febb 	bl	db7d6 <_ZN9TimeClass3nowEv>
   d7a60:	4601      	mov	r1, r0
   d7a62:	4846      	ldr	r0, [pc, #280]	; (d7b7c <_Z11readSensorsv+0x5f4>)
   d7a64:	f001 fdb0 	bl	d95c8 <_ZN8MCP7941x11setUnixTimeEm>
    if (abs(Time.now()-rtc.rtcNow())<10)
   d7a68:	f003 feb5 	bl	db7d6 <_ZN9TimeClass3nowEv>
   d7a6c:	4604      	mov	r4, r0
   d7a6e:	4843      	ldr	r0, [pc, #268]	; (d7b7c <_Z11readSensorsv+0x5f4>)
   d7a70:	f001 fdf3 	bl	d965a <_ZN8MCP7941x6rtcNowEv>
   d7a74:	4284      	cmp	r4, r0
   d7a76:	f000 853b 	beq.w	d84f0 <_Z11readSensorsv+0xf68>
   d7a7a:	f003 feac 	bl	db7d6 <_ZN9TimeClass3nowEv>
   d7a7e:	4604      	mov	r4, r0
   d7a80:	483e      	ldr	r0, [pc, #248]	; (d7b7c <_Z11readSensorsv+0x5f4>)
   d7a82:	f001 fdea 	bl	d965a <_ZN8MCP7941x6rtcNowEv>
   d7a86:	1a20      	subs	r0, r4, r0
   d7a88:	2809      	cmp	r0, #9
   d7a8a:	bf8c      	ite	hi
   d7a8c:	2000      	movhi	r0, #0
   d7a8e:	2001      	movls	r0, #1
   d7a90:	b130      	cbz	r0, d7aa0 <_Z11readSensorsv+0x518>
    {
      timeSynced=true;
   d7a92:	2301      	movs	r3, #1
   d7a94:	7033      	strb	r3, [r6, #0]
      DEBUG_PRINTLN("Time is sync'ed to the cloud"); 
   d7a96:	f004 fc1b 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d7a9a:	4948      	ldr	r1, [pc, #288]	; (d7bbc <_Z11readSensorsv+0x634>)
   d7a9c:	f003 fb9b 	bl	db1d6 <_ZN5Print7printlnEPKc>
      DEBUG_PRINTLN(TimeMsg);*/

    }
  }
  // Request the GMT offset if Particle is connected and it has not yet been received
  if (Particle.connected&&!gmtOffsetValid)
   d7aa0:	4b47      	ldr	r3, [pc, #284]	; (d7bc0 <_Z11readSensorsv+0x638>)
   d7aa2:	781b      	ldrb	r3, [r3, #0]
   d7aa4:	b90b      	cbnz	r3, d7aaa <_Z11readSensorsv+0x522>
  {
    publishGMTOffsetRequest();
   d7aa6:	f7fe f875 	bl	d5b94 <_Z23publishGMTOffsetRequestv>
  }
  checkAccel();
   d7aaa:	f7ff fb99 	bl	d71e0 <_Z10checkAccelv>
  if (Sensor.dataAvailable()) { 
   d7aae:	483c      	ldr	r0, [pc, #240]	; (d7ba0 <_Z11readSensorsv+0x618>)
   d7ab0:	4c3b      	ldr	r4, [pc, #236]	; (d7ba0 <_Z11readSensorsv+0x618>)
   d7ab2:	f002 fa40 	bl	d9f36 <_ZN5SPS3013dataAvailableEv>
   d7ab6:	2800      	cmp	r0, #0
   d7ab8:	f000 8473 	beq.w	d83a2 <_Z11readSensorsv+0xe1a>
    Sensor.getMass(mass_concen);
   d7abc:	4941      	ldr	r1, [pc, #260]	; (d7bc4 <_Z11readSensorsv+0x63c>)
    Sensor.getNum(num_concen);

    DEBUG_PRINTLN("--Mass Concentration--");
    for(i=0; i<4;i++) {
   d7abe:	4f42      	ldr	r7, [pc, #264]	; (d7bc8 <_Z11readSensorsv+0x640>)
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i+1],mass_concen[i]);
   d7ac0:	f8df 9118 	ldr.w	r9, [pc, #280]	; d7bdc <_Z11readSensorsv+0x654>
   d7ac4:	f8df a0fc 	ldr.w	sl, [pc, #252]	; d7bc4 <_Z11readSensorsv+0x63c>
  {
    publishGMTOffsetRequest();
  }
  checkAccel();
  if (Sensor.dataAvailable()) { 
    Sensor.getMass(mass_concen);
   d7ac8:	4620      	mov	r0, r4
   d7aca:	f002 fb4d 	bl	da168 <_ZN5SPS307getMassEPf>
    Sensor.getNum(num_concen);
   d7ace:	493f      	ldr	r1, [pc, #252]	; (d7bcc <_Z11readSensorsv+0x644>)
   d7ad0:	4620      	mov	r0, r4
   d7ad2:	f002 fb5d 	bl	da190 <_ZN5SPS306getNumEPf>

    DEBUG_PRINTLN("--Mass Concentration--");
   d7ad6:	f004 fbfb 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d7ada:	493d      	ldr	r1, [pc, #244]	; (d7bd0 <_Z11readSensorsv+0x648>)
   d7adc:	f003 fb7b 	bl	db1d6 <_ZN5Print7printlnEPKc>
    for(i=0; i<4;i++) {
   d7ae0:	2300      	movs	r3, #0
   d7ae2:	603b      	str	r3, [r7, #0]
   d7ae4:	46b8      	mov	r8, r7
   d7ae6:	683b      	ldr	r3, [r7, #0]
   d7ae8:	4e37      	ldr	r6, [pc, #220]	; (d7bc8 <_Z11readSensorsv+0x640>)
   d7aea:	2b03      	cmp	r3, #3
   d7aec:	dc1a      	bgt.n	d7b24 <_Z11readSensorsv+0x59c>
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i+1],mass_concen[i]);
   d7aee:	f004 fbef 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d7af2:	f8d8 3000 	ldr.w	r3, [r8]
   d7af6:	f103 0b01 	add.w	fp, r3, #1
   d7afa:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
   d7afe:	4606      	mov	r6, r0
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d7b00:	6818      	ldr	r0, [r3, #0]
   d7b02:	f00b f849 	bl	e2b98 <__aeabi_f2d>
   d7b06:	e9cd 0100 	strd	r0, r1, [sp]
   d7b0a:	4a32      	ldr	r2, [pc, #200]	; (d7bd4 <_Z11readSensorsv+0x64c>)
   d7b0c:	f859 302b 	ldr.w	r3, [r9, fp, lsl #2]
   d7b10:	2100      	movs	r1, #0
   d7b12:	4630      	mov	r0, r6
   d7b14:	f003 fca4 	bl	db460 <_ZN5Print11printf_implEbPKcz>
  if (Sensor.dataAvailable()) { 
    Sensor.getMass(mass_concen);
    Sensor.getNum(num_concen);

    DEBUG_PRINTLN("--Mass Concentration--");
    for(i=0; i<4;i++) {
   d7b18:	f8d8 3000 	ldr.w	r3, [r8]
   d7b1c:	3301      	adds	r3, #1
   d7b1e:	f8c8 3000 	str.w	r3, [r8]
   d7b22:	e7e0      	b.n	d7ae6 <_Z11readSensorsv+0x55e>
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i+1],mass_concen[i]);
    }
    
    DEBUG_PRINTLN("--Number Concentration--");
   d7b24:	f004 fbd4 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d7b28:	492b      	ldr	r1, [pc, #172]	; (d7bd8 <_Z11readSensorsv+0x650>)
    for(i=0; i<5;i++) {
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i],num_concen[i]);
   d7b2a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; d7bdc <_Z11readSensorsv+0x654>
   d7b2e:	f8df 909c 	ldr.w	r9, [pc, #156]	; d7bcc <_Z11readSensorsv+0x644>
    DEBUG_PRINTLN("--Mass Concentration--");
    for(i=0; i<4;i++) {
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i+1],mass_concen[i]);
    }
    
    DEBUG_PRINTLN("--Number Concentration--");
   d7b32:	f003 fb50 	bl	db1d6 <_ZN5Print7printlnEPKc>
    for(i=0; i<5;i++) {
   d7b36:	2300      	movs	r3, #0
   d7b38:	6033      	str	r3, [r6, #0]
   d7b3a:	683b      	ldr	r3, [r7, #0]
   d7b3c:	2b04      	cmp	r3, #4
   d7b3e:	dc4f      	bgt.n	d7be0 <_Z11readSensorsv+0x658>
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i],num_concen[i]);
   d7b40:	f004 fbc6 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d7b44:	f8d6 a000 	ldr.w	sl, [r6]
   d7b48:	eb09 038a 	add.w	r3, r9, sl, lsl #2
   d7b4c:	4683      	mov	fp, r0
   d7b4e:	6818      	ldr	r0, [r3, #0]
   d7b50:	f00b f822 	bl	e2b98 <__aeabi_f2d>
   d7b54:	e9cd 0100 	strd	r0, r1, [sp]
   d7b58:	4a1e      	ldr	r2, [pc, #120]	; (d7bd4 <_Z11readSensorsv+0x64c>)
   d7b5a:	f858 302a 	ldr.w	r3, [r8, sl, lsl #2]
   d7b5e:	2100      	movs	r1, #0
   d7b60:	4658      	mov	r0, fp
   d7b62:	f003 fc7d 	bl	db460 <_ZN5Print11printf_implEbPKcz>
    for(i=0; i<4;i++) {
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i+1],mass_concen[i]);
    }
    
    DEBUG_PRINTLN("--Number Concentration--");
    for(i=0; i<5;i++) {
   d7b66:	6833      	ldr	r3, [r6, #0]
   d7b68:	3301      	adds	r3, #1
   d7b6a:	6033      	str	r3, [r6, #0]
   d7b6c:	e7e5      	b.n	d7b3a <_Z11readSensorsv+0x5b2>
   d7b6e:	bf00      	nop
   d7b70:	000e733c 	.word	0x000e733c
   d7b74:	2003d7d8 	.word	0x2003d7d8
   d7b78:	000e7340 	.word	0x000e7340
   d7b7c:	2003e174 	.word	0x2003e174
   d7b80:	2003d5b4 	.word	0x2003d5b4
   d7b84:	000e7347 	.word	0x000e7347
   d7b88:	000e7dac 	.word	0x000e7dac
   d7b8c:	2003e2ac 	.word	0x2003e2ac
   d7b90:	386d437f 	.word	0x386d437f
   d7b94:	4b3d3b00 	.word	0x4b3d3b00
   d7b98:	000e734e 	.word	0x000e734e
   d7b9c:	2003dead 	.word	0x2003dead
   d7ba0:	2003e1ec 	.word	0x2003e1ec
   d7ba4:	000e7354 	.word	0x000e7354
   d7ba8:	2003da48 	.word	0x2003da48
   d7bac:	2003d578 	.word	0x2003d578
   d7bb0:	000d52f5 	.word	0x000d52f5
   d7bb4:	000e7386 	.word	0x000e7386
   d7bb8:	2003e230 	.word	0x2003e230
   d7bbc:	000e7391 	.word	0x000e7391
   d7bc0:	2003e1ac 	.word	0x2003e1ac
   d7bc4:	2003e160 	.word	0x2003e160
   d7bc8:	2003dec0 	.word	0x2003dec0
   d7bcc:	2003e254 	.word	0x2003e254
   d7bd0:	000e73ae 	.word	0x000e73ae
   d7bd4:	000e73c5 	.word	0x000e73c5
   d7bd8:	000e73d1 	.word	0x000e73d1
   d7bdc:	2003d558 	.word	0x2003d558
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i],num_concen[i]);
    }
    // Sensor.massPM1, Sensor.massPM25, Sensor.massPM4, Sensor.massPM10     
    field1 = String::format("%0.1f", Sensor.massPM1);
   d7be0:	6860      	ldr	r0, [r4, #4]
    field2 = String::format("%0.1f", Sensor.massPM25);
    field3 = String::format("%0.1f", Sensor.massPM4);
    field4 = String::format("%0.1f", Sensor.massPM10);

    //////////
    temp1 = sensor1.getTemp(1,"F");  // Use .getTemp(n, "F") to get temp in Fahrenheit, with n as int number of seconds for averaging and "F" or "C" for temp units
   d7be2:	4ec7      	ldr	r6, [pc, #796]	; (d7f00 <_Z11readSensorsv+0x978>)
   d7be4:	f8df 837c 	ldr.w	r8, [pc, #892]	; d7f64 <_Z11readSensorsv+0x9dc>
    DEBUG_PRINTLN("--Number Concentration--");
    for(i=0; i<5;i++) {
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i],num_concen[i]);
    }
    // Sensor.massPM1, Sensor.massPM25, Sensor.massPM4, Sensor.massPM10     
    field1 = String::format("%0.1f", Sensor.massPM1);
   d7be8:	f00a ffd6 	bl	e2b98 <__aeabi_f2d>
   d7bec:	4602      	mov	r2, r0
   d7bee:	460b      	mov	r3, r1
   d7bf0:	a81b      	add	r0, sp, #108	; 0x6c
   d7bf2:	49c4      	ldr	r1, [pc, #784]	; (d7f04 <_Z11readSensorsv+0x97c>)
   d7bf4:	f003 fa7e 	bl	db0f4 <_ZN6String6formatEPKcz>
   d7bf8:	a91b      	add	r1, sp, #108	; 0x6c
   d7bfa:	48c3      	ldr	r0, [pc, #780]	; (d7f08 <_Z11readSensorsv+0x980>)
   d7bfc:	f003 f9b3 	bl	daf66 <_ZN6StringaSEOS_>
   d7c00:	a81b      	add	r0, sp, #108	; 0x6c
   d7c02:	f003 f91f 	bl	dae44 <_ZN6StringD1Ev>
    field2 = String::format("%0.1f", Sensor.massPM25);
   d7c06:	68a0      	ldr	r0, [r4, #8]
   d7c08:	f00a ffc6 	bl	e2b98 <__aeabi_f2d>
   d7c0c:	4602      	mov	r2, r0
   d7c0e:	460b      	mov	r3, r1
   d7c10:	a81b      	add	r0, sp, #108	; 0x6c
   d7c12:	49bc      	ldr	r1, [pc, #752]	; (d7f04 <_Z11readSensorsv+0x97c>)
   d7c14:	f003 fa6e 	bl	db0f4 <_ZN6String6formatEPKcz>
   d7c18:	a91b      	add	r1, sp, #108	; 0x6c
   d7c1a:	48bc      	ldr	r0, [pc, #752]	; (d7f0c <_Z11readSensorsv+0x984>)
   d7c1c:	f003 f9a3 	bl	daf66 <_ZN6StringaSEOS_>
   d7c20:	a81b      	add	r0, sp, #108	; 0x6c
   d7c22:	f003 f90f 	bl	dae44 <_ZN6StringD1Ev>
    field3 = String::format("%0.1f", Sensor.massPM4);
   d7c26:	68e0      	ldr	r0, [r4, #12]
   d7c28:	f00a ffb6 	bl	e2b98 <__aeabi_f2d>
   d7c2c:	4602      	mov	r2, r0
   d7c2e:	460b      	mov	r3, r1
   d7c30:	a81b      	add	r0, sp, #108	; 0x6c
   d7c32:	49b4      	ldr	r1, [pc, #720]	; (d7f04 <_Z11readSensorsv+0x97c>)
   d7c34:	f003 fa5e 	bl	db0f4 <_ZN6String6formatEPKcz>
   d7c38:	a91b      	add	r1, sp, #108	; 0x6c
   d7c3a:	48b5      	ldr	r0, [pc, #724]	; (d7f10 <_Z11readSensorsv+0x988>)
   d7c3c:	f003 f993 	bl	daf66 <_ZN6StringaSEOS_>
   d7c40:	a81b      	add	r0, sp, #108	; 0x6c
   d7c42:	f003 f8ff 	bl	dae44 <_ZN6StringD1Ev>
    field4 = String::format("%0.1f", Sensor.massPM10);
   d7c46:	6920      	ldr	r0, [r4, #16]
   d7c48:	f00a ffa6 	bl	e2b98 <__aeabi_f2d>
   d7c4c:	460b      	mov	r3, r1
   d7c4e:	4602      	mov	r2, r0
   d7c50:	49ac      	ldr	r1, [pc, #688]	; (d7f04 <_Z11readSensorsv+0x97c>)
   d7c52:	a81b      	add	r0, sp, #108	; 0x6c
   d7c54:	f003 fa4e 	bl	db0f4 <_ZN6String6formatEPKcz>
   d7c58:	a91b      	add	r1, sp, #108	; 0x6c
   d7c5a:	48ae      	ldr	r0, [pc, #696]	; (d7f14 <_Z11readSensorsv+0x98c>)
   d7c5c:	f003 f983 	bl	daf66 <_ZN6StringaSEOS_>
   d7c60:	a81b      	add	r0, sp, #108	; 0x6c
   d7c62:	f003 f8ef 	bl	dae44 <_ZN6StringD1Ev>

    //////////
    temp1 = sensor1.getTemp(1,"F");  // Use .getTemp(n, "F") to get temp in Fahrenheit, with n as int number of seconds for averaging and "F" or "C" for temp units
   d7c66:	4aac      	ldr	r2, [pc, #688]	; (d7f18 <_Z11readSensorsv+0x990>)
   d7c68:	48ac      	ldr	r0, [pc, #688]	; (d7f1c <_Z11readSensorsv+0x994>)
   d7c6a:	2101      	movs	r1, #1
   d7c6c:	f001 fa1a 	bl	d90a4 <_ZN3ULP7getTempEiPc>
   d7c70:	ee07 0a90 	vmov	s15, r0
   d7c74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d7c78:	edc6 7a00 	vstr	s15, [r6]
    
    DEBUG_PRINT("temp1: ");
   d7c7c:	f004 fb28 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d7c80:	49a7      	ldr	r1, [pc, #668]	; (d7f20 <_Z11readSensorsv+0x998>)
   d7c82:	f003 fa95 	bl	db1b0 <_ZN5Print5printEPKc>
    DEBUG_PRINT(temp1);
   d7c86:	f004 fb23 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d7c8a:	4604      	mov	r4, r0
   d7c8c:	6830      	ldr	r0, [r6, #0]
   d7c8e:	f00a ff83 	bl	e2b98 <__aeabi_f2d>
   d7c92:	ec41 0b10 	vmov	d0, r0, r1
   d7c96:	2102      	movs	r1, #2
   d7c98:	4620      	mov	r0, r4
   d7c9a:	f003 fbd3 	bl	db444 <_ZN5Print5printEdi>
    DEBUG_PRINTLN();
   d7c9e:	f004 fb17 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d7ca2:	f003 fa8c 	bl	db1be <_ZN5Print7printlnEv>
    
    //Use .getVgas(int n) where n is the number of seconds to average
    //Use ._Vref to read the reference voltage (voltage offset)
    DEBUG_PRINT("Vgas: ");
   d7ca6:	f004 fb13 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d7caa:	499e      	ldr	r1, [pc, #632]	; (d7f24 <_Z11readSensorsv+0x99c>)
   d7cac:	f003 fa80 	bl	db1b0 <_ZN5Print5printEPKc>
    DEBUG_PRINT(sensor1.getVgas(1));
   d7cb0:	f004 fb0e 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d7cb4:	2101      	movs	r1, #1
   d7cb6:	4604      	mov	r4, r0
   d7cb8:	4898      	ldr	r0, [pc, #608]	; (d7f1c <_Z11readSensorsv+0x994>)
   d7cba:	f001 faa7 	bl	d920c <_ZN3ULP7getVgasEi>
   d7cbe:	ee10 0a10 	vmov	r0, s0
   d7cc2:	f00a ff69 	bl	e2b98 <__aeabi_f2d>
   d7cc6:	ec41 0b10 	vmov	d0, r0, r1
   d7cca:	2102      	movs	r1, #2
   d7ccc:	4620      	mov	r0, r4
   d7cce:	f003 fbb9 	bl	db444 <_ZN5Print5printEdi>
    DEBUG_PRINTLN();
   d7cd2:	f004 fafd 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d7cd6:	f003 fa72 	bl	db1be <_ZN5Print7printlnEv>
    
    //Use .getConc(1, temp1) where temp1 is in deg C for temperature corrected span
    DEBUG_PRINT("Conc: ");
   d7cda:	f004 faf9 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d7cde:	4992      	ldr	r1, [pc, #584]	; (d7f28 <_Z11readSensorsv+0x9a0>)
    //  DEBUG_PRINT(", ");
    conc1 = sensor1.getConc(1,sensor1.getTemp(1));
   d7ce0:	4c92      	ldr	r4, [pc, #584]	; (d7f2c <_Z11readSensorsv+0x9a4>)
    DEBUG_PRINT("Vgas: ");
    DEBUG_PRINT(sensor1.getVgas(1));
    DEBUG_PRINTLN();
    
    //Use .getConc(1, temp1) where temp1 is in deg C for temperature corrected span
    DEBUG_PRINT("Conc: ");
   d7ce2:	f003 fa65 	bl	db1b0 <_ZN5Print5printEPKc>
    //  DEBUG_PRINT(", ");
    conc1 = sensor1.getConc(1,sensor1.getTemp(1));
   d7ce6:	4a92      	ldr	r2, [pc, #584]	; (d7f30 <_Z11readSensorsv+0x9a8>)
   d7ce8:	488c      	ldr	r0, [pc, #560]	; (d7f1c <_Z11readSensorsv+0x994>)
   d7cea:	2101      	movs	r1, #1
   d7cec:	f001 f9da 	bl	d90a4 <_ZN3ULP7getTempEiPc>
   d7cf0:	ee07 0a90 	vmov	s15, r0
   d7cf4:	2101      	movs	r1, #1
   d7cf6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
   d7cfa:	4888      	ldr	r0, [pc, #544]	; (d7f1c <_Z11readSensorsv+0x994>)
   d7cfc:	f001 fac4 	bl	d9288 <_ZN3ULP7getConcEif>
   d7d00:	ed84 0a00 	vstr	s0, [r4]
    DEBUG_PRINTLN(conc1);
   d7d04:	f004 fae4 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d7d08:	4607      	mov	r7, r0
   d7d0a:	6820      	ldr	r0, [r4, #0]
   d7d0c:	f00a ff44 	bl	e2b98 <__aeabi_f2d>
   d7d10:	ec41 0b10 	vmov	d0, r0, r1
   d7d14:	2102      	movs	r1, #2
   d7d16:	4638      	mov	r0, r7
   d7d18:	f003 fb97 	bl	db44a <_ZN5Print7printlnEdi>

    field5 = String::format("%0.1f", conc1);
   d7d1c:	6820      	ldr	r0, [r4, #0]
    field7 = String::format("%0.0f", batCharge);
    WiFiSignal sig = WiFi.RSSI();
    field8 = String::format("%d", (int)sig.getQuality());
    #endif

    datastring = field1+":"+field2+":"+field3+":"+field4+":"+field5+":"+field6+":"+field7+":"+field8;
   d7d1e:	4c85      	ldr	r4, [pc, #532]	; (d7f34 <_Z11readSensorsv+0x9ac>)
   d7d20:	4f85      	ldr	r7, [pc, #532]	; (d7f38 <_Z11readSensorsv+0x9b0>)
    DEBUG_PRINT("Conc: ");
    //  DEBUG_PRINT(", ");
    conc1 = sensor1.getConc(1,sensor1.getTemp(1));
    DEBUG_PRINTLN(conc1);

    field5 = String::format("%0.1f", conc1);
   d7d22:	f00a ff39 	bl	e2b98 <__aeabi_f2d>
   d7d26:	4602      	mov	r2, r0
   d7d28:	460b      	mov	r3, r1
   d7d2a:	a81b      	add	r0, sp, #108	; 0x6c
   d7d2c:	4975      	ldr	r1, [pc, #468]	; (d7f04 <_Z11readSensorsv+0x97c>)
   d7d2e:	f003 f9e1 	bl	db0f4 <_ZN6String6formatEPKcz>
   d7d32:	a91b      	add	r1, sp, #108	; 0x6c
   d7d34:	4881      	ldr	r0, [pc, #516]	; (d7f3c <_Z11readSensorsv+0x9b4>)
   d7d36:	f003 f916 	bl	daf66 <_ZN6StringaSEOS_>
   d7d3a:	a81b      	add	r0, sp, #108	; 0x6c
   d7d3c:	f003 f882 	bl	dae44 <_ZN6StringD1Ev>
    field6 = String::format("%0.1f", temp1);
   d7d40:	6830      	ldr	r0, [r6, #0]
   d7d42:	f00a ff29 	bl	e2b98 <__aeabi_f2d>
   d7d46:	4602      	mov	r2, r0
   d7d48:	460b      	mov	r3, r1
   d7d4a:	a81b      	add	r0, sp, #108	; 0x6c
   d7d4c:	496d      	ldr	r1, [pc, #436]	; (d7f04 <_Z11readSensorsv+0x97c>)
   d7d4e:	f003 f9d1 	bl	db0f4 <_ZN6String6formatEPKcz>
   d7d52:	a91b      	add	r1, sp, #108	; 0x6c
   d7d54:	487a      	ldr	r0, [pc, #488]	; (d7f40 <_Z11readSensorsv+0x9b8>)
   d7d56:	f003 f906 	bl	daf66 <_ZN6StringaSEOS_>
   d7d5a:	a81b      	add	r0, sp, #108	; 0x6c
   d7d5c:	f003 f872 	bl	dae44 <_ZN6StringD1Ev>
    CellularSignal sig = Cellular.RSSI();
    field8 = String::format("%d", 100*sig.qual/49);
    #endif

    #if Wiring_WiFi
    float voltage = analogRead(BATT) * 0.0011224;
   d7d60:	2021      	movs	r0, #33	; 0x21
   d7d62:	f005 f8e6 	bl	dcf32 <analogRead>
    float batCharge = exp(5.0601*voltage)*0.0000001;
   d7d66:	f00a ff05 	bl	e2b74 <__aeabi_i2d>
   d7d6a:	a35f      	add	r3, pc, #380	; (adr r3, d7ee8 <_Z11readSensorsv+0x960>)
   d7d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7d70:	f00a ff66 	bl	e2c40 <__aeabi_dmul>
   d7d74:	f00b fa5c 	bl	e3230 <__aeabi_d2f>
   d7d78:	f00a ff0e 	bl	e2b98 <__aeabi_f2d>
   d7d7c:	a35c      	add	r3, pc, #368	; (adr r3, d7ef0 <_Z11readSensorsv+0x968>)
   d7d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7d82:	f00a ff5d 	bl	e2c40 <__aeabi_dmul>
   d7d86:	ec41 0b10 	vmov	d0, r0, r1
   d7d8a:	f006 f845 	bl	dde18 <exp>
   d7d8e:	a35a      	add	r3, pc, #360	; (adr r3, d7ef8 <_Z11readSensorsv+0x970>)
   d7d90:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7d94:	ec51 0b10 	vmov	r0, r1, d0
   d7d98:	f00a ff52 	bl	e2c40 <__aeabi_dmul>
   d7d9c:	f00b fa48 	bl	e3230 <__aeabi_d2f>
    if (batCharge>100) batCharge = 100;
   d7da0:	eddf 7a68 	vldr	s15, [pc, #416]	; d7f44 <_Z11readSensorsv+0x9bc>
    field8 = String::format("%d", 100*sig.qual/49);
    #endif

    #if Wiring_WiFi
    float voltage = analogRead(BATT) * 0.0011224;
    float batCharge = exp(5.0601*voltage)*0.0000001;
   d7da4:	ee08 0a10 	vmov	s16, r0
    if (batCharge>100) batCharge = 100;
   d7da8:	eeb4 8a67 	vcmp.f32	s16, s15
   d7dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d7db0:	bfc8      	it	gt
   d7db2:	eeb0 8a67 	vmovgt.f32	s16, s15
    field7 = String::format("%0.0f", batCharge);
   d7db6:	ee18 0a10 	vmov	r0, s16
   d7dba:	f00a feed 	bl	e2b98 <__aeabi_f2d>
   d7dbe:	460b      	mov	r3, r1
   d7dc0:	4602      	mov	r2, r0
   d7dc2:	4961      	ldr	r1, [pc, #388]	; (d7f48 <_Z11readSensorsv+0x9c0>)
   d7dc4:	a81b      	add	r0, sp, #108	; 0x6c
   d7dc6:	f003 f995 	bl	db0f4 <_ZN6String6formatEPKcz>
   d7dca:	a91b      	add	r1, sp, #108	; 0x6c
   d7dcc:	485f      	ldr	r0, [pc, #380]	; (d7f4c <_Z11readSensorsv+0x9c4>)
   d7dce:	f003 f8ca 	bl	daf66 <_ZN6StringaSEOS_>
   d7dd2:	a81b      	add	r0, sp, #108	; 0x6c
   d7dd4:	f003 f836 	bl	dae44 <_ZN6StringD1Ev>
    WiFiSignal sig = WiFi.RSSI();
   d7dd8:	495d      	ldr	r1, [pc, #372]	; (d7f50 <_Z11readSensorsv+0x9c8>)
   d7dda:	a81b      	add	r0, sp, #108	; 0x6c
   d7ddc:	f004 ff68 	bl	dccb0 <_ZN5spark9WiFiClass4RSSIEv>
    field8 = String::format("%d", (int)sig.getQuality());
   d7de0:	a81b      	add	r0, sp, #108	; 0x6c
   d7de2:	f004 ff11 	bl	dcc08 <_ZNK10WiFiSignal10getQualityEv>
   d7de6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   d7dea:	495a      	ldr	r1, [pc, #360]	; (d7f54 <_Z11readSensorsv+0x9cc>)
   d7dec:	ee17 2a90 	vmov	r2, s15
   d7df0:	a817      	add	r0, sp, #92	; 0x5c
   d7df2:	f003 f97f 	bl	db0f4 <_ZN6String6formatEPKcz>
   d7df6:	a917      	add	r1, sp, #92	; 0x5c
   d7df8:	4857      	ldr	r0, [pc, #348]	; (d7f58 <_Z11readSensorsv+0x9d0>)
   d7dfa:	f003 f8b4 	bl	daf66 <_ZN6StringaSEOS_>
   d7dfe:	a817      	add	r0, sp, #92	; 0x5c
   d7e00:	f003 f820 	bl	dae44 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d7e04:	4940      	ldr	r1, [pc, #256]	; (d7f08 <_Z11readSensorsv+0x980>)
   d7e06:	a817      	add	r0, sp, #92	; 0x5c
   d7e08:	f003 f8a2 	bl	daf50 <_ZN6StringC1ERKS_>
    #endif

    datastring = field1+":"+field2+":"+field3+":"+field4+":"+field5+":"+field6+":"+field7+":"+field8;
   d7e0c:	4953      	ldr	r1, [pc, #332]	; (d7f5c <_Z11readSensorsv+0x9d4>)
   d7e0e:	a817      	add	r0, sp, #92	; 0x5c
   d7e10:	f003 f90a 	bl	db028 <_ZplRK15StringSumHelperPKc>
   d7e14:	493d      	ldr	r1, [pc, #244]	; (d7f0c <_Z11readSensorsv+0x984>)
   d7e16:	f003 f8fb 	bl	db010 <_ZplRK15StringSumHelperRK6String>
   d7e1a:	4950      	ldr	r1, [pc, #320]	; (d7f5c <_Z11readSensorsv+0x9d4>)
   d7e1c:	f003 f904 	bl	db028 <_ZplRK15StringSumHelperPKc>
   d7e20:	493b      	ldr	r1, [pc, #236]	; (d7f10 <_Z11readSensorsv+0x988>)
   d7e22:	f003 f8f5 	bl	db010 <_ZplRK15StringSumHelperRK6String>
   d7e26:	494d      	ldr	r1, [pc, #308]	; (d7f5c <_Z11readSensorsv+0x9d4>)
   d7e28:	f003 f8fe 	bl	db028 <_ZplRK15StringSumHelperPKc>
   d7e2c:	4939      	ldr	r1, [pc, #228]	; (d7f14 <_Z11readSensorsv+0x98c>)
   d7e2e:	f003 f8ef 	bl	db010 <_ZplRK15StringSumHelperRK6String>
   d7e32:	494a      	ldr	r1, [pc, #296]	; (d7f5c <_Z11readSensorsv+0x9d4>)
   d7e34:	f003 f8f8 	bl	db028 <_ZplRK15StringSumHelperPKc>
   d7e38:	4940      	ldr	r1, [pc, #256]	; (d7f3c <_Z11readSensorsv+0x9b4>)
   d7e3a:	f003 f8e9 	bl	db010 <_ZplRK15StringSumHelperRK6String>
   d7e3e:	4947      	ldr	r1, [pc, #284]	; (d7f5c <_Z11readSensorsv+0x9d4>)
   d7e40:	f003 f8f2 	bl	db028 <_ZplRK15StringSumHelperPKc>
   d7e44:	493e      	ldr	r1, [pc, #248]	; (d7f40 <_Z11readSensorsv+0x9b8>)
   d7e46:	f003 f8e3 	bl	db010 <_ZplRK15StringSumHelperRK6String>
   d7e4a:	4944      	ldr	r1, [pc, #272]	; (d7f5c <_Z11readSensorsv+0x9d4>)
   d7e4c:	f003 f8ec 	bl	db028 <_ZplRK15StringSumHelperPKc>
   d7e50:	493e      	ldr	r1, [pc, #248]	; (d7f4c <_Z11readSensorsv+0x9c4>)
   d7e52:	f003 f8dd 	bl	db010 <_ZplRK15StringSumHelperRK6String>
   d7e56:	4941      	ldr	r1, [pc, #260]	; (d7f5c <_Z11readSensorsv+0x9d4>)
   d7e58:	f003 f8e6 	bl	db028 <_ZplRK15StringSumHelperPKc>
   d7e5c:	493e      	ldr	r1, [pc, #248]	; (d7f58 <_Z11readSensorsv+0x9d0>)
   d7e5e:	f003 f8d7 	bl	db010 <_ZplRK15StringSumHelperRK6String>
   d7e62:	4601      	mov	r1, r0
   d7e64:	4620      	mov	r0, r4
   d7e66:	f003 f864 	bl	daf32 <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d7e6a:	a817      	add	r0, sp, #92	; 0x5c
   d7e6c:	f002 ffea 	bl	dae44 <_ZN6StringD1Ev>
    // Blynk.virtualWrite(V4, Sensor.massPM10);
    // Blynk.virtualWrite(V5, conc);
    // Blynk.virtualWrite(V6, temp1);
    // Blynk.virtualWrite(V7, fuel.getSoC());
    // Blynk.virtualWrite(V8, sig.qual);
    Blynk.virtualWrite(V1, field1);
   d7e70:	4925      	ldr	r1, [pc, #148]	; (d7f08 <_Z11readSensorsv+0x980>)
   d7e72:	a817      	add	r0, sp, #92	; 0x5c
   d7e74:	f003 f86c 	bl	daf50 <_ZN6StringC1ERKS_>
   d7e78:	aa17      	add	r2, sp, #92	; 0x5c
   d7e7a:	2101      	movs	r1, #1
   d7e7c:	4838      	ldr	r0, [pc, #224]	; (d7f60 <_Z11readSensorsv+0x9d8>)
   d7e7e:	f7fe fc57 	bl	d6730 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d7e82:	a817      	add	r0, sp, #92	; 0x5c
   d7e84:	f002 ffde 	bl	dae44 <_ZN6StringD1Ev>
    Blynk.virtualWrite(V2, field2);
   d7e88:	4920      	ldr	r1, [pc, #128]	; (d7f0c <_Z11readSensorsv+0x984>)
   d7e8a:	a817      	add	r0, sp, #92	; 0x5c
   d7e8c:	f003 f860 	bl	daf50 <_ZN6StringC1ERKS_>
   d7e90:	aa17      	add	r2, sp, #92	; 0x5c
   d7e92:	2102      	movs	r1, #2
   d7e94:	4832      	ldr	r0, [pc, #200]	; (d7f60 <_Z11readSensorsv+0x9d8>)
   d7e96:	f7fe fc4b 	bl	d6730 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d7e9a:	a817      	add	r0, sp, #92	; 0x5c
   d7e9c:	f002 ffd2 	bl	dae44 <_ZN6StringD1Ev>
    Blynk.virtualWrite(V3, field3);
   d7ea0:	491b      	ldr	r1, [pc, #108]	; (d7f10 <_Z11readSensorsv+0x988>)
   d7ea2:	a817      	add	r0, sp, #92	; 0x5c
   d7ea4:	f003 f854 	bl	daf50 <_ZN6StringC1ERKS_>
   d7ea8:	aa17      	add	r2, sp, #92	; 0x5c
   d7eaa:	2103      	movs	r1, #3
   d7eac:	482c      	ldr	r0, [pc, #176]	; (d7f60 <_Z11readSensorsv+0x9d8>)
   d7eae:	f7fe fc3f 	bl	d6730 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d7eb2:	a817      	add	r0, sp, #92	; 0x5c
   d7eb4:	f002 ffc6 	bl	dae44 <_ZN6StringD1Ev>
    Blynk.virtualWrite(V4, field4);
   d7eb8:	4916      	ldr	r1, [pc, #88]	; (d7f14 <_Z11readSensorsv+0x98c>)
   d7eba:	a817      	add	r0, sp, #92	; 0x5c
   d7ebc:	f003 f848 	bl	daf50 <_ZN6StringC1ERKS_>
   d7ec0:	aa17      	add	r2, sp, #92	; 0x5c
   d7ec2:	2104      	movs	r1, #4
   d7ec4:	4826      	ldr	r0, [pc, #152]	; (d7f60 <_Z11readSensorsv+0x9d8>)
   d7ec6:	f7fe fc33 	bl	d6730 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d7eca:	a817      	add	r0, sp, #92	; 0x5c
   d7ecc:	f002 ffba 	bl	dae44 <_ZN6StringD1Ev>
    Blynk.virtualWrite(V5, field5);
   d7ed0:	491a      	ldr	r1, [pc, #104]	; (d7f3c <_Z11readSensorsv+0x9b4>)
   d7ed2:	a817      	add	r0, sp, #92	; 0x5c
   d7ed4:	f003 f83c 	bl	daf50 <_ZN6StringC1ERKS_>
   d7ed8:	aa17      	add	r2, sp, #92	; 0x5c
   d7eda:	2105      	movs	r1, #5
   d7edc:	4820      	ldr	r0, [pc, #128]	; (d7f60 <_Z11readSensorsv+0x9d8>)
   d7ede:	f7fe fc27 	bl	d6730 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d7ee2:	a817      	add	r0, sp, #92	; 0x5c
   d7ee4:	e040      	b.n	d7f68 <_Z11readSensorsv+0x9e0>
   d7ee6:	bf00      	nop
   d7ee8:	d2c10294 	.word	0xd2c10294
   d7eec:	3f5263af 	.word	0x3f5263af
   d7ef0:	dab9f55a 	.word	0xdab9f55a
   d7ef4:	40143d8a 	.word	0x40143d8a
   d7ef8:	9abcaf48 	.word	0x9abcaf48
   d7efc:	3e7ad7f2 	.word	0x3e7ad7f2
   d7f00:	2003e268 	.word	0x2003e268
   d7f04:	000e73ea 	.word	0x000e73ea
   d7f08:	2003d788 	.word	0x2003d788
   d7f0c:	2003d798 	.word	0x2003d798
   d7f10:	2003d7a8 	.word	0x2003d7a8
   d7f14:	2003d7b8 	.word	0x2003d7b8
   d7f18:	000e73f0 	.word	0x000e73f0
   d7f1c:	2003ded0 	.word	0x2003ded0
   d7f20:	000e73f2 	.word	0x000e73f2
   d7f24:	000e73fa 	.word	0x000e73fa
   d7f28:	000e7401 	.word	0x000e7401
   d7f2c:	2003e15c 	.word	0x2003e15c
   d7f30:	000e77ee 	.word	0x000e77ee
   d7f34:	2003deb0 	.word	0x2003deb0
   d7f38:	2003e21c 	.word	0x2003e21c
   d7f3c:	2003d7c8 	.word	0x2003d7c8
   d7f40:	2003e180 	.word	0x2003e180
   d7f44:	42c80000 	.word	0x42c80000
   d7f48:	000e7408 	.word	0x000e7408
   d7f4c:	2003d7e8 	.word	0x2003d7e8
   d7f50:	2003e5e0 	.word	0x2003e5e0
   d7f54:	000e7f84 	.word	0x000e7f84
   d7f58:	2003d6b8 	.word	0x2003d6b8
   d7f5c:	000e6f43 	.word	0x000e6f43
   d7f60:	2003e234 	.word	0x2003e234
   d7f64:	2003da45 	.word	0x2003da45
   d7f68:	f002 ff6c 	bl	dae44 <_ZN6StringD1Ev>
    Blynk.virtualWrite(V6, field6);
   d7f6c:	497d      	ldr	r1, [pc, #500]	; (d8164 <_Z11readSensorsv+0xbdc>)
   d7f6e:	a817      	add	r0, sp, #92	; 0x5c
   d7f70:	f002 ffee 	bl	daf50 <_ZN6StringC1ERKS_>
   d7f74:	aa17      	add	r2, sp, #92	; 0x5c
   d7f76:	2106      	movs	r1, #6
   d7f78:	487b      	ldr	r0, [pc, #492]	; (d8168 <_Z11readSensorsv+0xbe0>)
   d7f7a:	f7fe fbd9 	bl	d6730 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d7f7e:	a817      	add	r0, sp, #92	; 0x5c
   d7f80:	f002 ff60 	bl	dae44 <_ZN6StringD1Ev>
    Blynk.virtualWrite(V7, field7);
   d7f84:	4979      	ldr	r1, [pc, #484]	; (d816c <_Z11readSensorsv+0xbe4>)
   d7f86:	a817      	add	r0, sp, #92	; 0x5c
   d7f88:	f002 ffe2 	bl	daf50 <_ZN6StringC1ERKS_>
   d7f8c:	aa17      	add	r2, sp, #92	; 0x5c
   d7f8e:	2107      	movs	r1, #7
   d7f90:	4875      	ldr	r0, [pc, #468]	; (d8168 <_Z11readSensorsv+0xbe0>)
   d7f92:	f7fe fbcd 	bl	d6730 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d7f96:	a817      	add	r0, sp, #92	; 0x5c
   d7f98:	f002 ff54 	bl	dae44 <_ZN6StringD1Ev>
    Blynk.virtualWrite(V8, field8);   
   d7f9c:	4974      	ldr	r1, [pc, #464]	; (d8170 <_Z11readSensorsv+0xbe8>)
   d7f9e:	a817      	add	r0, sp, #92	; 0x5c
   d7fa0:	f002 ffd6 	bl	daf50 <_ZN6StringC1ERKS_>
   d7fa4:	aa17      	add	r2, sp, #92	; 0x5c
   d7fa6:	2108      	movs	r1, #8
   d7fa8:	486f      	ldr	r0, [pc, #444]	; (d8168 <_Z11readSensorsv+0xbe0>)
   d7faa:	f7fe fbc1 	bl	d6730 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d7fae:	a817      	add	r0, sp, #92	; 0x5c
   d7fb0:	f002 ff48 	bl	dae44 <_ZN6StringD1Ev>

    // Particle.publish("Test readings",datastring,60,PRIVATE);
    DEBUG_PRINTLN(datastring);
   d7fb4:	f004 f98c 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d7fb8:	6821      	ldr	r1, [r4, #0]
   d7fba:	4c6e      	ldr	r4, [pc, #440]	; (d8174 <_Z11readSensorsv+0xbec>)
   d7fbc:	f003 f90b 	bl	db1d6 <_ZN5Print7printlnEPKc>
    sensorValid = true;
   d7fc0:	4b6d      	ldr	r3, [pc, #436]	; (d8178 <_Z11readSensorsv+0xbf0>)
    String statusMessage;
   d7fc2:	496e      	ldr	r1, [pc, #440]	; (d817c <_Z11readSensorsv+0xbf4>)
    Blynk.virtualWrite(V7, field7);
    Blynk.virtualWrite(V8, field8);   

    // Particle.publish("Test readings",datastring,60,PRIVATE);
    DEBUG_PRINTLN(datastring);
    sensorValid = true;
   d7fc4:	2601      	movs	r6, #1
    String statusMessage;
   d7fc6:	a803      	add	r0, sp, #12
    Blynk.virtualWrite(V7, field7);
    Blynk.virtualWrite(V8, field8);   

    // Particle.publish("Test readings",datastring,60,PRIVATE);
    DEBUG_PRINTLN(datastring);
    sensorValid = true;
   d7fc8:	701e      	strb	r6, [r3, #0]
    String statusMessage;
   d7fca:	f002 ff82 	bl	daed2 <_ZN6StringC1EPK19__FlashStringHelper>
    String alertMessage;
   d7fce:	496b      	ldr	r1, [pc, #428]	; (d817c <_Z11readSensorsv+0xbf4>)
   d7fd0:	a807      	add	r0, sp, #28
   d7fd2:	f002 ff7e 	bl	daed2 <_ZN6StringC1EPK19__FlashStringHelper>
    // Check to see if there is an alert state and act on it
    if (runExpression(state.expression))
   d7fd6:	486a      	ldr	r0, [pc, #424]	; (d8180 <_Z11readSensorsv+0xbf8>)
   d7fd8:	f7fe ff98 	bl	d6f0c <_Z13runExpressionPc>
   d7fdc:	4602      	mov	r2, r0
   d7fde:	2800      	cmp	r0, #0
   d7fe0:	f000 8083 	beq.w	d80ea <_Z11readSensorsv+0xb62>
    {
      currentAlert = true;
      Blynk.virtualWrite(V9,alertGreenImage);
   d7fe4:	2200      	movs	r2, #0
   d7fe6:	2109      	movs	r1, #9
   d7fe8:	485f      	ldr	r0, [pc, #380]	; (d8168 <_Z11readSensorsv+0xbe0>)
    String statusMessage;
    String alertMessage;
    // Check to see if there is an alert state and act on it
    if (runExpression(state.expression))
    {
      currentAlert = true;
   d7fea:	703e      	strb	r6, [r7, #0]
      Blynk.virtualWrite(V9,alertGreenImage);
   d7fec:	f7fe fb64 	bl	d66b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
      Blynk.virtualWrite(V9,alertRedImage);
   d7ff0:	4632      	mov	r2, r6
   d7ff2:	2109      	movs	r1, #9
   d7ff4:	485c      	ldr	r0, [pc, #368]	; (d8168 <_Z11readSensorsv+0xbe0>)
   d7ff6:	f7fe fb5f 	bl	d66b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
      
      if (timeSynced)
   d7ffa:	7823      	ldrb	r3, [r4, #0]
   d7ffc:	b31b      	cbz	r3, d8046 <_Z11readSensorsv+0xabe>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d7ffe:	4961      	ldr	r1, [pc, #388]	; (d8184 <_Z11readSensorsv+0xbfc>)
   d8000:	a817      	add	r0, sp, #92	; 0x5c
   d8002:	f002 ff66 	bl	daed2 <_ZN6StringC1EPK19__FlashStringHelper>
      {
        // statusMessage = "ALERT! "+Time.format(rtc.rtcNow()+gmtOffsetSeconds,"%D %R")+" "+field7+"%";
        statusMessage = "ALRT! "+Time.format(rtc.rtcNow()+gmtOffsetSeconds,"%h%e %R")+" "+field7+"%";
   d8006:	4860      	ldr	r0, [pc, #384]	; (d8188 <_Z11readSensorsv+0xc00>)
   d8008:	f001 fb27 	bl	d965a <_ZN8MCP7941x6rtcNowEv>
   d800c:	4b5f      	ldr	r3, [pc, #380]	; (d818c <_Z11readSensorsv+0xc04>)
   d800e:	4960      	ldr	r1, [pc, #384]	; (d8190 <_Z11readSensorsv+0xc08>)
   d8010:	681a      	ldr	r2, [r3, #0]
   d8012:	4b60      	ldr	r3, [pc, #384]	; (d8194 <_Z11readSensorsv+0xc0c>)
   d8014:	4402      	add	r2, r0
   d8016:	a813      	add	r0, sp, #76	; 0x4c
   d8018:	f003 fb8a 	bl	db730 <_ZN9TimeClass6formatElPKc>
   d801c:	a913      	add	r1, sp, #76	; 0x4c
   d801e:	a817      	add	r0, sp, #92	; 0x5c
   d8020:	f002 fff6 	bl	db010 <_ZplRK15StringSumHelperRK6String>
   d8024:	495c      	ldr	r1, [pc, #368]	; (d8198 <_Z11readSensorsv+0xc10>)
   d8026:	f002 ffff 	bl	db028 <_ZplRK15StringSumHelperPKc>
   d802a:	4950      	ldr	r1, [pc, #320]	; (d816c <_Z11readSensorsv+0xbe4>)
   d802c:	f002 fff0 	bl	db010 <_ZplRK15StringSumHelperRK6String>
   d8030:	495a      	ldr	r1, [pc, #360]	; (d819c <_Z11readSensorsv+0xc14>)
   d8032:	f002 fff9 	bl	db028 <_ZplRK15StringSumHelperPKc>
   d8036:	4601      	mov	r1, r0
   d8038:	a803      	add	r0, sp, #12
   d803a:	f002 ff7a 	bl	daf32 <_ZN6StringaSERKS_>
   d803e:	a813      	add	r0, sp, #76	; 0x4c
   d8040:	f002 ff00 	bl	dae44 <_ZN6StringD1Ev>
   d8044:	e00e      	b.n	d8064 <_Z11readSensorsv+0xadc>
   d8046:	4956      	ldr	r1, [pc, #344]	; (d81a0 <_Z11readSensorsv+0xc18>)
   d8048:	a817      	add	r0, sp, #92	; 0x5c
   d804a:	f002 ff42 	bl	daed2 <_ZN6StringC1EPK19__FlashStringHelper>
      }
      else
      {
        statusMessage = "ALERT!             "+field7+"%";
   d804e:	4947      	ldr	r1, [pc, #284]	; (d816c <_Z11readSensorsv+0xbe4>)
   d8050:	a817      	add	r0, sp, #92	; 0x5c
   d8052:	f002 ffdd 	bl	db010 <_ZplRK15StringSumHelperRK6String>
   d8056:	4951      	ldr	r1, [pc, #324]	; (d819c <_Z11readSensorsv+0xc14>)
   d8058:	f002 ffe6 	bl	db028 <_ZplRK15StringSumHelperPKc>
   d805c:	4601      	mov	r1, r0
   d805e:	a803      	add	r0, sp, #12
   d8060:	f002 ff67 	bl	daf32 <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d8064:	a817      	add	r0, sp, #92	; 0x5c
   d8066:	f002 feed 	bl	dae44 <_ZN6StringD1Ev>
      }
      Blynk.virtualWrite(V30,statusMessage);
   d806a:	a903      	add	r1, sp, #12
   d806c:	a817      	add	r0, sp, #92	; 0x5c
   d806e:	f002 ff6f 	bl	daf50 <_ZN6StringC1ERKS_>
   d8072:	aa17      	add	r2, sp, #92	; 0x5c
   d8074:	211e      	movs	r1, #30
   d8076:	483c      	ldr	r0, [pc, #240]	; (d8168 <_Z11readSensorsv+0xbe0>)
   d8078:	f7fe fb5a 	bl	d6730 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d807c:	a817      	add	r0, sp, #92	; 0x5c
   d807e:	f002 fee1 	bl	dae44 <_ZN6StringD1Ev>
      if (terminalDebug) Blynk.virtualWrite(V21, Time.timeStr()+"|"+String(gmtOffsetSeconds));
   d8082:	f898 3000 	ldrb.w	r3, [r8]
   d8086:	2b00      	cmp	r3, #0
   d8088:	f000 8100 	beq.w	d828c <_Z11readSensorsv+0xd04>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   d808c:	f003 fba3 	bl	db7d6 <_ZN9TimeClass3nowEv>
   d8090:	4601      	mov	r1, r0
   d8092:	a80b      	add	r0, sp, #44	; 0x2c
   d8094:	f003 facc 	bl	db630 <_ZN9TimeClass7timeStrEl>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d8098:	a90b      	add	r1, sp, #44	; 0x2c
   d809a:	a80f      	add	r0, sp, #60	; 0x3c
   d809c:	f002 ff58 	bl	daf50 <_ZN6StringC1ERKS_>
   d80a0:	4940      	ldr	r1, [pc, #256]	; (d81a4 <_Z11readSensorsv+0xc1c>)
   d80a2:	a80f      	add	r0, sp, #60	; 0x3c
   d80a4:	f002 ffc0 	bl	db028 <_ZplRK15StringSumHelperPKc>
   d80a8:	4b38      	ldr	r3, [pc, #224]	; (d818c <_Z11readSensorsv+0xc04>)
   d80aa:	220a      	movs	r2, #10
   d80ac:	6819      	ldr	r1, [r3, #0]
   d80ae:	4604      	mov	r4, r0
   d80b0:	a813      	add	r0, sp, #76	; 0x4c
   d80b2:	f002 ff83 	bl	dafbc <_ZN6StringC1Eih>
   d80b6:	a913      	add	r1, sp, #76	; 0x4c
   d80b8:	4620      	mov	r0, r4
   d80ba:	f002 ffa9 	bl	db010 <_ZplRK15StringSumHelperRK6String>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d80be:	4601      	mov	r1, r0
   d80c0:	a817      	add	r0, sp, #92	; 0x5c
   d80c2:	f002 ff45 	bl	daf50 <_ZN6StringC1ERKS_>
   d80c6:	aa17      	add	r2, sp, #92	; 0x5c
   d80c8:	2115      	movs	r1, #21
   d80ca:	4827      	ldr	r0, [pc, #156]	; (d8168 <_Z11readSensorsv+0xbe0>)
   d80cc:	f7fe fc54 	bl	d6978 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII15StringSumHelperEEEviDpT_>
   d80d0:	a817      	add	r0, sp, #92	; 0x5c
   d80d2:	f002 feb7 	bl	dae44 <_ZN6StringD1Ev>
   d80d6:	a813      	add	r0, sp, #76	; 0x4c
   d80d8:	f002 feb4 	bl	dae44 <_ZN6StringD1Ev>
   d80dc:	a80f      	add	r0, sp, #60	; 0x3c
   d80de:	f002 feb1 	bl	dae44 <_ZN6StringD1Ev>
   d80e2:	a80b      	add	r0, sp, #44	; 0x2c
   d80e4:	f002 feae 	bl	dae44 <_ZN6StringD1Ev>
   d80e8:	e0d0      	b.n	d828c <_Z11readSensorsv+0xd04>
    }
    else
    {
      Blynk.virtualWrite(V0,0);
   d80ea:	4601      	mov	r1, r0
   d80ec:	481e      	ldr	r0, [pc, #120]	; (d8168 <_Z11readSensorsv+0xbe0>)
   d80ee:	f7fe fae3 	bl	d66b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
      if (tamperCurrentAlert){
   d80f2:	4b2d      	ldr	r3, [pc, #180]	; (d81a8 <_Z11readSensorsv+0xc20>)
   d80f4:	781a      	ldrb	r2, [r3, #0]
   d80f6:	b122      	cbz	r2, d8102 <_Z11readSensorsv+0xb7a>
        StateString="ALRT!";
   d80f8:	492c      	ldr	r1, [pc, #176]	; (d81ac <_Z11readSensorsv+0xc24>)
   d80fa:	482d      	ldr	r0, [pc, #180]	; (d81b0 <_Z11readSensorsv+0xc28>)
   d80fc:	f002 ff3b 	bl	daf76 <_ZN6StringaSEPKc>
        Blynk.virtualWrite(V9,alertRedImage);
   d8100:	4632      	mov	r2, r6
      }
      else
        Blynk.virtualWrite(V9,alertGreenImage);
   d8102:	2109      	movs	r1, #9
   d8104:	4818      	ldr	r0, [pc, #96]	; (d8168 <_Z11readSensorsv+0xbe0>)
   d8106:	f7fe fad7 	bl	d66b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
      if (timeSynced)
   d810a:	7823      	ldrb	r3, [r4, #0]
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d810c:	4928      	ldr	r1, [pc, #160]	; (d81b0 <_Z11readSensorsv+0xc28>)
   d810e:	2b00      	cmp	r3, #0
   d8110:	d050      	beq.n	d81b4 <_Z11readSensorsv+0xc2c>
   d8112:	a813      	add	r0, sp, #76	; 0x4c
   d8114:	f002 ff1c 	bl	daf50 <_ZN6StringC1ERKS_>
      {
        // statusMessage = "OK "+Time.format(rtc.rtcNow()+gmtOffsetSeconds,"%D %R")+" "+field7+"%";
        statusMessage = StateString+" "+Time.format(rtc.rtcNow()+gmtOffsetSeconds,"%h%e %R")+" "+field7+"%";
   d8118:	491f      	ldr	r1, [pc, #124]	; (d8198 <_Z11readSensorsv+0xc10>)
   d811a:	a813      	add	r0, sp, #76	; 0x4c
   d811c:	f002 ff84 	bl	db028 <_ZplRK15StringSumHelperPKc>
   d8120:	4604      	mov	r4, r0
   d8122:	4819      	ldr	r0, [pc, #100]	; (d8188 <_Z11readSensorsv+0xc00>)
   d8124:	f001 fa99 	bl	d965a <_ZN8MCP7941x6rtcNowEv>
   d8128:	4b18      	ldr	r3, [pc, #96]	; (d818c <_Z11readSensorsv+0xc04>)
   d812a:	4919      	ldr	r1, [pc, #100]	; (d8190 <_Z11readSensorsv+0xc08>)
   d812c:	681a      	ldr	r2, [r3, #0]
   d812e:	4b19      	ldr	r3, [pc, #100]	; (d8194 <_Z11readSensorsv+0xc0c>)
   d8130:	4402      	add	r2, r0
   d8132:	a817      	add	r0, sp, #92	; 0x5c
   d8134:	f003 fafc 	bl	db730 <_ZN9TimeClass6formatElPKc>
   d8138:	a917      	add	r1, sp, #92	; 0x5c
   d813a:	4620      	mov	r0, r4
   d813c:	f002 ff68 	bl	db010 <_ZplRK15StringSumHelperRK6String>
   d8140:	4915      	ldr	r1, [pc, #84]	; (d8198 <_Z11readSensorsv+0xc10>)
   d8142:	f002 ff71 	bl	db028 <_ZplRK15StringSumHelperPKc>
   d8146:	4909      	ldr	r1, [pc, #36]	; (d816c <_Z11readSensorsv+0xbe4>)
   d8148:	f002 ff62 	bl	db010 <_ZplRK15StringSumHelperRK6String>
   d814c:	4913      	ldr	r1, [pc, #76]	; (d819c <_Z11readSensorsv+0xc14>)
   d814e:	f002 ff6b 	bl	db028 <_ZplRK15StringSumHelperPKc>
   d8152:	4601      	mov	r1, r0
   d8154:	a803      	add	r0, sp, #12
   d8156:	f002 feec 	bl	daf32 <_ZN6StringaSERKS_>
   d815a:	a817      	add	r0, sp, #92	; 0x5c
   d815c:	f002 fe72 	bl	dae44 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d8160:	a813      	add	r0, sp, #76	; 0x4c
   d8162:	e039      	b.n	d81d8 <_Z11readSensorsv+0xc50>
   d8164:	2003e180 	.word	0x2003e180
   d8168:	2003e234 	.word	0x2003e234
   d816c:	2003d7e8 	.word	0x2003d7e8
   d8170:	2003d6b8 	.word	0x2003d6b8
   d8174:	2003dead 	.word	0x2003dead
   d8178:	2003e17c 	.word	0x2003e17c
   d817c:	000e6bf1 	.word	0x000e6bf1
   d8180:	2003da90 	.word	0x2003da90
   d8184:	000e740e 	.word	0x000e740e
   d8188:	2003e174 	.word	0x2003e174
   d818c:	2003d5a0 	.word	0x2003d5a0
   d8190:	2003e2ac 	.word	0x2003e2ac
   d8194:	000e6fa3 	.word	0x000e6fa3
   d8198:	000e6fbc 	.word	0x000e6fbc
   d819c:	000e6fab 	.word	0x000e6fab
   d81a0:	000e7415 	.word	0x000e7415
   d81a4:	000e7429 	.word	0x000e7429
   d81a8:	2003decc 	.word	0x2003decc
   d81ac:	000e742b 	.word	0x000e742b
   d81b0:	2003d7d8 	.word	0x2003d7d8
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d81b4:	a817      	add	r0, sp, #92	; 0x5c
   d81b6:	f002 fecb 	bl	daf50 <_ZN6StringC1ERKS_>
      }
      else
      {
        statusMessage = StateString+"                "+field7+"%";
   d81ba:	49b4      	ldr	r1, [pc, #720]	; (d848c <_Z11readSensorsv+0xf04>)
   d81bc:	a817      	add	r0, sp, #92	; 0x5c
   d81be:	f002 ff33 	bl	db028 <_ZplRK15StringSumHelperPKc>
   d81c2:	49b3      	ldr	r1, [pc, #716]	; (d8490 <_Z11readSensorsv+0xf08>)
   d81c4:	f002 ff24 	bl	db010 <_ZplRK15StringSumHelperRK6String>
   d81c8:	49b2      	ldr	r1, [pc, #712]	; (d8494 <_Z11readSensorsv+0xf0c>)
   d81ca:	f002 ff2d 	bl	db028 <_ZplRK15StringSumHelperPKc>
   d81ce:	4601      	mov	r1, r0
   d81d0:	a803      	add	r0, sp, #12
   d81d2:	f002 feae 	bl	daf32 <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d81d6:	a817      	add	r0, sp, #92	; 0x5c
   d81d8:	f002 fe34 	bl	dae44 <_ZN6StringD1Ev>
      }
      int messagesize=statusMessage.length();
      if (messagesize<5){
   d81dc:	9b05      	ldr	r3, [sp, #20]
   d81de:	2b04      	cmp	r3, #4
   d81e0:	dc15      	bgt.n	d820e <_Z11readSensorsv+0xc86>
        statusMessage=String::format("Updating");
   d81e2:	49ad      	ldr	r1, [pc, #692]	; (d8498 <_Z11readSensorsv+0xf10>)
   d81e4:	a817      	add	r0, sp, #92	; 0x5c
   d81e6:	f002 ff85 	bl	db0f4 <_ZN6String6formatEPKcz>
   d81ea:	a917      	add	r1, sp, #92	; 0x5c
   d81ec:	a803      	add	r0, sp, #12
   d81ee:	f002 feba 	bl	daf66 <_ZN6StringaSEOS_>
   d81f2:	a817      	add	r0, sp, #92	; 0x5c
   d81f4:	f002 fe26 	bl	dae44 <_ZN6StringD1Ev>
        DEBUG_PRINTLN(statusMessage);
   d81f8:	f004 f86a 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d81fc:	9903      	ldr	r1, [sp, #12]
   d81fe:	f002 ffea 	bl	db1d6 <_ZN5Print7printlnEPKc>
        delay(1000);
   d8202:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d8206:	f003 faf7 	bl	db7f8 <delay>
        System.reset();
   d820a:	f002 fd5f 	bl	daccc <_ZN11SystemClass5resetEv>
      }
        
      Blynk.virtualWrite(V30,statusMessage);
   d820e:	a903      	add	r1, sp, #12
   d8210:	a817      	add	r0, sp, #92	; 0x5c
   d8212:	f002 fe9d 	bl	daf50 <_ZN6StringC1ERKS_>
   d8216:	aa17      	add	r2, sp, #92	; 0x5c
   d8218:	211e      	movs	r1, #30
   d821a:	48a0      	ldr	r0, [pc, #640]	; (d849c <_Z11readSensorsv+0xf14>)
   d821c:	f7fe fa88 	bl	d6730 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d8220:	a817      	add	r0, sp, #92	; 0x5c
   d8222:	f002 fe0f 	bl	dae44 <_ZN6StringD1Ev>
      if (terminalDebug) Blynk.virtualWrite(V21, Time.timeStr()+"|"+String(gmtOffsetSeconds));
   d8226:	f898 3000 	ldrb.w	r3, [r8]
   d822a:	b36b      	cbz	r3, d8288 <_Z11readSensorsv+0xd00>
   d822c:	f003 fad3 	bl	db7d6 <_ZN9TimeClass3nowEv>
   d8230:	4601      	mov	r1, r0
   d8232:	a80b      	add	r0, sp, #44	; 0x2c
   d8234:	f003 f9fc 	bl	db630 <_ZN9TimeClass7timeStrEl>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d8238:	a90b      	add	r1, sp, #44	; 0x2c
   d823a:	a80f      	add	r0, sp, #60	; 0x3c
   d823c:	f002 fe88 	bl	daf50 <_ZN6StringC1ERKS_>
   d8240:	4997      	ldr	r1, [pc, #604]	; (d84a0 <_Z11readSensorsv+0xf18>)
   d8242:	a80f      	add	r0, sp, #60	; 0x3c
   d8244:	f002 fef0 	bl	db028 <_ZplRK15StringSumHelperPKc>
   d8248:	4b96      	ldr	r3, [pc, #600]	; (d84a4 <_Z11readSensorsv+0xf1c>)
   d824a:	220a      	movs	r2, #10
   d824c:	6819      	ldr	r1, [r3, #0]
   d824e:	4604      	mov	r4, r0
   d8250:	a813      	add	r0, sp, #76	; 0x4c
   d8252:	f002 feb3 	bl	dafbc <_ZN6StringC1Eih>
   d8256:	a913      	add	r1, sp, #76	; 0x4c
   d8258:	4620      	mov	r0, r4
   d825a:	f002 fed9 	bl	db010 <_ZplRK15StringSumHelperRK6String>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d825e:	4601      	mov	r1, r0
   d8260:	a817      	add	r0, sp, #92	; 0x5c
   d8262:	f002 fe75 	bl	daf50 <_ZN6StringC1ERKS_>
   d8266:	aa17      	add	r2, sp, #92	; 0x5c
   d8268:	2115      	movs	r1, #21
   d826a:	488c      	ldr	r0, [pc, #560]	; (d849c <_Z11readSensorsv+0xf14>)
   d826c:	f7fe fb84 	bl	d6978 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII15StringSumHelperEEEviDpT_>
   d8270:	a817      	add	r0, sp, #92	; 0x5c
   d8272:	f002 fde7 	bl	dae44 <_ZN6StringD1Ev>
   d8276:	a813      	add	r0, sp, #76	; 0x4c
   d8278:	f002 fde4 	bl	dae44 <_ZN6StringD1Ev>
   d827c:	a80f      	add	r0, sp, #60	; 0x3c
   d827e:	f002 fde1 	bl	dae44 <_ZN6StringD1Ev>
   d8282:	a80b      	add	r0, sp, #44	; 0x2c
   d8284:	f002 fdde 	bl	dae44 <_ZN6StringD1Ev>
      currentAlert = false;
   d8288:	2300      	movs	r3, #0
   d828a:	703b      	strb	r3, [r7, #0]
    }
     if (VapeBuzzerOn)
   d828c:	4c86      	ldr	r4, [pc, #536]	; (d84a8 <_Z11readSensorsv+0xf20>)
   d828e:	7823      	ldrb	r3, [r4, #0]
   d8290:	b1fb      	cbz	r3, d82d2 <_Z11readSensorsv+0xd4a>
   d8292:	f002 f96b 	bl	da56c <HAL_Timer_Get_Milli_Seconds>
     {
         //Turn Buzzer Off if timer expired
         unsigned long vape_elapsed_buzzer =  millis() - VapeAlertBuzzerTime;
   d8296:	4b85      	ldr	r3, [pc, #532]	; (d84ac <_Z11readSensorsv+0xf24>)
  	 alertMessage=String::format("buzzer total time %ul ****", vape_elapsed_buzzer);
   d8298:	4985      	ldr	r1, [pc, #532]	; (d84b0 <_Z11readSensorsv+0xf28>)
      currentAlert = false;
    }
     if (VapeBuzzerOn)
     {
         //Turn Buzzer Off if timer expired
         unsigned long vape_elapsed_buzzer =  millis() - VapeAlertBuzzerTime;
   d829a:	681e      	ldr	r6, [r3, #0]
   d829c:	1b86      	subs	r6, r0, r6
  	 alertMessage=String::format("buzzer total time %ul ****", vape_elapsed_buzzer);
   d829e:	4632      	mov	r2, r6
   d82a0:	a817      	add	r0, sp, #92	; 0x5c
   d82a2:	f002 ff27 	bl	db0f4 <_ZN6String6formatEPKcz>
   d82a6:	a917      	add	r1, sp, #92	; 0x5c
   d82a8:	a807      	add	r0, sp, #28
   d82aa:	f002 fe5c 	bl	daf66 <_ZN6StringaSEOS_>
   d82ae:	a817      	add	r0, sp, #92	; 0x5c
   d82b0:	f002 fdc8 	bl	dae44 <_ZN6StringD1Ev>
         DEBUG_PRINTLN(alertMessage);
   d82b4:	f004 f80c 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d82b8:	9907      	ldr	r1, [sp, #28]
   d82ba:	f002 ff8c 	bl	db1d6 <_ZN5Print7printlnEPKc>
         if (vape_elapsed_buzzer>8000){
   d82be:	f5b6 5ffa 	cmp.w	r6, #8000	; 0x1f40
   d82c2:	d906      	bls.n	d82d2 <_Z11readSensorsv+0xd4a>
           digitalWrite(buzzer, LOW);
   d82c4:	4b7b      	ldr	r3, [pc, #492]	; (d84b4 <_Z11readSensorsv+0xf2c>)
   d82c6:	2100      	movs	r1, #0
   d82c8:	8818      	ldrh	r0, [r3, #0]
   d82ca:	f004 fe06 	bl	dceda <digitalWrite>
	         VapeBuzzerOn=false;
   d82ce:	2300      	movs	r3, #0
   d82d0:	7023      	strb	r3, [r4, #0]
	       }
     }

    if (alertChanged())
   d82d2:	f7fd fc0d 	bl	d5af0 <_Z12alertChangedv>
   d82d6:	2800      	cmp	r0, #0
   d82d8:	d044      	beq.n	d8364 <_Z11readSensorsv+0xddc>
    {
      if (currentAlert)
   d82da:	783b      	ldrb	r3, [r7, #0]
   d82dc:	b353      	cbz	r3, d8334 <_Z11readSensorsv+0xdac>
      {
          
        if (state.buzzerVapor==true)
   d82de:	f895 3418 	ldrb.w	r3, [r5, #1048]	; 0x418
   d82e2:	b1db      	cbz	r3, d831c <_Z11readSensorsv+0xd94>
        {
            //Buzzer On
            digitalWrite(buzzer, HIGH);
   d82e4:	4b73      	ldr	r3, [pc, #460]	; (d84b4 <_Z11readSensorsv+0xf2c>)
   d82e6:	2101      	movs	r1, #1
   d82e8:	8818      	ldrh	r0, [r3, #0]
   d82ea:	f004 fdf6 	bl	dceda <digitalWrite>
   d82ee:	f002 f93d 	bl	da56c <HAL_Timer_Get_Milli_Seconds>
            VapeAlertBuzzerTime = millis();
   d82f2:	4b6e      	ldr	r3, [pc, #440]	; (d84ac <_Z11readSensorsv+0xf24>)
            alertMessage=String::format("Vape alert buzzer time reset at %ul ****", VapeAlertBuzzerTime);
   d82f4:	4970      	ldr	r1, [pc, #448]	; (d84b8 <_Z11readSensorsv+0xf30>)
          
        if (state.buzzerVapor==true)
        {
            //Buzzer On
            digitalWrite(buzzer, HIGH);
            VapeAlertBuzzerTime = millis();
   d82f6:	6018      	str	r0, [r3, #0]
   d82f8:	4602      	mov	r2, r0
            alertMessage=String::format("Vape alert buzzer time reset at %ul ****", VapeAlertBuzzerTime);
   d82fa:	a817      	add	r0, sp, #92	; 0x5c
   d82fc:	f002 fefa 	bl	db0f4 <_ZN6String6formatEPKcz>
   d8300:	a917      	add	r1, sp, #92	; 0x5c
   d8302:	a807      	add	r0, sp, #28
   d8304:	f002 fe2f 	bl	daf66 <_ZN6StringaSEOS_>
   d8308:	a817      	add	r0, sp, #92	; 0x5c
   d830a:	f002 fd9b 	bl	dae44 <_ZN6StringD1Ev>
            DEBUG_PRINTLN(alertMessage);
   d830e:	f003 ffdf 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d8312:	9907      	ldr	r1, [sp, #28]
   d8314:	f002 ff5f 	bl	db1d6 <_ZN5Print7printlnEPKc>
	          VapeBuzzerOn=true;
   d8318:	2301      	movs	r3, #1
   d831a:	7023      	strb	r3, [r4, #0]
            //delay(8000);
        }
        if (state.notifyVapor==true)
   d831c:	f895 3419 	ldrb.w	r3, [r5, #1049]	; 0x419
   d8320:	b303      	cbz	r3, d8364 <_Z11readSensorsv+0xddc>
        {
          #ifdef Version_2
          Blynk.logEvent("vape_alert");
   d8322:	4966      	ldr	r1, [pc, #408]	; (d84bc <_Z11readSensorsv+0xf34>)
   d8324:	485d      	ldr	r0, [pc, #372]	; (d849c <_Z11readSensorsv+0xf14>)
   d8326:	f7fe ff3f 	bl	d71a8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8logEventIA13_cEEvRKT_>
   d832a:	f002 f91f 	bl	da56c <HAL_Timer_Get_Milli_Seconds>
          VapeAlertTime = millis();
   d832e:	4b64      	ldr	r3, [pc, #400]	; (d84c0 <_Z11readSensorsv+0xf38>)
   d8330:	6018      	str	r0, [r3, #0]
   d8332:	e017      	b.n	d8364 <_Z11readSensorsv+0xddc>
   d8334:	f002 f91a 	bl	da56c <HAL_Timer_Get_Milli_Seconds>
          #endif
        }
      }
      else
      {
       unsigned long elapsed = millis() - VapeAlertTime;
   d8338:	4b61      	ldr	r3, [pc, #388]	; (d84c0 <_Z11readSensorsv+0xf38>)
  	   alertMessage=String::format("Vape Alert total time %ul milliseconds", elapsed/10);
   d833a:	4962      	ldr	r1, [pc, #392]	; (d84c4 <_Z11readSensorsv+0xf3c>)
   d833c:	681a      	ldr	r2, [r3, #0]
   d833e:	230a      	movs	r3, #10
   d8340:	1a82      	subs	r2, r0, r2
   d8342:	a817      	add	r0, sp, #92	; 0x5c
   d8344:	fbb2 f2f3 	udiv	r2, r2, r3
   d8348:	f002 fed4 	bl	db0f4 <_ZN6String6formatEPKcz>
   d834c:	a917      	add	r1, sp, #92	; 0x5c
   d834e:	a807      	add	r0, sp, #28
   d8350:	f002 fe09 	bl	daf66 <_ZN6StringaSEOS_>
   d8354:	a817      	add	r0, sp, #92	; 0x5c
   d8356:	f002 fd75 	bl	dae44 <_ZN6StringD1Ev>
       DEBUG_PRINTLN(alertMessage);
   d835a:	f003 ffb9 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d835e:	9907      	ldr	r1, [sp, #28]
   d8360:	f002 ff39 	bl	db1d6 <_ZN5Print7printlnEPKc>
        }
      }
      
    }

    if (batCharge<state.batThreshold)
   d8364:	4b58      	ldr	r3, [pc, #352]	; (d84c8 <_Z11readSensorsv+0xf40>)
   d8366:	4c59      	ldr	r4, [pc, #356]	; (d84cc <_Z11readSensorsv+0xf44>)
   d8368:	edd3 7a00 	vldr	s15, [r3]
   d836c:	eeb4 8ae7 	vcmpe.f32	s16, s15
   d8370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    {
      batCurrentAlert = true;
   d8374:	bf4c      	ite	mi
   d8376:	2301      	movmi	r3, #1
    }
    else
    {
      batCurrentAlert = false;
   d8378:	2300      	movpl	r3, #0
   d837a:	7023      	strb	r3, [r4, #0]
    }

    if (batAlertChanged())
   d837c:	f7fd fbcc 	bl	d5b18 <_Z15batAlertChangedv>
   d8380:	b140      	cbz	r0, d8394 <_Z11readSensorsv+0xe0c>
    {
      if (batCurrentAlert)
   d8382:	7823      	ldrb	r3, [r4, #0]
   d8384:	b133      	cbz	r3, d8394 <_Z11readSensorsv+0xe0c>
      {
       if (state.notifyBattery==true)
   d8386:	f895 341b 	ldrb.w	r3, [r5, #1051]	; 0x41b
   d838a:	b11b      	cbz	r3, d8394 <_Z11readSensorsv+0xe0c>
        {
          #ifdef Version_2
          Blynk.logEvent("low_battery_alert_20");
   d838c:	4950      	ldr	r1, [pc, #320]	; (d84d0 <_Z11readSensorsv+0xf48>)
   d838e:	4843      	ldr	r0, [pc, #268]	; (d849c <_Z11readSensorsv+0xf14>)
   d8390:	f7fe ff0a 	bl	d71a8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8logEventIA13_cEEvRKT_>

    // Particle.publish("Test readings",datastring,60,PRIVATE);
    DEBUG_PRINTLN(datastring);
    sensorValid = true;
    String statusMessage;
    String alertMessage;
   d8394:	a807      	add	r0, sp, #28
   d8396:	f002 fd55 	bl	dae44 <_ZN6StringD1Ev>
    Blynk.virtualWrite(V8, field8);   

    // Particle.publish("Test readings",datastring,60,PRIVATE);
    DEBUG_PRINTLN(datastring);
    sensorValid = true;
    String statusMessage;
   d839a:	a803      	add	r0, sp, #12
   d839c:	f002 fd52 	bl	dae44 <_ZN6StringD1Ev>
   d83a0:	e00e      	b.n	d83c0 <_Z11readSensorsv+0xe38>
    }

  }
  else 
  { 
    if (!Sensor.beginMeasuring())
   d83a2:	4620      	mov	r0, r4
   d83a4:	f001 ff55 	bl	da252 <_ZN5SPS3014beginMeasuringEv>
   d83a8:	b950      	cbnz	r0, d83c0 <_Z11readSensorsv+0xe38>
    {
      DEBUG_PRINTLN("Unable to read SPS30 - resetting device 1");
   d83aa:	f003 ff91 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d83ae:	4949      	ldr	r1, [pc, #292]	; (d84d4 <_Z11readSensorsv+0xf4c>)
   d83b0:	f002 ff11 	bl	db1d6 <_ZN5Print7printlnEPKc>
      delay(1000);
   d83b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d83b8:	f003 fa1e 	bl	db7f8 <delay>
      System.reset();
   d83bc:	f002 fc86 	bl	daccc <_ZN11SystemClass5resetEv>
    }

  }
  if (terminalDebug) Blynk.virtualWrite(V21, String(readingCount)+"\n");
   d83c0:	4b45      	ldr	r3, [pc, #276]	; (d84d8 <_Z11readSensorsv+0xf50>)
   d83c2:	4c46      	ldr	r4, [pc, #280]	; (d84dc <_Z11readSensorsv+0xf54>)
   d83c4:	781b      	ldrb	r3, [r3, #0]
   d83c6:	b1f3      	cbz	r3, d8406 <_Z11readSensorsv+0xe7e>
   d83c8:	220a      	movs	r2, #10
   d83ca:	6821      	ldr	r1, [r4, #0]
   d83cc:	a813      	add	r0, sp, #76	; 0x4c
   d83ce:	f002 fdf5 	bl	dafbc <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d83d2:	a913      	add	r1, sp, #76	; 0x4c
   d83d4:	a817      	add	r0, sp, #92	; 0x5c
   d83d6:	f002 fdbb 	bl	daf50 <_ZN6StringC1ERKS_>
   d83da:	4941      	ldr	r1, [pc, #260]	; (d84e0 <_Z11readSensorsv+0xf58>)
   d83dc:	a817      	add	r0, sp, #92	; 0x5c
   d83de:	f002 fe23 	bl	db028 <_ZplRK15StringSumHelperPKc>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d83e2:	4601      	mov	r1, r0
   d83e4:	a81b      	add	r0, sp, #108	; 0x6c
   d83e6:	f002 fdb3 	bl	daf50 <_ZN6StringC1ERKS_>
   d83ea:	aa1b      	add	r2, sp, #108	; 0x6c
   d83ec:	2115      	movs	r1, #21
   d83ee:	482b      	ldr	r0, [pc, #172]	; (d849c <_Z11readSensorsv+0xf14>)
   d83f0:	f7fe fac2 	bl	d6978 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII15StringSumHelperEEEviDpT_>
   d83f4:	a81b      	add	r0, sp, #108	; 0x6c
   d83f6:	f002 fd25 	bl	dae44 <_ZN6StringD1Ev>
   d83fa:	a817      	add	r0, sp, #92	; 0x5c
   d83fc:	f002 fd22 	bl	dae44 <_ZN6StringD1Ev>
   d8400:	a813      	add	r0, sp, #76	; 0x4c
   d8402:	f002 fd1f 	bl	dae44 <_ZN6StringD1Ev>
  DEBUG_PRINT(millis());
   d8406:	f003 ff63 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d840a:	4605      	mov	r5, r0
   d840c:	f002 f8ae 	bl	da56c <HAL_Timer_Get_Milli_Seconds>
   d8410:	220a      	movs	r2, #10
   d8412:	4601      	mov	r1, r0
   d8414:	4628      	mov	r0, r5
   d8416:	f002 ff08 	bl	db22a <_ZN5Print5printEmi>
  DEBUG_PRINT(": ");
   d841a:	f003 ff59 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d841e:	4931      	ldr	r1, [pc, #196]	; (d84e4 <_Z11readSensorsv+0xf5c>)
   d8420:	f002 fec6 	bl	db1b0 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(readingCount);
   d8424:	f003 ff54 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d8428:	220a      	movs	r2, #10
   d842a:	6821      	ldr	r1, [r4, #0]
   d842c:	f002 ff4e 	bl	db2cc <_ZN5Print7printlnEii>
  DEBUG_PRINTLN();
   d8430:	f003 ff4e 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d8434:	f002 fec3 	bl	db1be <_ZN5Print7printlnEv>
  readingCount++;
   d8438:	6823      	ldr	r3, [r4, #0]
   d843a:	3301      	adds	r3, #1
   d843c:	6023      	str	r3, [r4, #0]
}
   d843e:	b025      	add	sp, #148	; 0x94
   d8440:	ecbd 8b02 	vpop	{d8}
   d8444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8448:	f004 fdd2 	bl	dcff0 <_Z19__fetch_global_Wirev>
    bool sps30OK = false;
    uint32_t sps30start = millis();

    while (!sps30OK && millis()-sps30start<8000)
    {
      if (!Sensor.begin())
   d844c:	4601      	mov	r1, r0
   d844e:	4826      	ldr	r0, [pc, #152]	; (d84e8 <_Z11readSensorsv+0xf60>)
   d8450:	f001 ff04 	bl	da25c <_ZN5SPS305beginER7TwoWire>
   d8454:	2800      	cmp	r0, #0
   d8456:	f47f aadf 	bne.w	d7a18 <_Z11readSensorsv+0x490>
      {
        DEBUG_PRINTLN("Unable to read SPS30 - trying again");
   d845a:	f003 ff39 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d845e:	4923      	ldr	r1, [pc, #140]	; (d84ec <_Z11readSensorsv+0xf64>)
   d8460:	f002 feb9 	bl	db1d6 <_ZN5Print7printlnEPKc>
        delay(1000);
   d8464:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d8468:	f003 f9c6 	bl	db7f8 <delay>
   d846c:	f7ff bacb 	b.w	d7a06 <_Z11readSensorsv+0x47e>
   d8470:	f002 f87c 	bl	da56c <HAL_Timer_Get_Milli_Seconds>
      System.reset();    
    }

    // Delay 8 seconds or until the SPS30 is ready
    unsigned long waitForSPS30 = millis();
    while ((!Sensor.dataAvailable()) && (millis()-waitForSPS30<8100))
   d8474:	1b00      	subs	r0, r0, r4
   d8476:	42b0      	cmp	r0, r6
   d8478:	f63f aade 	bhi.w	d7a38 <_Z11readSensorsv+0x4b0>
    {
      delay(100);
   d847c:	2064      	movs	r0, #100	; 0x64
   d847e:	f003 f9bb 	bl	db7f8 <delay>
      checkAccel();
   d8482:	f7fe fead 	bl	d71e0 <_Z10checkAccelv>
      System.reset();    
    }

    // Delay 8 seconds or until the SPS30 is ready
    unsigned long waitForSPS30 = millis();
    while ((!Sensor.dataAvailable()) && (millis()-waitForSPS30<8100))
   d8486:	f7ff bad1 	b.w	d7a2c <_Z11readSensorsv+0x4a4>
   d848a:	bf00      	nop
   d848c:	000e6fad 	.word	0x000e6fad
   d8490:	2003d7e8 	.word	0x2003d7e8
   d8494:	000e6fab 	.word	0x000e6fab
   d8498:	000e7431 	.word	0x000e7431
   d849c:	2003e234 	.word	0x2003e234
   d84a0:	000e7429 	.word	0x000e7429
   d84a4:	2003d5a0 	.word	0x2003d5a0
   d84a8:	2003d7f8 	.word	0x2003d7f8
   d84ac:	2003da40 	.word	0x2003da40
   d84b0:	000e743a 	.word	0x000e743a
   d84b4:	2003d56c 	.word	0x2003d56c
   d84b8:	000e7455 	.word	0x000e7455
   d84bc:	000e747e 	.word	0x000e747e
   d84c0:	2003e1a0 	.word	0x2003e1a0
   d84c4:	000e7489 	.word	0x000e7489
   d84c8:	2003de90 	.word	0x2003de90
   d84cc:	2003decd 	.word	0x2003decd
   d84d0:	000e74b0 	.word	0x000e74b0
   d84d4:	000e74c5 	.word	0x000e74c5
   d84d8:	2003da45 	.word	0x2003da45
   d84dc:	2003e230 	.word	0x2003e230
   d84e0:	000e6bf0 	.word	0x000e6bf0
   d84e4:	000e7dac 	.word	0x000e7dac
   d84e8:	2003e1ec 	.word	0x2003e1ec
   d84ec:	000e7362 	.word	0x000e7362
  connectWithoutWaiting();
  // Sync time if needed
  if (Time.isValid()&&!timeSynced)
  {
    rtc.setUnixTime(Time.now());
    if (abs(Time.now()-rtc.rtcNow())<10)
   d84f0:	480a      	ldr	r0, [pc, #40]	; (d851c <_Z11readSensorsv+0xf94>)
   d84f2:	f001 f8b2 	bl	d965a <_ZN8MCP7941x6rtcNowEv>
   d84f6:	4604      	mov	r4, r0
   d84f8:	f003 f96d 	bl	db7d6 <_ZN9TimeClass3nowEv>
   d84fc:	f7ff bac3 	b.w	d7a86 <_Z11readSensorsv+0x4fe>
      }
    }
    
    if (!sps30OK)
    {
      DEBUG_PRINTLN("Unable to read SPS30 - resetting device");
   d8500:	f003 fee6 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d8504:	4906      	ldr	r1, [pc, #24]	; (d8520 <_Z11readSensorsv+0xf98>)
   d8506:	f002 fe66 	bl	db1d6 <_ZN5Print7printlnEPKc>
      delay(1000);
   d850a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d850e:	f003 f973 	bl	db7f8 <delay>
      System.reset();    
   d8512:	f002 fbdb 	bl	daccc <_ZN11SystemClass5resetEv>
   d8516:	f7ff ba84 	b.w	d7a22 <_Z11readSensorsv+0x49a>
   d851a:	bf00      	nop
   d851c:	2003e174 	.word	0x2003e174
   d8520:	000e74ef 	.word	0x000e74ef

000d8524 <setup>:
      Particle.publish("gmtOffset", "America/New_York", PRIVATE);  
  }
}

void setup()
{
   d8524:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8526:	b08b      	sub	sp, #44	; 0x2c
   d8528:	f002 f820 	bl	da56c <HAL_Timer_Get_Milli_Seconds>
  CycleOnTime = millis();
   d852c:	4b84      	ldr	r3, [pc, #528]	; (d8740 <setup+0x21c>)
  // Used to monitor debug without USB connection
  Serial1.begin(115200);
  delay(100);

  // Buzzer connected to D7
  pinMode(buzzer, OUTPUT);
   d852e:	4c85      	ldr	r4, [pc, #532]	; (d8744 <setup+0x220>)
  }
}

void setup()
{
  CycleOnTime = millis();
   d8530:	6018      	str	r0, [r3, #0]
  Wire.setSpeed(20000);
   d8532:	f004 fd5d 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d8536:	f644 6120 	movw	r1, #20000	; 0x4e20
   d853a:	f003 ff41 	bl	dc3c0 <_ZN7TwoWire8setSpeedEm>
  // Debug console
  pinMode(D8, INPUT_PULLDOWN);
   d853e:	2103      	movs	r1, #3
   d8540:	2008      	movs	r0, #8
   d8542:	f004 fcb9 	bl	dceb8 <pinMode>
  Serial.begin(115200);
   d8546:	f003 fe11 	bl	dc16c <_Z16_fetch_usbserialv>
   d854a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d854e:	f003 fe01 	bl	dc154 <_ZN9USBSerial5beginEl>
  // Used to monitor debug without USB connection
  Serial1.begin(115200);
   d8552:	f003 febd 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d8556:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d855a:	f003 feb3 	bl	dc2c4 <_ZN11USARTSerial5beginEm>
  delay(100);
   d855e:	2064      	movs	r0, #100	; 0x64
   d8560:	f003 f94a 	bl	db7f8 <delay>

  // Buzzer connected to D7
  pinMode(buzzer, OUTPUT);
   d8564:	2101      	movs	r1, #1
   d8566:	8820      	ldrh	r0, [r4, #0]
   d8568:	f004 fca6 	bl	dceb8 <pinMode>
  digitalWrite(buzzer, LOW);
   d856c:	2100      	movs	r1, #0
   d856e:	8820      	ldrh	r0, [r4, #0]
   d8570:	f004 fcb3 	bl	dceda <digitalWrite>

  Wire.begin();
   d8574:	f004 fd3c 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d8578:	f003 ff26 	bl	dc3c8 <_ZN7TwoWire5beginEv>
  delay(100);
   d857c:	2064      	movs	r0, #100	; 0x64
   d857e:	f003 f93b 	bl	db7f8 <delay>
  DEBUG_PRINTLN("Start Setup() function");
   d8582:	f003 fea5 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d8586:	4970      	ldr	r1, [pc, #448]	; (d8748 <setup+0x224>)
   d8588:	f002 fe25 	bl	db1d6 <_ZN5Print7printlnEPKc>
  // the Write.endTransmisstion to see if
  // a device did acknowledge to the address.
  byte expandererror, expanderaddress;

  expanderaddress = 0x20; // MCP23017 address
  Wire.beginTransmission(expanderaddress);
   d858c:	f004 fd30 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d8590:	2120      	movs	r1, #32
   d8592:	f003 ff39 	bl	dc408 <_ZN7TwoWire17beginTransmissionEh>
  expandererror = Wire.endTransmission();
   d8596:	f004 fd2b 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d859a:	f003 ff40 	bl	dc41e <_ZN7TwoWire15endTransmissionEv>

  // Try again if there is an error
  if (!expandererror==0)
   d859e:	2800      	cmp	r0, #0
   d85a0:	d041      	beq.n	d8626 <setup+0x102>
  {
    Wire.reset();
   d85a2:	f004 fd25 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d85a6:	f003 ff41 	bl	dc42c <_ZN7TwoWire5resetEv>
    Wire.beginTransmission(expanderaddress);
   d85aa:	f004 fd21 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d85ae:	2120      	movs	r1, #32
   d85b0:	f003 ff2a 	bl	dc408 <_ZN7TwoWire17beginTransmissionEh>
    expandererror = Wire.endTransmission();
   d85b4:	f004 fd1c 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d85b8:	f003 ff31 	bl	dc41e <_ZN7TwoWire15endTransmissionEv>
  }

  // Blink LED and reset if there is an error
  if (!expandererror == 0)
   d85bc:	b398      	cbz	r0, d8626 <setup+0x102>
  {
    DEBUG_PRINTLN("Unable to read Expander - resetting in 9 seconds");
   d85be:	f003 fe87 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d85c2:	4962      	ldr	r1, [pc, #392]	; (d874c <setup+0x228>)
   d85c4:	f002 fe07 	bl	db1d6 <_ZN5Print7printlnEPKc>
   d85c8:	4b61      	ldr	r3, [pc, #388]	; (d8750 <setup+0x22c>)
    Particle.publish("Error","Unable to read Expander - resetting in 9 seconds",PRIVATE);
   d85ca:	4a60      	ldr	r2, [pc, #384]	; (d874c <setup+0x228>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d85cc:	781b      	ldrb	r3, [r3, #0]
   d85ce:	4961      	ldr	r1, [pc, #388]	; (d8754 <setup+0x230>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d85d0:	2400      	movs	r4, #0
   d85d2:	a806      	add	r0, sp, #24
   d85d4:	f88d 4000 	strb.w	r4, [sp]
   d85d8:	f7fc ff1c 	bl	d5414 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.24.constprop.29>
   d85dc:	a807      	add	r0, sp, #28
   d85de:	f7fd fac3 	bl	d5b68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    blinkRed.setActive(true);
   d85e2:	2101      	movs	r1, #1
   d85e4:	485c      	ldr	r0, [pc, #368]	; (d8758 <setup+0x234>)
   d85e6:	f7fc ff59 	bl	d549c <_ZN8particle9LEDStatus9setActiveEb>
    delay(3000);
   d85ea:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d85ee:	f003 f903 	bl	db7f8 <delay>
    blinkRed.setActive(false);
   d85f2:	4621      	mov	r1, r4
   d85f4:	4858      	ldr	r0, [pc, #352]	; (d8758 <setup+0x234>)
   d85f6:	f7fc ff51 	bl	d549c <_ZN8particle9LEDStatus9setActiveEb>
    blinkYellow.setActive(true);
   d85fa:	2101      	movs	r1, #1
   d85fc:	4857      	ldr	r0, [pc, #348]	; (d875c <setup+0x238>)
   d85fe:	f7fc ff4d 	bl	d549c <_ZN8particle9LEDStatus9setActiveEb>
    delay(3000);
   d8602:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d8606:	f003 f8f7 	bl	db7f8 <delay>
    blinkYellow.setActive(false);
   d860a:	4621      	mov	r1, r4
   d860c:	4853      	ldr	r0, [pc, #332]	; (d875c <setup+0x238>)
   d860e:	f7fc ff45 	bl	d549c <_ZN8particle9LEDStatus9setActiveEb>
    blinkRed.setActive(true);
   d8612:	2101      	movs	r1, #1
   d8614:	4850      	ldr	r0, [pc, #320]	; (d8758 <setup+0x234>)
   d8616:	f7fc ff41 	bl	d549c <_ZN8particle9LEDStatus9setActiveEb>
    delay(3000);
   d861a:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d861e:	f003 f8eb 	bl	db7f8 <delay>
    System.reset();
   d8622:	f002 fb53 	bl	daccc <_ZN11SystemClass5resetEv>
  }
  // END CHECK
  //////////////////////////////////////////////////////////

  // Need this to switch on the power
  power.begin();
   d8626:	484e      	ldr	r0, [pc, #312]	; (d8760 <setup+0x23c>)
   d8628:	f001 f8f8 	bl	d981c <_ZN12IoTNodePower5beginEv>
  power.setPowerON(EXT3V3,true);
   d862c:	2201      	movs	r2, #1
   d862e:	2102      	movs	r1, #2
   d8630:	484b      	ldr	r0, [pc, #300]	; (d8760 <setup+0x23c>)
   d8632:	f001 f99d 	bl	d9970 <_ZN12IoTNodePower10setPowerONE9powerNameb>
  power.setPowerON(EXT5V,true);
   d8636:	2201      	movs	r2, #1
   d8638:	2103      	movs	r1, #3
   d863a:	4849      	ldr	r0, [pc, #292]	; (d8760 <setup+0x23c>)
   d863c:	f001 f998 	bl	d9970 <_ZN12IoTNodePower10setPowerONE9powerNameb>
  // Allow time to settle
  delay(100);
   d8640:	2064      	movs	r0, #100	; 0x64
   d8642:	f003 f8d9 	bl	db7f8 <delay>

  uint32_t d1=0;
   d8646:	aa0a      	add	r2, sp, #40	; 0x28
   d8648:	2100      	movs	r1, #0
   d864a:	f842 1d1c 	str.w	r1, [r2, #-28]!
	fram.readData(0, (uint8_t *)&d1, sizeof(d1));
   d864e:	2304      	movs	r3, #4
   d8650:	4844      	ldr	r0, [pc, #272]	; (d8764 <setup+0x240>)
   d8652:	f001 f847 	bl	d96e4 <_ZN10MB85RC256V8readDataEjPhj>
	Serial1.printlnf("d1=%u", d1);
   d8656:	f003 fe3b 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d865a:	9b03      	ldr	r3, [sp, #12]
   d865c:	4a42      	ldr	r2, [pc, #264]	; (d8768 <setup+0x244>)
   d865e:	2101      	movs	r1, #1
   d8660:	f002 fefe 	bl	db460 <_ZN5Print11printf_implEbPKcz>

  SleepResult result = System.sleepResult();
   d8664:	a804      	add	r0, sp, #16
   d8666:	4941      	ldr	r1, [pc, #260]	; (d876c <setup+0x248>)
   d8668:	f7fc feec 	bl	d5444 <_ZN11SystemClass11sleepResultEv>
  switch (result.reason()) {
   d866c:	a804      	add	r0, sp, #16
   d866e:	f002 fb87 	bl	dad80 <_ZNK11SleepResult6reasonEv>
   d8672:	2803      	cmp	r0, #3
   d8674:	d814      	bhi.n	d86a0 <setup+0x17c>
   d8676:	e8df f000 	tbb	[pc, r0]
   d867a:	0602      	.short	0x0602
   d867c:	0e0a      	.short	0x0e0a
    case WAKEUP_REASON_NONE: {
      DEBUG_PRINTLN("Device did not wake up from Particle sleep");
   d867e:	f003 fe27 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d8682:	493b      	ldr	r1, [pc, #236]	; (d8770 <setup+0x24c>)
   d8684:	e00a      	b.n	d869c <setup+0x178>
      break;
    }
    case WAKEUP_REASON_PIN: {
      DEBUG_PRINTLN("Device was woken up by a pin");
   d8686:	f003 fe23 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d868a:	493a      	ldr	r1, [pc, #232]	; (d8774 <setup+0x250>)
   d868c:	e006      	b.n	d869c <setup+0x178>
      break;
    }
    case WAKEUP_REASON_RTC: {
      DEBUG_PRINTLN("Device was woken up by the Particle RTC (after a specified number of seconds)");
   d868e:	f003 fe1f 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d8692:	4939      	ldr	r1, [pc, #228]	; (d8778 <setup+0x254>)
   d8694:	e002      	b.n	d869c <setup+0x178>
      break;
    }
    case WAKEUP_REASON_PIN_OR_RTC: {
      DEBUG_PRINTLN("Device was woken up by either a pin or the Particle RTC (after a specified number of seconds)");
   d8696:	f003 fe1b 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d869a:	4938      	ldr	r1, [pc, #224]	; (d877c <setup+0x258>)
   d869c:	f002 fd9b 	bl	db1d6 <_ZN5Print7printlnEPKc>
      break;
    }
  }
  DEBUG_PRINTLN("Checking i2c devices...");
   d86a0:	f003 fe16 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d86a4:	4936      	ldr	r1, [pc, #216]	; (d8780 <setup+0x25c>)
   d86a6:	4f37      	ldr	r7, [pc, #220]	; (d8784 <setup+0x260>)

  for (size_t x=0; x<i2cLength;++x)
  {
    DEBUG_PRINT(i2cNames[x]);
    DEBUG_PRINT(": ");
    DEBUG_PRINTLN(i2cExists[x]);
   d86a8:	4e37      	ldr	r6, [pc, #220]	; (d8788 <setup+0x264>)
    case WAKEUP_REASON_PIN_OR_RTC: {
      DEBUG_PRINTLN("Device was woken up by either a pin or the Particle RTC (after a specified number of seconds)");
      break;
    }
  }
  DEBUG_PRINTLN("Checking i2c devices...");
   d86aa:	f002 fd94 	bl	db1d6 <_ZN5Print7printlnEPKc>

  bool i2cOK = checkI2CDevices(i2cNames, i2cAddr, i2cLength, i2cExists);
   d86ae:	4b36      	ldr	r3, [pc, #216]	; (d8788 <setup+0x264>)
   d86b0:	4936      	ldr	r1, [pc, #216]	; (d878c <setup+0x268>)
   d86b2:	4834      	ldr	r0, [pc, #208]	; (d8784 <setup+0x260>)
   d86b4:	2207      	movs	r2, #7
   d86b6:	f7fc ffeb 	bl	d5690 <_Z15checkI2CDevicesP6StringPhjPb>

  for (size_t x=0; x<i2cLength;++x)
   d86ba:	2500      	movs	r5, #0
      break;
    }
  }
  DEBUG_PRINTLN("Checking i2c devices...");

  bool i2cOK = checkI2CDevices(i2cNames, i2cAddr, i2cLength, i2cExists);
   d86bc:	4604      	mov	r4, r0

  for (size_t x=0; x<i2cLength;++x)
  {
    DEBUG_PRINT(i2cNames[x]);
   d86be:	f003 fe07 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d86c2:	012b      	lsls	r3, r5, #4
   d86c4:	59d9      	ldr	r1, [r3, r7]
   d86c6:	f002 fd73 	bl	db1b0 <_ZN5Print5printEPKc>
    DEBUG_PRINT(": ");
   d86ca:	f003 fe01 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d86ce:	4930      	ldr	r1, [pc, #192]	; (d8790 <setup+0x26c>)
   d86d0:	f002 fd6e 	bl	db1b0 <_ZN5Print5printEPKc>
    DEBUG_PRINTLN(i2cExists[x]);
   d86d4:	f003 fdfc 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d86d8:	5d71      	ldrb	r1, [r6, r5]
   d86da:	220a      	movs	r2, #10
  }
  DEBUG_PRINTLN("Checking i2c devices...");

  bool i2cOK = checkI2CDevices(i2cNames, i2cAddr, i2cLength, i2cExists);

  for (size_t x=0; x<i2cLength;++x)
   d86dc:	3501      	adds	r5, #1
  {
    DEBUG_PRINT(i2cNames[x]);
    DEBUG_PRINT(": ");
    DEBUG_PRINTLN(i2cExists[x]);
   d86de:	f002 fdf5 	bl	db2cc <_ZN5Print7printlnEii>
  }
  DEBUG_PRINTLN("Checking i2c devices...");

  bool i2cOK = checkI2CDevices(i2cNames, i2cAddr, i2cLength, i2cExists);

  for (size_t x=0; x<i2cLength;++x)
   d86e2:	2d07      	cmp	r5, #7
   d86e4:	d1eb      	bne.n	d86be <setup+0x19a>
  {
    DEBUG_PRINT(i2cNames[x]);
    DEBUG_PRINT(": ");
    DEBUG_PRINTLN(i2cExists[x]);
  }
  if (!i2cOK)
   d86e6:	2c00      	cmp	r4, #0
   d86e8:	d15a      	bne.n	d87a0 <setup+0x27c>
  {
    StateString = "ERR";
   d86ea:	492a      	ldr	r1, [pc, #168]	; (d8794 <setup+0x270>)
   d86ec:	482a      	ldr	r0, [pc, #168]	; (d8798 <setup+0x274>)
   d86ee:	f002 fc42 	bl	daf76 <_ZN6StringaSEPKc>
    DEBUG_PRINTLN("I2C Issue");
   d86f2:	f003 fded 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d86f6:	4929      	ldr	r1, [pc, #164]	; (d879c <setup+0x278>)
   d86f8:	f002 fd6d 	bl	db1d6 <_ZN5Print7printlnEPKc>
    RGB.control(true);
   d86fc:	2001      	movs	r0, #1
   d86fe:	f003 f8b8 	bl	db872 <_ZN8RGBClass7controlEb>
    // the following sets the RGB LED to red
    RGB.color(255, 0, 0);
   d8702:	4622      	mov	r2, r4
   d8704:	4621      	mov	r1, r4
   d8706:	20ff      	movs	r0, #255	; 0xff
   d8708:	f003 f8c3 	bl	db892 <_ZN8RGBClass5colorEiii>
    delay(3000);
   d870c:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d8710:	f003 f872 	bl	db7f8 <delay>
    // resume normal operation
    RGB.control(false);    
   d8714:	4620      	mov	r0, r4
   d8716:	f003 f8ac 	bl	db872 <_ZN8RGBClass7controlEb>
    digitalWrite(buzzer, HIGH);
    delay(100);
    digitalWrite(buzzer, LOW);
#endif
    //Generate 9 pulses on SCL to tell slave to release the bus 
    Wire.reset();     
   d871a:	f004 fc69 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d871e:	f003 fe85 	bl	dc42c <_ZN7TwoWire5resetEv>
    if (!Wire.isEnabled()) {
   d8722:	f004 fc65 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d8726:	f003 fe7d 	bl	dc424 <_ZN7TwoWire9isEnabledEv>
   d872a:	b918      	cbnz	r0, d8734 <setup+0x210>
      Wire.begin();
   d872c:	f004 fc60 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d8730:	f003 fe4a 	bl	dc3c8 <_ZN7TwoWire5beginEv>
    }
    Wire.end();
   d8734:	f004 fc5c 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d8738:	f003 fe4c 	bl	dc3d4 <_ZN7TwoWire3endEv>
   d873c:	e039      	b.n	d87b2 <setup+0x28e>
   d873e:	bf00      	nop
   d8740:	2003e178 	.word	0x2003e178
   d8744:	2003d56c 	.word	0x2003d56c
   d8748:	000e7517 	.word	0x000e7517
   d874c:	000e72d9 	.word	0x000e72d9
   d8750:	2003d714 	.word	0x2003d714
   d8754:	000e730a 	.word	0x000e730a
   d8758:	2003d6c8 	.word	0x2003d6c8
   d875c:	2003d6f4 	.word	0x2003d6f4
   d8760:	2003deac 	.word	0x2003deac
   d8764:	2003d6e8 	.word	0x2003d6e8
   d8768:	000e7310 	.word	0x000e7310
   d876c:	2003e278 	.word	0x2003e278
   d8770:	000e752e 	.word	0x000e752e
   d8774:	000e7559 	.word	0x000e7559
   d8778:	000e7576 	.word	0x000e7576
   d877c:	000e75c4 	.word	0x000e75c4
   d8780:	000e7316 	.word	0x000e7316
   d8784:	2003d718 	.word	0x2003d718
   d8788:	2003df10 	.word	0x2003df10
   d878c:	2003d5a4 	.word	0x2003d5a4
   d8790:	000e7dac 	.word	0x000e7dac
   d8794:	000e732e 	.word	0x000e732e
   d8798:	2003d7d8 	.word	0x2003d7d8
   d879c:	000e7332 	.word	0x000e7332
  }
  else
  {
    StateString = "RDY";
   d87a0:	4961      	ldr	r1, [pc, #388]	; (d8928 <setup+0x404>)
   d87a2:	4862      	ldr	r0, [pc, #392]	; (d892c <setup+0x408>)
   d87a4:	f002 fbe7 	bl	daf76 <_ZN6StringaSEPKc>
    DEBUG_PRINTLN("I2C OK");
   d87a8:	f003 fd92 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d87ac:	4960      	ldr	r1, [pc, #384]	; (d8930 <setup+0x40c>)
   d87ae:	f002 fd12 	bl	db1d6 <_ZN5Print7printlnEPKc>
    digitalWrite(buzzer, HIGH);
    delay(5);
    digitalWrite(buzzer, LOW);
    #endif
  }
  delay(200);
   d87b2:	20c8      	movs	r0, #200	; 0xc8
   d87b4:	f003 f820 	bl	db7f8 <delay>
  if (!i2cOK)
   d87b8:	b90c      	cbnz	r4, d87be <setup+0x29a>
  {
    System.reset();
   d87ba:	f002 fa87 	bl	daccc <_ZN11SystemClass5resetEv>
  }

  long int clockTime = rtc.rtcNow();
   d87be:	485d      	ldr	r0, [pc, #372]	; (d8934 <setup+0x410>)
  DEBUG_PRINTLN("Before");
  DEBUG_PRINT(clockTime);
  DEBUG_PRINTLN(": ");
  DEBUG_PRINTLN(String(Time.format(clockTime, TIME_FORMAT_ISO8601_FULL)));
   d87c0:	4d5d      	ldr	r5, [pc, #372]	; (d8938 <setup+0x414>)
  if (!i2cOK)
  {
    System.reset();
  }

  long int clockTime = rtc.rtcNow();
   d87c2:	f000 ff4a 	bl	d965a <_ZN8MCP7941x6rtcNowEv>
   d87c6:	4604      	mov	r4, r0
  DEBUG_PRINTLN("Before");
   d87c8:	f003 fd82 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d87cc:	495b      	ldr	r1, [pc, #364]	; (d893c <setup+0x418>)
   d87ce:	f002 fd02 	bl	db1d6 <_ZN5Print7printlnEPKc>
  DEBUG_PRINT(clockTime);
   d87d2:	f003 fd7d 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d87d6:	220a      	movs	r2, #10
   d87d8:	4621      	mov	r1, r4
   d87da:	f002 fd55 	bl	db288 <_ZN5Print5printEli>
  DEBUG_PRINTLN(": ");
   d87de:	f003 fd77 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d87e2:	4957      	ldr	r1, [pc, #348]	; (d8940 <setup+0x41c>)
   d87e4:	f002 fcf7 	bl	db1d6 <_ZN5Print7printlnEPKc>
  DEBUG_PRINTLN(String(Time.format(clockTime, TIME_FORMAT_ISO8601_FULL)));
   d87e8:	f003 fd72 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d87ec:	682b      	ldr	r3, [r5, #0]
   d87ee:	4955      	ldr	r1, [pc, #340]	; (d8944 <setup+0x420>)
   d87f0:	4622      	mov	r2, r4
   d87f2:	4606      	mov	r6, r0
   d87f4:	a806      	add	r0, sp, #24
   d87f6:	f002 ff9b 	bl	db730 <_ZN9TimeClass6formatElPKc>
   d87fa:	9906      	ldr	r1, [sp, #24]
   d87fc:	4630      	mov	r0, r6
   d87fe:	f002 fcea 	bl	db1d6 <_ZN5Print7printlnEPKc>
   d8802:	a806      	add	r0, sp, #24
   d8804:	f002 fb1e 	bl	dae44 <_ZN6StringD1Ev>
  if (clockTime<946684800||clockTime>4102444799)
   d8808:	4b4f      	ldr	r3, [pc, #316]	; (d8948 <setup+0x424>)
   d880a:	429c      	cmp	r4, r3
   d880c:	dc27      	bgt.n	d885e <setup+0x33a>
  {
    // 2019-01-01T00:00:00+00:00 in ISO 8601
    // Actual time is not important for rtc reset but needs to be a positive unix time
    rtc.setUnixTime(1262304000);
   d880e:	494f      	ldr	r1, [pc, #316]	; (d894c <setup+0x428>)
   d8810:	4848      	ldr	r0, [pc, #288]	; (d8934 <setup+0x410>)
   d8812:	f000 fed9 	bl	d95c8 <_ZN8MCP7941x11setUnixTimeEm>
    long int clockTime = rtc.rtcNow();
   d8816:	4847      	ldr	r0, [pc, #284]	; (d8934 <setup+0x410>)
   d8818:	f000 ff1f 	bl	d965a <_ZN8MCP7941x6rtcNowEv>
   d881c:	4604      	mov	r4, r0
    DEBUG_PRINTLN("After");
   d881e:	f003 fd57 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d8822:	494b      	ldr	r1, [pc, #300]	; (d8950 <setup+0x42c>)
   d8824:	f002 fcd7 	bl	db1d6 <_ZN5Print7printlnEPKc>
    DEBUG_PRINT(clockTime);
   d8828:	f003 fd52 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d882c:	220a      	movs	r2, #10
   d882e:	4621      	mov	r1, r4
   d8830:	f002 fd2a 	bl	db288 <_ZN5Print5printEli>
    DEBUG_PRINTLN(": ");
   d8834:	f003 fd4c 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d8838:	4941      	ldr	r1, [pc, #260]	; (d8940 <setup+0x41c>)
   d883a:	f002 fccc 	bl	db1d6 <_ZN5Print7printlnEPKc>
    DEBUG_PRINTLN(String(Time.format(clockTime, TIME_FORMAT_ISO8601_FULL)));
   d883e:	f003 fd47 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d8842:	682b      	ldr	r3, [r5, #0]
   d8844:	493f      	ldr	r1, [pc, #252]	; (d8944 <setup+0x420>)
   d8846:	4606      	mov	r6, r0
   d8848:	4622      	mov	r2, r4
   d884a:	a806      	add	r0, sp, #24
   d884c:	f002 ff70 	bl	db730 <_ZN9TimeClass6formatElPKc>
   d8850:	9906      	ldr	r1, [sp, #24]
   d8852:	4630      	mov	r0, r6
   d8854:	f002 fcbf 	bl	db1d6 <_ZN5Print7printlnEPKc>
   d8858:	a806      	add	r0, sp, #24
   d885a:	f002 faf3 	bl	dae44 <_ZN6StringD1Ev>
   d885e:	f004 fbc7 	bl	dcff0 <_Z19__fetch_global_Wirev>

  // Load state
  loadState();

  //Check for first time the firmware runs
  if (state.firstRunCheck != firstRunValue)
   d8862:	4c3c      	ldr	r4, [pc, #240]	; (d8954 <setup+0x430>)
   d8864:	4d3c      	ldr	r5, [pc, #240]	; (d8958 <setup+0x434>)
    DEBUG_PRINTLN("After");
    DEBUG_PRINT(clockTime);
    DEBUG_PRINTLN(": ");
    DEBUG_PRINTLN(String(Time.format(clockTime, TIME_FORMAT_ISO8601_FULL)));
  }
  Sensor.begin();
   d8866:	4601      	mov	r1, r0
   d8868:	483c      	ldr	r0, [pc, #240]	; (d895c <setup+0x438>)
   d886a:	f001 fcf7 	bl	da25c <_ZN5SPS305beginER7TwoWire>
  adxl.powerOn();
   d886e:	483c      	ldr	r0, [pc, #240]	; (d8960 <setup+0x43c>)
   d8870:	f001 f927 	bl	d9ac2 <_ZN7ADXL3457powerOnEv>

  // Load state
  loadState();
   d8874:	f7fc ffb8 	bl	d57e8 <_Z9loadStatev>

  //Check for first time the firmware runs
  if (state.firstRunCheck != firstRunValue)
   d8878:	6822      	ldr	r2, [r4, #0]
   d887a:	682b      	ldr	r3, [r5, #0]
   d887c:	429a      	cmp	r2, r3
   d887e:	d07f      	beq.n	d8980 <setup+0x45c>
  {
    // Then this is the first time running so set defaults
    DEBUG_PRINT("state.firstRunCheck = ");
   d8880:	f003 fd26 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d8884:	4937      	ldr	r1, [pc, #220]	; (d8964 <setup+0x440>)
   d8886:	f002 fc93 	bl	db1b0 <_ZN5Print5printEPKc>
    DEBUG_PRINTLN(state.firstRunCheck);
   d888a:	f003 fd21 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d888e:	220a      	movs	r2, #10
   d8890:	6821      	ldr	r1, [r4, #0]
   d8892:	f002 fd1b 	bl	db2cc <_ZN5Print7printlnEii>
    DEBUG_PRINT("firstRunValue = ");
   d8896:	f003 fd1b 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d889a:	4933      	ldr	r1, [pc, #204]	; (d8968 <setup+0x444>)
   d889c:	f002 fc88 	bl	db1b0 <_ZN5Print5printEPKc>
    DEBUG_PRINTLN(firstRunValue);    
   d88a0:	f003 fd16 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d88a4:	220a      	movs	r2, #10
   d88a6:	6829      	ldr	r1, [r5, #0]
   d88a8:	f002 fd10 	bl	db2cc <_ZN5Print7printlnEii>
    // state.firstRunCheck = firstRunValue; Move this to the initializeAppWidget() function
    state.numberOfReadings = 24;
   d88ac:	2318      	movs	r3, #24
   d88ae:	6063      	str	r3, [r4, #4]
    state.secondsBetweenReadings = 5;
   d88b0:	2305      	movs	r3, #5
   d88b2:	60a3      	str	r3, [r4, #8]
    state.zeroOff = -156;
    strcpy(state.expression,"pm1>300||pm2>300||pm4>300||pm10>300&&conc>100||temp>150");
   d88b4:	492d      	ldr	r1, [pc, #180]	; (d896c <setup+0x448>)
    DEBUG_PRINT("firstRunValue = ");
    DEBUG_PRINTLN(firstRunValue);    
    // state.firstRunCheck = firstRunValue; Move this to the initializeAppWidget() function
    state.numberOfReadings = 24;
    state.secondsBetweenReadings = 5;
    state.zeroOff = -156;
   d88b6:	4b2e      	ldr	r3, [pc, #184]	; (d8970 <setup+0x44c>)
   d88b8:	60e3      	str	r3, [r4, #12]
    strcpy(state.expression,"pm1>300||pm2>300||pm4>300||pm10>300&&conc>100||temp>150");
   d88ba:	f104 0010 	add.w	r0, r4, #16
   d88be:	f00b f8ed 	bl	e3a9c <strcpy>
    strcpy(state.email,"bistany@comcast.net");
   d88c2:	492c      	ldr	r1, [pc, #176]	; (d8974 <setup+0x450>)
   d88c4:	f504 7088 	add.w	r0, r4, #272	; 0x110
   d88c8:	f00b f8e8 	bl	e3a9c <strcpy>
    strcpy(state.batEmail,"bistany@comcast.net");
   d88cc:	4929      	ldr	r1, [pc, #164]	; (d8974 <setup+0x450>)
   d88ce:	f504 7004 	add.w	r0, r4, #528	; 0x210
   d88d2:	f00b f8e3 	bl	e3a9c <strcpy>
    strcpy(state.tamperEmail,"bistany@comcast.net");
   d88d6:	4927      	ldr	r1, [pc, #156]	; (d8974 <setup+0x450>)
   d88d8:	f504 7044 	add.w	r0, r4, #784	; 0x310
   d88dc:	f00b f8de 	bl	e3a9c <strcpy>
    state.batThreshold = 20.0;
   d88e0:	f504 6382 	add.w	r3, r4, #1040	; 0x410
   d88e4:	4a24      	ldr	r2, [pc, #144]	; (d8978 <setup+0x454>)
   d88e6:	601a      	str	r2, [r3, #0]
    state.lastAlert=false;
    state.batLastAlert=false;
    state.ActivityThreshold=100; // Which is set to 1 in Blynk
   d88e8:	2264      	movs	r2, #100	; 0x64
    strcpy(state.expression,"pm1>300||pm2>300||pm4>300||pm10>300&&conc>100||temp>150");
    strcpy(state.email,"bistany@comcast.net");
    strcpy(state.batEmail,"bistany@comcast.net");
    strcpy(state.tamperEmail,"bistany@comcast.net");
    state.batThreshold = 20.0;
    state.lastAlert=false;
   d88ea:	2300      	movs	r3, #0
    state.batLastAlert=false;
    state.ActivityThreshold=100; // Which is set to 1 in Blynk
   d88ec:	f8c4 241c 	str.w	r2, [r4, #1052]	; 0x41c
    state.buzzerTamper=true;  // Buzzer Tamper
   d88f0:	2201      	movs	r2, #1
    strcpy(state.expression,"pm1>300||pm2>300||pm4>300||pm10>300&&conc>100||temp>150");
    strcpy(state.email,"bistany@comcast.net");
    strcpy(state.batEmail,"bistany@comcast.net");
    strcpy(state.tamperEmail,"bistany@comcast.net");
    state.batThreshold = 20.0;
    state.lastAlert=false;
   d88f2:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
    state.batLastAlert=false;
   d88f6:	f884 3415 	strb.w	r3, [r4, #1045]	; 0x415
    state.ActivityThreshold=100; // Which is set to 1 in Blynk
    state.buzzerTamper=true;  // Buzzer Tamper
   d88fa:	f884 2417 	strb.w	r2, [r4, #1047]	; 0x417
    state.buzzerVapor=false; // Vapor Buzzer
   d88fe:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    state.notifyVapor=true; // Vapor Notify
   d8902:	f884 2419 	strb.w	r2, [r4, #1049]	; 0x419
    state.notifyTamper=true; // Tamper Notify
   d8906:	f884 241a 	strb.w	r2, [r4, #1050]	; 0x41a
    state.notifyBattery=true; // Battery Notify
   d890a:	f884 241b 	strb.w	r2, [r4, #1051]	; 0x41b
    state.OnTime=0;
   d890e:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    // firstRun = true;
    state.deviceZone=0; //America/New_York
   d8912:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
    // Save state
    // saveState(); // Move this to the initializeAppWidget() function
    DEBUG_PRINTLN("First run.");
   d8916:	f003 fcdb 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d891a:	4918      	ldr	r1, [pc, #96]	; (d897c <setup+0x458>)
   d891c:	f002 fc5b 	bl	db1d6 <_ZN5Print7printlnEPKc>
    // Force a connect here for the first time the device runs
    connect();
   d8920:	f7fe fcf2 	bl	d7308 <_Z7connectv>
   d8924:	e031      	b.n	d898a <setup+0x466>
   d8926:	bf00      	nop
   d8928:	000e733c 	.word	0x000e733c
   d892c:	2003d7d8 	.word	0x2003d7d8
   d8930:	000e7340 	.word	0x000e7340
   d8934:	2003e174 	.word	0x2003e174
   d8938:	2003d5b4 	.word	0x2003d5b4
   d893c:	000e7347 	.word	0x000e7347
   d8940:	000e7dac 	.word	0x000e7dac
   d8944:	2003e2ac 	.word	0x2003e2ac
   d8948:	386d437f 	.word	0x386d437f
   d894c:	4b3d3b00 	.word	0x4b3d3b00
   d8950:	000e734e 	.word	0x000e734e
   d8954:	2003da80 	.word	0x2003da80
   d8958:	2003d574 	.word	0x2003d574
   d895c:	2003e1ec 	.word	0x2003e1ec
   d8960:	2003da48 	.word	0x2003da48
   d8964:	000e7622 	.word	0x000e7622
   d8968:	000e7639 	.word	0x000e7639
   d896c:	000e764a 	.word	0x000e764a
   d8970:	c31c0000 	.word	0xc31c0000
   d8974:	000e7682 	.word	0x000e7682
   d8978:	41a00000 	.word	0x41a00000
   d897c:	000e7696 	.word	0x000e7696
  }
  else
  {
    DEBUG_PRINTLN("Not first run.");
   d8980:	f003 fca6 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d8984:	499c      	ldr	r1, [pc, #624]	; (d8bf8 <setup+0x6d4>)
   d8986:	f002 fc26 	bl	db1d6 <_ZN5Print7printlnEPKc>
  }


/////////////
// Setup ADXL345
  DEBUG_PRINT("ADXL345 Setup");
   d898a:	f003 fca1 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d898e:	499b      	ldr	r1, [pc, #620]	; (d8bfc <setup+0x6d8>)
   d8990:	f002 fc0e 	bl	db1b0 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN();
   d8994:	f003 fc9c 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d8998:	f002 fc11 	bl	db1be <_ZN5Print7printlnEv>
  // // *Temp Debug* Set the pin mode to output, so you may control it.
  // pinMode(ledPin, OUTPUT);
  // Power on the ADXL345
  adxl.powerOn();
   d899c:	4898      	ldr	r0, [pc, #608]	; (d8c00 <setup+0x6dc>)
   d899e:	f001 f890 	bl	d9ac2 <_ZN7ADXL3457powerOnEv>

// Configure Chip
  adxl.setRangeSetting(4);            // Give the range settings
   d89a2:	2104      	movs	r1, #4
   d89a4:	4896      	ldr	r0, [pc, #600]	; (d8c00 <setup+0x6dc>)
   d89a6:	f001 f8d9 	bl	d9b5c <_ZN7ADXL34515setRangeSettingEi>
                                      // Accepted values are 2g, 4g, 8g or 16g
                                      // Higher Values = Wider Measurement Range
                                      // Lower Values = Greater Sensitivity

   // No TAP or Freefall detection only Activity
  adxl.setActivityXYZ(1, 1, 1);       // Set to activate movement detection in the axes "adxl.setActivityXYZ(X, Y, Z);" (1 == ON, 0 == OFF)
   d89aa:	2301      	movs	r3, #1
   d89ac:	461a      	mov	r2, r3
   d89ae:	4619      	mov	r1, r3
   d89b0:	4893      	ldr	r0, [pc, #588]	; (d8c00 <setup+0x6dc>)
   d89b2:	f001 f942 	bl	d9c3a <_ZN7ADXL34514setActivityXYZEbbb>
  adxl.setActivityThreshold(state.ActivityThreshold);      // 62.5mg per increment   // Set activity   // Inactivity thresholds (0-255)
   d89b6:	f8d4 141c 	ldr.w	r1, [r4, #1052]	; 0x41c
   d89ba:	4891      	ldr	r0, [pc, #580]	; (d8c00 <setup+0x6dc>)
   d89bc:	f001 f8ee 	bl	d9b9c <_ZN7ADXL34520setActivityThresholdEi>
 
  adxl.setInactivityXYZ(1, 1, 1);     // Set to detect inactivity in all the axes "adxl.setInactivityXYZ(X, Y, Z);" (1 == ON, 0 == OFF)
   d89c0:	2301      	movs	r3, #1
   d89c2:	461a      	mov	r2, r3
   d89c4:	4619      	mov	r1, r3
   d89c6:	488e      	ldr	r0, [pc, #568]	; (d8c00 <setup+0x6dc>)
   d89c8:	f001 f956 	bl	d9c78 <_ZN7ADXL34516setInactivityXYZEbbb>
  adxl.setInactivityThreshold(state.ActivityThreshold);    // 62.5mg per increment   // Set inactivity // Inactivity thresholds (0-255)
   d89cc:	f8d4 141c 	ldr.w	r1, [r4, #1052]	; 0x41c
   d89d0:	488b      	ldr	r0, [pc, #556]	; (d8c00 <setup+0x6dc>)
   d89d2:	f001 f8e9 	bl	d9ba8 <_ZN7ADXL34522setInactivityThresholdEi>
  adxl.setTimeInactivity(10);         // How many seconds of no activity is inactive?
   d89d6:	210a      	movs	r1, #10
   d89d8:	4889      	ldr	r0, [pc, #548]	; (d8c00 <setup+0x6dc>)
   d89da:	f001 f8eb 	bl	d9bb4 <_ZN7ADXL34517setTimeInactivityEi>

     // Setting all interupts to take place on INT1 pin
  adxl.setImportantInterruptMapping(0, 0, 0, 1, 1);     // Sets "adxl.setEveryInterruptMapping(single tap, double tap, free fall, activity, inactivity);" 
   d89de:	2501      	movs	r5, #1
   d89e0:	2300      	movs	r3, #0
   d89e2:	461a      	mov	r2, r3
   d89e4:	4619      	mov	r1, r3
   d89e6:	9501      	str	r5, [sp, #4]
   d89e8:	9500      	str	r5, [sp, #0]
   d89ea:	4885      	ldr	r0, [pc, #532]	; (d8c00 <setup+0x6dc>)
   d89ec:	f001 f959 	bl	d9ca2 <_ZN7ADXL34528setImportantInterruptMappingEiiiii>
                                                        // Accepts only 1 or 2 values for pins INT1 and INT2. This chooses the pin on the ADXL345 to use for Interrupts.
      
 // Turn on Interrupts for Activity(1 == ON, 0 == OFF)
 // These are both set on to start and then toggled
  adxl.InactivityINT(1);
   d89f0:	4629      	mov	r1, r5
   d89f2:	4883      	ldr	r0, [pc, #524]	; (d8c00 <setup+0x6dc>)
   d89f4:	f001 f9a4 	bl	d9d40 <_ZN7ADXL34513InactivityINTEb>
  adxl.ActivityINT(1);
   d89f8:	4629      	mov	r1, r5

  // Need to set int1 pin as an input before calling atttachInterrupt
  pinMode(interruptPin,INPUT);
   d89fa:	4d82      	ldr	r5, [pc, #520]	; (d8c04 <setup+0x6e0>)
                                                        // Accepts only 1 or 2 values for pins INT1 and INT2. This chooses the pin on the ADXL345 to use for Interrupts.
      
 // Turn on Interrupts for Activity(1 == ON, 0 == OFF)
 // These are both set on to start and then toggled
  adxl.InactivityINT(1);
  adxl.ActivityINT(1);
   d89fc:	4880      	ldr	r0, [pc, #512]	; (d8c00 <setup+0x6dc>)
   d89fe:	f001 f999 	bl	d9d34 <_ZN7ADXL34511ActivityINTEb>

  // Need to set int1 pin as an input before calling atttachInterrupt
  pinMode(interruptPin,INPUT);
   d8a02:	8828      	ldrh	r0, [r5, #0]
   d8a04:	2100      	movs	r1, #0
   d8a06:	f004 fa57 	bl	dceb8 <pinMode>
  attachInterrupt(interruptPin, ADXL_ISR, CHANGE);
   d8a0a:	2200      	movs	r2, #0
   d8a0c:	f04f 33ff 	mov.w	r3, #4294967295
   d8a10:	497d      	ldr	r1, [pc, #500]	; (d8c08 <setup+0x6e4>)
   d8a12:	8828      	ldrh	r0, [r5, #0]
   d8a14:	9200      	str	r2, [sp, #0]
   d8a16:	f003 fbd1 	bl	dc1bc <_Z15attachInterrupttPFvvE13InterruptModeah>

/////////////
  DEBUG_PRINTLN();
   d8a1a:	f003 fc59 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d8a1e:	f002 fbce 	bl	db1be <_ZN5Print7printlnEv>


/////////////
  DEBUG_PRINTLN();
   d8a22:	f003 fc55 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d8a26:	f002 fbca 	bl	db1be <_ZN5Print7printlnEv>
  DEBUG_PRINTLN("Setting Up");
   d8a2a:	f003 fc51 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d8a2e:	4977      	ldr	r1, [pc, #476]	; (d8c0c <setup+0x6e8>)
   d8a30:	f002 fbd1 	bl	db1d6 <_ZN5Print7printlnEPKc>
  DEBUG_PRINTLN(iSoftwareVersion);
   d8a34:	f003 fc4c 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d8a38:	4b75      	ldr	r3, [pc, #468]	; (d8c10 <setup+0x6ec>)
   d8a3a:	6819      	ldr	r1, [r3, #0]
   d8a3c:	f002 fbcb 	bl	db1d6 <_ZN5Print7printlnEPKc>
  DEBUG_PRINT("Vsup for all sensors = ");
   d8a40:	f003 fc46 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d8a44:	4973      	ldr	r1, [pc, #460]	; (d8c14 <setup+0x6f0>)
   d8a46:	f002 fbb3 	bl	db1b0 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(ULP::_Vsup);
   d8a4a:	f003 fc41 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d8a4e:	4b72      	ldr	r3, [pc, #456]	; (d8c18 <setup+0x6f4>)
   d8a50:	4605      	mov	r5, r0
   d8a52:	6818      	ldr	r0, [r3, #0]
   d8a54:	f00a f8a0 	bl	e2b98 <__aeabi_f2d>
   d8a58:	ec41 0b10 	vmov	d0, r0, r1
   d8a5c:	2102      	movs	r1, #2
   d8a5e:	4628      	mov	r0, r5
   d8a60:	f002 fcf3 	bl	db44a <_ZN5Print7printlnEdi>
  DEBUG_PRINT("Vcc for all sensors = ");
   d8a64:	f003 fc34 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d8a68:	496c      	ldr	r1, [pc, #432]	; (d8c1c <setup+0x6f8>)
   d8a6a:	f002 fba1 	bl	db1b0 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(ULP::_Vcc);
   d8a6e:	f003 fc2f 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d8a72:	4b6b      	ldr	r3, [pc, #428]	; (d8c20 <setup+0x6fc>)
   d8a74:	4605      	mov	r5, r0
   d8a76:	6818      	ldr	r0, [r3, #0]
   d8a78:	f00a f88e 	bl	e2b98 <__aeabi_f2d>
   d8a7c:	ec41 0b10 	vmov	d0, r0, r1
   d8a80:	2102      	movs	r1, #2
   d8a82:	4628      	mov	r0, r5
   d8a84:	f002 fce1 	bl	db44a <_ZN5Print7printlnEdi>
  DEBUG_PRINT("Vref for sensor 1 = ");
   d8a88:	f003 fc22 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d8a8c:	4965      	ldr	r1, [pc, #404]	; (d8c24 <setup+0x700>)
  DEBUG_PRINTLN(sensor1._Vref);
   d8a8e:	4d66      	ldr	r5, [pc, #408]	; (d8c28 <setup+0x704>)
  DEBUG_PRINTLN(iSoftwareVersion);
  DEBUG_PRINT("Vsup for all sensors = ");
  DEBUG_PRINTLN(ULP::_Vsup);
  DEBUG_PRINT("Vcc for all sensors = ");
  DEBUG_PRINTLN(ULP::_Vcc);
  DEBUG_PRINT("Vref for sensor 1 = ");
   d8a90:	f002 fb8e 	bl	db1b0 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(sensor1._Vref);
   d8a94:	f003 fc1c 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d8a98:	4606      	mov	r6, r0
   d8a9a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   d8a9c:	f00a f87c 	bl	e2b98 <__aeabi_f2d>
   d8aa0:	ec41 0b10 	vmov	d0, r0, r1
   d8aa4:	2102      	movs	r1, #2
   d8aa6:	4630      	mov	r0, r6
   d8aa8:	f002 fccf 	bl	db44a <_ZN5Print7printlnEdi>
  //int bias = 1; //alternatively bias=-1; for negative bias.
  //sensor1.setVref(R1, R2, R3, bias); //will set the new Vref for custom sensor voltage ladder. bias is necessary to set the correct arrangement
  //sensor1._Gain = 49900; //resistor R6

  // This is not calibrated.
  DEBUG_PRINTLN(sensor1._Voff = state.zeroOff);
   d8aac:	f003 fc10 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d8ab0:	4606      	mov	r6, r0
   d8ab2:	68e0      	ldr	r0, [r4, #12]
   d8ab4:	6268      	str	r0, [r5, #36]	; 0x24
   d8ab6:	f00a f86f 	bl	e2b98 <__aeabi_f2d>
   d8aba:	ec41 0b10 	vmov	d0, r0, r1
   d8abe:	2102      	movs	r1, #2
   d8ac0:	4630      	mov	r0, r6
   d8ac2:	f002 fcc2 	bl	db44a <_ZN5Print7printlnEdi>
  //  Vref is not necessary if zero() is called for each sensor. If you already know the sensor zero you can comment this out, and set the zero with zero1 = measured mV.
  //   DEBUG_PRINT("Vzero = ");
  //   DEBUG_PRINTLN(Vzero1 = sensor1.zero());   //.zero() sets and returns the baseline voltage at current temperature with only clean air present
  //   Particle.publish("Vzero", String(Vzero1));

  DEBUG_PRINT("Tzero = ");
   d8ac6:	f003 fc03 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d8aca:	4958      	ldr	r1, [pc, #352]	; (d8c2c <setup+0x708>)
   d8acc:	f002 fb70 	bl	db1b0 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(sensor1._Tz);
   d8ad0:	f003 fbfe 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d8ad4:	4606      	mov	r6, r0
   d8ad6:	6ba8      	ldr	r0, [r5, #56]	; 0x38
   d8ad8:	f00a f85e 	bl	e2b98 <__aeabi_f2d>
   d8adc:	ec41 0b10 	vmov	d0, r0, r1
   d8ae0:	2102      	movs	r1, #2
   d8ae2:	4630      	mov	r0, r6
   d8ae4:	f002 fcb1 	bl	db44a <_ZN5Print7printlnEdi>
  //sensor1.setXSpan();                                
  //Must have previously zeroed in clean air, returns new span factor.
  //When calibrating the temperature use "LOW"/"HIGH" for the temperature range ie .setTSpan(40.2, "HIGH") where T is the current high temperature
  //sensor1.setTSpan((71 - 32.0) * 5.0 / 9.0, "LOW");

  DEBUG_PRINTLN("Finished Setting Up");
   d8ae8:	f003 fbf2 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d8aec:	4950      	ldr	r1, [pc, #320]	; (d8c30 <setup+0x70c>)
   d8aee:	f002 fb72 	bl	db1d6 <_ZN5Print7printlnEPKc>
  DEBUG_PRINTLN("T1, mV1, C1");
   d8af2:	f003 fbed 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d8af6:	494f      	ldr	r1, [pc, #316]	; (d8c34 <setup+0x710>)
   d8af8:	f002 fb6d 	bl	db1d6 <_ZN5Print7printlnEPKc>
  ////////////

  delay(300);  
   d8afc:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d8b00:	f002 fe7a 	bl	db7f8 <delay>
   d8b04:	f001 fd32 	bl	da56c <HAL_Timer_Get_Milli_Seconds>
   d8b08:	4605      	mov	r5, r0
   d8b0a:	f001 fd2f 	bl	da56c <HAL_Timer_Get_Milli_Seconds>

  // SPS30 checks
  bool sps30OK = false;
  uint32_t sps30start = millis();

  while (!sps30OK && millis()-sps30start<8000)
   d8b0e:	1b40      	subs	r0, r0, r5
   d8b10:	f5b0 5ffa 	cmp.w	r0, #8000	; 0x1f40
   d8b14:	d264      	bcs.n	d8be0 <setup+0x6bc>
   d8b16:	f004 fa6b 	bl	dcff0 <_Z19__fetch_global_Wirev>
  {
    if (!Sensor.begin())
   d8b1a:	4601      	mov	r1, r0
   d8b1c:	4846      	ldr	r0, [pc, #280]	; (d8c38 <setup+0x714>)
   d8b1e:	f001 fb9d 	bl	da25c <_ZN5SPS305beginER7TwoWire>
   d8b22:	b948      	cbnz	r0, d8b38 <setup+0x614>
    {
      DEBUG_PRINTLN("Unable to read SPS30 - trying again");
   d8b24:	f003 fbd4 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d8b28:	4944      	ldr	r1, [pc, #272]	; (d8c3c <setup+0x718>)
   d8b2a:	f002 fb54 	bl	db1d6 <_ZN5Print7printlnEPKc>
      delay(1000);
   d8b2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d8b32:	f002 fe61 	bl	db7f8 <delay>
   d8b36:	e7e8      	b.n	d8b0a <setup+0x5e6>
    }
    else
    {
      DEBUG_PRINTLN("Read SPS30");
   d8b38:	f003 fbca 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d8b3c:	4940      	ldr	r1, [pc, #256]	; (d8c40 <setup+0x71c>)
   d8b3e:	f002 fb4a 	bl	db1d6 <_ZN5Print7printlnEPKc>
    delay(1000);
    System.reset();    
  }

  #ifdef Version_2
  Blynk.config(auth, "zeptosense2.blynk.cc",portBlynk);
   d8b42:	4b40      	ldr	r3, [pc, #256]	; (d8c44 <setup+0x720>)
   d8b44:	4a40      	ldr	r2, [pc, #256]	; (d8c48 <setup+0x724>)
   d8b46:	881b      	ldrh	r3, [r3, #0]
   d8b48:	4940      	ldr	r1, [pc, #256]	; (d8c4c <setup+0x728>)
   d8b4a:	4841      	ldr	r0, [pc, #260]	; (d8c50 <setup+0x72c>)
   d8b4c:	f7fc fd86 	bl	d565c <_ZN13BlynkParticle6configEPKcS1_t>
  #else
  Blynk.config(auth, "zeptosense.blynk.cc");
  #endif

  connectWithoutWaiting();
   d8b50:	f7fe fca4 	bl	d749c <_Z21connectWithoutWaitingv>
     */
    int publishVitals(system_tick_t period_s = particle::NOW);

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
   d8b54:	2300      	movs	r3, #0
   d8b56:	9301      	str	r3, [sp, #4]
   d8b58:	9300      	str	r3, [sp, #0]
   d8b5a:	461a      	mov	r2, r3
   d8b5c:	493d      	ldr	r1, [pc, #244]	; (d8c54 <setup+0x730>)
   d8b5e:	483e      	ldr	r0, [pc, #248]	; (d8c58 <setup+0x734>)
   d8b60:	f001 ffb4 	bl	daacc <spark_subscribe>
  //*** Commented out for testing without particle connected ***
  // Subscribe to the gmtOffset response event
  Particle.subscribe("hook-response/gmtOffset", gmtOffsetHandler, MY_DEVICES);

  // Request the GMT offset if Particle is connected and it has not yet been received
  if (Particle.connected&&!gmtOffsetValid)
   d8b64:	4b3d      	ldr	r3, [pc, #244]	; (d8c5c <setup+0x738>)
   d8b66:	781b      	ldrb	r3, [r3, #0]
   d8b68:	b90b      	cbnz	r3, d8b6e <setup+0x64a>
  {
    publishGMTOffsetRequest();
   d8b6a:	f7fd f813 	bl	d5b94 <_Z23publishGMTOffsetRequestv>
   d8b6e:	f001 fcfd 	bl	da56c <HAL_Timer_Get_Milli_Seconds>
  }
  //*** Commented out for testing without particle connected ***
 
  // Delay 8 seconds or until the SPS30 is ready
  unsigned long waitForSPS30 = millis();
  while ((!Sensor.dataAvailable()) && (millis()-waitForSPS30<8100))
   d8b72:	f641 76a3 	movw	r6, #8099	; 0x1fa3
   d8b76:	4605      	mov	r5, r0
   d8b78:	482f      	ldr	r0, [pc, #188]	; (d8c38 <setup+0x714>)
   d8b7a:	f001 f9dc 	bl	d9f36 <_ZN5SPS3013dataAvailableEv>
   d8b7e:	b950      	cbnz	r0, d8b96 <setup+0x672>
   d8b80:	f001 fcf4 	bl	da56c <HAL_Timer_Get_Milli_Seconds>
   d8b84:	1b40      	subs	r0, r0, r5
   d8b86:	42b0      	cmp	r0, r6
   d8b88:	d805      	bhi.n	d8b96 <setup+0x672>
  {
    delay(100);
   d8b8a:	2064      	movs	r0, #100	; 0x64
   d8b8c:	f002 fe34 	bl	db7f8 <delay>
    checkAccel();
   d8b90:	f7fe fb26 	bl	d71e0 <_Z10checkAccelv>
  }
  //*** Commented out for testing without particle connected ***
 
  // Delay 8 seconds or until the SPS30 is ready
  unsigned long waitForSPS30 = millis();
  while ((!Sensor.dataAvailable()) && (millis()-waitForSPS30<8100))
   d8b94:	e7f0      	b.n	d8b78 <setup+0x654>
  {
    delay(100);
    checkAccel();
  }

  sensorTimer.setInterval((long)state.secondsBetweenReadings*1000, readSensors); //  Here you set interval and which function to call
   d8b96:	68a3      	ldr	r3, [r4, #8]
   d8b98:	4a31      	ldr	r2, [pc, #196]	; (d8c60 <setup+0x73c>)
   d8b9a:	4832      	ldr	r0, [pc, #200]	; (d8c64 <setup+0x740>)
   d8b9c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d8ba0:	4359      	muls	r1, r3
   d8ba2:	f001 fbc3 	bl	da32c <_ZN10BlynkTimer11setIntervalEmPFvvE>
  sensorTimer.run(); // BlynkTimer is working...
   d8ba6:	482f      	ldr	r0, [pc, #188]	; (d8c64 <setup+0x740>)
   d8ba8:	f001 fbe2 	bl	da370 <_ZN10BlynkTimer3runEv>
  // There is a delay in startup until the accel can be read
  // This can be optimized to a certain extent by software but the best way is to
  // use ADXL345 Int2 as well as Int1 on new adapter board to differentiate
  // between ativity and no activity interrupts
  // without having to perform I2C calls that are blocked during connection
  accelTimer.setInterval(111,checkAccel); // timer to check accel
   d8bac:	4a2e      	ldr	r2, [pc, #184]	; (d8c68 <setup+0x744>)
   d8bae:	482f      	ldr	r0, [pc, #188]	; (d8c6c <setup+0x748>)
   d8bb0:	216f      	movs	r1, #111	; 0x6f
   d8bb2:	f001 fbbb 	bl	da32c <_ZN10BlynkTimer11setIntervalEmPFvvE>
  accelTimer.run();
   d8bb6:	482d      	ldr	r0, [pc, #180]	; (d8c6c <setup+0x748>)
   d8bb8:	f001 fbda 	bl	da370 <_ZN10BlynkTimer3runEv>

  DEBUG_PRINTLN("Setup complete");
   d8bbc:	f003 fb88 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d8bc0:	492b      	ldr	r1, [pc, #172]	; (d8c70 <setup+0x74c>)
   d8bc2:	f002 fb08 	bl	db1d6 <_ZN5Print7printlnEPKc>
  StateString = "RDY";
   d8bc6:	492b      	ldr	r1, [pc, #172]	; (d8c74 <setup+0x750>)
   d8bc8:	482b      	ldr	r0, [pc, #172]	; (d8c78 <setup+0x754>)
   d8bca:	f002 f9d4 	bl	daf76 <_ZN6StringaSEPKc>
  readSensors(); 
   d8bce:	f7fe fcdb 	bl	d7588 <_Z11readSensorsv>
  DEBUG_PRINTLN("End Setup() function");
   d8bd2:	f003 fb7d 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d8bd6:	4929      	ldr	r1, [pc, #164]	; (d8c7c <setup+0x758>)
   d8bd8:	f002 fafd 	bl	db1d6 <_ZN5Print7printlnEPKc>
}
   d8bdc:	b00b      	add	sp, #44	; 0x2c
   d8bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
    }
  }
  
  if (!sps30OK)
  {
    DEBUG_PRINTLN("Unable to read SPS30 - resetting device");
   d8be0:	f003 fb76 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d8be4:	4926      	ldr	r1, [pc, #152]	; (d8c80 <setup+0x75c>)
   d8be6:	f002 faf6 	bl	db1d6 <_ZN5Print7printlnEPKc>
    delay(1000);
   d8bea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d8bee:	f002 fe03 	bl	db7f8 <delay>
    System.reset();    
   d8bf2:	f002 f86b 	bl	daccc <_ZN11SystemClass5resetEv>
   d8bf6:	e7a4      	b.n	d8b42 <setup+0x61e>
   d8bf8:	000e76a1 	.word	0x000e76a1
   d8bfc:	000e7354 	.word	0x000e7354
   d8c00:	2003da48 	.word	0x2003da48
   d8c04:	2003d578 	.word	0x2003d578
   d8c08:	000d52f5 	.word	0x000d52f5
   d8c0c:	000e7706 	.word	0x000e7706
   d8c10:	2003e220 	.word	0x2003e220
   d8c14:	000e76b0 	.word	0x000e76b0
   d8c18:	2003d5b0 	.word	0x2003d5b0
   d8c1c:	000e76c8 	.word	0x000e76c8
   d8c20:	2003d5ac 	.word	0x2003d5ac
   d8c24:	000e76df 	.word	0x000e76df
   d8c28:	2003ded0 	.word	0x2003ded0
   d8c2c:	000e76f4 	.word	0x000e76f4
   d8c30:	000e76fd 	.word	0x000e76fd
   d8c34:	000e7711 	.word	0x000e7711
   d8c38:	2003e1ec 	.word	0x2003e1ec
   d8c3c:	000e7362 	.word	0x000e7362
   d8c40:	000e7386 	.word	0x000e7386
   d8c44:	2003d570 	.word	0x2003d570
   d8c48:	000e7203 	.word	0x000e7203
   d8c4c:	2003d57c 	.word	0x2003d57c
   d8c50:	2003e234 	.word	0x2003e234
   d8c54:	000d5355 	.word	0x000d5355
   d8c58:	000e771d 	.word	0x000e771d
   d8c5c:	2003e1ac 	.word	0x2003e1ac
   d8c60:	000d7589 	.word	0x000d7589
   d8c64:	2003d7fc 	.word	0x2003d7fc
   d8c68:	000d71e1 	.word	0x000d71e1
   d8c6c:	2003df18 	.word	0x2003df18
   d8c70:	000e7735 	.word	0x000e7735
   d8c74:	000e733c 	.word	0x000e733c
   d8c78:	2003d7d8 	.word	0x2003d7d8
   d8c7c:	000e7744 	.word	0x000e7744
   d8c80:	000e74ef 	.word	0x000e74ef

000d8c84 <loop>:
  readSensors(); 
  DEBUG_PRINTLN("End Setup() function");
}

void loop()
{
   d8c84:	b513      	push	{r0, r1, r4, lr}
   //If woken up by a RTC Sleep then was in Standby so go into Deep Sleep now
  SleepResult result = System.sleepResult();
   d8c86:	491c      	ldr	r1, [pc, #112]	; (d8cf8 <loop+0x74>)
   d8c88:	4c1c      	ldr	r4, [pc, #112]	; (d8cfc <loop+0x78>)
   d8c8a:	4668      	mov	r0, sp
   d8c8c:	f7fc fbda 	bl	d5444 <_ZN11SystemClass11sleepResultEv>
  switch (result.reason()) {
   d8c90:	4668      	mov	r0, sp
   d8c92:	f002 f875 	bl	dad80 <_ZNK11SleepResult6reasonEv>
   d8c96:	2802      	cmp	r0, #2
   d8c98:	d111      	bne.n	d8cbe <loop+0x3a>
    }
    case WAKEUP_REASON_PIN: {
      break;
    }
    case WAKEUP_REASON_RTC: {
      DEBUG_PRINTLN("Device was woken up by the Particle RTC (after 15 minutes), go into Deep Sleep");
   d8c9a:	f003 fb19 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   d8c9e:	4918      	ldr	r1, [pc, #96]	; (d8d00 <loop+0x7c>)
   d8ca0:	f002 fa99 	bl	db1d6 <_ZN5Print7printlnEPKc>
      state.bSleepModeStandby=false;
      // Delay here in loop is okay because we are about to sleep
      digitalWrite(buzzer, LOW);
   d8ca4:	4b17      	ldr	r3, [pc, #92]	; (d8d04 <loop+0x80>)
    case WAKEUP_REASON_PIN: {
      break;
    }
    case WAKEUP_REASON_RTC: {
      DEBUG_PRINTLN("Device was woken up by the Particle RTC (after 15 minutes), go into Deep Sleep");
      state.bSleepModeStandby=false;
   d8ca6:	2100      	movs	r1, #0
      // Delay here in loop is okay because we are about to sleep
      digitalWrite(buzzer, LOW);
   d8ca8:	8818      	ldrh	r0, [r3, #0]
    case WAKEUP_REASON_PIN: {
      break;
    }
    case WAKEUP_REASON_RTC: {
      DEBUG_PRINTLN("Device was woken up by the Particle RTC (after 15 minutes), go into Deep Sleep");
      state.bSleepModeStandby=false;
   d8caa:	f884 1424 	strb.w	r1, [r4, #1060]	; 0x424
      // Delay here in loop is okay because we are about to sleep
      digitalWrite(buzzer, LOW);
   d8cae:	f004 f914 	bl	dceda <digitalWrite>
      delay(2000);
   d8cb2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d8cb6:	f002 fd9f 	bl	db7f8 <delay>
      deepSleep();
   d8cba:	f7fd fd69 	bl	d6790 <_Z9deepSleepv>
    case WAKEUP_REASON_PIN_OR_RTC: {
      break;
    }
  }

  Blynk.run();
   d8cbe:	2100      	movs	r1, #0
   d8cc0:	4811      	ldr	r0, [pc, #68]	; (d8d08 <loop+0x84>)
   d8cc2:	f7fd fb43 	bl	d634c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
  // Note the use of timers in the loop per Blynk best practice
  sensorTimer.run(); // BlynkTimer is working...
   d8cc6:	4811      	ldr	r0, [pc, #68]	; (d8d0c <loop+0x88>)
   d8cc8:	f001 fb52 	bl	da370 <_ZN10BlynkTimer3runEv>
  accelTimer.run();
   d8ccc:	4810      	ldr	r0, [pc, #64]	; (d8d10 <loop+0x8c>)
   d8cce:	f001 fb4f 	bl	da370 <_ZN10BlynkTimer3runEv>

  if (readingCount>=state.numberOfReadings)// Number of readings variable
   d8cd2:	4b10      	ldr	r3, [pc, #64]	; (d8d14 <loop+0x90>)
   d8cd4:	6862      	ldr	r2, [r4, #4]
   d8cd6:	681b      	ldr	r3, [r3, #0]
   d8cd8:	429a      	cmp	r2, r3
   d8cda:	dc0a      	bgt.n	d8cf2 <loop+0x6e>
  {
    // Delay here in loop is okay because we are about to sleep
    digitalWrite(buzzer, LOW);
   d8cdc:	4b09      	ldr	r3, [pc, #36]	; (d8d04 <loop+0x80>)
   d8cde:	2100      	movs	r1, #0
   d8ce0:	8818      	ldrh	r0, [r3, #0]
   d8ce2:	f004 f8fa 	bl	dceda <digitalWrite>
    delay(2000);
   d8ce6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d8cea:	f002 fd85 	bl	db7f8 <delay>
    deepSleep();
   d8cee:	f7fd fd4f 	bl	d6790 <_Z9deepSleepv>
  }

}
   d8cf2:	b002      	add	sp, #8
   d8cf4:	bd10      	pop	{r4, pc}
   d8cf6:	bf00      	nop
   d8cf8:	2003e278 	.word	0x2003e278
   d8cfc:	2003da80 	.word	0x2003da80
   d8d00:	000e7759 	.word	0x000e7759
   d8d04:	2003d56c 	.word	0x2003d56c
   d8d08:	2003e234 	.word	0x2003e234
   d8d0c:	2003d7fc 	.word	0x2003d7fc
   d8d10:	2003df18 	.word	0x2003df18
   d8d14:	2003e230 	.word	0x2003e230

000d8d18 <_GLOBAL__sub_I_CycleOnTime>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d8d18:	4b98      	ldr	r3, [pc, #608]	; (d8f7c <_GLOBAL__sub_I_CycleOnTime+0x264>)
   d8d1a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d8d1e:	2500      	movs	r5, #0
   d8d20:	601d      	str	r5, [r3, #0]
   d8d22:	4b97      	ldr	r3, [pc, #604]	; (d8f80 <_GLOBAL__sub_I_CycleOnTime+0x268>)

class BlynkTransportParticle
{
public:
    BlynkTransportParticle()
        : domain(NULL), port(0)
   d8d24:	4e97      	ldr	r6, [pc, #604]	; (d8f84 <_GLOBAL__sub_I_CycleOnTime+0x26c>)
#ifndef BlynkSimpleParticle_h
#define BlynkSimpleParticle_h

#include "BlynkParticle.h"

static BlynkTransportParticle _blynkTransport;
   d8d26:	4c98      	ldr	r4, [pc, #608]	; (d8f88 <_GLOBAL__sub_I_CycleOnTime+0x270>)

// SYSTEM_MODE(SEMI_AUTOMATIC);
// SYSTEM_THREAD(ENABLED);

// EXAMPLE - defining and using a LED status
LEDStatus blinkYellow(RGB_COLOR_YELLOW, LED_PATTERN_BLINK, LED_SPEED_NORMAL, LED_PRIORITY_IMPORTANT);
   d8d28:	f8df 82ec 	ldr.w	r8, [pc, #748]	; d9018 <_GLOBAL__sub_I_CycleOnTime+0x300>
   d8d2c:	2701      	movs	r7, #1
   d8d2e:	601f      	str	r7, [r3, #0]
   d8d30:	4b96      	ldr	r3, [pc, #600]	; (d8f8c <_GLOBAL__sub_I_CycleOnTime+0x274>)
   d8d32:	701f      	strb	r7, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d8d34:	f001 fb9a 	bl	da46c <HAL_Pin_Map>
   d8d38:	4630      	mov	r0, r6
   d8d3a:	f003 fee9 	bl	dcb10 <_ZN9TCPClientC1Ev>
   d8d3e:	f106 001c 	add.w	r0, r6, #28
   d8d42:	f003 f963 	bl	dc00c <_ZN9IPAddressC1Ev>
   d8d46:	4622      	mov	r2, r4
   d8d48:	4991      	ldr	r1, [pc, #580]	; (d8f90 <_GLOBAL__sub_I_CycleOnTime+0x278>)
   d8d4a:	6375      	str	r5, [r6, #52]	; 0x34
   d8d4c:	4630      	mov	r0, r6
   d8d4e:	8735      	strh	r5, [r6, #56]	; 0x38
   d8d50:	f004 f96e 	bl	dd030 <__aeabi_atexit>
        , lastActivityOut(0)
        , lastHeartbeat(0)
        , msgIdOut(0)
        , msgIdOutOverride(0)
        , nesting(0)
        , state(CONNECTING)
   d8d54:	4b8f      	ldr	r3, [pc, #572]	; (d8f94 <_GLOBAL__sub_I_CycleOnTime+0x27c>)
inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, LED_SPEED_NORMAL, priority, source) { // Use normal speed by default
}

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   d8d56:	462a      	mov	r2, r5
   d8d58:	601e      	str	r6, [r3, #0]
   d8d5a:	605d      	str	r5, [r3, #4]
   d8d5c:	609d      	str	r5, [r3, #8]
   d8d5e:	60dd      	str	r5, [r3, #12]
   d8d60:	611d      	str	r5, [r3, #16]
   d8d62:	615d      	str	r5, [r3, #20]
   d8d64:	831d      	strh	r5, [r3, #24]
   d8d66:	835d      	strh	r5, [r3, #26]
   d8d68:	771d      	strb	r5, [r3, #28]
   d8d6a:	775d      	strb	r5, [r3, #29]
   d8d6c:	2114      	movs	r1, #20
   d8d6e:	2002      	movs	r0, #2
   d8d70:	f001 fe16 	bl	da9a0 <led_pattern_period>
   d8d74:	4e88      	ldr	r6, [pc, #544]	; (d8f98 <_GLOBAL__sub_I_CycleOnTime+0x280>)
   d8d76:	9701      	str	r7, [sp, #4]
   d8d78:	f04f 091e 	mov.w	r9, #30
   d8d7c:	4603      	mov	r3, r0
   d8d7e:	f8cd 9000 	str.w	r9, [sp]
   d8d82:	2202      	movs	r2, #2
   d8d84:	4985      	ldr	r1, [pc, #532]	; (d8f9c <_GLOBAL__sub_I_CycleOnTime+0x284>)
   d8d86:	4630      	mov	r0, r6
   d8d88:	f001 ff54 	bl	dac34 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>
   d8d8c:	4622      	mov	r2, r4
   d8d8e:	4641      	mov	r1, r8
   d8d90:	4630      	mov	r0, r6
   d8d92:	f004 f94d 	bl	dd030 <__aeabi_atexit>
   d8d96:	462a      	mov	r2, r5
   d8d98:	2114      	movs	r1, #20
   d8d9a:	2002      	movs	r0, #2
   d8d9c:	f001 fe00 	bl	da9a0 <led_pattern_period>
   d8da0:	4e7f      	ldr	r6, [pc, #508]	; (d8fa0 <_GLOBAL__sub_I_CycleOnTime+0x288>)
   d8da2:	9701      	str	r7, [sp, #4]
   d8da4:	4603      	mov	r3, r0
   d8da6:	f8cd 9000 	str.w	r9, [sp]
   d8daa:	2202      	movs	r2, #2
   d8dac:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
   d8db0:	4630      	mov	r0, r6
   d8db2:	f001 ff3f 	bl	dac34 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>

LEDStatus blinkRed(RGB_COLOR_RED, LED_PATTERN_BLINK, LED_SPEED_NORMAL, LED_PRIORITY_IMPORTANT);
   d8db6:	4622      	mov	r2, r4
   d8db8:	4641      	mov	r1, r8
   d8dba:	4630      	mov	r0, r6
   d8dbc:	f004 f938 	bl	dd030 <__aeabi_atexit>

//********** ADXL345 COMMUNICATION ***********
ADXL345 adxl = ADXL345();             // USE FOR ACCEL COMMUNICATION in I2C mode
   d8dc0:	4878      	ldr	r0, [pc, #480]	; (d8fa4 <_GLOBAL__sub_I_CycleOnTime+0x28c>)

MB85RC256V fram(Wire, 0);
   d8dc2:	4e79      	ldr	r6, [pc, #484]	; (d8fa8 <_GLOBAL__sub_I_CycleOnTime+0x290>)
// Flag to check if the offset has been updated
bool gmtOffsetValid = false;
// Flag to check if the time has been synced
bool timeSynced = false;

String field1,field2,field3,field4,field5,field6,field7,field8;
   d8dc4:	4f79      	ldr	r7, [pc, #484]	; (d8fac <_GLOBAL__sub_I_CycleOnTime+0x294>)
   d8dc6:	f8df 8254 	ldr.w	r8, [pc, #596]	; d901c <_GLOBAL__sub_I_CycleOnTime+0x304>
LEDStatus blinkYellow(RGB_COLOR_YELLOW, LED_PATTERN_BLINK, LED_SPEED_NORMAL, LED_PRIORITY_IMPORTANT);

LEDStatus blinkRed(RGB_COLOR_RED, LED_PATTERN_BLINK, LED_SPEED_NORMAL, LED_PRIORITY_IMPORTANT);

//********** ADXL345 COMMUNICATION ***********
ADXL345 adxl = ADXL345();             // USE FOR ACCEL COMMUNICATION in I2C mode
   d8dca:	f000 fdd9 	bl	d9980 <_ZN7ADXL345C1Ev>

MB85RC256V fram(Wire, 0);
   d8dce:	f004 f90f 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d8dd2:	462a      	mov	r2, r5
   d8dd4:	4601      	mov	r1, r0
   d8dd6:	4630      	mov	r0, r6
   d8dd8:	f000 fc7c 	bl	d96d4 <_ZN10MB85RC256VC1ER7TwoWirei>
   d8ddc:	4622      	mov	r2, r4
   d8dde:	4974      	ldr	r1, [pc, #464]	; (d8fb0 <_GLOBAL__sub_I_CycleOnTime+0x298>)
   d8de0:	4630      	mov	r0, r6
   d8de2:	f004 f925 	bl	dd030 <__aeabi_atexit>

int firstRunValue = 1967689;

// Create new instance of RTC class:
// Use to hard power cycle the device to reset I2C
MCP7941x rtc = MCP7941x();
   d8de6:	4873      	ldr	r0, [pc, #460]	; (d8fb4 <_GLOBAL__sub_I_CycleOnTime+0x29c>)
bool batCurrentAlert = false, tamperCurrentAlert = false;

IoTNodePower power;
SPS30 Sensor;

FuelGauge fuel;
   d8de8:	4e73      	ldr	r6, [pc, #460]	; (d8fb8 <_GLOBAL__sub_I_CycleOnTime+0x2a0>)

int firstRunValue = 1967689;

// Create new instance of RTC class:
// Use to hard power cycle the device to reset I2C
MCP7941x rtc = MCP7941x();
   d8dea:	f000 fadb 	bl	d93a4 <_ZN8MCP7941xC1Ev>
state_t state;

bool powerOn, appConnected, sensorValid = false, currentAlert = false, terminalDebug = false;
bool batCurrentAlert = false, tamperCurrentAlert = false;

IoTNodePower power;
   d8dee:	4873      	ldr	r0, [pc, #460]	; (d8fbc <_GLOBAL__sub_I_CycleOnTime+0x2a4>)
   d8df0:	f000 fd12 	bl	d9818 <_ZN12IoTNodePowerC1Ev>
SPS30 Sensor;
   d8df4:	4872      	ldr	r0, [pc, #456]	; (d8fc0 <_GLOBAL__sub_I_CycleOnTime+0x2a8>)
   d8df6:	f001 f85c 	bl	d9eb2 <_ZN5SPS30C1Ev>

FuelGauge fuel;
   d8dfa:	4629      	mov	r1, r5
   d8dfc:	4630      	mov	r0, r6
   d8dfe:	f002 fd85 	bl	db90c <_ZN9FuelGaugeC1Eb>
   d8e02:	4622      	mov	r2, r4
   d8e04:	496f      	ldr	r1, [pc, #444]	; (d8fc4 <_GLOBAL__sub_I_CycleOnTime+0x2ac>)
   d8e06:	4630      	mov	r0, r6
   d8e08:	f004 f912 	bl	dd030 <__aeabi_atexit>
// Flag to check if the offset has been updated
bool gmtOffsetValid = false;
// Flag to check if the time has been synced
bool timeSynced = false;

String field1,field2,field3,field4,field5,field6,field7,field8;
   d8e0c:	4e6e      	ldr	r6, [pc, #440]	; (d8fc8 <_GLOBAL__sub_I_CycleOnTime+0x2b0>)
   d8e0e:	4639      	mov	r1, r7
   d8e10:	4640      	mov	r0, r8
   d8e12:	f002 f85e 	bl	daed2 <_ZN6StringC1EPK19__FlashStringHelper>
   d8e16:	4640      	mov	r0, r8
   d8e18:	f8df 8204 	ldr.w	r8, [pc, #516]	; d9020 <_GLOBAL__sub_I_CycleOnTime+0x308>
   d8e1c:	4622      	mov	r2, r4
   d8e1e:	4631      	mov	r1, r6
   d8e20:	f004 f906 	bl	dd030 <__aeabi_atexit>
   d8e24:	4639      	mov	r1, r7
   d8e26:	4640      	mov	r0, r8
   d8e28:	f002 f853 	bl	daed2 <_ZN6StringC1EPK19__FlashStringHelper>
   d8e2c:	4640      	mov	r0, r8
   d8e2e:	f8df 81f4 	ldr.w	r8, [pc, #500]	; d9024 <_GLOBAL__sub_I_CycleOnTime+0x30c>
   d8e32:	4622      	mov	r2, r4
   d8e34:	4631      	mov	r1, r6
   d8e36:	f004 f8fb 	bl	dd030 <__aeabi_atexit>
   d8e3a:	4639      	mov	r1, r7
   d8e3c:	4640      	mov	r0, r8
   d8e3e:	f002 f848 	bl	daed2 <_ZN6StringC1EPK19__FlashStringHelper>
   d8e42:	4640      	mov	r0, r8
   d8e44:	f8df 81e0 	ldr.w	r8, [pc, #480]	; d9028 <_GLOBAL__sub_I_CycleOnTime+0x310>
   d8e48:	4622      	mov	r2, r4
   d8e4a:	4631      	mov	r1, r6
   d8e4c:	f004 f8f0 	bl	dd030 <__aeabi_atexit>
   d8e50:	4639      	mov	r1, r7
   d8e52:	4640      	mov	r0, r8
   d8e54:	f002 f83d 	bl	daed2 <_ZN6StringC1EPK19__FlashStringHelper>
   d8e58:	4640      	mov	r0, r8
   d8e5a:	f8df 81d0 	ldr.w	r8, [pc, #464]	; d902c <_GLOBAL__sub_I_CycleOnTime+0x314>
   d8e5e:	4622      	mov	r2, r4
   d8e60:	4631      	mov	r1, r6
   d8e62:	f004 f8e5 	bl	dd030 <__aeabi_atexit>
   d8e66:	4639      	mov	r1, r7
   d8e68:	4640      	mov	r0, r8
   d8e6a:	f002 f832 	bl	daed2 <_ZN6StringC1EPK19__FlashStringHelper>
   d8e6e:	4640      	mov	r0, r8
   d8e70:	f8df 81bc 	ldr.w	r8, [pc, #444]	; d9030 <_GLOBAL__sub_I_CycleOnTime+0x318>
   d8e74:	4622      	mov	r2, r4
   d8e76:	4631      	mov	r1, r6
   d8e78:	f004 f8da 	bl	dd030 <__aeabi_atexit>
   d8e7c:	4639      	mov	r1, r7
   d8e7e:	4640      	mov	r0, r8
   d8e80:	f002 f827 	bl	daed2 <_ZN6StringC1EPK19__FlashStringHelper>
   d8e84:	4640      	mov	r0, r8
   d8e86:	f8df 81ac 	ldr.w	r8, [pc, #428]	; d9034 <_GLOBAL__sub_I_CycleOnTime+0x31c>
   d8e8a:	4622      	mov	r2, r4
   d8e8c:	4631      	mov	r1, r6
   d8e8e:	f004 f8cf 	bl	dd030 <__aeabi_atexit>
   d8e92:	4639      	mov	r1, r7
   d8e94:	4640      	mov	r0, r8
   d8e96:	f002 f81c 	bl	daed2 <_ZN6StringC1EPK19__FlashStringHelper>
   d8e9a:	4640      	mov	r0, r8
   d8e9c:	f8df 8198 	ldr.w	r8, [pc, #408]	; d9038 <_GLOBAL__sub_I_CycleOnTime+0x320>
   d8ea0:	4622      	mov	r2, r4
   d8ea2:	4631      	mov	r1, r6
   d8ea4:	f004 f8c4 	bl	dd030 <__aeabi_atexit>
   d8ea8:	4639      	mov	r1, r7
   d8eaa:	4640      	mov	r0, r8
   d8eac:	f002 f811 	bl	daed2 <_ZN6StringC1EPK19__FlashStringHelper>
   d8eb0:	4640      	mov	r0, r8
String datastring;
   d8eb2:	f8df 8188 	ldr.w	r8, [pc, #392]	; d903c <_GLOBAL__sub_I_CycleOnTime+0x324>
// Flag to check if the offset has been updated
bool gmtOffsetValid = false;
// Flag to check if the time has been synced
bool timeSynced = false;

String field1,field2,field3,field4,field5,field6,field7,field8;
   d8eb6:	4622      	mov	r2, r4
   d8eb8:	4631      	mov	r1, r6
   d8eba:	f004 f8b9 	bl	dd030 <__aeabi_atexit>
String datastring;
   d8ebe:	4639      	mov	r1, r7
   d8ec0:	4640      	mov	r0, r8
//char auth[] = "IODR4bIAgZKqMptIpYHIvpLx3L8qmLfS"; //Bathroom 2 (New)
//char auth[] = "Z8lveVS4uGA9G2iVjKZQKUEwJf5ZWClf "; //Bathroom 2 (Blynk 2 new)
// char auth[] = "2DNcMB9D3Q9IMJAHkHl0NqyCtE326uGm"; //Bathroom 3
// char auth[] = "wjKKdx0kjzS_33wY3C4CCtOJRn8Lfh3D"; //Bathroom 4
char auth[] = "pUSnK9eAbHcgOAi_v1vN1cPYUIID6Iwv"; //Bathroom 5 (Blynk 2 new)
String iSoftwareVersion = " SW Ver = 2019116 S/N = Zep2W ";
   d8ec2:	4f42      	ldr	r7, [pc, #264]	; (d8fcc <_GLOBAL__sub_I_CycleOnTime+0x2b4>)
bool gmtOffsetValid = false;
// Flag to check if the time has been synced
bool timeSynced = false;

String field1,field2,field3,field4,field5,field6,field7,field8;
String datastring;
   d8ec4:	f002 f805 	bl	daed2 <_ZN6StringC1EPK19__FlashStringHelper>
   d8ec8:	4622      	mov	r2, r4
   d8eca:	4631      	mov	r1, r6
   d8ecc:	4640      	mov	r0, r8
   d8ece:	f004 f8af 	bl	dd030 <__aeabi_atexit>
//char auth[] = "IODR4bIAgZKqMptIpYHIvpLx3L8qmLfS"; //Bathroom 2 (New)
//char auth[] = "Z8lveVS4uGA9G2iVjKZQKUEwJf5ZWClf "; //Bathroom 2 (Blynk 2 new)
// char auth[] = "2DNcMB9D3Q9IMJAHkHl0NqyCtE326uGm"; //Bathroom 3
// char auth[] = "wjKKdx0kjzS_33wY3C4CCtOJRn8Lfh3D"; //Bathroom 4
char auth[] = "pUSnK9eAbHcgOAi_v1vN1cPYUIID6Iwv"; //Bathroom 5 (Blynk 2 new)
String iSoftwareVersion = " SW Ver = 2019116 S/N = Zep2W ";
   d8ed2:	493f      	ldr	r1, [pc, #252]	; (d8fd0 <_GLOBAL__sub_I_CycleOnTime+0x2b8>)
   d8ed4:	4638      	mov	r0, r7
   d8ed6:	f001 fffc 	bl	daed2 <_ZN6StringC1EPK19__FlashStringHelper>
   d8eda:	4638      	mov	r0, r7
String InstallLocation = " Loc = Test Unit ";
   d8edc:	4f3d      	ldr	r7, [pc, #244]	; (d8fd4 <_GLOBAL__sub_I_CycleOnTime+0x2bc>)
//char auth[] = "IODR4bIAgZKqMptIpYHIvpLx3L8qmLfS"; //Bathroom 2 (New)
//char auth[] = "Z8lveVS4uGA9G2iVjKZQKUEwJf5ZWClf "; //Bathroom 2 (Blynk 2 new)
// char auth[] = "2DNcMB9D3Q9IMJAHkHl0NqyCtE326uGm"; //Bathroom 3
// char auth[] = "wjKKdx0kjzS_33wY3C4CCtOJRn8Lfh3D"; //Bathroom 4
char auth[] = "pUSnK9eAbHcgOAi_v1vN1cPYUIID6Iwv"; //Bathroom 5 (Blynk 2 new)
String iSoftwareVersion = " SW Ver = 2019116 S/N = Zep2W ";
   d8ede:	4622      	mov	r2, r4
   d8ee0:	4631      	mov	r1, r6
   d8ee2:	f004 f8a5 	bl	dd030 <__aeabi_atexit>
String InstallLocation = " Loc = Test Unit ";
   d8ee6:	493c      	ldr	r1, [pc, #240]	; (d8fd8 <_GLOBAL__sub_I_CycleOnTime+0x2c0>)
   d8ee8:	4638      	mov	r0, r7
   d8eea:	f001 fff2 	bl	daed2 <_ZN6StringC1EPK19__FlashStringHelper>
   d8eee:	4638      	mov	r0, r7
#endif
//  char auth[] = "q4ey21hbwczzBHyRj_Z-f7EJieP491Qu"; // Sentient Things Test 2.0
 // I8213EIuNfVpyoW6dITCAy4glOI7s7Fs

String StateString = "RDY";
   d8ef0:	4f3a      	ldr	r7, [pc, #232]	; (d8fdc <_GLOBAL__sub_I_CycleOnTime+0x2c4>)
//char auth[] = "Z8lveVS4uGA9G2iVjKZQKUEwJf5ZWClf "; //Bathroom 2 (Blynk 2 new)
// char auth[] = "2DNcMB9D3Q9IMJAHkHl0NqyCtE326uGm"; //Bathroom 3
// char auth[] = "wjKKdx0kjzS_33wY3C4CCtOJRn8Lfh3D"; //Bathroom 4
char auth[] = "pUSnK9eAbHcgOAi_v1vN1cPYUIID6Iwv"; //Bathroom 5 (Blynk 2 new)
String iSoftwareVersion = " SW Ver = 2019116 S/N = Zep2W ";
String InstallLocation = " Loc = Test Unit ";
   d8ef2:	4622      	mov	r2, r4
   d8ef4:	4631      	mov	r1, r6
   d8ef6:	f004 f89b 	bl	dd030 <__aeabi_atexit>
#endif
//  char auth[] = "q4ey21hbwczzBHyRj_Z-f7EJieP491Qu"; // Sentient Things Test 2.0
 // I8213EIuNfVpyoW6dITCAy4glOI7s7Fs

String StateString = "RDY";
   d8efa:	4939      	ldr	r1, [pc, #228]	; (d8fe0 <_GLOBAL__sub_I_CycleOnTime+0x2c8>)
   d8efc:	4638      	mov	r0, r7
   d8efe:	f001 ffe8 	bl	daed2 <_ZN6StringC1EPK19__FlashStringHelper>
   d8f02:	4622      	mov	r2, r4
   d8f04:	4631      	mov	r1, r6
   d8f06:	4638      	mov	r0, r7
   d8f08:	f004 f892 	bl	dd030 <__aeabi_atexit>
    "RTC EEPROM",
    "ADC",
    "FRAM",
    "ADXL345",
    "SPS30"
};
   d8f0c:	4e35      	ldr	r6, [pc, #212]	; (d8fe4 <_GLOBAL__sub_I_CycleOnTime+0x2cc>)
//  char auth[] = "q4ey21hbwczzBHyRj_Z-f7EJieP491Qu"; // Sentient Things Test 2.0
 // I8213EIuNfVpyoW6dITCAy4glOI7s7Fs

String StateString = "RDY";

BlynkTimer sensorTimer; // Create a Timer object called "sensorTimer"!
   d8f0e:	4836      	ldr	r0, [pc, #216]	; (d8fe8 <_GLOBAL__sub_I_CycleOnTime+0x2d0>)
   d8f10:	f001 f9b1 	bl	da276 <_ZN10BlynkTimerC1Ev>
BlynkTimer accelTimer; // Create an accelerometer Timer object
   d8f14:	4835      	ldr	r0, [pc, #212]	; (d8fec <_GLOBAL__sub_I_CycleOnTime+0x2d4>)
   d8f16:	f001 f9ae 	bl	da276 <_ZN10BlynkTimerC1Ev>
    "RTC EEPROM",
    "ADC",
    "FRAM",
    "ADXL345",
    "SPS30"
};
   d8f1a:	4935      	ldr	r1, [pc, #212]	; (d8ff0 <_GLOBAL__sub_I_CycleOnTime+0x2d8>)
   d8f1c:	4630      	mov	r0, r6
   d8f1e:	f001 ffd8 	bl	daed2 <_ZN6StringC1EPK19__FlashStringHelper>
   d8f22:	4934      	ldr	r1, [pc, #208]	; (d8ff4 <_GLOBAL__sub_I_CycleOnTime+0x2dc>)
   d8f24:	f106 0010 	add.w	r0, r6, #16
   d8f28:	f001 ffd3 	bl	daed2 <_ZN6StringC1EPK19__FlashStringHelper>
   d8f2c:	4932      	ldr	r1, [pc, #200]	; (d8ff8 <_GLOBAL__sub_I_CycleOnTime+0x2e0>)
   d8f2e:	f106 0020 	add.w	r0, r6, #32
   d8f32:	f001 ffce 	bl	daed2 <_ZN6StringC1EPK19__FlashStringHelper>
   d8f36:	4931      	ldr	r1, [pc, #196]	; (d8ffc <_GLOBAL__sub_I_CycleOnTime+0x2e4>)
   d8f38:	f106 0030 	add.w	r0, r6, #48	; 0x30
   d8f3c:	f001 ffc9 	bl	daed2 <_ZN6StringC1EPK19__FlashStringHelper>
   d8f40:	492f      	ldr	r1, [pc, #188]	; (d9000 <_GLOBAL__sub_I_CycleOnTime+0x2e8>)
   d8f42:	f106 0040 	add.w	r0, r6, #64	; 0x40
   d8f46:	f001 ffc4 	bl	daed2 <_ZN6StringC1EPK19__FlashStringHelper>
   d8f4a:	492e      	ldr	r1, [pc, #184]	; (d9004 <_GLOBAL__sub_I_CycleOnTime+0x2ec>)
   d8f4c:	f106 0050 	add.w	r0, r6, #80	; 0x50
   d8f50:	f001 ffbf 	bl	daed2 <_ZN6StringC1EPK19__FlashStringHelper>
   d8f54:	492c      	ldr	r1, [pc, #176]	; (d9008 <_GLOBAL__sub_I_CycleOnTime+0x2f0>)
   d8f56:	f106 0060 	add.w	r0, r6, #96	; 0x60
   d8f5a:	f001 ffba 	bl	daed2 <_ZN6StringC1EPK19__FlashStringHelper>
String StateString = "RDY";

BlynkTimer sensorTimer; // Create a Timer object called "sensorTimer"!
BlynkTimer accelTimer; // Create an accelerometer Timer object

String i2cNames[] =
   d8f5e:	4622      	mov	r2, r4
   d8f60:	492a      	ldr	r1, [pc, #168]	; (d900c <_GLOBAL__sub_I_CycleOnTime+0x2f4>)
   d8f62:	4628      	mov	r0, r5
   d8f64:	f004 f864 	bl	dd030 <__aeabi_atexit>

float conc1, temp1;
float TZero;
float Vzero1;

IAQ sensor1(A2, A4, Sf1);  //Sensor Types are EtOH, H2S, CO, IAQ, SO2, NO2, RESP, O3, and SPEC (custom)
   d8f68:	ed9f 0a29 	vldr	s0, [pc, #164]	; d9010 <_GLOBAL__sub_I_CycleOnTime+0x2f8>
   d8f6c:	4829      	ldr	r0, [pc, #164]	; (d9014 <_GLOBAL__sub_I_CycleOnTime+0x2fc>)
   d8f6e:	220f      	movs	r2, #15
   d8f70:	2111      	movs	r1, #17
    digitalWrite(buzzer, LOW);
    delay(2000);
    deepSleep();
  }

}
   d8f72:	b003      	add	sp, #12
   d8f74:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}

float conc1, temp1;
float TZero;
float Vzero1;

IAQ sensor1(A2, A4, Sf1);  //Sensor Types are EtOH, H2S, CO, IAQ, SO2, NO2, RESP, O3, and SPEC (custom)
   d8f78:	f000 b9e0 	b.w	d933c <_ZN3IAQC1Eiif>
   d8f7c:	2003e170 	.word	0x2003e170
   d8f80:	2003dec8 	.word	0x2003dec8
   d8f84:	2003e1b0 	.word	0x2003e1b0
   d8f88:	2003d6b0 	.word	0x2003d6b0
   d8f8c:	2003d714 	.word	0x2003d714
   d8f90:	000d5c1d 	.word	0x000d5c1d
   d8f94:	2003e234 	.word	0x2003e234
   d8f98:	2003d6f4 	.word	0x2003d6f4
   d8f9c:	00ffff00 	.word	0x00ffff00
   d8fa0:	2003d6c8 	.word	0x2003d6c8
   d8fa4:	2003da48 	.word	0x2003da48
   d8fa8:	2003d6e8 	.word	0x2003d6e8
   d8fac:	000e6bf1 	.word	0x000e6bf1
   d8fb0:	000d96bd 	.word	0x000d96bd
   d8fb4:	2003e174 	.word	0x2003e174
   d8fb8:	2003e1a4 	.word	0x2003e1a4
   d8fbc:	2003deac 	.word	0x2003deac
   d8fc0:	2003e1ec 	.word	0x2003e1ec
   d8fc4:	000db92b 	.word	0x000db92b
   d8fc8:	000dae45 	.word	0x000dae45
   d8fcc:	2003e220 	.word	0x2003e220
   d8fd0:	000e77a8 	.word	0x000e77a8
   d8fd4:	2003e190 	.word	0x2003e190
   d8fd8:	000e77c7 	.word	0x000e77c7
   d8fdc:	2003d7d8 	.word	0x2003d7d8
   d8fe0:	000e733c 	.word	0x000e733c
   d8fe4:	2003d718 	.word	0x2003d718
   d8fe8:	2003d7fc 	.word	0x2003d7fc
   d8fec:	2003df18 	.word	0x2003df18
   d8ff0:	000e77d9 	.word	0x000e77d9
   d8ff4:	000e77dd 	.word	0x000e77dd
   d8ff8:	000e77e1 	.word	0x000e77e1
   d8ffc:	000e77ec 	.word	0x000e77ec
   d9000:	000e77f0 	.word	0x000e77f0
   d9004:	000e77f5 	.word	0x000e77f5
   d9008:	000e738b 	.word	0x000e738b
   d900c:	000d5335 	.word	0x000d5335
   d9010:	4081999a 	.word	0x4081999a
   d9014:	2003ded0 	.word	0x2003ded0
   d9018:	000d54a5 	.word	0x000d54a5
   d901c:	2003d788 	.word	0x2003d788
   d9020:	2003d798 	.word	0x2003d798
   d9024:	2003d7a8 	.word	0x2003d7a8
   d9028:	2003d7b8 	.word	0x2003d7b8
   d902c:	2003d7c8 	.word	0x2003d7c8
   d9030:	2003e180 	.word	0x2003e180
   d9034:	2003d7e8 	.word	0x2003d7e8
   d9038:	2003d6b8 	.word	0x2003d6b8
   d903c:	2003deb0 	.word	0x2003deb0

000d9040 <_ZN3ULPC1Eiif>:
  #define DEBUG_PRINT(x)
#endif



ULP::ULP (int a, int b, float c) : _CPin(a), _TPin(b), _Sf(c) {
   d9040:	e880 0006 	stmia.w	r0, {r1, r2}
   d9044:	4a10      	ldr	r2, [pc, #64]	; (d9088 <_ZN3ULPC1Eiif+0x48>)
   d9046:	6382      	str	r2, [r0, #56]	; 0x38
  _Htemp = 40.0;
  _Ltemp = 20.0; //temps for cal of temp sensor
   d9048:	6102      	str	r2, [r0, #16]
  _Tb = 18.0;
   d904a:	4a10      	ldr	r2, [pc, #64]	; (d908c <_ZN3ULPC1Eiif+0x4c>)
   d904c:	61c2      	str	r2, [r0, #28]
  _Ts = 87.0;
  _Tz = 20.0;
  _Hvolt = (_Htemp + _Tb) * _Vsup / _Ts;
   d904e:	4a10      	ldr	r2, [pc, #64]	; (d9090 <_ZN3ULPC1Eiif+0x50>)
   d9050:	eddf 6a10 	vldr	s13, [pc, #64]	; d9094 <_ZN3ULPC1Eiif+0x54>
   d9054:	edd2 7a00 	vldr	s15, [r2]

ULP::ULP (int a, int b, float c) : _CPin(a), _TPin(b), _Sf(c) {
  _Htemp = 40.0;
  _Ltemp = 20.0; //temps for cal of temp sensor
  _Tb = 18.0;
  _Ts = 87.0;
   d9058:	ed9f 7a0f 	vldr	s14, [pc, #60]	; d9098 <_ZN3ULPC1Eiif+0x58>
#endif



ULP::ULP (int a, int b, float c) : _CPin(a), _TPin(b), _Sf(c) {
  _Htemp = 40.0;
   d905c:	490f      	ldr	r1, [pc, #60]	; (d909c <_ZN3ULPC1Eiif+0x5c>)
  #define DEBUG_PRINT(x)
#endif



ULP::ULP (int a, int b, float c) : _CPin(a), _TPin(b), _Sf(c) {
   d905e:	ed80 0a02 	vstr	s0, [r0, #8]
  _Htemp = 40.0;
  _Ltemp = 20.0; //temps for cal of temp sensor
  _Tb = 18.0;
  _Ts = 87.0;
  _Tz = 20.0;
  _Hvolt = (_Htemp + _Tb) * _Vsup / _Ts;
   d9062:	ee67 6aa6 	vmul.f32	s13, s15, s13
#endif



ULP::ULP (int a, int b, float c) : _CPin(a), _TPin(b), _Sf(c) {
  _Htemp = 40.0;
   d9066:	60c1      	str	r1, [r0, #12]
  _Ltemp = 20.0; //temps for cal of temp sensor
  _Tb = 18.0;
  _Ts = 87.0;
  _Tz = 20.0;
  _Hvolt = (_Htemp + _Tb) * _Vsup / _Ts;
   d9068:	ee86 6a87 	vdiv.f32	s12, s13, s14
  _Lvolt = (_Ltemp + _Tb) * _Vsup / _Ts; //volts for cal of temp sensor
   d906c:	eddf 6a0c 	vldr	s13, [pc, #48]	; d90a0 <_ZN3ULPC1Eiif+0x60>

ULP::ULP (int a, int b, float c) : _CPin(a), _TPin(b), _Sf(c) {
  _Htemp = 40.0;
  _Ltemp = 20.0; //temps for cal of temp sensor
  _Tb = 18.0;
  _Ts = 87.0;
   d9070:	ed80 7a08 	vstr	s14, [r0, #32]
  _Tz = 20.0;
  _Hvolt = (_Htemp + _Tb) * _Vsup / _Ts;
  _Lvolt = (_Ltemp + _Tb) * _Vsup / _Ts; //volts for cal of temp sensor
   d9074:	ee67 7aa6 	vmul.f32	s15, s15, s13
  _Htemp = 40.0;
  _Ltemp = 20.0; //temps for cal of temp sensor
  _Tb = 18.0;
  _Ts = 87.0;
  _Tz = 20.0;
  _Hvolt = (_Htemp + _Tb) * _Vsup / _Ts;
   d9078:	ed80 6a05 	vstr	s12, [r0, #20]
  _Lvolt = (_Ltemp + _Tb) * _Vsup / _Ts; //volts for cal of temp sensor
   d907c:	eec7 6a87 	vdiv.f32	s13, s15, s14
   d9080:	edc0 6a06 	vstr	s13, [r0, #24]
}
   d9084:	4770      	bx	lr
   d9086:	bf00      	nop
   d9088:	41a00000 	.word	0x41a00000
   d908c:	41900000 	.word	0x41900000
   d9090:	2003d5b0 	.word	0x2003d5b0
   d9094:	42680000 	.word	0x42680000
   d9098:	42ae0000 	.word	0x42ae0000
   d909c:	42200000 	.word	0x42200000
   d90a0:	42180000 	.word	0x42180000

000d90a4 <_ZN3ULP7getTempEiPc>:

//float ULP::_Vcc = 5.0;  //voltage for ADC conversion of analogRead()
float ULP::_Vcc = 3.3;  //voltage for ADC conversion of analogRead()  
float ULP::_Vsup = 3.3; //voltage of ULP supply for thermister, etc.

int  ULP::getTemp(int n, char* U) { //get temperature using n as time in seconds for averaging, and U for units "F"/"C"
   d90a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d90a8:	460c      	mov	r4, r1
   d90aa:	4606      	mov	r6, r0
   d90ac:	4690      	mov	r8, r2
   d90ae:	f001 fa5d 	bl	da56c <HAL_Timer_Get_Milli_Seconds>
  unsigned long etime, i = 0;
  unsigned long AC = 0;
  float temp;
  etime = millis() + n * 1000;
   d90b2:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   d90b6:	fb07 0704 	mla	r7, r7, r4, r0
float ULP::_Vcc = 3.3;  //voltage for ADC conversion of analogRead()  
float ULP::_Vsup = 3.3; //voltage of ULP supply for thermister, etc.

int  ULP::getTemp(int n, char* U) { //get temperature using n as time in seconds for averaging, and U for units "F"/"C"
  unsigned long etime, i = 0;
  unsigned long AC = 0;
   d90ba:	2400      	movs	r4, #0
//float ULP::_Vcc = 5.0;  //voltage for ADC conversion of analogRead()
float ULP::_Vcc = 3.3;  //voltage for ADC conversion of analogRead()  
float ULP::_Vsup = 3.3; //voltage of ULP supply for thermister, etc.

int  ULP::getTemp(int n, char* U) { //get temperature using n as time in seconds for averaging, and U for units "F"/"C"
  unsigned long etime, i = 0;
   d90bc:	4625      	mov	r5, r4
  unsigned long AC = 0;
  float temp;
  etime = millis() + n * 1000;

  do {
    AC = AC + analogRead(_TPin);
   d90be:	88b0      	ldrh	r0, [r6, #4]
   d90c0:	f003 ff37 	bl	dcf32 <analogRead>
   d90c4:	4404      	add	r4, r0
    delay(1);
   d90c6:	2001      	movs	r0, #1
   d90c8:	f002 fb96 	bl	db7f8 <delay>
   d90cc:	f001 fa4e 	bl	da56c <HAL_Timer_Get_Milli_Seconds>
  unsigned long etime, i = 0;
  unsigned long AC = 0;
  float temp;
  etime = millis() + n * 1000;

  do {
   d90d0:	42b8      	cmp	r0, r7
    AC = AC + analogRead(_TPin);
    delay(1);
    i++;
   d90d2:	f105 0501 	add.w	r5, r5, #1
  unsigned long etime, i = 0;
  unsigned long AC = 0;
  float temp;
  etime = millis() + n * 1000;

  do {
   d90d6:	d3f2      	bcc.n	d90be <_ZN3ULP7getTempEiPc+0x1a>

  DEBUG_PRINT("Volts: ");
  DEBUG_PRINT(Volts);
  DEBUG_PRINT(", ");

  temp = (_Ts / _Vsup) * Volts - _Tb;
   d90d8:	ee07 5a10 	vmov	s14, r5
   d90dc:	ee07 4a90 	vmov	s15, r4
   d90e0:	eef8 6a47 	vcvt.f32.u32	s13, s14
   d90e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
  DEBUG_PRINT(AC);
  DEBUG_PRINT(", ");
  
  float Cnts = float (AC) / float(i);
//  float Volts = Cnts * _Vcc / 1024.0;
float Volts = Cnts * _Vcc / 4096.0;
   d90e8:	4b18      	ldr	r3, [pc, #96]	; (d914c <_ZN3ULP7getTempEiPc+0xa8>)

  DEBUG_PRINT("Volts: ");
  DEBUG_PRINT(Volts);
  DEBUG_PRINT(", ");

  temp = (_Ts / _Vsup) * Volts - _Tb;
   d90ea:	edd6 5a08 	vldr	s11, [r6, #32]
   d90ee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
   d90f2:	edd3 7a00 	vldr	s15, [r3]
   d90f6:	4b16      	ldr	r3, [pc, #88]	; (d9150 <_ZN3ULP7getTempEiPc+0xac>)
   d90f8:	ed93 6a00 	vldr	s12, [r3]

  if (U == "F") {
   d90fc:	4b15      	ldr	r3, [pc, #84]	; (d9154 <_ZN3ULP7getTempEiPc+0xb0>)

  DEBUG_PRINT("Volts: ");
  DEBUG_PRINT(Volts);
  DEBUG_PRINT(", ");

  temp = (_Ts / _Vsup) * Volts - _Tb;
   d90fe:	eec5 6a86 	vdiv.f32	s13, s11, s12

  if (U == "F") {
   d9102:	4598      	cmp	r8, r3

  DEBUG_PRINT("Volts: ");
  DEBUG_PRINT(Volts);
  DEBUG_PRINT(", ");

  temp = (_Ts / _Vsup) * Volts - _Tb;
   d9104:	ee67 7a27 	vmul.f32	s15, s14, s15
   d9108:	ed9f 7a13 	vldr	s14, [pc, #76]	; d9158 <_ZN3ULP7getTempEiPc+0xb4>
   d910c:	ee27 7a87 	vmul.f32	s14, s15, s14
   d9110:	edd6 7a07 	vldr	s15, [r6, #28]
   d9114:	eed7 7a26 	vfnms.f32	s15, s14, s13

  if (U == "F") {
   d9118:	d10c      	bne.n	d9134 <_ZN3ULP7getTempEiPc+0x90>
    return temp * 9 / 5 + 32;
   d911a:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
   d911e:	ee67 7a87 	vmul.f32	s15, s15, s14
   d9122:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
   d9126:	ee87 7aa6 	vdiv.f32	s14, s15, s13
   d912a:	eddf 7a0c 	vldr	s15, [pc, #48]	; d915c <_ZN3ULP7getTempEiPc+0xb8>
   d912e:	ee77 7a27 	vadd.f32	s15, s14, s15
   d9132:	e002      	b.n	d913a <_ZN3ULP7getTempEiPc+0x96>
  }
  else if ( U == "C") {
   d9134:	4b0a      	ldr	r3, [pc, #40]	; (d9160 <_ZN3ULP7getTempEiPc+0xbc>)
   d9136:	4598      	cmp	r8, r3
   d9138:	d102      	bne.n	d9140 <_ZN3ULP7getTempEiPc+0x9c>
    return temp;
   d913a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d913e:	e001      	b.n	d9144 <_ZN3ULP7getTempEiPc+0xa0>
  }
  else return 0;
   d9140:	eddf 7a08 	vldr	s15, [pc, #32]	; d9164 <_ZN3ULP7getTempEiPc+0xc0>
}
   d9144:	ee17 0a90 	vmov	r0, s15
   d9148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d914c:	2003d5ac 	.word	0x2003d5ac
   d9150:	2003d5b0 	.word	0x2003d5b0
   d9154:	000e73f0 	.word	0x000e73f0
   d9158:	39800000 	.word	0x39800000
   d915c:	42000000 	.word	0x42000000
   d9160:	000e77ee 	.word	0x000e77ee
   d9164:	00000000 	.word	0x00000000

000d9168 <_ZN3ULP4zeroEv>:
  else return 0;
  
  return _Vref;
}

float  ULP::zero() { //function to zero sensor and get temperature at that zero _Tz
   d9168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d916a:	4604      	mov	r4, r0
   d916c:	f001 f9fe 	bl	da56c <HAL_Timer_Get_Milli_Seconds>
  unsigned long etime, i = 0, n = 10;
  unsigned long AC = 0;
   d9170:	2500      	movs	r5, #0
  etime = millis() + n * 1000;
   d9172:	f500 571c 	add.w	r7, r0, #9984	; 0x2700
   d9176:	3710      	adds	r7, #16
  
  return _Vref;
}

float  ULP::zero() { //function to zero sensor and get temperature at that zero _Tz
  unsigned long etime, i = 0, n = 10;
   d9178:	462e      	mov	r6, r5
  unsigned long AC = 0;
  etime = millis() + n * 1000;
  do {
    AC = AC + analogRead(_CPin);
   d917a:	8820      	ldrh	r0, [r4, #0]
   d917c:	f003 fed9 	bl	dcf32 <analogRead>
   d9180:	4405      	add	r5, r0
    delay(1);
   d9182:	2001      	movs	r0, #1
   d9184:	f002 fb38 	bl	db7f8 <delay>
   d9188:	f001 f9f0 	bl	da56c <HAL_Timer_Get_Milli_Seconds>

float  ULP::zero() { //function to zero sensor and get temperature at that zero _Tz
  unsigned long etime, i = 0, n = 10;
  unsigned long AC = 0;
  etime = millis() + n * 1000;
  do {
   d918c:	42b8      	cmp	r0, r7
    AC = AC + analogRead(_CPin);
    delay(1);
    i++;
   d918e:	f106 0601 	add.w	r6, r6, #1

float  ULP::zero() { //function to zero sensor and get temperature at that zero _Tz
  unsigned long etime, i = 0, n = 10;
  unsigned long AC = 0;
  etime = millis() + n * 1000;
  do {
   d9192:	d3f2      	bcc.n	d917a <_ZN3ULP4zeroEv+0x12>
  } while (millis() < etime);
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
  float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
  _Voff = Vgas - _Vref;
   d9194:	ee07 5a90 	vmov	s15, r5
   d9198:	ee07 6a10 	vmov	s14, r6
   d919c:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d91a0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    i++;
  } while (millis() < etime);
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
  float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
   d91a4:	4b15      	ldr	r3, [pc, #84]	; (d91fc <_ZN3ULP4zeroEv+0x94>)
  _Voff = Vgas - _Vref;
   d91a6:	eec7 6a87 	vdiv.f32	s13, s15, s14
   d91aa:	edd3 7a00 	vldr	s15, [r3]
   d91ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
   d91b2:	ee17 0a90 	vmov	r0, s15
   d91b6:	f009 fcef 	bl	e2b98 <__aeabi_f2d>
   d91ba:	2200      	movs	r2, #0
   d91bc:	4b10      	ldr	r3, [pc, #64]	; (d9200 <_ZN3ULP4zeroEv+0x98>)
   d91be:	f009 fd3f 	bl	e2c40 <__aeabi_dmul>
   d91c2:	4b10      	ldr	r3, [pc, #64]	; (d9204 <_ZN3ULP4zeroEv+0x9c>)
   d91c4:	2200      	movs	r2, #0
   d91c6:	f009 fd3b 	bl	e2c40 <__aeabi_dmul>
   d91ca:	f00a f831 	bl	e3230 <__aeabi_d2f>
   d91ce:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
  _Tz = getTemp(10);
   d91d2:	4a0d      	ldr	r2, [pc, #52]	; (d9208 <_ZN3ULP4zeroEv+0xa0>)
  } while (millis() < etime);
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
  float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
  _Voff = Vgas - _Vref;
   d91d4:	ee07 0a10 	vmov	s14, r0
   d91d8:	ee77 7a67 	vsub.f32	s15, s14, s15
  _Tz = getTemp(10);
   d91dc:	210a      	movs	r1, #10
  } while (millis() < etime);
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
  float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
  _Voff = Vgas - _Vref;
   d91de:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
  _Tz = getTemp(10);
   d91e2:	4620      	mov	r0, r4
   d91e4:	f7ff ff5e 	bl	d90a4 <_ZN3ULP7getTempEiPc>
   d91e8:	ee07 0a90 	vmov	s15, r0
   d91ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  return _Voff;
} //returns voltage at zero concentration
   d91f0:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
  float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
  _Voff = Vgas - _Vref;
  _Tz = getTemp(10);
   d91f4:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
  return _Voff;
} //returns voltage at zero concentration
   d91f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d91fa:	bf00      	nop
   d91fc:	2003d5ac 	.word	0x2003d5ac
   d9200:	408f4000 	.word	0x408f4000
   d9204:	3f300000 	.word	0x3f300000
   d9208:	000e77ee 	.word	0x000e77ee

000d920c <_ZN3ULP7getVgasEi>:

float ULP::getVgas(int n) //gets the gas voltage from analog read. using n seconds as averaging time
{
   d920c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d920e:	460c      	mov	r4, r1
   d9210:	4607      	mov	r7, r0
   d9212:	f001 f9ab 	bl	da56c <HAL_Timer_Get_Milli_Seconds>
  unsigned long etime, i = 0;
  unsigned long AC = 0;
  etime = millis() + n * 1000;
   d9216:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   d921a:	fb06 0604 	mla	r6, r6, r4, r0
} //returns voltage at zero concentration

float ULP::getVgas(int n) //gets the gas voltage from analog read. using n seconds as averaging time
{
  unsigned long etime, i = 0;
  unsigned long AC = 0;
   d921e:	2400      	movs	r4, #0
  return _Voff;
} //returns voltage at zero concentration

float ULP::getVgas(int n) //gets the gas voltage from analog read. using n seconds as averaging time
{
  unsigned long etime, i = 0;
   d9220:	4625      	mov	r5, r4
  unsigned long AC = 0;
  etime = millis() + n * 1000;
  do {
    AC = AC + analogRead(_CPin);
   d9222:	8838      	ldrh	r0, [r7, #0]
   d9224:	f003 fe85 	bl	dcf32 <analogRead>
   d9228:	4404      	add	r4, r0
    delay(1);
   d922a:	2001      	movs	r0, #1
   d922c:	f002 fae4 	bl	db7f8 <delay>
   d9230:	f001 f99c 	bl	da56c <HAL_Timer_Get_Milli_Seconds>
float ULP::getVgas(int n) //gets the gas voltage from analog read. using n seconds as averaging time
{
  unsigned long etime, i = 0;
  unsigned long AC = 0;
  etime = millis() + n * 1000;
  do {
   d9234:	42b0      	cmp	r0, r6
    AC = AC + analogRead(_CPin);
    delay(1);
    i++;
   d9236:	f105 0501 	add.w	r5, r5, #1
float ULP::getVgas(int n) //gets the gas voltage from analog read. using n seconds as averaging time
{
  unsigned long etime, i = 0;
  unsigned long AC = 0;
  etime = millis() + n * 1000;
  do {
   d923a:	d3f2      	bcc.n	d9222 <_ZN3ULP7getVgasEi+0x16>
  } while (millis() < etime);
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
  return Vgas;
   d923c:	ee07 4a90 	vmov	s15, r4
   d9240:	ee07 5a10 	vmov	s14, r5
   d9244:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d9248:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    i++;
  } while (millis() < etime);
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
   d924c:	4b0b      	ldr	r3, [pc, #44]	; (d927c <_ZN3ULP7getVgasEi+0x70>)
  return Vgas;
   d924e:	eec7 6a87 	vdiv.f32	s13, s15, s14
   d9252:	edd3 7a00 	vldr	s15, [r3]
   d9256:	ee66 7aa7 	vmul.f32	s15, s13, s15
   d925a:	ee17 0a90 	vmov	r0, s15
   d925e:	f009 fc9b 	bl	e2b98 <__aeabi_f2d>
   d9262:	2200      	movs	r2, #0
   d9264:	4b06      	ldr	r3, [pc, #24]	; (d9280 <_ZN3ULP7getVgasEi+0x74>)
   d9266:	f009 fceb 	bl	e2c40 <__aeabi_dmul>
   d926a:	2200      	movs	r2, #0
   d926c:	4b05      	ldr	r3, [pc, #20]	; (d9284 <_ZN3ULP7getVgasEi+0x78>)
   d926e:	f009 fce7 	bl	e2c40 <__aeabi_dmul>
   d9272:	f009 ffdd 	bl	e3230 <__aeabi_d2f>
} //returns voltage at zero concentration
   d9276:	ee00 0a10 	vmov	s0, r0
   d927a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d927c:	2003d5ac 	.word	0x2003d5ac
   d9280:	408f4000 	.word	0x408f4000
   d9284:	3f300000 	.word	0x3f300000

000d9288 <_ZN3ULP7getConcEif>:



float  ULP::getConc(int n, float t) { //gets the concentration using n seconds as averaging time, with temperature correction if including t, otherwise, not temperature corrected.
   d9288:	b5d0      	push	{r4, r6, r7, lr}
   d928a:	ed2d 8b02 	vpush	{d8}
   d928e:	4604      	mov	r4, r0
   d9290:	eeb0 8a40 	vmov.f32	s16, s0

  float nA = (getVgas(n) - _Vref - _Voff)/1000.0/ float(_Gain) * 1000000000.0;
   d9294:	f7ff ffba 	bl	d920c <_ZN3ULP7getVgasEi>
   d9298:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
   d929c:	ee30 0a67 	vsub.f32	s0, s0, s15
   d92a0:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
   d92a4:	ee70 7a67 	vsub.f32	s15, s0, s15
   d92a8:	ee17 0a90 	vmov	r0, s15
   d92ac:	f009 fc74 	bl	e2b98 <__aeabi_f2d>
   d92b0:	2200      	movs	r2, #0
   d92b2:	4b21      	ldr	r3, [pc, #132]	; (d9338 <_ZN3ULP7getConcEif+0xb0>)
   d92b4:	f009 fdee 	bl	e2e94 <__aeabi_ddiv>
   d92b8:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
   d92bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d92c0:	4606      	mov	r6, r0
   d92c2:	ee17 0a90 	vmov	r0, s15
   d92c6:	460f      	mov	r7, r1
   d92c8:	f009 fc66 	bl	e2b98 <__aeabi_f2d>
   d92cc:	4602      	mov	r2, r0
   d92ce:	460b      	mov	r3, r1
   d92d0:	4630      	mov	r0, r6
   d92d2:	4639      	mov	r1, r7
   d92d4:	f009 fdde 	bl	e2e94 <__aeabi_ddiv>
   d92d8:	a315      	add	r3, pc, #84	; (adr r3, d9330 <_ZN3ULP7getConcEif+0xa8>)
   d92da:	e9d3 2300 	ldrd	r2, r3, [r3]
   d92de:	f009 fcaf 	bl	e2c40 <__aeabi_dmul>
   d92e2:	f009 ffa5 	bl	e3230 <__aeabi_d2f>
  DEBUG_PRINT(", ");
    DEBUG_PRINT(_Vref);
  DEBUG_PRINT(", ");
    DEBUG_PRINT(_Voff);
  DEBUG_PRINT(", ");
  if (t>23){
   d92e6:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
   d92ea:	eeb4 8ac7 	vcmpe.f32	s16, s14
   d92ee:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
   d92f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  nA = nA - _Ah*(t-_Tz); 
  }
  else{
  nA = nA - _Al*(t-_Tz);
   d92f6:	ee78 6a47 	vsub.f32	s13, s16, s14



float  ULP::getConc(int n, float t) { //gets the concentration using n seconds as averaging time, with temperature correction if including t, otherwise, not temperature corrected.

  float nA = (getVgas(n) - _Vref - _Voff)/1000.0/ float(_Gain) * 1000000000.0;
   d92fa:	ee07 0a90 	vmov	s15, r0
    DEBUG_PRINT(_Vref);
  DEBUG_PRINT(", ");
    DEBUG_PRINT(_Voff);
  DEBUG_PRINT(", ");
  if (t>23){
  nA = nA - _Ah*(t-_Tz); 
   d92fe:	bfcc      	ite	gt
   d9300:	ed94 6a0c 	vldrgt	s12, [r4, #48]	; 0x30
  }
  else{
  nA = nA - _Al*(t-_Tz);
   d9304:	ed94 6a0d 	vldrle	s12, [r4, #52]	; 0x34
  }
  
  float Conc = nA /_Sf*(1-_Tc*(t-_Tz));
 
  return Conc;
   d9308:	ee38 8a47 	vsub.f32	s16, s16, s14
  DEBUG_PRINT(", ");
  if (t>23){
  nA = nA - _Ah*(t-_Tz); 
  }
  else{
  nA = nA - _Al*(t-_Tz);
   d930c:	eee6 7a66 	vfms.f32	s15, s12, s13
  }
  
  float Conc = nA /_Sf*(1-_Tc*(t-_Tz));
 
  return Conc;
   d9310:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
   d9314:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   d9318:	eea6 0ac8 	vfms.f32	s0, s13, s16
}
   d931c:	ecbd 8b02 	vpop	{d8}
  nA = nA - _Al*(t-_Tz);
  }
  
  float Conc = nA /_Sf*(1-_Tc*(t-_Tz));
 
  return Conc;
   d9320:	edd4 6a02 	vldr	s13, [r4, #8]
   d9324:	ee87 7aa6 	vdiv.f32	s14, s15, s13
}
   d9328:	ee20 0a07 	vmul.f32	s0, s0, s14
   d932c:	bdd0      	pop	{r4, r6, r7, pc}
   d932e:	bf00      	nop
   d9330:	00000000 	.word	0x00000000
   d9334:	41cdcd65 	.word	0x41cdcd65
   d9338:	408f4000 	.word	0x408f4000

000d933c <_ZN3IAQC1Eiif>:
  _Tc = 0.5;
  _Ah = 3.91;
  _Al = 1.11;
}

IAQ::IAQ(int a, int b, float c) : ULP(a, b, c) {
   d933c:	b508      	push	{r3, lr}
   d933e:	4603      	mov	r3, r0
   d9340:	f7ff fe7e 	bl	d9040 <_ZN3ULPC1Eiif>
  Serial.println(_Tb);
}

float  ULP::setVref (long R1, long R2, long R3, int bias) { //function for setting vref for custom sensors. Not critical value as call to concentration cancels out _Vref with _Voff
  if (bias>0){
    _Vref = _Vsup * float(R1+R2) / float(R1 + R2 + R3) * 1000.0;
   d9344:	4a0d      	ldr	r2, [pc, #52]	; (d937c <_ZN3IAQC1Eiif+0x40>)
   d9346:	ed9f 7a0e 	vldr	s14, [pc, #56]	; d9380 <_ZN3IAQC1Eiif+0x44>
   d934a:	edd2 7a00 	vldr	s15, [r2]
   d934e:	eddf 6a0d 	vldr	s13, [pc, #52]	; d9384 <_ZN3IAQC1Eiif+0x48>
  _Al = 1.11;
}

IAQ::IAQ(int a, int b, float c) : ULP(a, b, c) {
  setVref(1000000, 105000, 1000000, +1);
  _Gain = 100000;
   d9352:	4a0d      	ldr	r2, [pc, #52]	; (d9388 <_ZN3IAQC1Eiif+0x4c>)
   d9354:	63da      	str	r2, [r3, #60]	; 0x3c
  Serial.println(_Tb);
}

float  ULP::setVref (long R1, long R2, long R3, int bias) { //function for setting vref for custom sensors. Not critical value as call to concentration cancels out _Vref with _Voff
  if (bias>0){
    _Vref = _Vsup * float(R1+R2) / float(R1 + R2 + R3) * 1000.0;
   d9356:	ee27 7a87 	vmul.f32	s14, s15, s14
}

IAQ::IAQ(int a, int b, float c) : ULP(a, b, c) {
  setVref(1000000, 105000, 1000000, +1);
  _Gain = 100000;
  _Tc = 0.5;
   d935a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
  Serial.println(_Tb);
}

float  ULP::setVref (long R1, long R2, long R3, int bias) { //function for setting vref for custom sensors. Not critical value as call to concentration cancels out _Vref with _Voff
  if (bias>0){
    _Vref = _Vsup * float(R1+R2) / float(R1 + R2 + R3) * 1000.0;
   d935e:	eec7 7a26 	vdiv.f32	s15, s14, s13
}

IAQ::IAQ(int a, int b, float c) : ULP(a, b, c) {
  setVref(1000000, 105000, 1000000, +1);
  _Gain = 100000;
  _Tc = 0.5;
   d9362:	62da      	str	r2, [r3, #44]	; 0x2c
  _Ah = 16.20;
   d9364:	4a09      	ldr	r2, [pc, #36]	; (d938c <_ZN3IAQC1Eiif+0x50>)
   d9366:	631a      	str	r2, [r3, #48]	; 0x30
  _Al = 4.61;
   d9368:	4a09      	ldr	r2, [pc, #36]	; (d9390 <_ZN3IAQC1Eiif+0x54>)
   d936a:	635a      	str	r2, [r3, #52]	; 0x34
}
   d936c:	4618      	mov	r0, r3
  Serial.println(_Tb);
}

float  ULP::setVref (long R1, long R2, long R3, int bias) { //function for setting vref for custom sensors. Not critical value as call to concentration cancels out _Vref with _Voff
  if (bias>0){
    _Vref = _Vsup * float(R1+R2) / float(R1 + R2 + R3) * 1000.0;
   d936e:	ed9f 7a09 	vldr	s14, [pc, #36]	; d9394 <_ZN3IAQC1Eiif+0x58>
   d9372:	ee67 7a87 	vmul.f32	s15, s15, s14
   d9376:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  setVref(1000000, 105000, 1000000, +1);
  _Gain = 100000;
  _Tc = 0.5;
  _Ah = 16.20;
  _Al = 4.61;
}
   d937a:	bd08      	pop	{r3, pc}
   d937c:	2003d5b0 	.word	0x2003d5b0
   d9380:	4986e340 	.word	0x4986e340
   d9384:	4a007aa0 	.word	0x4a007aa0
   d9388:	000186a0 	.word	0x000186a0
   d938c:	4181999a 	.word	0x4181999a
   d9390:	4093851f 	.word	0x4093851f
   d9394:	447a0000 	.word	0x447a0000

000d9398 <_GLOBAL__sub_I__ZN3ULPC2Eiif>:
   d9398:	f001 b868 	b.w	da46c <HAL_Pin_Map>

000d939c <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d939c:	6803      	ldr	r3, [r0, #0]
   d939e:	b2c9      	uxtb	r1, r1
   d93a0:	689b      	ldr	r3, [r3, #8]
   d93a2:	4718      	bx	r3

000d93a4 <_ZN8MCP7941xC1Ev>:

#include "MCP7941x.h"


// Constructor:
MCP7941x::MCP7941x()
   d93a4:	b510      	push	{r4, lr}
   d93a6:	4604      	mov	r4, r0
{
  //  Wire.setSpeed(400000);
  // Initialize the I2C bus if not already enabled
  if (!Wire.isEnabled()) {
   d93a8:	f003 fe22 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d93ac:	f003 f83a 	bl	dc424 <_ZN7TwoWire9isEnabledEv>
   d93b0:	b918      	cbnz	r0, d93ba <_ZN8MCP7941xC1Ev+0x16>
      Wire.begin();
   d93b2:	f003 fe1d 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d93b6:	f003 f807 	bl	dc3c8 <_ZN7TwoWire5beginEv>
  }
}
   d93ba:	4620      	mov	r0, r4
   d93bc:	bd10      	pop	{r4, pc}

000d93be <_ZN8MCP7941x11setDateTimeEhhhhhhh>:
  byte hr,          // 1-23
  byte dyofWk,     // 1-7
  byte dyofMnth,    // 1-28/29/30/31
  byte mnth,         // 1-12
  byte yr)          // 0-99
{
   d93be:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d93c2:	4692      	mov	sl, r2
   d93c4:	4698      	mov	r8, r3
   d93c6:	460d      	mov	r5, r1
   d93c8:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
   d93cc:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
   d93d0:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
   d93d4:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
  Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
   d93d8:	f003 fe0a 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d93dc:	216f      	movs	r1, #111	; 0x6f


// Convert normal decimal numbers to binary coded decimal:
byte MCP7941x::decToBcd(byte val)
{
  return ( (val/10*16) + (val%10) );
   d93de:	240a      	movs	r4, #10
  byte dyofWk,     // 1-7
  byte dyofMnth,    // 1-28/29/30/31
  byte mnth,         // 1-12
  byte yr)          // 0-99
{
  Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
   d93e0:	f003 f816 	bl	dc410 <_ZN7TwoWire17beginTransmissionEi>
  WireSend(RTC_LOCATION);
   d93e4:	f003 fe04 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d93e8:	2100      	movs	r1, #0
   d93ea:	f7ff ffd7 	bl	d939c <_ZN7TwoWire5writeEi>

  WireSend(decToBcd(sec) & 0x7f);              // set seconds and disable clock (01111111)
   d93ee:	f003 fdff 	bl	dcff0 <_Z19__fetch_global_Wirev>


// Convert normal decimal numbers to binary coded decimal:
byte MCP7941x::decToBcd(byte val)
{
  return ( (val/10*16) + (val%10) );
   d93f2:	fbb5 f3f4 	udiv	r3, r5, r4
   d93f6:	fb04 5513 	mls	r5, r4, r3, r5
   d93fa:	eb05 1503 	add.w	r5, r5, r3, lsl #4
   d93fe:	b2ed      	uxtb	r5, r5
  byte yr)          // 0-99
{
  Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
  WireSend(RTC_LOCATION);

  WireSend(decToBcd(sec) & 0x7f);              // set seconds and disable clock (01111111)
   d9400:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   d9404:	f7ff ffca 	bl	d939c <_ZN7TwoWire5writeEi>
  WireSend(decToBcd(min) & 0x7f);              // set minutes (01111111)
   d9408:	f003 fdf2 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d940c:	fbba f1f4 	udiv	r1, sl, r4
   d9410:	fb04 aa11 	mls	sl, r4, r1, sl
   d9414:	eb0a 1101 	add.w	r1, sl, r1, lsl #4
   d9418:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   d941c:	f7ff ffbe 	bl	d939c <_ZN7TwoWire5writeEi>
  WireSend(decToBcd(hr) & 0x3f);                // set hours and to 24hr clock (00111111)
   d9420:	f003 fde6 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d9424:	fbb8 f1f4 	udiv	r1, r8, r4
   d9428:	fb04 8811 	mls	r8, r4, r1, r8
   d942c:	eb08 1101 	add.w	r1, r8, r1, lsl #4
   d9430:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   d9434:	f7ff ffb2 	bl	d939c <_ZN7TwoWire5writeEi>
  WireSend(0x08 | (decToBcd(dyofWk) & 0x07));  // set the day and enable battery backup (00000111)|(00001000)
   d9438:	f003 fdda 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d943c:	fbbb f1f4 	udiv	r1, fp, r4
   d9440:	fb04 b111 	mls	r1, r4, r1, fp
   d9444:	f001 0107 	and.w	r1, r1, #7
   d9448:	f041 0108 	orr.w	r1, r1, #8
   d944c:	f7ff ffa6 	bl	d939c <_ZN7TwoWire5writeEi>
  WireSend(decToBcd(dyofMnth) & 0x3f);          // set the date in mnth (00111111)
   d9450:	f003 fdce 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d9454:	fbb7 f1f4 	udiv	r1, r7, r4
   d9458:	fb04 7711 	mls	r7, r4, r1, r7
   d945c:	eb07 1101 	add.w	r1, r7, r1, lsl #4
   d9460:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   d9464:	f7ff ff9a 	bl	d939c <_ZN7TwoWire5writeEi>
  WireSend(decToBcd(mnth) & 0x1f);               // set the mnth (00011111)
   d9468:	f003 fdc2 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d946c:	fbb6 f1f4 	udiv	r1, r6, r4
   d9470:	fb04 6611 	mls	r6, r4, r1, r6
   d9474:	eb06 1101 	add.w	r1, r6, r1, lsl #4
   d9478:	f001 011f 	and.w	r1, r1, #31
   d947c:	f7ff ff8e 	bl	d939c <_ZN7TwoWire5writeEi>
  WireSend(decToBcd(yr));                       // set the yr (11111111)
   d9480:	f003 fdb6 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d9484:	fbb9 f1f4 	udiv	r1, r9, r4
   d9488:	6803      	ldr	r3, [r0, #0]
   d948a:	fb04 9411 	mls	r4, r4, r1, r9
   d948e:	eb04 1101 	add.w	r1, r4, r1, lsl #4
   d9492:	689b      	ldr	r3, [r3, #8]
   d9494:	b2c9      	uxtb	r1, r1
   d9496:	4798      	blx	r3

  Wire.endTransmission();
   d9498:	f003 fdaa 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d949c:	f002 ffbf 	bl	dc41e <_ZN7TwoWire15endTransmissionEv>

  // Start Clock:
  Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
   d94a0:	f003 fda6 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d94a4:	216f      	movs	r1, #111	; 0x6f
   d94a6:	f002 ffb3 	bl	dc410 <_ZN7TwoWire17beginTransmissionEi>
  WireSend(RTC_LOCATION);
   d94aa:	f003 fda1 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d94ae:	2100      	movs	r1, #0
   d94b0:	f7ff ff74 	bl	d939c <_ZN7TwoWire5writeEi>
  WireSend(decToBcd(sec) | 0x80);     // set seconds and enable clock (10000000)
   d94b4:	f003 fd9c 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d94b8:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d94bc:	f7ff ff6e 	bl	d939c <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
   d94c0:	f003 fd96 	bl	dcff0 <_Z19__fetch_global_Wirev>

// Serial1.print("Set time: ");
// Serial1.println(String(yr)+":"+String(mnth)+":"+String(dyofMnth)+":"+String(dyofWk)+":"+String(hr)+":"+String(min)+":"+String(sec));

}
   d94c4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  // Start Clock:
  Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
  WireSend(RTC_LOCATION);
  WireSend(decToBcd(sec) | 0x80);     // set seconds and enable clock (10000000)
  Wire.endTransmission();
   d94c8:	f002 bfa9 	b.w	dc41e <_ZN7TwoWire15endTransmissionEv>

000d94cc <_ZN8MCP7941x11getDateTimeEPhS0_S0_S0_S0_S0_S0_>:
  byte *hr,
  byte *dyofWk,
  byte *dyofMnth,
  byte *mnth,
  byte *yr)
{
   d94cc:	b570      	push	{r4, r5, r6, lr}
   d94ce:	461c      	mov	r4, r3
   d94d0:	4615      	mov	r5, r2
   d94d2:	460e      	mov	r6, r1
  Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
   d94d4:	f003 fd8c 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d94d8:	216f      	movs	r1, #111	; 0x6f
   d94da:	f002 ff99 	bl	dc410 <_ZN7TwoWire17beginTransmissionEi>
  WireSend(RTC_LOCATION);
   d94de:	f003 fd87 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d94e2:	2100      	movs	r1, #0
   d94e4:	f7ff ff5a 	bl	d939c <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
   d94e8:	f003 fd82 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d94ec:	f002 ff97 	bl	dc41e <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(MCP7941x_RTC_I2C_ADDR, 7);
   d94f0:	f003 fd7e 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d94f4:	216f      	movs	r1, #111	; 0x6f
   d94f6:	2207      	movs	r2, #7
   d94f8:	f002 ff7c 	bl	dc3f4 <_ZN7TwoWire11requestFromEii>

  // A few of these need masks because certain bits are control bits
  *sec     = bcdToDec(WireReceive() & 0x7f);  // 01111111
   d94fc:	f003 fd78 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d9500:	6803      	ldr	r3, [r0, #0]
   d9502:	695b      	ldr	r3, [r3, #20]
   d9504:	4798      	blx	r3
   d9506:	b2c0      	uxtb	r0, r0
   d9508:	f3c0 1302 	ubfx	r3, r0, #4, #3
   d950c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d9510:	f000 000f 	and.w	r0, r0, #15
   d9514:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d9518:	7030      	strb	r0, [r6, #0]
  *min     = bcdToDec(WireReceive() & 0x7f);  // 01111111
   d951a:	f003 fd69 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d951e:	6803      	ldr	r3, [r0, #0]
   d9520:	695b      	ldr	r3, [r3, #20]
   d9522:	4798      	blx	r3
   d9524:	b2c0      	uxtb	r0, r0
   d9526:	f3c0 1302 	ubfx	r3, r0, #4, #3
   d952a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d952e:	f000 000f 	and.w	r0, r0, #15
   d9532:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d9536:	7028      	strb	r0, [r5, #0]
  *hr       = bcdToDec(WireReceive() & 0x3f);  // 00111111
   d9538:	f003 fd5a 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d953c:	6803      	ldr	r3, [r0, #0]
   d953e:	695b      	ldr	r3, [r3, #20]
   d9540:	4798      	blx	r3
   d9542:	b2c0      	uxtb	r0, r0
   d9544:	f3c0 1301 	ubfx	r3, r0, #4, #2
   d9548:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d954c:	f000 000f 	and.w	r0, r0, #15
   d9550:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d9554:	7020      	strb	r0, [r4, #0]
  *dyofWk  = bcdToDec(WireReceive() & 0x07);  // 01111111
   d9556:	f003 fd4b 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d955a:	6803      	ldr	r3, [r0, #0]
   d955c:	695b      	ldr	r3, [r3, #20]
   d955e:	4798      	blx	r3
   d9560:	9b04      	ldr	r3, [sp, #16]
   d9562:	f000 0007 	and.w	r0, r0, #7
   d9566:	7018      	strb	r0, [r3, #0]
  *dyofMnth = bcdToDec(WireReceive() & 0x3f);  // 00111111
   d9568:	f003 fd42 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d956c:	6803      	ldr	r3, [r0, #0]
   d956e:	695b      	ldr	r3, [r3, #20]
   d9570:	4798      	blx	r3
   d9572:	b2c0      	uxtb	r0, r0
   d9574:	f3c0 1301 	ubfx	r3, r0, #4, #2
   d9578:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d957c:	f000 000f 	and.w	r0, r0, #15
   d9580:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d9584:	9b05      	ldr	r3, [sp, #20]
   d9586:	7018      	strb	r0, [r3, #0]
  *mnth      = bcdToDec(WireReceive() & 0x1f);  // 00011111
   d9588:	f003 fd32 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d958c:	6803      	ldr	r3, [r0, #0]
   d958e:	695b      	ldr	r3, [r3, #20]
   d9590:	4798      	blx	r3
   d9592:	b2c0      	uxtb	r0, r0
   d9594:	f3c0 1200 	ubfx	r2, r0, #4, #1
   d9598:	0093      	lsls	r3, r2, #2
   d959a:	4413      	add	r3, r2
   d959c:	f000 000f 	and.w	r0, r0, #15
   d95a0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d95a4:	9b06      	ldr	r3, [sp, #24]
   d95a6:	7018      	strb	r0, [r3, #0]
  *yr       = bcdToDec(WireReceive());         // 11111111
   d95a8:	f003 fd22 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d95ac:	6803      	ldr	r3, [r0, #0]
   d95ae:	695b      	ldr	r3, [r3, #20]
   d95b0:	4798      	blx	r3
   d95b2:	b2c0      	uxtb	r0, r0
   d95b4:	0903      	lsrs	r3, r0, #4
   d95b6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d95ba:	f000 000f 	and.w	r0, r0, #15
   d95be:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d95c2:	9b07      	ldr	r3, [sp, #28]
   d95c4:	7018      	strb	r0, [r3, #0]
   d95c6:	bd70      	pop	{r4, r5, r6, pc}

000d95c8 <_ZN8MCP7941x11setUnixTimeEm>:
// }

// Set the date/time, set to 24hr and enable the clock:
// (assumes you're passing in valid numbers)
void MCP7941x::setUnixTime(uint32_t unixTime)
{
   d95c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d95cc:	4607      	mov	r7, r0
   d95ce:	b08d      	sub	sp, #52	; 0x34
  byte sec = (byte)Time.second(unixTime);
   d95d0:	4608      	mov	r0, r1
// }

// Set the date/time, set to 24hr and enable the clock:
// (assumes you're passing in valid numbers)
void MCP7941x::setUnixTime(uint32_t unixTime)
{
   d95d2:	460c      	mov	r4, r1
  byte sec = (byte)Time.second(unixTime);
   d95d4:	f002 f800 	bl	db5d8 <_ZN9TimeClass6secondEl>
   d95d8:	4680      	mov	r8, r0
  byte min= (byte)Time.minute(unixTime);
   d95da:	4620      	mov	r0, r4
   d95dc:	f001 fff4 	bl	db5c8 <_ZN9TimeClass6minuteEl>
   d95e0:	4681      	mov	r9, r0
  byte hr= (byte)Time.hour(unixTime);
   d95e2:	4620      	mov	r0, r4
   d95e4:	f001 ffe8 	bl	db5b8 <_ZN9TimeClass4hourEl>
   d95e8:	4682      	mov	sl, r0
  byte dyofWk= (byte)Time.weekday(unixTime);
   d95ea:	4620      	mov	r0, r4
   d95ec:	f002 f804 	bl	db5f8 <_ZN9TimeClass7weekdayEl>
   d95f0:	4605      	mov	r5, r0
  byte dyofMnth= (byte)Time.day(unixTime);
   d95f2:	4620      	mov	r0, r4
   d95f4:	f001 fff8 	bl	db5e8 <_ZN9TimeClass3dayEl>
   d95f8:	4606      	mov	r6, r0
  byte mnth= (byte)Time.month(unixTime);
   d95fa:	4620      	mov	r0, r4
   d95fc:	f002 f806 	bl	db60c <_ZN9TimeClass5monthEl>
   d9600:	4683      	mov	fp, r0
  String yrString = String(Time.year(unixTime));
   d9602:	4620      	mov	r0, r4
   d9604:	f002 f80c 	bl	db620 <_ZN9TimeClass4yearEl>
   d9608:	220a      	movs	r2, #10
   d960a:	4601      	mov	r1, r0
   d960c:	a804      	add	r0, sp, #16
   d960e:	f001 fcd5 	bl	dafbc <_ZN6StringC1Eih>
  byte yr = (byte) yrString.substring(2).toInt();
   d9612:	a904      	add	r1, sp, #16
   d9614:	2202      	movs	r2, #2
   d9616:	a808      	add	r0, sp, #32
   d9618:	f001 fd52 	bl	db0c0 <_ZNK6String9substringEj>
   d961c:	a808      	add	r0, sp, #32
   d961e:	f001 fd63 	bl	db0e8 <_ZNK6String5toIntEv>
   d9622:	4604      	mov	r4, r0
   d9624:	a808      	add	r0, sp, #32
   d9626:	f001 fc0d 	bl	dae44 <_ZN6StringD1Ev>
    min,        // 0-59
    hr,          // 1-23
    dyofWk,     // 1-7
    dyofMnth,    // 1-28/29/30/31
    mnth,         // 1-12
    yr);          // 0-99
   d962a:	b2e4      	uxtb	r4, r4
   d962c:	fa5f f38b 	uxtb.w	r3, fp
   d9630:	b2f6      	uxtb	r6, r6
   d9632:	b2ed      	uxtb	r5, r5
   d9634:	9302      	str	r3, [sp, #8]
   d9636:	fa5f f289 	uxtb.w	r2, r9
   d963a:	fa5f f38a 	uxtb.w	r3, sl
   d963e:	fa5f f188 	uxtb.w	r1, r8
   d9642:	4638      	mov	r0, r7
   d9644:	9403      	str	r4, [sp, #12]
   d9646:	9601      	str	r6, [sp, #4]
   d9648:	9500      	str	r5, [sp, #0]
   d964a:	f7ff feb8 	bl	d93be <_ZN8MCP7941x11setDateTimeEhhhhhhh>
  byte min= (byte)Time.minute(unixTime);
  byte hr= (byte)Time.hour(unixTime);
  byte dyofWk= (byte)Time.weekday(unixTime);
  byte dyofMnth= (byte)Time.day(unixTime);
  byte mnth= (byte)Time.month(unixTime);
  String yrString = String(Time.year(unixTime));
   d964e:	a804      	add	r0, sp, #16
   d9650:	f001 fbf8 	bl	dae44 <_ZN6StringD1Ev>
    hr,          // 1-23
    dyofWk,     // 1-7
    dyofMnth,    // 1-28/29/30/31
    mnth,         // 1-12
    yr);          // 0-99
}
   d9654:	b00d      	add	sp, #52	; 0x34
   d9656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d965a <_ZN8MCP7941x6rtcNowEv>:
}

//gets unix as defined by the external RTC
// Note that since the MCP7941 only stores years 0-99
// we assume time from 2000 onwards.
uint32_t MCP7941x::rtcNow(){
   d965a:	b500      	push	{lr}
   d965c:	b091      	sub	sp, #68	; 0x44
		  &min,
		  &hr,
		  &dyofWk,
		  &dyofMnth,
		  &mnth,
		  &yr);
   d965e:	f10d 031b 	add.w	r3, sp, #27
   d9662:	9303      	str	r3, [sp, #12]
   d9664:	f10d 031a 	add.w	r3, sp, #26
   d9668:	9302      	str	r3, [sp, #8]
   d966a:	f10d 0319 	add.w	r3, sp, #25
   d966e:	9301      	str	r3, [sp, #4]
   d9670:	ab06      	add	r3, sp, #24
   d9672:	9300      	str	r3, [sp, #0]
   d9674:	f10d 0216 	add.w	r2, sp, #22
   d9678:	f10d 0317 	add.w	r3, sp, #23
   d967c:	f10d 0115 	add.w	r1, sp, #21
   d9680:	f7ff ff24 	bl	d94cc <_ZN8MCP7941x11getDateTimeEPhS0_S0_S0_S0_S0_S0_>



  //declare variable
  struct tm tm;
  tm.tm_sec = (sec);
   d9684:	f89d 3015 	ldrb.w	r3, [sp, #21]
   d9688:	9307      	str	r3, [sp, #28]
  tm.tm_min = (min);
   d968a:	f89d 3016 	ldrb.w	r3, [sp, #22]
   d968e:	9308      	str	r3, [sp, #32]
  tm.tm_hour = (hr);
   d9690:	f89d 3017 	ldrb.w	r3, [sp, #23]
   d9694:	9309      	str	r3, [sp, #36]	; 0x24
  tm.tm_mday = (dyofMnth);
   d9696:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d969a:	930a      	str	r3, [sp, #40]	; 0x28
  tm.tm_mon = (mnth)- 1;    // Assuming your month represents Jan with 1
   d969c:	f89d 301a 	ldrb.w	r3, [sp, #26]
   d96a0:	3b01      	subs	r3, #1
   d96a2:	930b      	str	r3, [sp, #44]	; 0x2c
  // tm.tm_year = yr + 52; // for some reason... the clock is set with this year ofset....
  tm.tm_year = yr + 100; // The above was a 4 yr to 2 year bug
   d96a4:	f89d 301b 	ldrb.w	r3, [sp, #27]
                  // The number of years since 1900 (by definition of tm)

  time_t moment = mktime(&tm);//create epoc time_t object
   d96a8:	a807      	add	r0, sp, #28
  tm.tm_min = (min);
  tm.tm_hour = (hr);
  tm.tm_mday = (dyofMnth);
  tm.tm_mon = (mnth)- 1;    // Assuming your month represents Jan with 1
  // tm.tm_year = yr + 52; // for some reason... the clock is set with this year ofset....
  tm.tm_year = yr + 100; // The above was a 4 yr to 2 year bug
   d96aa:	3364      	adds	r3, #100	; 0x64
   d96ac:	930c      	str	r3, [sp, #48]	; 0x30
                  // The number of years since 1900 (by definition of tm)

  time_t moment = mktime(&tm);//create epoc time_t object
   d96ae:	f00a f851 	bl	e3754 <mktime>

  return uint32_t(moment);
}
   d96b2:	b011      	add	sp, #68	; 0x44
   d96b4:	f85d fb04 	ldr.w	pc, [sp], #4

000d96b8 <_GLOBAL__sub_I__ZN8MCP7941xC2Ev>:
   d96b8:	f000 bed8 	b.w	da46c <HAL_Pin_Map>

000d96bc <_ZN10MB85RC256VD1Ev>:
MB85RC256V::MB85RC256V(TwoWire &wire, int addr) :
	wire(wire), addr(addr) {
}

MB85RC256V::~MB85RC256V() {
}
   d96bc:	4770      	bx	lr

000d96be <_ZN10MB85RC256VD0Ev>:

MB85RC256V::MB85RC256V(TwoWire &wire, int addr) :
	wire(wire), addr(addr) {
}

MB85RC256V::~MB85RC256V() {
   d96be:	b510      	push	{r4, lr}
}
   d96c0:	210c      	movs	r1, #12

MB85RC256V::MB85RC256V(TwoWire &wire, int addr) :
	wire(wire), addr(addr) {
}

MB85RC256V::~MB85RC256V() {
   d96c2:	4604      	mov	r4, r0
}
   d96c4:	f003 fcb9 	bl	dd03a <_ZdlPvj>
   d96c8:	4620      	mov	r0, r4
   d96ca:	bd10      	pop	{r4, pc}

000d96cc <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d96cc:	6803      	ldr	r3, [r0, #0]
   d96ce:	b2c9      	uxtb	r1, r1
   d96d0:	689b      	ldr	r3, [r3, #8]
   d96d2:	4718      	bx	r3

000d96d4 <_ZN10MB85RC256VC1ER7TwoWirei>:

#include "Particle.h"
#include "MB85RC256V-FRAM-RK.h"


MB85RC256V::MB85RC256V(TwoWire &wire, int addr) :
   d96d4:	b510      	push	{r4, lr}
	wire(wire), addr(addr) {
   d96d6:	4c02      	ldr	r4, [pc, #8]	; (d96e0 <_ZN10MB85RC256VC1ER7TwoWirei+0xc>)
   d96d8:	6004      	str	r4, [r0, #0]
   d96da:	6041      	str	r1, [r0, #4]
   d96dc:	6082      	str	r2, [r0, #8]
}
   d96de:	bd10      	pop	{r4, pc}
   d96e0:	000e78c4 	.word	0x000e78c4

000d96e4 <_ZN10MB85RC256V8readDataEjPhj>:
	}
	return true;
}


bool MB85RC256V::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d96e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d96e8:	4604      	mov	r4, r0
   d96ea:	460d      	mov	r5, r1
   d96ec:	4617      	mov	r7, r2
   d96ee:	4698      	mov	r8, r3
	bool result = true;

	while(dataLen > 0) {
   d96f0:	f1b8 0f00 	cmp.w	r8, #0
   d96f4:	d03f      	beq.n	d9776 <_ZN10MB85RC256V8readDataEjPhj+0x92>
		wire.beginTransmission(addr | DEVICE_ADDR);
   d96f6:	68a1      	ldr	r1, [r4, #8]
   d96f8:	6860      	ldr	r0, [r4, #4]
   d96fa:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d96fe:	f002 fe87 	bl	dc410 <_ZN7TwoWire17beginTransmissionEi>
		wire.write(framAddr >> 8);
   d9702:	0a29      	lsrs	r1, r5, #8
   d9704:	6860      	ldr	r0, [r4, #4]
   d9706:	f7ff ffe1 	bl	d96cc <_ZN7TwoWire5writeEj>
		wire.write(framAddr);
   d970a:	4629      	mov	r1, r5
   d970c:	6860      	ldr	r0, [r4, #4]
   d970e:	f7ff ffdd 	bl	d96cc <_ZN7TwoWire5writeEj>
		int stat = wire.endTransmission(false);
   d9712:	2100      	movs	r1, #0
   d9714:	6860      	ldr	r0, [r4, #4]
   d9716:	f002 fe7e 	bl	dc416 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d971a:	b110      	cbz	r0, d9722 <_ZN10MB85RC256V8readDataEjPhj+0x3e>
			//Serial.printlnf("read set address failed %d", stat);
			result = false;
   d971c:	2000      	movs	r0, #0
   d971e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9722:	f1b8 0f20 	cmp.w	r8, #32
		size_t bytesToRead = dataLen;
		if (bytesToRead > 32) {
			bytesToRead = 32;
		}

		wire.requestFrom(addr | DEVICE_ADDR, bytesToRead, true);
   d9726:	68a1      	ldr	r1, [r4, #8]
   d9728:	6860      	ldr	r0, [r4, #4]
   d972a:	46c1      	mov	r9, r8
   d972c:	bf28      	it	cs
   d972e:	f04f 0920 	movcs.w	r9, #32
   d9732:	2301      	movs	r3, #1
   d9734:	464a      	mov	r2, r9
   d9736:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d973a:	f002 fe60 	bl	dc3fe <_ZN7TwoWire11requestFromEiii>

		if (Wire.available() < (int) bytesToRead) {
   d973e:	f003 fc57 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d9742:	6803      	ldr	r3, [r0, #0]
   d9744:	691b      	ldr	r3, [r3, #16]
   d9746:	4798      	blx	r3
   d9748:	4581      	cmp	r9, r0
   d974a:	dce7      	bgt.n	d971c <_ZN10MB85RC256V8readDataEjPhj+0x38>
   d974c:	463e      	mov	r6, r7
   d974e:	ebc7 0a05 	rsb	sl, r7, r5
			result = false;
			break;
		}

		for(size_t ii = 0; ii < bytesToRead; ii++) {
		    *data++ = Wire.read();    // receive a byte as character
   d9752:	f003 fc4d 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d9756:	6803      	ldr	r3, [r0, #0]
   d9758:	695b      	ldr	r3, [r3, #20]
   d975a:	4798      	blx	r3
   d975c:	f806 0b01 	strb.w	r0, [r6], #1
		if (Wire.available() < (int) bytesToRead) {
			result = false;
			break;
		}

		for(size_t ii = 0; ii < bytesToRead; ii++) {
   d9760:	1bf2      	subs	r2, r6, r7
   d9762:	ebc6 0308 	rsb	r3, r6, r8
   d9766:	4591      	cmp	r9, r2
   d9768:	eb06 050a 	add.w	r5, r6, sl
   d976c:	443b      	add	r3, r7
   d976e:	d8f0      	bhi.n	d9752 <_ZN10MB85RC256V8readDataEjPhj+0x6e>
   d9770:	4698      	mov	r8, r3
		    *data++ = Wire.read();    // receive a byte as character
   d9772:	4637      	mov	r7, r6
   d9774:	e7bc      	b.n	d96f0 <_ZN10MB85RC256V8readDataEjPhj+0xc>
	return true;
}


bool MB85RC256V::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
	bool result = true;
   d9776:	2001      	movs	r0, #1
		    framAddr++;
		    dataLen--;
		}
	}
	return result;
}
   d9778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d977c <_ZN10MB85RC256V9writeDataEjPKhj>:


bool MB85RC256V::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d977c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9780:	4604      	mov	r4, r0
   d9782:	460d      	mov	r5, r1
   d9784:	4690      	mov	r8, r2
   d9786:	461f      	mov	r7, r3
	bool result = true;

	while(dataLen > 0) {
   d9788:	b357      	cbz	r7, d97e0 <_ZN10MB85RC256V9writeDataEjPKhj+0x64>
		wire.beginTransmission(addr | DEVICE_ADDR);
   d978a:	68a1      	ldr	r1, [r4, #8]
   d978c:	6860      	ldr	r0, [r4, #4]
   d978e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d9792:	f002 fe3d 	bl	dc410 <_ZN7TwoWire17beginTransmissionEi>
		wire.write(framAddr >> 8);
   d9796:	0a29      	lsrs	r1, r5, #8
   d9798:	6860      	ldr	r0, [r4, #4]
   d979a:	f7ff ff97 	bl	d96cc <_ZN7TwoWire5writeEj>
		wire.write(framAddr);
   d979e:	4629      	mov	r1, r5
   d97a0:	6860      	ldr	r0, [r4, #4]
   d97a2:	f7ff ff93 	bl	d96cc <_ZN7TwoWire5writeEj>
   d97a6:	f108 091e 	add.w	r9, r8, #30
   d97aa:	4646      	mov	r6, r8
   d97ac:	ebc8 0a05 	rsb	sl, r8, r5

		for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
			wire.write(*data);
   d97b0:	6860      	ldr	r0, [r4, #4]
   d97b2:	f816 1b01 	ldrb.w	r1, [r6], #1
   d97b6:	6803      	ldr	r3, [r0, #0]
   d97b8:	689b      	ldr	r3, [r3, #8]
   d97ba:	4798      	blx	r3
	while(dataLen > 0) {
		wire.beginTransmission(addr | DEVICE_ADDR);
		wire.write(framAddr >> 8);
		wire.write(framAddr);

		for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d97bc:	454e      	cmp	r6, r9
   d97be:	eb06 050a 	add.w	r5, r6, sl
			wire.write(*data);
			framAddr++;
			data++;
   d97c2:	46b0      	mov	r8, r6
			dataLen--;
   d97c4:	f107 37ff 	add.w	r7, r7, #4294967295
	while(dataLen > 0) {
		wire.beginTransmission(addr | DEVICE_ADDR);
		wire.write(framAddr >> 8);
		wire.write(framAddr);

		for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d97c8:	d001      	beq.n	d97ce <_ZN10MB85RC256V9writeDataEjPKhj+0x52>
   d97ca:	2f00      	cmp	r7, #0
   d97cc:	d1f0      	bne.n	d97b0 <_ZN10MB85RC256V9writeDataEjPKhj+0x34>
			framAddr++;
			data++;
			dataLen--;
		}

		int stat = wire.endTransmission(true);
   d97ce:	2101      	movs	r1, #1
   d97d0:	6860      	ldr	r0, [r4, #4]
   d97d2:	f002 fe20 	bl	dc416 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d97d6:	2800      	cmp	r0, #0
   d97d8:	d0d6      	beq.n	d9788 <_ZN10MB85RC256V9writeDataEjPKhj+0xc>
			//Serial.printlnf("write failed %d", stat);
			result = false;
   d97da:	2000      	movs	r0, #0
   d97dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return result;
}


bool MB85RC256V::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
	bool result = true;
   d97e0:	2001      	movs	r0, #1
			result = false;
			break;
		}
	}
	return result;
}
   d97e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d97e6 <_ZN10MB85RC256V5eraseEv>:

void MB85RC256V::begin() {
	wire.begin();
}

bool MB85RC256V::erase() {
   d97e6:	b530      	push	{r4, r5, lr}
   d97e8:	b089      	sub	sp, #36	; 0x24
   d97ea:	4605      	mov	r5, r0

	size_t framAddr = 0;
	size_t totalLen = MEMORY_SIZE;

	uint8_t zero[32];
	memset(zero, 0, sizeof(zero));
   d97ec:	2220      	movs	r2, #32
   d97ee:	2100      	movs	r1, #0
   d97f0:	4668      	mov	r0, sp
   d97f2:	f009 feca 	bl	e358a <memset>
	wire.begin();
}

bool MB85RC256V::erase() {

	size_t framAddr = 0;
   d97f6:	2400      	movs	r4, #0

	uint8_t zero[32];
	memset(zero, 0, sizeof(zero));

	while(totalLen > 0) {
		bool result = writeData(framAddr, zero, sizeof(zero));
   d97f8:	2320      	movs	r3, #32
   d97fa:	466a      	mov	r2, sp
   d97fc:	4621      	mov	r1, r4
   d97fe:	4628      	mov	r0, r5
   d9800:	f7ff ffbc 	bl	d977c <_ZN10MB85RC256V9writeDataEjPKhj>
		if (!result) {
   d9804:	b120      	cbz	r0, d9810 <_ZN10MB85RC256V5eraseEv+0x2a>
			return false;
		}

		totalLen -= sizeof(zero);
		framAddr += sizeof(zero);
   d9806:	3420      	adds	r4, #32
	size_t totalLen = MEMORY_SIZE;

	uint8_t zero[32];
	memset(zero, 0, sizeof(zero));

	while(totalLen > 0) {
   d9808:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   d980c:	d1f4      	bne.n	d97f8 <_ZN10MB85RC256V5eraseEv+0x12>
		}

		totalLen -= sizeof(zero);
		framAddr += sizeof(zero);
	}
	return true;
   d980e:	2001      	movs	r0, #1
}
   d9810:	b009      	add	sp, #36	; 0x24
   d9812:	bd30      	pop	{r4, r5, pc}

000d9814 <_GLOBAL__sub_I__ZN10MB85RC256VC2ER7TwoWirei>:
   d9814:	f000 be2a 	b.w	da46c <HAL_Pin_Map>

000d9818 <_ZN12IoTNodePowerC1Ev>:

// Constructor
IoTNodePower::IoTNodePower()
    {

    }
   d9818:	4770      	bx	lr
	...

000d981c <_ZN12IoTNodePower5beginEv>:

void IoTNodePower::begin()
{
   d981c:	b510      	push	{r4, lr}

      IOexp.begin();
   d981e:	4c53      	ldr	r4, [pc, #332]	; (d996c <_ZN12IoTNodePower5beginEv+0x150>)
   d9820:	4620      	mov	r0, r4
   d9822:	f000 fb0f 	bl	d9e44 <_ZN17Adafruit_MCP230175beginEv>
      //Set pin direction 1 = out, 0 = in
      //PORT_A,0b10111111 | PORT_B,0b00001111
      IOexp.pinMode(0,OUTPUT);
   d9826:	4620      	mov	r0, r4
   d9828:	2201      	movs	r2, #1
   d982a:	2100      	movs	r1, #0
   d982c:	f000 fb0d 	bl	d9e4a <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(1,OUTPUT);
   d9830:	2201      	movs	r2, #1
   d9832:	4611      	mov	r1, r2
   d9834:	4620      	mov	r0, r4
   d9836:	f000 fb08 	bl	d9e4a <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(2,OUTPUT);
   d983a:	4620      	mov	r0, r4
   d983c:	2201      	movs	r2, #1
   d983e:	2102      	movs	r1, #2
   d9840:	f000 fb03 	bl	d9e4a <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(3,OUTPUT);
   d9844:	4620      	mov	r0, r4
   d9846:	2201      	movs	r2, #1
   d9848:	2103      	movs	r1, #3
   d984a:	f000 fafe 	bl	d9e4a <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(4,OUTPUT);
   d984e:	4620      	mov	r0, r4
   d9850:	2201      	movs	r2, #1
   d9852:	2104      	movs	r1, #4
   d9854:	f000 faf9 	bl	d9e4a <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(5,OUTPUT);
   d9858:	4620      	mov	r0, r4
   d985a:	2201      	movs	r2, #1
   d985c:	2105      	movs	r1, #5
   d985e:	f000 faf4 	bl	d9e4a <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(6,INPUT);
   d9862:	4620      	mov	r0, r4
   d9864:	2200      	movs	r2, #0
   d9866:	2106      	movs	r1, #6
   d9868:	f000 faef 	bl	d9e4a <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(7,OUTPUT);
   d986c:	4620      	mov	r0, r4
   d986e:	2201      	movs	r2, #1
   d9870:	2107      	movs	r1, #7
   d9872:	f000 faea 	bl	d9e4a <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(8,INPUT);
   d9876:	4620      	mov	r0, r4
   d9878:	2200      	movs	r2, #0
   d987a:	2108      	movs	r1, #8
   d987c:	f000 fae5 	bl	d9e4a <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(9,INPUT);
   d9880:	4620      	mov	r0, r4
   d9882:	2200      	movs	r2, #0
   d9884:	2109      	movs	r1, #9
   d9886:	f000 fae0 	bl	d9e4a <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(10,INPUT);
   d988a:	4620      	mov	r0, r4
   d988c:	2200      	movs	r2, #0
   d988e:	210a      	movs	r1, #10
   d9890:	f000 fadb 	bl	d9e4a <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(11,INPUT);
   d9894:	4620      	mov	r0, r4
   d9896:	2200      	movs	r2, #0
   d9898:	210b      	movs	r1, #11
   d989a:	f000 fad6 	bl	d9e4a <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(12,INPUT);
   d989e:	4620      	mov	r0, r4
   d98a0:	2200      	movs	r2, #0
   d98a2:	210c      	movs	r1, #12
   d98a4:	f000 fad1 	bl	d9e4a <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(13,INPUT);
   d98a8:	4620      	mov	r0, r4
   d98aa:	2200      	movs	r2, #0
   d98ac:	210d      	movs	r1, #13
   d98ae:	f000 facc 	bl	d9e4a <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(14,INPUT);
   d98b2:	4620      	mov	r0, r4
   d98b4:	2200      	movs	r2, #0
   d98b6:	210e      	movs	r1, #14
   d98b8:	f000 fac7 	bl	d9e4a <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(15,INPUT);
   d98bc:	4620      	mov	r0, r4
   d98be:	2200      	movs	r2, #0
   d98c0:	210f      	movs	r1, #15
   d98c2:	f000 fac2 	bl	d9e4a <_ZN17Adafruit_MCP230177pinModeEhh>


      IOexp.pullUp(0,HIGH);
   d98c6:	4620      	mov	r0, r4
   d98c8:	2201      	movs	r2, #1
   d98ca:	2100      	movs	r1, #0
   d98cc:	f000 fae6 	bl	d9e9c <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(1,HIGH);
   d98d0:	2201      	movs	r2, #1
   d98d2:	4611      	mov	r1, r2
   d98d4:	4620      	mov	r0, r4
   d98d6:	f000 fae1 	bl	d9e9c <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(2,HIGH);
   d98da:	4620      	mov	r0, r4
   d98dc:	2201      	movs	r2, #1
   d98de:	2102      	movs	r1, #2
   d98e0:	f000 fadc 	bl	d9e9c <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(3,HIGH);
   d98e4:	4620      	mov	r0, r4
   d98e6:	2201      	movs	r2, #1
   d98e8:	2103      	movs	r1, #3
   d98ea:	f000 fad7 	bl	d9e9c <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(4,HIGH);
   d98ee:	4620      	mov	r0, r4
   d98f0:	2201      	movs	r2, #1
   d98f2:	2104      	movs	r1, #4
   d98f4:	f000 fad2 	bl	d9e9c <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(5,HIGH);
   d98f8:	4620      	mov	r0, r4
   d98fa:	2201      	movs	r2, #1
   d98fc:	2105      	movs	r1, #5
   d98fe:	f000 facd 	bl	d9e9c <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(6,HIGH);
   d9902:	4620      	mov	r0, r4
   d9904:	2201      	movs	r2, #1
   d9906:	2106      	movs	r1, #6
   d9908:	f000 fac8 	bl	d9e9c <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(7,HIGH);
   d990c:	4620      	mov	r0, r4
   d990e:	2201      	movs	r2, #1
   d9910:	2107      	movs	r1, #7
   d9912:	f000 fac3 	bl	d9e9c <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(8,HIGH);
   d9916:	4620      	mov	r0, r4
   d9918:	2201      	movs	r2, #1
   d991a:	2108      	movs	r1, #8
   d991c:	f000 fabe 	bl	d9e9c <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(9,HIGH);
   d9920:	4620      	mov	r0, r4
   d9922:	2201      	movs	r2, #1
   d9924:	2109      	movs	r1, #9
   d9926:	f000 fab9 	bl	d9e9c <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(10,HIGH);
   d992a:	4620      	mov	r0, r4
   d992c:	2201      	movs	r2, #1
   d992e:	210a      	movs	r1, #10
   d9930:	f000 fab4 	bl	d9e9c <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(11,HIGH); 
   d9934:	4620      	mov	r0, r4
   d9936:	2201      	movs	r2, #1
   d9938:	210b      	movs	r1, #11
   d993a:	f000 faaf 	bl	d9e9c <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(12,HIGH);
   d993e:	4620      	mov	r0, r4
   d9940:	2201      	movs	r2, #1
   d9942:	210c      	movs	r1, #12
   d9944:	f000 faaa 	bl	d9e9c <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(13,HIGH);
   d9948:	4620      	mov	r0, r4
   d994a:	2201      	movs	r2, #1
   d994c:	210d      	movs	r1, #13
   d994e:	f000 faa5 	bl	d9e9c <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(14,HIGH);
   d9952:	4620      	mov	r0, r4
   d9954:	2201      	movs	r2, #1
   d9956:	210e      	movs	r1, #14
   d9958:	f000 faa0 	bl	d9e9c <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(15,HIGH);
   d995c:	4620      	mov	r0, r4
   d995e:	2201      	movs	r2, #1
   d9960:	210f      	movs	r1, #15

      //IOexp.writeGPIOAB(0);
}
   d9962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      IOexp.pullUp(10,HIGH);
      IOexp.pullUp(11,HIGH); 
      IOexp.pullUp(12,HIGH);
      IOexp.pullUp(13,HIGH);
      IOexp.pullUp(14,HIGH);
      IOexp.pullUp(15,HIGH);
   d9966:	f000 ba99 	b.w	d9e9c <_ZN17Adafruit_MCP230176pullUpEhh>
   d996a:	bf00      	nop
   d996c:	2003e26c 	.word	0x2003e26c

000d9970 <_ZN12IoTNodePower10setPowerONE9powerNameb>:
      //IOexp.writeGPIOAB(0);
}

void IoTNodePower::setPowerON(powerName pwrName, bool state)
    {
        IOexp.digitalWrite(pwrName, state);
   d9970:	4801      	ldr	r0, [pc, #4]	; (d9978 <_ZN12IoTNodePower10setPowerONE9powerNameb+0x8>)
   d9972:	f000 ba76 	b.w	d9e62 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
   d9976:	bf00      	nop
   d9978:	2003e26c 	.word	0x2003e26c

000d997c <_GLOBAL__sub_I_IOexp>:
   d997c:	f000 bd76 	b.w	da46c <HAL_Pin_Map>

000d9980 <_ZN7ADXL345C1Ev>:
#include "SparkFun_ADXL345ST.h"

#define ADXL345_DEVICE (0x53)    // Device Address for ADXL345
#define ADXL345_TO_READ (6)      // Number of Bytes Read - Two Bytes Per Axis

ADXL345::ADXL345() {
   d9980:	b530      	push	{r4, r5, lr}
	status = ADXL345_OK;
	error_code = ADXL345_NO_ERROR;
	
	gains[0] = 0.00376390;		// Original gain 0.00376390 
   d9982:	a50e      	add	r5, pc, #56	; (adr r5, d99bc <_ZN7ADXL345C1Ev+0x3c>)
   d9984:	e9d5 4500 	ldrd	r4, r5, [r5]
   d9988:	e9c0 4502 	strd	r4, r5, [r0, #8]
	gains[1] = 0.00376009;		// Original gain 0.00376009
   d998c:	a50d      	add	r5, pc, #52	; (adr r5, d99c4 <_ZN7ADXL345C1Ev+0x44>)
   d998e:	e9d5 4500 	ldrd	r4, r5, [r5]
#include "SparkFun_ADXL345ST.h"

#define ADXL345_DEVICE (0x53)    // Device Address for ADXL345
#define ADXL345_TO_READ (6)      // Number of Bytes Read - Two Bytes Per Axis

ADXL345::ADXL345() {
   d9992:	220a      	movs	r2, #10
	status = ADXL345_OK;
	error_code = ADXL345_NO_ERROR;
	
	gains[0] = 0.00376390;		// Original gain 0.00376390 
	gains[1] = 0.00376009;		// Original gain 0.00376009
   d9994:	e9c0 4504 	strd	r4, r5, [r0, #16]
	gains[2] = 0.00349265;		// Original gain 0.00349265
   d9998:	a50c      	add	r5, pc, #48	; (adr r5, d99cc <_ZN7ADXL345C1Ev+0x4c>)
   d999a:	e9d5 4500 	ldrd	r4, r5, [r5]
#include "SparkFun_ADXL345ST.h"

#define ADXL345_DEVICE (0x53)    // Device Address for ADXL345
#define ADXL345_TO_READ (6)      // Number of Bytes Read - Two Bytes Per Axis

ADXL345::ADXL345() {
   d999e:	6282      	str	r2, [r0, #40]	; 0x28
   d99a0:	2201      	movs	r2, #1
   d99a2:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
   d99a6:	4904      	ldr	r1, [pc, #16]	; (d99b8 <_ZN7ADXL345C1Ev+0x38>)
	status = ADXL345_OK;
   d99a8:	7002      	strb	r2, [r0, #0]
	error_code = ADXL345_NO_ERROR;
   d99aa:	2200      	movs	r2, #0
#include "SparkFun_ADXL345ST.h"

#define ADXL345_DEVICE (0x53)    // Device Address for ADXL345
#define ADXL345_TO_READ (6)      // Number of Bytes Read - Two Bytes Per Axis

ADXL345::ADXL345() {
   d99ac:	6301      	str	r1, [r0, #48]	; 0x30
	status = ADXL345_OK;
	error_code = ADXL345_NO_ERROR;
   d99ae:	7042      	strb	r2, [r0, #1]
	
	gains[0] = 0.00376390;		// Original gain 0.00376390 
	gains[1] = 0.00376009;		// Original gain 0.00376009
	gains[2] = 0.00349265;		// Original gain 0.00349265
   d99b0:	e9c0 4506 	strd	r4, r5, [r0, #24]
	I2C = true;
}
   d99b4:	bd30      	pop	{r4, r5, pc}
   d99b6:	bf00      	nop
   d99b8:	004c4b40 	.word	0x004c4b40
   d99bc:	6cf9279f 	.word	0x6cf9279f
   d99c0:	3f6ed578 	.word	0x3f6ed578
   d99c4:	f28f7f0e 	.word	0xf28f7f0e
   d99c8:	3f6ecd7a 	.word	0x3f6ecd7a
   d99cc:	30d80f20 	.word	0x30d80f20
   d99d0:	3f6c9c9e 	.word	0x3f6c9c9e

000d99d4 <_ZN7ADXL34510writeToI2CEhh>:
	}
}

/*************************** WRITE TO I2C ***************************/
/*      Start; Send Register Address; Send Value To Write; End      */
void ADXL345::writeToI2C(byte _address, byte _val) {
   d99d4:	b538      	push	{r3, r4, r5, lr}
   d99d6:	4614      	mov	r4, r2
   d99d8:	460d      	mov	r5, r1
	Wire.beginTransmission(ADXL345_DEVICE); 
   d99da:	f003 fb09 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d99de:	2153      	movs	r1, #83	; 0x53
   d99e0:	f002 fd16 	bl	dc410 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(_address);             
   d99e4:	f003 fb04 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d99e8:	6803      	ldr	r3, [r0, #0]
   d99ea:	4629      	mov	r1, r5
   d99ec:	689b      	ldr	r3, [r3, #8]
   d99ee:	4798      	blx	r3
	Wire.write(_val);                 
   d99f0:	f003 fafe 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d99f4:	6803      	ldr	r3, [r0, #0]
   d99f6:	4621      	mov	r1, r4
   d99f8:	689b      	ldr	r3, [r3, #8]
   d99fa:	4798      	blx	r3
	Wire.endTransmission();         
   d99fc:	f003 faf8 	bl	dcff0 <_Z19__fetch_global_Wirev>
}
   d9a00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
/*      Start; Send Register Address; Send Value To Write; End      */
void ADXL345::writeToI2C(byte _address, byte _val) {
	Wire.beginTransmission(ADXL345_DEVICE); 
	Wire.write(_address);             
	Wire.write(_val);                 
	Wire.endTransmission();         
   d9a04:	f002 bd0b 	b.w	dc41e <_ZN7TwoWire15endTransmissionEv>

000d9a08 <_ZN7ADXL34511readFromI2CEhiPh>:
}

/*************************** READ FROM I2C **************************/
/*                Start; Send Address To Read; End                  */
void ADXL345::readFromI2C(byte address, int num, byte _buff[]) {
   d9a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9a0c:	4616      	mov	r6, r2
   d9a0e:	461f      	mov	r7, r3
   d9a10:	460c      	mov	r4, r1
   d9a12:	4605      	mov	r5, r0
	Wire.beginTransmission(ADXL345_DEVICE);  
   d9a14:	f003 faec 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d9a18:	2153      	movs	r1, #83	; 0x53
   d9a1a:	f002 fcf9 	bl	dc410 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(address);             
   d9a1e:	f003 fae7 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d9a22:	6803      	ldr	r3, [r0, #0]
   d9a24:	4621      	mov	r1, r4
   d9a26:	689b      	ldr	r3, [r3, #8]
   d9a28:	4798      	blx	r3
	Wire.endTransmission();         
   d9a2a:	f003 fae1 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d9a2e:	f002 fcf6 	bl	dc41e <_ZN7TwoWire15endTransmissionEv>
	
	Wire.beginTransmission(ADXL345_DEVICE); 
   d9a32:	f003 fadd 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d9a36:	2153      	movs	r1, #83	; 0x53
   d9a38:	f002 fcea 	bl	dc410 <_ZN7TwoWire17beginTransmissionEi>
	Wire.requestFrom(ADXL345_DEVICE, num);  // Request 6 Bytes
   d9a3c:	f003 fad8 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d9a40:	4632      	mov	r2, r6
   d9a42:	2153      	movs	r1, #83	; 0x53
   d9a44:	f002 fcd6 	bl	dc3f4 <_ZN7TwoWire11requestFromEii>
   d9a48:	463c      	mov	r4, r7
	
	int i = 0;
	while(Wire.available())					
   d9a4a:	f003 fad1 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d9a4e:	6803      	ldr	r3, [r0, #0]
   d9a50:	691b      	ldr	r3, [r3, #16]
   d9a52:	ebc7 0804 	rsb	r8, r7, r4
   d9a56:	4798      	blx	r3
   d9a58:	b138      	cbz	r0, d9a6a <_ZN7ADXL34511readFromI2CEhiPh+0x62>
	{ 
		_buff[i] = Wire.read();				// Receive Byte
   d9a5a:	f003 fac9 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d9a5e:	6803      	ldr	r3, [r0, #0]
   d9a60:	695b      	ldr	r3, [r3, #20]
   d9a62:	4798      	blx	r3
   d9a64:	f804 0b01 	strb.w	r0, [r4], #1
	
	Wire.beginTransmission(ADXL345_DEVICE); 
	Wire.requestFrom(ADXL345_DEVICE, num);  // Request 6 Bytes
	
	int i = 0;
	while(Wire.available())					
   d9a68:	e7ef      	b.n	d9a4a <_ZN7ADXL34511readFromI2CEhiPh+0x42>
	{ 
		_buff[i] = Wire.read();				// Receive Byte
		i++;
	}
	if(i != num){
   d9a6a:	4546      	cmp	r6, r8
		status = ADXL345_ERROR;
		error_code = ADXL345_READ_ERROR;
   d9a6c:	bf1e      	ittt	ne
   d9a6e:	2301      	movne	r3, #1
	{ 
		_buff[i] = Wire.read();				// Receive Byte
		i++;
	}
	if(i != num){
		status = ADXL345_ERROR;
   d9a70:	7028      	strbne	r0, [r5, #0]
		error_code = ADXL345_READ_ERROR;
   d9a72:	706b      	strbne	r3, [r5, #1]
	}
	Wire.endTransmission();         	
   d9a74:	f003 fabc 	bl	dcff0 <_Z19__fetch_global_Wirev>
}
   d9a78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	}
	if(i != num){
		status = ADXL345_ERROR;
		error_code = ADXL345_READ_ERROR;
	}
	Wire.endTransmission();         	
   d9a7c:	f002 bccf 	b.w	dc41e <_ZN7TwoWire15endTransmissionEv>

000d9a80 <_ZN7ADXL34510writeToSPIEhh>:
}

/************************** WRITE FROM SPI **************************/
/*         Point to Destination; Write Value; Turn Off              */
void ADXL345::writeToSPI(byte __reg_address, byte __val) {
   d9a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  digitalWrite(_CS, LOW);
  SPI.transfer(__reg_address); 
   d9a82:	4d0b      	ldr	r5, [pc, #44]	; (d9ab0 <_ZN7ADXL34510writeToSPIEhh+0x30>)
	Wire.endTransmission();         	
}

/************************** WRITE FROM SPI **************************/
/*         Point to Destination; Write Value; Turn Off              */
void ADXL345::writeToSPI(byte __reg_address, byte __val) {
   d9a84:	4604      	mov	r4, r0
   d9a86:	460f      	mov	r7, r1
  digitalWrite(_CS, LOW);
   d9a88:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   d9a8a:	2100      	movs	r1, #0
	Wire.endTransmission();         	
}

/************************** WRITE FROM SPI **************************/
/*         Point to Destination; Write Value; Turn Off              */
void ADXL345::writeToSPI(byte __reg_address, byte __val) {
   d9a8c:	4616      	mov	r6, r2
  digitalWrite(_CS, LOW);
   d9a8e:	f003 fa24 	bl	dceda <digitalWrite>
  SPI.transfer(__reg_address); 
   d9a92:	4639      	mov	r1, r7
   d9a94:	4628      	mov	r0, r5
   d9a96:	f001 f90b 	bl	dacb0 <_ZN8SPIClass8transferEh>
  SPI.transfer(__val); 
   d9a9a:	4631      	mov	r1, r6
   d9a9c:	4628      	mov	r0, r5
   d9a9e:	f001 f907 	bl	dacb0 <_ZN8SPIClass8transferEh>
  digitalWrite(_CS, HIGH); 
   d9aa2:	8d20      	ldrh	r0, [r4, #40]	; 0x28
   d9aa4:	2101      	movs	r1, #1
}
   d9aa6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
/*         Point to Destination; Write Value; Turn Off              */
void ADXL345::writeToSPI(byte __reg_address, byte __val) {
  digitalWrite(_CS, LOW);
  SPI.transfer(__reg_address); 
  SPI.transfer(__val); 
  digitalWrite(_CS, HIGH); 
   d9aaa:	f003 ba16 	b.w	dceda <digitalWrite>
   d9aae:	bf00      	nop
   d9ab0:	2003e5f0 	.word	0x2003e5f0

000d9ab4 <_ZN7ADXL3457writeToEhh>:
	}
}

/***************** WRITES VALUE TO ADDRESS REGISTER *****************/
void ADXL345::writeTo(byte address, byte val) {
	if(I2C) {
   d9ab4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   d9ab8:	b10b      	cbz	r3, d9abe <_ZN7ADXL3457writeToEhh+0xa>
		writeToI2C(address, val);
   d9aba:	f7ff bf8b 	b.w	d99d4 <_ZN7ADXL34510writeToI2CEhh>
	}
	else {
		writeToSPI(address, val);
   d9abe:	f7ff bfdf 	b.w	d9a80 <_ZN7ADXL34510writeToSPIEhh>

000d9ac2 <_ZN7ADXL3457powerOnEv>:
	SPI.setDataMode(SPI_MODE3);
	pinMode(_CS, OUTPUT);
	digitalWrite(_CS, HIGH);
}

void ADXL345::powerOn() {
   d9ac2:	b510      	push	{r4, lr}
	if(I2C) {
   d9ac4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
	SPI.setDataMode(SPI_MODE3);
	pinMode(_CS, OUTPUT);
	digitalWrite(_CS, HIGH);
}

void ADXL345::powerOn() {
   d9ac8:	4604      	mov	r4, r0
	if(I2C) {
   d9aca:	b11b      	cbz	r3, d9ad4 <_ZN7ADXL3457powerOnEv+0x12>
		Wire.begin();				// If in I2C Mode Only
   d9acc:	f003 fa90 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d9ad0:	f002 fc7a 	bl	dc3c8 <_ZN7TwoWire5beginEv>
	}
	//ADXL345 TURN ON
	writeTo(ADXL345_POWER_CTL, 0);	// Wakeup     
   d9ad4:	4620      	mov	r0, r4
   d9ad6:	2200      	movs	r2, #0
   d9ad8:	212d      	movs	r1, #45	; 0x2d
   d9ada:	f7ff ffeb 	bl	d9ab4 <_ZN7ADXL3457writeToEhh>
	writeTo(ADXL345_POWER_CTL, 16);	// Auto_Sleep
   d9ade:	4620      	mov	r0, r4
   d9ae0:	2210      	movs	r2, #16
   d9ae2:	212d      	movs	r1, #45	; 0x2d
   d9ae4:	f7ff ffe6 	bl	d9ab4 <_ZN7ADXL3457writeToEhh>
	writeTo(ADXL345_POWER_CTL, 8);	// Measure
   d9ae8:	4620      	mov	r0, r4
   d9aea:	2208      	movs	r2, #8
   d9aec:	212d      	movs	r1, #45	; 0x2d
}
   d9aee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Wire.begin();				// If in I2C Mode Only
	}
	//ADXL345 TURN ON
	writeTo(ADXL345_POWER_CTL, 0);	// Wakeup     
	writeTo(ADXL345_POWER_CTL, 16);	// Auto_Sleep
	writeTo(ADXL345_POWER_CTL, 8);	// Measure
   d9af2:	f7ff bfdf 	b.w	d9ab4 <_ZN7ADXL3457writeToEhh>
	...

000d9af8 <_ZN7ADXL34511readFromSPIEhiPh>:
  digitalWrite(_CS, HIGH); 
}

/*************************** READ FROM SPI **************************/
/*                                                                  */
void ADXL345::readFromSPI(byte __reg_address, int num, byte _buff[]) {
   d9af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // Read: Most Sig Bit of Reg Address Set
  char _address = 0x80 | __reg_address;
  // If Multi-Byte Read: Bit 6 Set 
  if(num > 1) {
   d9afa:	2a01      	cmp	r2, #1

/*************************** READ FROM SPI **************************/
/*                                                                  */
void ADXL345::readFromSPI(byte __reg_address, int num, byte _buff[]) {
  // Read: Most Sig Bit of Reg Address Set
  char _address = 0x80 | __reg_address;
   d9afc:	bfd4      	ite	le
   d9afe:	f041 0480 	orrle.w	r4, r1, #128	; 0x80
  // If Multi-Byte Read: Bit 6 Set 
  if(num > 1) {
  	_address = _address | 0x40;
   d9b02:	f041 04c0 	orrgt.w	r4, r1, #192	; 0xc0
  digitalWrite(_CS, HIGH); 
}

/*************************** READ FROM SPI **************************/
/*                                                                  */
void ADXL345::readFromSPI(byte __reg_address, int num, byte _buff[]) {
   d9b06:	4605      	mov	r5, r0
  // If Multi-Byte Read: Bit 6 Set 
  if(num > 1) {
  	_address = _address | 0x40;
  }

  digitalWrite(_CS, LOW);
   d9b08:	2100      	movs	r1, #0
   d9b0a:	8d00      	ldrh	r0, [r0, #40]	; 0x28
  digitalWrite(_CS, HIGH); 
}

/*************************** READ FROM SPI **************************/
/*                                                                  */
void ADXL345::readFromSPI(byte __reg_address, int num, byte _buff[]) {
   d9b0c:	461f      	mov	r7, r3
   d9b0e:	4616      	mov	r6, r2
  // If Multi-Byte Read: Bit 6 Set 
  if(num > 1) {
  	_address = _address | 0x40;
  }

  digitalWrite(_CS, LOW);
   d9b10:	f003 f9e3 	bl	dceda <digitalWrite>
  SPI.transfer(_address);		// Transfer Starting Reg Address To Be Read  
   d9b14:	4621      	mov	r1, r4
   d9b16:	480a      	ldr	r0, [pc, #40]	; (d9b40 <_ZN7ADXL34511readFromSPIEhiPh+0x48>)
   d9b18:	f001 f8ca 	bl	dacb0 <_ZN8SPIClass8transferEh>
   d9b1c:	463c      	mov	r4, r7
  for(int i=0; i<num; i++){
   d9b1e:	1be3      	subs	r3, r4, r7
   d9b20:	429e      	cmp	r6, r3
   d9b22:	dd06      	ble.n	d9b32 <_ZN7ADXL34511readFromSPIEhiPh+0x3a>
    _buff[i] = SPI.transfer(0x00);
   d9b24:	2100      	movs	r1, #0
   d9b26:	4806      	ldr	r0, [pc, #24]	; (d9b40 <_ZN7ADXL34511readFromSPIEhiPh+0x48>)
   d9b28:	f001 f8c2 	bl	dacb0 <_ZN8SPIClass8transferEh>
   d9b2c:	f804 0b01 	strb.w	r0, [r4], #1
  	_address = _address | 0x40;
  }

  digitalWrite(_CS, LOW);
  SPI.transfer(_address);		// Transfer Starting Reg Address To Be Read  
  for(int i=0; i<num; i++){
   d9b30:	e7f5      	b.n	d9b1e <_ZN7ADXL34511readFromSPIEhiPh+0x26>
    _buff[i] = SPI.transfer(0x00);
  }
  digitalWrite(_CS, HIGH);
   d9b32:	8d28      	ldrh	r0, [r5, #40]	; 0x28
   d9b34:	2101      	movs	r1, #1
}
   d9b36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  digitalWrite(_CS, LOW);
  SPI.transfer(_address);		// Transfer Starting Reg Address To Be Read  
  for(int i=0; i<num; i++){
    _buff[i] = SPI.transfer(0x00);
  }
  digitalWrite(_CS, HIGH);
   d9b3a:	f003 b9ce 	b.w	dceda <digitalWrite>
   d9b3e:	bf00      	nop
   d9b40:	2003e5f0 	.word	0x2003e5f0

000d9b44 <_ZN7ADXL3458readFromEhiPh>:
	}
}

/************************ READING NUM BYTES *************************/
/*    Reads Num Bytes. Starts from Address Reg to _buff Array        */
void ADXL345::readFrom(byte address, int num, byte _buff[]) {
   d9b44:	b410      	push	{r4}
	if(I2C) {
   d9b46:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
   d9b4a:	b11c      	cbz	r4, d9b54 <_ZN7ADXL3458readFromEhiPh+0x10>
		readFromI2C(address, num, _buff);	// If I2C Communication
	}
	else {
		readFromSPI(address, num, _buff);	// If SPI Communication 
	}
}
   d9b4c:	f85d 4b04 	ldr.w	r4, [sp], #4

/************************ READING NUM BYTES *************************/
/*    Reads Num Bytes. Starts from Address Reg to _buff Array        */
void ADXL345::readFrom(byte address, int num, byte _buff[]) {
	if(I2C) {
		readFromI2C(address, num, _buff);	// If I2C Communication
   d9b50:	f7ff bf5a 	b.w	d9a08 <_ZN7ADXL34511readFromI2CEhiPh>
	}
	else {
		readFromSPI(address, num, _buff);	// If SPI Communication 
	}
}
   d9b54:	f85d 4b04 	ldr.w	r4, [sp], #4
void ADXL345::readFrom(byte address, int num, byte _buff[]) {
	if(I2C) {
		readFromI2C(address, num, _buff);	// If I2C Communication
	}
	else {
		readFromSPI(address, num, _buff);	// If SPI Communication 
   d9b58:	f7ff bfce 	b.w	d9af8 <_ZN7ADXL34511readFromSPIEhiPh>

000d9b5c <_ZN7ADXL34515setRangeSettingEi>:
	byte _b;
	readFrom(ADXL345_DATA_FORMAT, 1, &_b);
	*rangeSetting = _b & B00000011;
}

void ADXL345::setRangeSetting(int val) {
   d9b5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d9b5e:	3904      	subs	r1, #4
   d9b60:	290c      	cmp	r1, #12
   d9b62:	bf98      	it	ls
   d9b64:	4b0c      	ldrls	r3, [pc, #48]	; (d9b98 <_ZN7ADXL34515setRangeSettingEi+0x3c>)
			_s = B00000011; 
			break;
		default: 
			_s = B00000000;
	}
	readFrom(ADXL345_DATA_FORMAT, 1, &_b);
   d9b66:	f04f 0201 	mov.w	r2, #1
   d9b6a:	bf98      	it	ls
   d9b6c:	5c5d      	ldrbls	r5, [r3, r1]
   d9b6e:	f10d 0307 	add.w	r3, sp, #7
   d9b72:	f04f 0131 	mov.w	r1, #49	; 0x31

void ADXL345::setRangeSetting(int val) {
	byte _s;
	byte _b;
	
	switch (val) {
   d9b76:	bf88      	it	hi
   d9b78:	2500      	movhi	r5, #0
	byte _b;
	readFrom(ADXL345_DATA_FORMAT, 1, &_b);
	*rangeSetting = _b & B00000011;
}

void ADXL345::setRangeSetting(int val) {
   d9b7a:	4604      	mov	r4, r0
			_s = B00000011; 
			break;
		default: 
			_s = B00000000;
	}
	readFrom(ADXL345_DATA_FORMAT, 1, &_b);
   d9b7c:	f7ff ffe2 	bl	d9b44 <_ZN7ADXL3458readFromEhiPh>
	_s |= (_b & B11101100);
   d9b80:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d9b84:	f022 0213 	bic.w	r2, r2, #19
	writeTo(ADXL345_DATA_FORMAT, _s);
   d9b88:	432a      	orrs	r2, r5
   d9b8a:	2131      	movs	r1, #49	; 0x31
   d9b8c:	4620      	mov	r0, r4
   d9b8e:	f7ff ff91 	bl	d9ab4 <_ZN7ADXL3457writeToEhh>
}
   d9b92:	b003      	add	sp, #12
   d9b94:	bd30      	pop	{r4, r5, pc}
   d9b96:	bf00      	nop
   d9b98:	000e78cc 	.word	0x000e78cc

000d9b9c <_ZN7ADXL34520setActivityThresholdEi>:
// Value of 0 may Result in Undesirable Behavior if the Activity Interrupt Enabled. 
// It Accepts a Maximum Value of 255.
void ADXL345::setActivityThreshold(int activityThreshold) {
	activityThreshold = constrain(activityThreshold,0,255);
	byte _b = byte (activityThreshold);
	writeTo(ADXL345_THRESH_ACT, _b);  
   d9b9c:	f381 0208 	usat	r2, #8, r1
   d9ba0:	b2d2      	uxtb	r2, r2
   d9ba2:	2124      	movs	r1, #36	; 0x24
   d9ba4:	f7ff bf86 	b.w	d9ab4 <_ZN7ADXL3457writeToEhh>

000d9ba8 <_ZN7ADXL34522setInactivityThresholdEi>:
// Value of 0 May Result in Undesirable Behavior if the Inactivity Interrupt Enabled. 
// It Accepts a Maximum Value of 255.
void ADXL345::setInactivityThreshold(int inactivityThreshold) {
	inactivityThreshold = constrain(inactivityThreshold,0,255);
	byte _b = byte (inactivityThreshold);
	writeTo(ADXL345_THRESH_INACT, _b);  
   d9ba8:	f381 0208 	usat	r2, #8, r1
   d9bac:	b2d2      	uxtb	r2, r2
   d9bae:	2125      	movs	r1, #37	; 0x25
   d9bb0:	f7ff bf80 	b.w	d9ab4 <_ZN7ADXL3457writeToEhh>

000d9bb4 <_ZN7ADXL34517setTimeInactivityEi>:
// Scale Factor is 1sec/LSB. 
// Value Must Be Between 0 and 255. 
void ADXL345::setTimeInactivity(int timeInactivity) {
	timeInactivity = constrain(timeInactivity,0,255);
	byte _b = byte (timeInactivity);
	writeTo(ADXL345_TIME_INACT, _b);  
   d9bb4:	f381 0208 	usat	r2, #8, r1
   d9bb8:	b2d2      	uxtb	r2, r2
   d9bba:	2126      	movs	r1, #38	; 0x26
   d9bbc:	f7ff bf7a 	b.w	d9ab4 <_ZN7ADXL3457writeToEhh>

000d9bc0 <_ZN7ADXL3459triggeredEhi>:
/************************* TRIGGER CHECK  ***************************/
/*                                                                  */
// Check if Action was Triggered in Interrupts
// Example triggered(interrupts, ADXL345_SINGLE_TAP);
bool ADXL345::triggered(byte interrupts, int mask){
	return ((interrupts >> mask) & 1);
   d9bc0:	fa41 f202 	asr.w	r2, r1, r2
}
   d9bc4:	f002 0001 	and.w	r0, r2, #1
   d9bc8:	4770      	bx	lr

000d9bca <_ZN7ADXL34518getInterruptSourceEv>:
 ADXL345_WATERMARK
 ADXL345_OVERRUNY
 */


byte ADXL345::getInterruptSource() {
   d9bca:	b507      	push	{r0, r1, r2, lr}
	byte _b;
	readFrom(ADXL345_INT_SOURCE, 1, &_b);
   d9bcc:	2201      	movs	r2, #1
   d9bce:	f10d 0307 	add.w	r3, sp, #7
   d9bd2:	2130      	movs	r1, #48	; 0x30
   d9bd4:	f7ff ffb6 	bl	d9b44 <_ZN7ADXL3458readFromEhiPh>
	return _b;
}
   d9bd8:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d9bdc:	b003      	add	sp, #12
   d9bde:	f85d fb04 	ldr.w	pc, [sp], #4

000d9be2 <_ZN7ADXL34514setRegisterBitEhib>:
	else {
		setInterrupt( ADXL345_INT_INACTIVITY_BIT, 0);
	}
}

void ADXL345::setRegisterBit(byte regAdress, int bitPos, bool state) {
   d9be2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d9be4:	4616      	mov	r6, r2
   d9be6:	461f      	mov	r7, r3
	byte _b;
	readFrom(regAdress, 1, &_b);
   d9be8:	2201      	movs	r2, #1
   d9bea:	f10d 0307 	add.w	r3, sp, #7
	else {
		setInterrupt( ADXL345_INT_INACTIVITY_BIT, 0);
	}
}

void ADXL345::setRegisterBit(byte regAdress, int bitPos, bool state) {
   d9bee:	4604      	mov	r4, r0
   d9bf0:	460d      	mov	r5, r1
	byte _b;
	readFrom(regAdress, 1, &_b);
   d9bf2:	f7ff ffa7 	bl	d9b44 <_ZN7ADXL3458readFromEhiPh>
   d9bf6:	2201      	movs	r2, #1
   d9bf8:	f89d 3007 	ldrb.w	r3, [sp, #7]
	if (state) {
		_b |= (1 << bitPos);  // Forces nth Bit of _b to 1. Other Bits Unchanged.  
   d9bfc:	40b2      	lsls	r2, r6
}

void ADXL345::setRegisterBit(byte regAdress, int bitPos, bool state) {
	byte _b;
	readFrom(regAdress, 1, &_b);
	if (state) {
   d9bfe:	b10f      	cbz	r7, d9c04 <_ZN7ADXL34514setRegisterBitEhib+0x22>
		_b |= (1 << bitPos);  // Forces nth Bit of _b to 1. Other Bits Unchanged.  
   d9c00:	4313      	orrs	r3, r2
   d9c02:	e001      	b.n	d9c08 <_ZN7ADXL34514setRegisterBitEhib+0x26>
	} 
	else {
		_b &= ~(1 << bitPos); // Forces nth Bit of _b to 0. Other Bits Unchanged.
   d9c04:	ea23 0302 	bic.w	r3, r3, r2
   d9c08:	f88d 3007 	strb.w	r3, [sp, #7]
	}
	writeTo(regAdress, _b);  
   d9c0c:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d9c10:	4629      	mov	r1, r5
   d9c12:	4620      	mov	r0, r4
   d9c14:	f7ff ff4e 	bl	d9ab4 <_ZN7ADXL3457writeToEhh>
}
   d9c18:	b003      	add	sp, #12
   d9c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d9c1c <_ZN7ADXL34512setActivityXEb>:
bool ADXL345::isInactivityZEnabled() {  
	return getRegisterBit(ADXL345_ACT_INACT_CTL, 0); 
}

void ADXL345::setActivityX(bool state) {  
	setRegisterBit(ADXL345_ACT_INACT_CTL, 6, state); 
   d9c1c:	460b      	mov	r3, r1
   d9c1e:	2206      	movs	r2, #6
   d9c20:	2127      	movs	r1, #39	; 0x27
   d9c22:	f7ff bfde 	b.w	d9be2 <_ZN7ADXL34514setRegisterBitEhib>

000d9c26 <_ZN7ADXL34512setActivityYEb>:
}
void ADXL345::setActivityY(bool state) {  
	setRegisterBit(ADXL345_ACT_INACT_CTL, 5, state); 
   d9c26:	460b      	mov	r3, r1
   d9c28:	2205      	movs	r2, #5
   d9c2a:	2127      	movs	r1, #39	; 0x27
   d9c2c:	f7ff bfd9 	b.w	d9be2 <_ZN7ADXL34514setRegisterBitEhib>

000d9c30 <_ZN7ADXL34512setActivityZEb>:
}
void ADXL345::setActivityZ(bool state) {  
	setRegisterBit(ADXL345_ACT_INACT_CTL, 4, state); 
   d9c30:	460b      	mov	r3, r1
   d9c32:	2204      	movs	r2, #4
   d9c34:	2127      	movs	r1, #39	; 0x27
   d9c36:	f7ff bfd4 	b.w	d9be2 <_ZN7ADXL34514setRegisterBitEhib>

000d9c3a <_ZN7ADXL34514setActivityXYZEbbb>:
}
void ADXL345::setActivityXYZ(bool stateX, bool stateY, bool stateZ) {
   d9c3a:	b570      	push	{r4, r5, r6, lr}
   d9c3c:	4604      	mov	r4, r0
   d9c3e:	4616      	mov	r6, r2
   d9c40:	461d      	mov	r5, r3
	setActivityX(stateX);
   d9c42:	f7ff ffeb 	bl	d9c1c <_ZN7ADXL34512setActivityXEb>
	setActivityY(stateY);
   d9c46:	4631      	mov	r1, r6
   d9c48:	4620      	mov	r0, r4
   d9c4a:	f7ff ffec 	bl	d9c26 <_ZN7ADXL34512setActivityYEb>
	setActivityZ(stateZ);
   d9c4e:	4629      	mov	r1, r5
   d9c50:	4620      	mov	r0, r4
}
   d9c52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	setRegisterBit(ADXL345_ACT_INACT_CTL, 4, state); 
}
void ADXL345::setActivityXYZ(bool stateX, bool stateY, bool stateZ) {
	setActivityX(stateX);
	setActivityY(stateY);
	setActivityZ(stateZ);
   d9c56:	f7ff bfeb 	b.w	d9c30 <_ZN7ADXL34512setActivityZEb>

000d9c5a <_ZN7ADXL34514setInactivityXEb>:
}
void ADXL345::setInactivityX(bool state) {  
	setRegisterBit(ADXL345_ACT_INACT_CTL, 2, state); 
   d9c5a:	460b      	mov	r3, r1
   d9c5c:	2202      	movs	r2, #2
   d9c5e:	2127      	movs	r1, #39	; 0x27
   d9c60:	f7ff bfbf 	b.w	d9be2 <_ZN7ADXL34514setRegisterBitEhib>

000d9c64 <_ZN7ADXL34514setInactivityYEb>:
}
void ADXL345::setInactivityY(bool state) {  
	setRegisterBit(ADXL345_ACT_INACT_CTL, 1, state); 
   d9c64:	460b      	mov	r3, r1
   d9c66:	2201      	movs	r2, #1
   d9c68:	2127      	movs	r1, #39	; 0x27
   d9c6a:	f7ff bfba 	b.w	d9be2 <_ZN7ADXL34514setRegisterBitEhib>

000d9c6e <_ZN7ADXL34514setInactivityZEb>:
}
void ADXL345::setInactivityZ(bool state) {  
	setRegisterBit(ADXL345_ACT_INACT_CTL, 0, state); 
   d9c6e:	460b      	mov	r3, r1
   d9c70:	2200      	movs	r2, #0
   d9c72:	2127      	movs	r1, #39	; 0x27
   d9c74:	f7ff bfb5 	b.w	d9be2 <_ZN7ADXL34514setRegisterBitEhib>

000d9c78 <_ZN7ADXL34516setInactivityXYZEbbb>:
}
void ADXL345::setInactivityXYZ(bool stateX, bool stateY, bool stateZ) {
   d9c78:	b570      	push	{r4, r5, r6, lr}
   d9c7a:	4604      	mov	r4, r0
   d9c7c:	4616      	mov	r6, r2
   d9c7e:	461d      	mov	r5, r3
	setInactivityX(stateX);
   d9c80:	f7ff ffeb 	bl	d9c5a <_ZN7ADXL34514setInactivityXEb>
	setInactivityY(stateY);
   d9c84:	4631      	mov	r1, r6
   d9c86:	4620      	mov	r0, r4
   d9c88:	f7ff ffec 	bl	d9c64 <_ZN7ADXL34514setInactivityYEb>
	setInactivityZ(stateZ);
   d9c8c:	4629      	mov	r1, r5
   d9c8e:	4620      	mov	r0, r4
}
   d9c90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	setRegisterBit(ADXL345_ACT_INACT_CTL, 0, state); 
}
void ADXL345::setInactivityXYZ(bool stateX, bool stateY, bool stateZ) {
	setInactivityX(stateX);
	setInactivityY(stateY);
	setInactivityZ(stateZ);
   d9c94:	f7ff bfeb 	b.w	d9c6e <_ZN7ADXL34514setInactivityZEb>

000d9c98 <_ZN7ADXL34519setInterruptMappingEhb>:

/*********************** INTERRUPT MAPPING **************************/
/*         Set the Mapping of an Interrupt to pin1 or pin2          */
// eg: setInterruptMapping(ADXL345_INT_DOUBLE_TAP_BIT,ADXL345_INT2_PIN);
void ADXL345::setInterruptMapping(byte interruptBit, bool interruptPin) {
	setRegisterBit(ADXL345_INT_MAP, interruptBit, interruptPin);
   d9c98:	4613      	mov	r3, r2
   d9c9a:	460a      	mov	r2, r1
   d9c9c:	212f      	movs	r1, #47	; 0x2f
   d9c9e:	f7ff bfa0 	b.w	d9be2 <_ZN7ADXL34514setRegisterBitEhib>

000d9ca2 <_ZN7ADXL34528setImportantInterruptMappingEiiiii>:
}

void ADXL345::setImportantInterruptMapping(int single_tap, int double_tap, int free_fall, int activity, int inactivity) {
   d9ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if(single_tap == 1) {
   d9ca6:	2901      	cmp	r1, #1
// eg: setInterruptMapping(ADXL345_INT_DOUBLE_TAP_BIT,ADXL345_INT2_PIN);
void ADXL345::setInterruptMapping(byte interruptBit, bool interruptPin) {
	setRegisterBit(ADXL345_INT_MAP, interruptBit, interruptPin);
}

void ADXL345::setImportantInterruptMapping(int single_tap, int double_tap, int free_fall, int activity, int inactivity) {
   d9ca8:	4604      	mov	r4, r0
   d9caa:	4690      	mov	r8, r2
   d9cac:	461d      	mov	r5, r3
   d9cae:	9f06      	ldr	r7, [sp, #24]
   d9cb0:	9e07      	ldr	r6, [sp, #28]
	if(single_tap == 1) {
   d9cb2:	d101      	bne.n	d9cb8 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x16>
		setInterruptMapping( ADXL345_INT_SINGLE_TAP_BIT,   ADXL345_INT1_PIN );}
   d9cb4:	2200      	movs	r2, #0
   d9cb6:	e002      	b.n	d9cbe <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x1c>
	else if(single_tap == 2) {
   d9cb8:	2902      	cmp	r1, #2
   d9cba:	d103      	bne.n	d9cc4 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x22>
		setInterruptMapping( ADXL345_INT_SINGLE_TAP_BIT,   ADXL345_INT2_PIN );}
   d9cbc:	2201      	movs	r2, #1
   d9cbe:	2106      	movs	r1, #6
   d9cc0:	f7ff ffea 	bl	d9c98 <_ZN7ADXL34519setInterruptMappingEhb>

	if(double_tap == 1) {
   d9cc4:	f1b8 0f01 	cmp.w	r8, #1
   d9cc8:	d101      	bne.n	d9cce <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x2c>
		setInterruptMapping( ADXL345_INT_DOUBLE_TAP_BIT,   ADXL345_INT1_PIN );}
   d9cca:	2200      	movs	r2, #0
   d9ccc:	e003      	b.n	d9cd6 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x34>
	else if(double_tap == 2) {
   d9cce:	f1b8 0f02 	cmp.w	r8, #2
   d9cd2:	d104      	bne.n	d9cde <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x3c>
		setInterruptMapping( ADXL345_INT_DOUBLE_TAP_BIT,   ADXL345_INT2_PIN );}
   d9cd4:	2201      	movs	r2, #1
   d9cd6:	2105      	movs	r1, #5
   d9cd8:	4620      	mov	r0, r4
   d9cda:	f7ff ffdd 	bl	d9c98 <_ZN7ADXL34519setInterruptMappingEhb>

	if(free_fall == 1) {
   d9cde:	2d01      	cmp	r5, #1
   d9ce0:	d102      	bne.n	d9ce8 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x46>
		setInterruptMapping( ADXL345_INT_FREE_FALL_BIT,   ADXL345_INT1_PIN );}
   d9ce2:	2200      	movs	r2, #0
   d9ce4:	2102      	movs	r1, #2
   d9ce6:	e003      	b.n	d9cf0 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x4e>
	else if(free_fall == 2) {
   d9ce8:	2d02      	cmp	r5, #2
   d9cea:	d104      	bne.n	d9cf6 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x54>
		setInterruptMapping( ADXL345_INT_FREE_FALL_BIT,   ADXL345_INT2_PIN );}
   d9cec:	2201      	movs	r2, #1
   d9cee:	4629      	mov	r1, r5
   d9cf0:	4620      	mov	r0, r4
   d9cf2:	f7ff ffd1 	bl	d9c98 <_ZN7ADXL34519setInterruptMappingEhb>

	if(activity == 1) {
   d9cf6:	2f01      	cmp	r7, #1
   d9cf8:	d101      	bne.n	d9cfe <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x5c>
		setInterruptMapping( ADXL345_INT_ACTIVITY_BIT,   ADXL345_INT1_PIN );}
   d9cfa:	2200      	movs	r2, #0
   d9cfc:	e002      	b.n	d9d04 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x62>
	else if(activity == 2) {
   d9cfe:	2f02      	cmp	r7, #2
   d9d00:	d104      	bne.n	d9d0c <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x6a>
		setInterruptMapping( ADXL345_INT_ACTIVITY_BIT,   ADXL345_INT2_PIN );}
   d9d02:	2201      	movs	r2, #1
   d9d04:	2104      	movs	r1, #4
   d9d06:	4620      	mov	r0, r4
   d9d08:	f7ff ffc6 	bl	d9c98 <_ZN7ADXL34519setInterruptMappingEhb>

	if(inactivity == 1) {
   d9d0c:	2e01      	cmp	r6, #1
   d9d0e:	d101      	bne.n	d9d14 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x72>
		setInterruptMapping( ADXL345_INT_INACTIVITY_BIT,   ADXL345_INT1_PIN );}
   d9d10:	2200      	movs	r2, #0
   d9d12:	e002      	b.n	d9d1a <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x78>
	else if(inactivity == 2) {
   d9d14:	2e02      	cmp	r6, #2
   d9d16:	d106      	bne.n	d9d26 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x84>
		setInterruptMapping( ADXL345_INT_INACTIVITY_BIT,   ADXL345_INT2_PIN );}
   d9d18:	2201      	movs	r2, #1
   d9d1a:	4620      	mov	r0, r4
   d9d1c:	2103      	movs	r1, #3
}
   d9d1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		setInterruptMapping( ADXL345_INT_ACTIVITY_BIT,   ADXL345_INT2_PIN );}

	if(inactivity == 1) {
		setInterruptMapping( ADXL345_INT_INACTIVITY_BIT,   ADXL345_INT1_PIN );}
	else if(inactivity == 2) {
		setInterruptMapping( ADXL345_INT_INACTIVITY_BIT,   ADXL345_INT2_PIN );}
   d9d22:	f7ff bfb9 	b.w	d9c98 <_ZN7ADXL34519setInterruptMappingEhb>
   d9d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d9d2a <_ZN7ADXL34512setInterruptEhb>:
bool ADXL345::isInterruptEnabled(byte interruptBit) {
	return getRegisterBit(ADXL345_INT_ENABLE,interruptBit);
}

void ADXL345::setInterrupt(byte interruptBit, bool state) {
	setRegisterBit(ADXL345_INT_ENABLE, interruptBit, state);
   d9d2a:	4613      	mov	r3, r2
   d9d2c:	460a      	mov	r2, r1
   d9d2e:	212e      	movs	r1, #46	; 0x2e
   d9d30:	f7ff bf57 	b.w	d9be2 <_ZN7ADXL34514setRegisterBitEhib>

000d9d34 <_ZN7ADXL34511ActivityINTEb>:
	else {
		setInterrupt( ADXL345_INT_FREE_FALL_BIT,  0);
	}	
}
void ADXL345::ActivityINT(bool status) {
	if(status) {
   d9d34:	460a      	mov	r2, r1
   d9d36:	b101      	cbz	r1, d9d3a <_ZN7ADXL34511ActivityINTEb+0x6>
		setInterrupt( ADXL345_INT_ACTIVITY_BIT,   1);
   d9d38:	2201      	movs	r2, #1
	}
	else {
		setInterrupt( ADXL345_INT_ACTIVITY_BIT,   0);
   d9d3a:	2104      	movs	r1, #4
   d9d3c:	f7ff bff5 	b.w	d9d2a <_ZN7ADXL34512setInterruptEhb>

000d9d40 <_ZN7ADXL34513InactivityINTEb>:
	}
}
void ADXL345::InactivityINT(bool status) {
	if(status) {
   d9d40:	460a      	mov	r2, r1
   d9d42:	b101      	cbz	r1, d9d46 <_ZN7ADXL34513InactivityINTEb+0x6>
		setInterrupt( ADXL345_INT_INACTIVITY_BIT, 1);
   d9d44:	2201      	movs	r2, #1
	}
	else {
		setInterrupt( ADXL345_INT_INACTIVITY_BIT, 0);
   d9d46:	2103      	movs	r1, #3
   d9d48:	f7ff bfef 	b.w	d9d2a <_ZN7ADXL34512setInterruptEhb>

000d9d4c <_GLOBAL__sub_I__ZN7ADXL345C2Ev>:
   d9d4c:	f000 bb8e 	b.w	da46c <HAL_Pin_Map>

000d9d50 <_ZL8wiresendh>:
#include "WProgram.h"
#endif
#endif //Particle

// minihelper to keep Arduino backward compatibility
static inline void wiresend(uint8_t x) {
   d9d50:	b510      	push	{r4, lr}
   d9d52:	4604      	mov	r4, r0
#if (ARDUINO >= 100) || defined (PARTICLE)
	Wire.write((uint8_t) x);
   d9d54:	f003 f94c 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d9d58:	6803      	ldr	r3, [r0, #0]
   d9d5a:	4621      	mov	r1, r4
   d9d5c:	689b      	ldr	r3, [r3, #8]
#else
	Wire.send(x);
#endif
}
   d9d5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif //Particle

// minihelper to keep Arduino backward compatibility
static inline void wiresend(uint8_t x) {
#if (ARDUINO >= 100) || defined (PARTICLE)
	Wire.write((uint8_t) x);
   d9d62:	4718      	bx	r3

000d9d64 <_ZL8wirerecvv>:
#else
	Wire.send(x);
#endif
}

static inline uint8_t wirerecv(void) {
   d9d64:	b508      	push	{r3, lr}
#if (ARDUINO >= 100) || defined (PARTICLE)
	return Wire.read();
   d9d66:	f003 f943 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d9d6a:	6803      	ldr	r3, [r0, #0]
   d9d6c:	695b      	ldr	r3, [r3, #20]
   d9d6e:	4798      	blx	r3
#else
	return Wire.receive();
#endif
}
   d9d70:	b2c0      	uxtb	r0, r0
   d9d72:	bd08      	pop	{r3, pc}

000d9d74 <_ZN17Adafruit_MCP2301712readRegisterEh>:
}

/**
 * Reads a given register
 */
uint8_t Adafruit_MCP23017::readRegister(uint8_t addr){
   d9d74:	b538      	push	{r3, r4, r5, lr}
   d9d76:	4604      	mov	r4, r0
   d9d78:	460d      	mov	r5, r1
	// read the current GPINTEN
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
   d9d7a:	f003 f939 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d9d7e:	7821      	ldrb	r1, [r4, #0]
   d9d80:	f041 0120 	orr.w	r1, r1, #32
   d9d84:	f002 fb44 	bl	dc410 <_ZN7TwoWire17beginTransmissionEi>
	wiresend(addr);
   d9d88:	4628      	mov	r0, r5
   d9d8a:	f7ff ffe1 	bl	d9d50 <_ZL8wiresendh>
	Wire.endTransmission();
   d9d8e:	f003 f92f 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d9d92:	f002 fb44 	bl	dc41e <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
   d9d96:	f003 f92b 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d9d9a:	7821      	ldrb	r1, [r4, #0]
   d9d9c:	2201      	movs	r2, #1
   d9d9e:	f041 0120 	orr.w	r1, r1, #32
   d9da2:	f002 fb27 	bl	dc3f4 <_ZN7TwoWire11requestFromEii>
	return wirerecv();
}
   d9da6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	// read the current GPINTEN
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
	wiresend(addr);
	Wire.endTransmission();
	Wire.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
	return wirerecv();
   d9daa:	f7ff bfdb 	b.w	d9d64 <_ZL8wirerecvv>

000d9dae <_ZN17Adafruit_MCP2301713writeRegisterEhh>:


/**
 * Writes a given register
 */
void Adafruit_MCP23017::writeRegister(uint8_t regAddr, uint8_t regValue){
   d9dae:	b570      	push	{r4, r5, r6, lr}
   d9db0:	4606      	mov	r6, r0
   d9db2:	4614      	mov	r4, r2
   d9db4:	460d      	mov	r5, r1
	// Write the register
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
   d9db6:	f003 f91b 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d9dba:	7831      	ldrb	r1, [r6, #0]
   d9dbc:	f041 0120 	orr.w	r1, r1, #32
   d9dc0:	f002 fb26 	bl	dc410 <_ZN7TwoWire17beginTransmissionEi>
	wiresend(regAddr);
   d9dc4:	4628      	mov	r0, r5
   d9dc6:	f7ff ffc3 	bl	d9d50 <_ZL8wiresendh>
	wiresend(regValue);
   d9dca:	4620      	mov	r0, r4
   d9dcc:	f7ff ffc0 	bl	d9d50 <_ZL8wiresendh>
	Wire.endTransmission();
   d9dd0:	f003 f90e 	bl	dcff0 <_Z19__fetch_global_Wirev>
}
   d9dd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void Adafruit_MCP23017::writeRegister(uint8_t regAddr, uint8_t regValue){
	// Write the register
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
	wiresend(regAddr);
	wiresend(regValue);
	Wire.endTransmission();
   d9dd8:	f002 bb21 	b.w	dc41e <_ZN7TwoWire15endTransmissionEv>

000d9ddc <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   d9ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9de0:	f89d 6018 	ldrb.w	r6, [sp, #24]

/**
 * Register address, port dependent, for a given PIN
 */
uint8_t Adafruit_MCP23017::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
	return(pin<8) ?portAaddr:portBaddr;
   d9de4:	2907      	cmp	r1, #7
   d9de6:	bf98      	it	ls
   d9de8:	461e      	movls	r6, r3

/**
 * Bit number associated to a give Pin
 */
uint8_t Adafruit_MCP23017::bitForPin(uint8_t pin){
	return pin%8;
   d9dea:	f001 0707 	and.w	r7, r1, #7
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   d9dee:	4690      	mov	r8, r2
	uint8_t regValue;
	uint8_t regAddr=regForPin(pin,portAaddr,portBaddr);
	uint8_t bit=bitForPin(pin);
	regValue = readRegister(regAddr);
   d9df0:	4631      	mov	r1, r6
   d9df2:	2401      	movs	r4, #1
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   d9df4:	4605      	mov	r5, r0
	uint8_t regAddr=regForPin(pin,portAaddr,portBaddr);
	uint8_t bit=bitForPin(pin);
	regValue = readRegister(regAddr);

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
   d9df6:	40bc      	lsls	r4, r7
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
	uint8_t regValue;
	uint8_t regAddr=regForPin(pin,portAaddr,portBaddr);
	uint8_t bit=bitForPin(pin);
	regValue = readRegister(regAddr);
   d9df8:	f7ff ffbc 	bl	d9d74 <_ZN17Adafruit_MCP2301712readRegisterEh>

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
   d9dfc:	f1b8 0f00 	cmp.w	r8, #0
   d9e00:	d001      	beq.n	d9e06 <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh+0x2a>
   d9e02:	4304      	orrs	r4, r0
   d9e04:	e001      	b.n	d9e0a <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh+0x2e>
   d9e06:	ea20 0404 	bic.w	r4, r0, r4
   d9e0a:	b2e2      	uxtb	r2, r4

	writeRegister(regAddr,regValue);
   d9e0c:	4631      	mov	r1, r6
   d9e0e:	4628      	mov	r0, r5
}
   d9e10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	regValue = readRegister(regAddr);

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);

	writeRegister(regAddr,regValue);
   d9e14:	f7ff bfcb 	b.w	d9dae <_ZN17Adafruit_MCP2301713writeRegisterEhh>

000d9e18 <_ZN17Adafruit_MCP230175beginEh>:
////////////////////////////////////////////////////////////////////////////////

/**
 * Initializes the MCP23017 given its HW selected address, see datasheet for Address selection.
 */
void Adafruit_MCP23017::begin(uint8_t addr) {
   d9e18:	b510      	push	{r4, lr}
	if (addr > 7) {
		addr = 7;
	}
	i2caddr = addr;
   d9e1a:	2907      	cmp	r1, #7
   d9e1c:	bf28      	it	cs
   d9e1e:	2107      	movcs	r1, #7
   d9e20:	7001      	strb	r1, [r0, #0]
////////////////////////////////////////////////////////////////////////////////

/**
 * Initializes the MCP23017 given its HW selected address, see datasheet for Address selection.
 */
void Adafruit_MCP23017::begin(uint8_t addr) {
   d9e22:	4604      	mov	r4, r0
	if (addr > 7) {
		addr = 7;
	}
	i2caddr = addr;

	Wire.begin();
   d9e24:	f003 f8e4 	bl	dcff0 <_Z19__fetch_global_Wirev>
   d9e28:	f002 face 	bl	dc3c8 <_ZN7TwoWire5beginEv>

	// set defaults!
	// all inputs on port A and B
	writeRegister(MCP23017_IODIRA,0xff);
   d9e2c:	4620      	mov	r0, r4
   d9e2e:	22ff      	movs	r2, #255	; 0xff
   d9e30:	2100      	movs	r1, #0
   d9e32:	f7ff ffbc 	bl	d9dae <_ZN17Adafruit_MCP2301713writeRegisterEhh>
	writeRegister(MCP23017_IODIRB,0xff);
   d9e36:	4620      	mov	r0, r4
   d9e38:	22ff      	movs	r2, #255	; 0xff
   d9e3a:	2101      	movs	r1, #1
}
   d9e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Wire.begin();

	// set defaults!
	// all inputs on port A and B
	writeRegister(MCP23017_IODIRA,0xff);
	writeRegister(MCP23017_IODIRB,0xff);
   d9e40:	f7ff bfb5 	b.w	d9dae <_ZN17Adafruit_MCP2301713writeRegisterEhh>

000d9e44 <_ZN17Adafruit_MCP230175beginEv>:

/**
 * Initializes the default MCP23017, with 000 for the configurable part of the address
 */
void Adafruit_MCP23017::begin(void) {
	begin(0);
   d9e44:	2100      	movs	r1, #0
   d9e46:	f7ff bfe7 	b.w	d9e18 <_ZN17Adafruit_MCP230175beginEh>

000d9e4a <_ZN17Adafruit_MCP230177pinModeEhh>:
}

/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void Adafruit_MCP23017::pinMode(uint8_t p, uint8_t d) {
   d9e4a:	b507      	push	{r0, r1, r2, lr}
	updateRegisterBit(p,(d==INPUT),MCP23017_IODIRA,MCP23017_IODIRB);
   d9e4c:	2301      	movs	r3, #1
   d9e4e:	fab2 f282 	clz	r2, r2
   d9e52:	9300      	str	r3, [sp, #0]
   d9e54:	0952      	lsrs	r2, r2, #5
   d9e56:	2300      	movs	r3, #0
   d9e58:	f7ff ffc0 	bl	d9ddc <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh>
}
   d9e5c:	b003      	add	sp, #12
   d9e5e:	f85d fb04 	ldr.w	pc, [sp], #4

000d9e62 <_ZN17Adafruit_MCP2301712digitalWriteEhh>:

/**
 * Register address, port dependent, for a given PIN
 */
uint8_t Adafruit_MCP23017::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
	return(pin<8) ?portAaddr:portBaddr;
   d9e62:	2908      	cmp	r1, #8
	wiresend(ba & 0xFF);
	wiresend(ba >> 8);
	Wire.endTransmission();
}

void Adafruit_MCP23017::digitalWrite(uint8_t pin, uint8_t d) {
   d9e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

/**
 * Bit number associated to a give Pin
 */
uint8_t Adafruit_MCP23017::bitForPin(uint8_t pin){
	return pin%8;
   d9e66:	f001 0607 	and.w	r6, r1, #7
	wiresend(ba & 0xFF);
	wiresend(ba >> 8);
	Wire.endTransmission();
}

void Adafruit_MCP23017::digitalWrite(uint8_t pin, uint8_t d) {
   d9e6a:	460c      	mov	r4, r1
	uint8_t bit=bitForPin(pin);


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23017_OLATA,MCP23017_OLATB);
	gpio = readRegister(regAddr);
   d9e6c:	bf34      	ite	cc
   d9e6e:	2114      	movcc	r1, #20
   d9e70:	2115      	movcs	r1, #21
	wiresend(ba & 0xFF);
	wiresend(ba >> 8);
	Wire.endTransmission();
}

void Adafruit_MCP23017::digitalWrite(uint8_t pin, uint8_t d) {
   d9e72:	4605      	mov	r5, r0
   d9e74:	4617      	mov	r7, r2
	uint8_t bit=bitForPin(pin);


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23017_OLATA,MCP23017_OLATB);
	gpio = readRegister(regAddr);
   d9e76:	f7ff ff7d 	bl	d9d74 <_ZN17Adafruit_MCP2301712readRegisterEh>
   d9e7a:	2301      	movs	r3, #1

	// set the pin and direction
	bitWrite(gpio,bit,d);
   d9e7c:	40b3      	lsls	r3, r6
   d9e7e:	b10f      	cbz	r7, d9e84 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x22>
   d9e80:	4303      	orrs	r3, r0
   d9e82:	e001      	b.n	d9e88 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x26>
   d9e84:	ea20 0303 	bic.w	r3, r0, r3

/**
 * Register address, port dependent, for a given PIN
 */
uint8_t Adafruit_MCP23017::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
	return(pin<8) ?portAaddr:portBaddr;
   d9e88:	2c08      	cmp	r4, #8
	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23017_OLATA,MCP23017_OLATB);
	gpio = readRegister(regAddr);

	// set the pin and direction
	bitWrite(gpio,bit,d);
   d9e8a:	b2da      	uxtb	r2, r3

	// write the new GPIO
	regAddr=regForPin(pin,MCP23017_GPIOA,MCP23017_GPIOB);
	writeRegister(regAddr,gpio);
   d9e8c:	4628      	mov	r0, r5
   d9e8e:	bf34      	ite	cc
   d9e90:	2112      	movcc	r1, #18
   d9e92:	2113      	movcs	r1, #19
}
   d9e94:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// set the pin and direction
	bitWrite(gpio,bit,d);

	// write the new GPIO
	regAddr=regForPin(pin,MCP23017_GPIOA,MCP23017_GPIOB);
	writeRegister(regAddr,gpio);
   d9e98:	f7ff bf89 	b.w	d9dae <_ZN17Adafruit_MCP2301713writeRegisterEhh>

000d9e9c <_ZN17Adafruit_MCP230176pullUpEhh>:
}

void Adafruit_MCP23017::pullUp(uint8_t p, uint8_t d) {
   d9e9c:	b507      	push	{r0, r1, r2, lr}
	updateRegisterBit(p,d,MCP23017_GPPUA,MCP23017_GPPUB);
   d9e9e:	230d      	movs	r3, #13
   d9ea0:	9300      	str	r3, [sp, #0]
   d9ea2:	230c      	movs	r3, #12
   d9ea4:	f7ff ff9a 	bl	d9ddc <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh>
}
   d9ea8:	b003      	add	sp, #12
   d9eaa:	f85d fb04 	ldr.w	pc, [sp], #4

000d9eae <_GLOBAL__sub_I__ZN17Adafruit_MCP230179bitForPinEh>:
   d9eae:	f000 badd 	b.w	da46c <HAL_Pin_Map>

000d9eb2 <_ZN5SPS30C1Ev>:
#include "SPS30.h"

SPS30::SPS30(void)
   d9eb2:	2200      	movs	r2, #0
   d9eb4:	6042      	str	r2, [r0, #4]
   d9eb6:	6082      	str	r2, [r0, #8]
   d9eb8:	60c2      	str	r2, [r0, #12]
   d9eba:	6102      	str	r2, [r0, #16]
   d9ebc:	6142      	str	r2, [r0, #20]
   d9ebe:	6182      	str	r2, [r0, #24]
   d9ec0:	61c2      	str	r2, [r0, #28]
   d9ec2:	6202      	str	r2, [r0, #32]
   d9ec4:	6242      	str	r2, [r0, #36]	; 0x24
   d9ec6:	6282      	str	r2, [r0, #40]	; 0x28
   d9ec8:	2201      	movs	r2, #1
   d9eca:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
   d9ece:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
   d9ed2:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
{
  // Constructor
}
   d9ed6:	4770      	bx	lr

000d9ed8 <_ZN5SPS3012readRegisterEt>:
  return (true); //Success! New data available in globals.
}

//Gets two bytes from SCD30
uint16_t SPS30::readRegister(uint16_t registerAddress)
{
   d9ed8:	b538      	push	{r3, r4, r5, lr}
   d9eda:	4605      	mov	r5, r0
   d9edc:	460c      	mov	r4, r1
  _i2cPort->beginTransmission(SPS30_ADDRESS);
   d9ede:	6800      	ldr	r0, [r0, #0]
   d9ee0:	2169      	movs	r1, #105	; 0x69
   d9ee2:	f002 fa95 	bl	dc410 <_ZN7TwoWire17beginTransmissionEi>
  _i2cPort->write(registerAddress >> 8);   //MSB
   d9ee6:	0a21      	lsrs	r1, r4, #8
   d9ee8:	6828      	ldr	r0, [r5, #0]
   d9eea:	f7ff fa57 	bl	d939c <_ZN7TwoWire5writeEi>
  _i2cPort->write(registerAddress & 0xFF); //LSB
   d9eee:	b2e1      	uxtb	r1, r4
   d9ef0:	6828      	ldr	r0, [r5, #0]
   d9ef2:	f7ff fa53 	bl	d939c <_ZN7TwoWire5writeEi>
  if (_i2cPort->endTransmission() != 0)
   d9ef6:	6828      	ldr	r0, [r5, #0]
   d9ef8:	f002 fa91 	bl	dc41e <_ZN7TwoWire15endTransmissionEv>
   d9efc:	b108      	cbz	r0, d9f02 <_ZN5SPS3012readRegisterEt+0x2a>
    return (0); //Sensor did not ACK
   d9efe:	2000      	movs	r0, #0
   d9f00:	bd38      	pop	{r3, r4, r5, pc}

  _i2cPort->requestFrom((uint8_t)SPS30_ADDRESS, (uint8_t)2);
   d9f02:	2202      	movs	r2, #2
   d9f04:	2169      	movs	r1, #105	; 0x69
   d9f06:	6828      	ldr	r0, [r5, #0]
   d9f08:	f002 fa71 	bl	dc3ee <_ZN7TwoWire11requestFromEhh>
  if (_i2cPort->available())
   d9f0c:	6828      	ldr	r0, [r5, #0]
   d9f0e:	6803      	ldr	r3, [r0, #0]
   d9f10:	691b      	ldr	r3, [r3, #16]
   d9f12:	4798      	blx	r3
   d9f14:	2800      	cmp	r0, #0
   d9f16:	d0f2      	beq.n	d9efe <_ZN5SPS3012readRegisterEt+0x26>
  {
    uint8_t msb = _i2cPort->read();
   d9f18:	6828      	ldr	r0, [r5, #0]
   d9f1a:	6803      	ldr	r3, [r0, #0]
   d9f1c:	695b      	ldr	r3, [r3, #20]
   d9f1e:	4798      	blx	r3
   d9f20:	4604      	mov	r4, r0
    uint8_t lsb = _i2cPort->read();
   d9f22:	6828      	ldr	r0, [r5, #0]
   d9f24:	6803      	ldr	r3, [r0, #0]
   d9f26:	695b      	ldr	r3, [r3, #20]
   d9f28:	4798      	blx	r3
    return ((uint16_t)msb << 8 | lsb);
   d9f2a:	0224      	lsls	r4, r4, #8
   d9f2c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
   d9f30:	b2c0      	uxtb	r0, r0
   d9f32:	4320      	orrs	r0, r4
  }
  return (0); //Sensor did not respond
}
   d9f34:	bd38      	pop	{r3, r4, r5, pc}

000d9f36 <_ZN5SPS3013dataAvailableEv>:
  sendCommand(COMMAND_AUTO_CLEAN_INTERVAL, interval);
}

//Returns true when data is available
boolean SPS30::dataAvailable()
{
   d9f36:	b508      	push	{r3, lr}
  uint16_t response = readRegister(COMMAND_GET_DATA_READY);
   d9f38:	f240 2102 	movw	r1, #514	; 0x202
   d9f3c:	f7ff ffcc 	bl	d9ed8 <_ZN5SPS3012readRegisterEt>

  if (response == 1)
    return (true);
  return (false);
}
   d9f40:	1e43      	subs	r3, r0, #1
   d9f42:	4258      	negs	r0, r3
   d9f44:	4158      	adcs	r0, r3
   d9f46:	bd08      	pop	{r3, pc}

000d9f48 <_ZN5SPS3015readMeasurementEv>:

//Get 60 bytes from SCD30
//Updates global variables with floats
//Returns true if success
boolean SPS30::readMeasurement()
{
   d9f48:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9f4a:	b08b      	sub	sp, #44	; 0x2c
   d9f4c:	4605      	mov	r5, r0
  //Verify we have data from the sensor
  if (dataAvailable() == false)
   d9f4e:	f7ff fff2 	bl	d9f36 <_ZN5SPS3013dataAvailableEv>
   d9f52:	4604      	mov	r4, r0
   d9f54:	2800      	cmp	r0, #0
   d9f56:	f000 8104 	beq.w	da162 <_ZN5SPS3015readMeasurementEv+0x21a>
    return (false);

  // Mass conentration of PM1.0 - PM10 (μg/m³)
  uint32_t tempMassPM1 = 0;
   d9f5a:	2700      	movs	r7, #0
  uint32_t tempNumPM10 = 0;

  // Typical particle size (μm)
  uint32_t tempTypPartSize = 0;

  _i2cPort->beginTransmission(SPS30_ADDRESS);
   d9f5c:	2169      	movs	r1, #105	; 0x69
   d9f5e:	6828      	ldr	r0, [r5, #0]
  //Verify we have data from the sensor
  if (dataAvailable() == false)
    return (false);

  // Mass conentration of PM1.0 - PM10 (μg/m³)
  uint32_t tempMassPM1 = 0;
   d9f60:	9700      	str	r7, [sp, #0]
  uint32_t tempMassPM25 = 0;
   d9f62:	9701      	str	r7, [sp, #4]
  uint32_t tempMassPM4 = 0;
   d9f64:	9702      	str	r7, [sp, #8]
  uint32_t tempMassPM10 = 0;
   d9f66:	9703      	str	r7, [sp, #12]

  // Number concentration of PM0.5 - PM10 (#/cm³)
  uint32_t tempNumPM05 = 0;
   d9f68:	9704      	str	r7, [sp, #16]
  uint32_t tempNumPM1 = 0;
   d9f6a:	9705      	str	r7, [sp, #20]
  uint32_t tempNumPM25 = 0;
   d9f6c:	9706      	str	r7, [sp, #24]
  uint32_t tempNumPM4 = 0;
   d9f6e:	9707      	str	r7, [sp, #28]
  uint32_t tempNumPM10 = 0;
   d9f70:	9708      	str	r7, [sp, #32]

  // Typical particle size (μm)
  uint32_t tempTypPartSize = 0;
   d9f72:	9709      	str	r7, [sp, #36]	; 0x24

  _i2cPort->beginTransmission(SPS30_ADDRESS);
   d9f74:	f002 fa4c 	bl	dc410 <_ZN7TwoWire17beginTransmissionEi>
  _i2cPort->write(COMMAND_READ_MEASUREMENT >> 8);   //MSB
   d9f78:	2103      	movs	r1, #3
   d9f7a:	6828      	ldr	r0, [r5, #0]
   d9f7c:	f7ff fa0e 	bl	d939c <_ZN7TwoWire5writeEi>
  _i2cPort->write(COMMAND_READ_MEASUREMENT & 0xFF); //LSB
   d9f80:	4639      	mov	r1, r7
   d9f82:	6828      	ldr	r0, [r5, #0]
   d9f84:	f7ff fa0a 	bl	d939c <_ZN7TwoWire5writeEi>
  if (_i2cPort->endTransmission() != 0)
   d9f88:	6828      	ldr	r0, [r5, #0]
   d9f8a:	f002 fa48 	bl	dc41e <_ZN7TwoWire15endTransmissionEv>
   d9f8e:	4606      	mov	r6, r0
   d9f90:	2800      	cmp	r0, #0
   d9f92:	f040 80e5 	bne.w	da160 <_ZN5SPS3015readMeasurementEv+0x218>
    return (0); //Sensor did not ACK

  _i2cPort->requestFrom((uint8_t)SPS30_ADDRESS, (uint8_t)60);
   d9f96:	223c      	movs	r2, #60	; 0x3c
   d9f98:	2169      	movs	r1, #105	; 0x69
   d9f9a:	6828      	ldr	r0, [r5, #0]
   d9f9c:	f002 fa27 	bl	dc3ee <_ZN7TwoWire11requestFromEhh>
  if (_i2cPort->available())
   d9fa0:	6828      	ldr	r0, [r5, #0]
   d9fa2:	6803      	ldr	r3, [r0, #0]
   d9fa4:	691b      	ldr	r3, [r3, #16]
   d9fa6:	4798      	blx	r3
   d9fa8:	bb18      	cbnz	r0, d9ff2 <_ZN5SPS3015readMeasurementEv+0xaa>
  }

  //Now copy the uint32s into their associated floats

  // Mass concentrations
  memcpy(&massPM1, &tempMassPM1, sizeof(massPM1));
   d9faa:	9800      	ldr	r0, [sp, #0]
   d9fac:	6068      	str	r0, [r5, #4]
  memcpy(&massPM25, &tempMassPM25, sizeof(massPM25));
   d9fae:	9801      	ldr	r0, [sp, #4]
   d9fb0:	60a8      	str	r0, [r5, #8]
  memcpy(&massPM4, &tempMassPM4, sizeof(massPM4));
   d9fb2:	9802      	ldr	r0, [sp, #8]
   d9fb4:	60e8      	str	r0, [r5, #12]
  memcpy(&massPM10, &tempMassPM10, sizeof(massPM10));
   d9fb6:	9803      	ldr	r0, [sp, #12]
   d9fb8:	6128      	str	r0, [r5, #16]

  // Number concentrations
  memcpy(&numPM05, &tempNumPM05, sizeof(numPM05));
   d9fba:	9804      	ldr	r0, [sp, #16]
   d9fbc:	6168      	str	r0, [r5, #20]
  memcpy(&numPM1, &tempNumPM1, sizeof(numPM1));
   d9fbe:	9805      	ldr	r0, [sp, #20]
   d9fc0:	61a8      	str	r0, [r5, #24]
  memcpy(&numPM25, &tempNumPM25, sizeof(numPM25));
   d9fc2:	9806      	ldr	r0, [sp, #24]
   d9fc4:	61e8      	str	r0, [r5, #28]
  memcpy(&numPM4, &tempNumPM4, sizeof(numPM4));
   d9fc6:	9807      	ldr	r0, [sp, #28]
   d9fc8:	6228      	str	r0, [r5, #32]
  memcpy(&numPM10, &tempNumPM10, sizeof(numPM10));
   d9fca:	9808      	ldr	r0, [sp, #32]
   d9fcc:	6268      	str	r0, [r5, #36]	; 0x24

  // Typ particle size
  memcpy(&typPartSize, &tempTypPartSize, sizeof(typPartSize));

  //Mark our global variables as fresh
  massHasBeenReported = false;
   d9fce:	2300      	movs	r3, #0
  memcpy(&numPM25, &tempNumPM25, sizeof(numPM25));
  memcpy(&numPM4, &tempNumPM4, sizeof(numPM4));
  memcpy(&numPM10, &tempNumPM10, sizeof(numPM10));

  // Typ particle size
  memcpy(&typPartSize, &tempTypPartSize, sizeof(typPartSize));
   d9fd0:	9809      	ldr	r0, [sp, #36]	; 0x24
   d9fd2:	62a8      	str	r0, [r5, #40]	; 0x28

  //Mark our global variables as fresh
  massHasBeenReported = false;
   d9fd4:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  numberHasBeenReported = false;
   d9fd8:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  typHasBeenReported = false;
   d9fdc:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
   d9fe0:	e0bf      	b.n	da162 <_ZN5SPS3015readMeasurementEv+0x21a>
      case 1:
      case 3:
      case 4:
        // mass pm1.0
        tempMassPM1 <<= 8;
        tempMassPM1 |= incoming;
   d9fe2:	9b00      	ldr	r3, [sp, #0]
   d9fe4:	b2c0      	uxtb	r0, r0
   d9fe6:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   d9fea:	9000      	str	r0, [sp, #0]
   d9fec:	3601      	adds	r6, #1
    return (0); //Sensor did not ACK

  _i2cPort->requestFrom((uint8_t)SPS30_ADDRESS, (uint8_t)60);
  if (_i2cPort->available())
  {
    for (byte x = 0; x < 60; x++)
   d9fee:	2e3c      	cmp	r6, #60	; 0x3c
   d9ff0:	d0db      	beq.n	d9faa <_ZN5SPS3015readMeasurementEv+0x62>
    {
      byte incoming = _i2cPort->read();
   d9ff2:	6828      	ldr	r0, [r5, #0]
   d9ff4:	6803      	ldr	r3, [r0, #0]
   d9ff6:	695b      	ldr	r3, [r3, #20]
   d9ff8:	4798      	blx	r3

      switch (x)
   d9ffa:	b2f3      	uxtb	r3, r6
   d9ffc:	2b3a      	cmp	r3, #58	; 0x3a
   d9ffe:	d8f5      	bhi.n	d9fec <_ZN5SPS3015readMeasurementEv+0xa4>
   da000:	a201      	add	r2, pc, #4	; (adr r2, da008 <_ZN5SPS3015readMeasurementEv+0xc0>)
   da002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   da006:	bf00      	nop
   da008:	000d9fe3 	.word	0x000d9fe3
   da00c:	000d9fe3 	.word	0x000d9fe3
   da010:	000d9fed 	.word	0x000d9fed
   da014:	000d9fe3 	.word	0x000d9fe3
   da018:	000d9fe3 	.word	0x000d9fe3
   da01c:	000d9fed 	.word	0x000d9fed
   da020:	000da0f5 	.word	0x000da0f5
   da024:	000da0f5 	.word	0x000da0f5
   da028:	000d9fed 	.word	0x000d9fed
   da02c:	000da0f5 	.word	0x000da0f5
   da030:	000da0f5 	.word	0x000da0f5
   da034:	000d9fed 	.word	0x000d9fed
   da038:	000da101 	.word	0x000da101
   da03c:	000da101 	.word	0x000da101
   da040:	000d9fed 	.word	0x000d9fed
   da044:	000da101 	.word	0x000da101
   da048:	000da101 	.word	0x000da101
   da04c:	000d9fed 	.word	0x000d9fed
   da050:	000da10d 	.word	0x000da10d
   da054:	000da10d 	.word	0x000da10d
   da058:	000d9fed 	.word	0x000d9fed
   da05c:	000da10d 	.word	0x000da10d
   da060:	000da10d 	.word	0x000da10d
   da064:	000d9fed 	.word	0x000d9fed
   da068:	000da119 	.word	0x000da119
   da06c:	000da119 	.word	0x000da119
   da070:	000d9fed 	.word	0x000d9fed
   da074:	000da119 	.word	0x000da119
   da078:	000da119 	.word	0x000da119
   da07c:	000d9fed 	.word	0x000d9fed
   da080:	000da125 	.word	0x000da125
   da084:	000da125 	.word	0x000da125
   da088:	000d9fed 	.word	0x000d9fed
   da08c:	000da125 	.word	0x000da125
   da090:	000da125 	.word	0x000da125
   da094:	000d9fed 	.word	0x000d9fed
   da098:	000da131 	.word	0x000da131
   da09c:	000da131 	.word	0x000da131
   da0a0:	000d9fed 	.word	0x000d9fed
   da0a4:	000da131 	.word	0x000da131
   da0a8:	000da131 	.word	0x000da131
   da0ac:	000d9fed 	.word	0x000d9fed
   da0b0:	000da13d 	.word	0x000da13d
   da0b4:	000da13d 	.word	0x000da13d
   da0b8:	000d9fed 	.word	0x000d9fed
   da0bc:	000da13d 	.word	0x000da13d
   da0c0:	000da13d 	.word	0x000da13d
   da0c4:	000d9fed 	.word	0x000d9fed
   da0c8:	000da149 	.word	0x000da149
   da0cc:	000da149 	.word	0x000da149
   da0d0:	000d9fed 	.word	0x000d9fed
   da0d4:	000da149 	.word	0x000da149
   da0d8:	000da149 	.word	0x000da149
   da0dc:	000d9fed 	.word	0x000d9fed
   da0e0:	000da155 	.word	0x000da155
   da0e4:	000da155 	.word	0x000da155
   da0e8:	000d9fed 	.word	0x000d9fed
   da0ec:	000da155 	.word	0x000da155
   da0f0:	000da155 	.word	0x000da155
      case 7:
      case 9:
      case 10:
        // mass pm2.5
        tempMassPM25 <<= 8;
        tempMassPM25 |= incoming;
   da0f4:	9b01      	ldr	r3, [sp, #4]
   da0f6:	b2c0      	uxtb	r0, r0
   da0f8:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   da0fc:	9001      	str	r0, [sp, #4]
   da0fe:	e775      	b.n	d9fec <_ZN5SPS3015readMeasurementEv+0xa4>
      case 13:
      case 15:
      case 16:
        // mass pm4.0
        tempMassPM4 <<= 8;
        tempMassPM4 |= incoming;
   da100:	9b02      	ldr	r3, [sp, #8]
   da102:	b2c0      	uxtb	r0, r0
   da104:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   da108:	9002      	str	r0, [sp, #8]
   da10a:	e76f      	b.n	d9fec <_ZN5SPS3015readMeasurementEv+0xa4>
      case 19:
      case 21:
      case 22:
        // mass pm10
        tempMassPM10 <<= 8;
        tempMassPM10 |= incoming;
   da10c:	9b03      	ldr	r3, [sp, #12]
   da10e:	b2c0      	uxtb	r0, r0
   da110:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   da114:	9003      	str	r0, [sp, #12]
   da116:	e769      	b.n	d9fec <_ZN5SPS3015readMeasurementEv+0xa4>
      case 25:
      case 27:
      case 28:
        // number pm0.5
        tempNumPM05 <<= 8;
        tempNumPM05 |= incoming;
   da118:	9b04      	ldr	r3, [sp, #16]
   da11a:	b2c0      	uxtb	r0, r0
   da11c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   da120:	9004      	str	r0, [sp, #16]
   da122:	e763      	b.n	d9fec <_ZN5SPS3015readMeasurementEv+0xa4>
      case 31:
      case 33:
      case 34:
        // number pm1.0
        tempNumPM1 <<= 8;
        tempNumPM1 |= incoming;
   da124:	9b05      	ldr	r3, [sp, #20]
   da126:	b2c0      	uxtb	r0, r0
   da128:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   da12c:	9005      	str	r0, [sp, #20]
   da12e:	e75d      	b.n	d9fec <_ZN5SPS3015readMeasurementEv+0xa4>
      case 37:
      case 39:
      case 40:
        // number pm2.5
        tempNumPM25 <<= 8;
        tempNumPM25 |= incoming;
   da130:	9b06      	ldr	r3, [sp, #24]
   da132:	b2c0      	uxtb	r0, r0
   da134:	ea40 2303 	orr.w	r3, r0, r3, lsl #8
   da138:	9306      	str	r3, [sp, #24]
   da13a:	e757      	b.n	d9fec <_ZN5SPS3015readMeasurementEv+0xa4>
      case 43:
      case 45:
      case 46:
        // number pm4.0
        tempNumPM4 <<= 8;
        tempNumPM4 |= incoming;
   da13c:	b2c3      	uxtb	r3, r0
   da13e:	9807      	ldr	r0, [sp, #28]
   da140:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   da144:	9307      	str	r3, [sp, #28]
   da146:	e751      	b.n	d9fec <_ZN5SPS3015readMeasurementEv+0xa4>
      case 49:
      case 51:
      case 52:
        // number pm10
        tempNumPM10 <<= 8;
        tempNumPM10 |= incoming;
   da148:	b2c3      	uxtb	r3, r0
   da14a:	9808      	ldr	r0, [sp, #32]
   da14c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   da150:	9308      	str	r3, [sp, #32]
   da152:	e74b      	b.n	d9fec <_ZN5SPS3015readMeasurementEv+0xa4>
      case 55:
      case 57:
      case 58:
        // typ particle size
        tempTypPartSize <<= 8;
        tempTypPartSize |= incoming;
   da154:	b2c3      	uxtb	r3, r0
   da156:	9809      	ldr	r0, [sp, #36]	; 0x24
   da158:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   da15c:	9309      	str	r3, [sp, #36]	; 0x24
   da15e:	e745      	b.n	d9fec <_ZN5SPS3015readMeasurementEv+0xa4>

  _i2cPort->beginTransmission(SPS30_ADDRESS);
  _i2cPort->write(COMMAND_READ_MEASUREMENT >> 8);   //MSB
  _i2cPort->write(COMMAND_READ_MEASUREMENT & 0xFF); //LSB
  if (_i2cPort->endTransmission() != 0)
    return (0); //Sensor did not ACK
   da160:	463c      	mov	r4, r7
  massHasBeenReported = false;
  numberHasBeenReported = false;
  typHasBeenReported = false;

  return (true); //Success! New data available in globals.
}
   da162:	4620      	mov	r0, r4
   da164:	b00b      	add	sp, #44	; 0x2c
   da166:	bdf0      	pop	{r4, r5, r6, r7, pc}

000da168 <_ZN5SPS307getMassEPf>:
}

//Returns the latest available CO2 level
//If the current level has already been reported, trigger a new read
void *SPS30::getMass(float array[4])
{
   da168:	b538      	push	{r3, r4, r5, lr}
  if (massHasBeenReported == true) //Trigger a new read
   da16a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
}

//Returns the latest available CO2 level
//If the current level has already been reported, trigger a new read
void *SPS30::getMass(float array[4])
{
   da16e:	4604      	mov	r4, r0
   da170:	460d      	mov	r5, r1
  if (massHasBeenReported == true) //Trigger a new read
   da172:	b10b      	cbz	r3, da178 <_ZN5SPS307getMassEPf+0x10>
    readMeasurement();             //Pull in new co2, humidity, and temp into global vars
   da174:	f7ff fee8 	bl	d9f48 <_ZN5SPS3015readMeasurementEv>

  massHasBeenReported = true;
   da178:	2301      	movs	r3, #1
   da17a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

  array[0] = massPM1;
   da17e:	6863      	ldr	r3, [r4, #4]
   da180:	602b      	str	r3, [r5, #0]
  array[1] = massPM25;
   da182:	68a3      	ldr	r3, [r4, #8]
   da184:	606b      	str	r3, [r5, #4]
  array[2] = massPM4;
   da186:	68e3      	ldr	r3, [r4, #12]
   da188:	60ab      	str	r3, [r5, #8]
  array[3] = massPM10;
   da18a:	6923      	ldr	r3, [r4, #16]
   da18c:	60eb      	str	r3, [r5, #12]
}
   da18e:	bd38      	pop	{r3, r4, r5, pc}

000da190 <_ZN5SPS306getNumEPf>:

void *SPS30::getNum(float array[5])
{
   da190:	b538      	push	{r3, r4, r5, lr}
  if (numberHasBeenReported == true) //Trigger a new read
   da192:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
  array[2] = massPM4;
  array[3] = massPM10;
}

void *SPS30::getNum(float array[5])
{
   da196:	4604      	mov	r4, r0
   da198:	460d      	mov	r5, r1
  if (numberHasBeenReported == true) //Trigger a new read
   da19a:	b10b      	cbz	r3, da1a0 <_ZN5SPS306getNumEPf+0x10>
    readMeasurement();               //Pull in new co2, humidity, and temp into global vars
   da19c:	f7ff fed4 	bl	d9f48 <_ZN5SPS3015readMeasurementEv>

  numberHasBeenReported = true;
   da1a0:	2301      	movs	r3, #1
   da1a2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d

  array[0] = numPM05;
   da1a6:	6963      	ldr	r3, [r4, #20]
   da1a8:	602b      	str	r3, [r5, #0]
  array[1] = numPM1;
   da1aa:	69a3      	ldr	r3, [r4, #24]
   da1ac:	606b      	str	r3, [r5, #4]
  array[2] = numPM25;
   da1ae:	69e3      	ldr	r3, [r4, #28]
   da1b0:	60ab      	str	r3, [r5, #8]
  array[3] = numPM4;
   da1b2:	6a23      	ldr	r3, [r4, #32]
   da1b4:	60eb      	str	r3, [r5, #12]
  array[4] = numPM10;
   da1b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   da1b8:	612b      	str	r3, [r5, #16]
}
   da1ba:	bd38      	pop	{r3, r4, r5, pc}

000da1bc <_ZN5SPS3011computeCRC8EPhh>:
//CRC is only calc'd on the data portion (two bytes) of the four bytes being sent
//From: http://www.sunshine2k.de/articles/coding/crc/understanding_crc.html
//Tested with: http://www.sunshine2k.de/coding/javascript/crc/crc_js.html
//x^8+x^5+x^4+1 = 0x31
uint8_t SPS30::computeCRC8(uint8_t data[], uint8_t len)
{
   da1bc:	b510      	push	{r4, lr}
  uint8_t crc = 0xFF; //Init with 0xFF
   da1be:	20ff      	movs	r0, #255	; 0xff
//CRC is only calc'd on the data portion (two bytes) of the four bytes being sent
//From: http://www.sunshine2k.de/articles/coding/crc/understanding_crc.html
//Tested with: http://www.sunshine2k.de/coding/javascript/crc/crc_js.html
//x^8+x^5+x^4+1 = 0x31
uint8_t SPS30::computeCRC8(uint8_t data[], uint8_t len)
{
   da1c0:	460c      	mov	r4, r1
  uint8_t crc = 0xFF; //Init with 0xFF

  for (uint8_t x = 0; x < len; x++)
   da1c2:	1a63      	subs	r3, r4, r1
   da1c4:	b2db      	uxtb	r3, r3
   da1c6:	429a      	cmp	r2, r3
   da1c8:	d911      	bls.n	da1ee <_ZN5SPS3011computeCRC8EPhh+0x32>
  {
    crc ^= data[x]; // XOR-in the next input byte
   da1ca:	f814 3b01 	ldrb.w	r3, [r4], #1
   da1ce:	4058      	eors	r0, r3
   da1d0:	2308      	movs	r3, #8

    for (uint8_t i = 0; i < 8; i++)
    {
      if ((crc & 0x80) != 0)
   da1d2:	f010 0f80 	tst.w	r0, #128	; 0x80
   da1d6:	f103 33ff 	add.w	r3, r3, #4294967295
   da1da:	ea4f 0040 	mov.w	r0, r0, lsl #1
        crc = (uint8_t)((crc << 1) ^ 0x31);
   da1de:	bf18      	it	ne
   da1e0:	f080 0031 	eorne.w	r0, r0, #49	; 0x31

  for (uint8_t x = 0; x < len; x++)
  {
    crc ^= data[x]; // XOR-in the next input byte

    for (uint8_t i = 0; i < 8; i++)
   da1e4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    {
      if ((crc & 0x80) != 0)
        crc = (uint8_t)((crc << 1) ^ 0x31);
      else
        crc <<= 1;
   da1e8:	b2c0      	uxtb	r0, r0

  for (uint8_t x = 0; x < len; x++)
  {
    crc ^= data[x]; // XOR-in the next input byte

    for (uint8_t i = 0; i < 8; i++)
   da1ea:	d1f2      	bne.n	da1d2 <_ZN5SPS3011computeCRC8EPhh+0x16>
   da1ec:	e7e9      	b.n	da1c2 <_ZN5SPS3011computeCRC8EPhh+0x6>
        crc <<= 1;
    }
  }

  return crc; //No output reflection
}
   da1ee:	bd10      	pop	{r4, pc}

000da1f0 <_ZN5SPS3011sendCommandEtt>:
  return (0); //Sensor did not respond
}

//Sends a command along with arguments and CRC
boolean SPS30::sendCommand(uint16_t command, uint16_t arguments)
{
   da1f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   da1f4:	460f      	mov	r7, r1
  uint8_t data[2];
  data[0] = arguments >> 8;
   da1f6:	1216      	asrs	r6, r2, #8
  return (0); //Sensor did not respond
}

//Sends a command along with arguments and CRC
boolean SPS30::sendCommand(uint16_t command, uint16_t arguments)
{
   da1f8:	4615      	mov	r5, r2
  uint8_t data[2];
  data[0] = arguments >> 8;
  data[1] = arguments & 0xFF;
   da1fa:	f88d 2005 	strb.w	r2, [sp, #5]
  uint8_t crc = computeCRC8(data, 2); //Calc CRC on the arguments only, not the command
   da1fe:	a901      	add	r1, sp, #4
   da200:	2202      	movs	r2, #2
  return (0); //Sensor did not respond
}

//Sends a command along with arguments and CRC
boolean SPS30::sendCommand(uint16_t command, uint16_t arguments)
{
   da202:	4604      	mov	r4, r0
  uint8_t data[2];
  data[0] = arguments >> 8;
   da204:	f88d 6004 	strb.w	r6, [sp, #4]
  data[1] = arguments & 0xFF;
  uint8_t crc = computeCRC8(data, 2); //Calc CRC on the arguments only, not the command
   da208:	f7ff ffd8 	bl	da1bc <_ZN5SPS3011computeCRC8EPhh>

  _i2cPort->beginTransmission(SPS30_ADDRESS);
   da20c:	2169      	movs	r1, #105	; 0x69
boolean SPS30::sendCommand(uint16_t command, uint16_t arguments)
{
  uint8_t data[2];
  data[0] = arguments >> 8;
  data[1] = arguments & 0xFF;
  uint8_t crc = computeCRC8(data, 2); //Calc CRC on the arguments only, not the command
   da20e:	4680      	mov	r8, r0

  _i2cPort->beginTransmission(SPS30_ADDRESS);
   da210:	6820      	ldr	r0, [r4, #0]
   da212:	f002 f8fd 	bl	dc410 <_ZN7TwoWire17beginTransmissionEi>
  _i2cPort->write(command >> 8);     //MSB
   da216:	0a39      	lsrs	r1, r7, #8
   da218:	6820      	ldr	r0, [r4, #0]
   da21a:	f7ff f8bf 	bl	d939c <_ZN7TwoWire5writeEi>
  _i2cPort->write(command & 0xFF);   //LSB
   da21e:	b2f9      	uxtb	r1, r7
   da220:	6820      	ldr	r0, [r4, #0]
   da222:	f7ff f8bb 	bl	d939c <_ZN7TwoWire5writeEi>
  _i2cPort->write(arguments >> 8);   //MSB
   da226:	4631      	mov	r1, r6
   da228:	6820      	ldr	r0, [r4, #0]
   da22a:	f7ff f8b7 	bl	d939c <_ZN7TwoWire5writeEi>
  _i2cPort->write(arguments & 0xFF); //LSB
   da22e:	b2e9      	uxtb	r1, r5
   da230:	6820      	ldr	r0, [r4, #0]
   da232:	f7ff f8b3 	bl	d939c <_ZN7TwoWire5writeEi>
  _i2cPort->write(crc);
   da236:	6820      	ldr	r0, [r4, #0]
   da238:	6803      	ldr	r3, [r0, #0]
   da23a:	4641      	mov	r1, r8
   da23c:	689b      	ldr	r3, [r3, #8]
   da23e:	4798      	blx	r3
  if (_i2cPort->endTransmission() != 0)
   da240:	6820      	ldr	r0, [r4, #0]
   da242:	f002 f8ec 	bl	dc41e <_ZN7TwoWire15endTransmissionEv>
    return (false); //Sensor did not ACK

  return (true);
}
   da246:	fab0 f080 	clz	r0, r0
   da24a:	0940      	lsrs	r0, r0, #5
   da24c:	b002      	add	sp, #8
   da24e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000da252 <_ZN5SPS3014beginMeasuringEv>:
//is powered down while continuous measurement mode is active SCD30 will measure
//continuously after repowering without sending the measurement command.
//Returns true if successful
boolean SPS30::beginMeasuring()
{
  return (sendCommand(COMMAND_START_MEASUREMENT, 0x0300));
   da252:	f44f 7240 	mov.w	r2, #768	; 0x300
   da256:	2110      	movs	r1, #16
   da258:	f7ff bfca 	b.w	da1f0 <_ZN5SPS3011sendCommandEtt>

000da25c <_ZN5SPS305beginER7TwoWire>:
  // Constructor
}

//Initialize the Serial port
boolean SPS30::begin(TwoWire &wirePort)
{
   da25c:	b510      	push	{r4, lr}
   da25e:	4604      	mov	r4, r0
  _i2cPort = &wirePort; //Grab which port the user wants us to use
   da260:	6001      	str	r1, [r0, #0]

  //We expect caller to begin their I2C port, with the speed of their choice external to the library
  //But if they forget, we start the hardware here.
  _i2cPort->begin();
   da262:	4608      	mov	r0, r1
   da264:	f002 f8b0 	bl	dc3c8 <_ZN7TwoWire5beginEv>
#if defined(ARDUINO_ARCH_ESP8266)
  _i2cPort->setClockStretchLimit(200000);
#endif

  //Check for device to respond correctly
  if (beginMeasuring() == true) //Start continuous measurements
   da268:	4620      	mov	r0, r4
  {
    return (true);
  }

  return (false); //Something went wrong
}
   da26a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#if defined(ARDUINO_ARCH_ESP8266)
  _i2cPort->setClockStretchLimit(200000);
#endif

  //Check for device to respond correctly
  if (beginMeasuring() == true) //Start continuous measurements
   da26e:	f7ff bff0 	b.w	da252 <_ZN5SPS3014beginMeasuringEv>

000da272 <_GLOBAL__sub_I__ZN5SPS30C2Ev>:
   da272:	f000 b8fb 	b.w	da46c <HAL_Pin_Map>

000da276 <_ZN10BlynkTimerC1Ev>:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }


SimpleTimer::SimpleTimer()
    : numTimers (-1)
   da276:	f04f 33ff 	mov.w	r3, #4294967295
   da27a:	f8c0 3240 	str.w	r3, [r0, #576]	; 0x240
{
}
   da27e:	4770      	bx	lr

000da280 <_ZN10BlynkTimer4initEv>:

void SimpleTimer::init() {
   da280:	b570      	push	{r4, r5, r6, lr}
   da282:	4605      	mov	r5, r0
#include "Blynk/BlynkTimer.h"
#include <string.h>

// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }
   da284:	f000 f8c2 	bl	da40c <_Z11BlynkMillisv>
   da288:	2400      	movs	r4, #0
   da28a:	4606      	mov	r6, r0

void SimpleTimer::init() {
    unsigned long current_millis = elapsed();

    for (int i = 0; i < MAX_TIMERS; i++) {
        memset(&timer[i], 0, sizeof (timer_t));
   da28c:	1928      	adds	r0, r5, r4
   da28e:	2224      	movs	r2, #36	; 0x24
   da290:	2100      	movs	r1, #0
   da292:	f009 f97a 	bl	e358a <memset>
        timer[i].prev_millis = current_millis;
   da296:	512e      	str	r6, [r5, r4]
   da298:	3424      	adds	r4, #36	; 0x24
}

void SimpleTimer::init() {
    unsigned long current_millis = elapsed();

    for (int i = 0; i < MAX_TIMERS; i++) {
   da29a:	f5b4 7f10 	cmp.w	r4, #576	; 0x240
   da29e:	d1f5      	bne.n	da28c <_ZN10BlynkTimer4initEv+0xc>
        memset(&timer[i], 0, sizeof (timer_t));
        timer[i].prev_millis = current_millis;
    }

    numTimers = 0;
   da2a0:	2300      	movs	r3, #0
   da2a2:	f8c5 3240 	str.w	r3, [r5, #576]	; 0x240
   da2a6:	bd70      	pop	{r4, r5, r6, pc}

000da2a8 <_ZN10BlynkTimer17findFirstFreeSlotEv>:

// find the first available slot
// return -1 if none found
int SimpleTimer::findFirstFreeSlot() {
    // all slots are used
    if (numTimers >= MAX_TIMERS) {
   da2a8:	f8d0 3240 	ldr.w	r3, [r0, #576]	; 0x240
   da2ac:	2b0f      	cmp	r3, #15
   da2ae:	dc08      	bgt.n	da2c2 <_ZN10BlynkTimer17findFirstFreeSlotEv+0x1a>
   da2b0:	2300      	movs	r3, #0
        return -1;
    }

    // return the first slot with no callback (i.e. free)
    for (int i = 0; i < MAX_TIMERS; i++) {
        if (timer[i].callback == NULL) {
   da2b2:	2224      	movs	r2, #36	; 0x24
   da2b4:	fb02 0103 	mla	r1, r2, r3, r0
   da2b8:	6849      	ldr	r1, [r1, #4]
   da2ba:	b129      	cbz	r1, da2c8 <_ZN10BlynkTimer17findFirstFreeSlotEv+0x20>
    if (numTimers >= MAX_TIMERS) {
        return -1;
    }

    // return the first slot with no callback (i.e. free)
    for (int i = 0; i < MAX_TIMERS; i++) {
   da2bc:	3301      	adds	r3, #1
   da2be:	2b10      	cmp	r3, #16
   da2c0:	d1f8      	bne.n	da2b4 <_ZN10BlynkTimer17findFirstFreeSlotEv+0xc>
// find the first available slot
// return -1 if none found
int SimpleTimer::findFirstFreeSlot() {
    // all slots are used
    if (numTimers >= MAX_TIMERS) {
        return -1;
   da2c2:	f04f 30ff 	mov.w	r0, #4294967295
   da2c6:	4770      	bx	lr
   da2c8:	4618      	mov	r0, r3
        }
    }

    // no free slots found
    return -1;
}
   da2ca:	4770      	bx	lr

000da2cc <_ZN10BlynkTimer10setupTimerEmPvS0_bj>:


int SimpleTimer::setupTimer(unsigned long d, void* f, void* p, bool h, unsigned n) {
   da2cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   da2d0:	4698      	mov	r8, r3
    int freeTimer;

    if (numTimers < 0) {
   da2d2:	f8d0 3240 	ldr.w	r3, [r0, #576]	; 0x240
   da2d6:	2b00      	cmp	r3, #0
    // no free slots found
    return -1;
}


int SimpleTimer::setupTimer(unsigned long d, void* f, void* p, bool h, unsigned n) {
   da2d8:	4605      	mov	r5, r0
   da2da:	4689      	mov	r9, r1
   da2dc:	4617      	mov	r7, r2
    int freeTimer;

    if (numTimers < 0) {
   da2de:	da01      	bge.n	da2e4 <_ZN10BlynkTimer10setupTimerEmPvS0_bj+0x18>
        init();
   da2e0:	f7ff ffce 	bl	da280 <_ZN10BlynkTimer4initEv>
    }

    freeTimer = findFirstFreeSlot();
   da2e4:	4628      	mov	r0, r5
   da2e6:	f7ff ffdf 	bl	da2a8 <_ZN10BlynkTimer17findFirstFreeSlotEv>
    if (freeTimer < 0) {
   da2ea:	1e04      	subs	r4, r0, #0
   da2ec:	db1a      	blt.n	da324 <_ZN10BlynkTimer10setupTimerEmPvS0_bj+0x58>
        return -1;
    }

    if (f == NULL) {
   da2ee:	b1cf      	cbz	r7, da324 <_ZN10BlynkTimer10setupTimerEmPvS0_bj+0x58>
        return -1;
    }

    timer[freeTimer].delay = d;
   da2f0:	2624      	movs	r6, #36	; 0x24
   da2f2:	4366      	muls	r6, r4
   da2f4:	19ab      	adds	r3, r5, r6
    timer[freeTimer].callback = f;
    timer[freeTimer].param = p;
    timer[freeTimer].hasParam = h;
   da2f6:	f89d 2020 	ldrb.w	r2, [sp, #32]
   da2fa:	731a      	strb	r2, [r3, #12]
    timer[freeTimer].maxNumRuns = n;
   da2fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   da2fe:	615a      	str	r2, [r3, #20]
    timer[freeTimer].enabled = true;
   da300:	2201      	movs	r2, #1

    if (f == NULL) {
        return -1;
    }

    timer[freeTimer].delay = d;
   da302:	f8c3 9010 	str.w	r9, [r3, #16]
    timer[freeTimer].callback = f;
   da306:	605f      	str	r7, [r3, #4]
    timer[freeTimer].param = p;
   da308:	f8c3 8008 	str.w	r8, [r3, #8]
    timer[freeTimer].hasParam = h;
    timer[freeTimer].maxNumRuns = n;
    timer[freeTimer].enabled = true;
   da30c:	771a      	strb	r2, [r3, #28]
#include "Blynk/BlynkTimer.h"
#include <string.h>

// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }
   da30e:	f000 f87d 	bl	da40c <_Z11BlynkMillisv>
    timer[freeTimer].callback = f;
    timer[freeTimer].param = p;
    timer[freeTimer].hasParam = h;
    timer[freeTimer].maxNumRuns = n;
    timer[freeTimer].enabled = true;
    timer[freeTimer].prev_millis = elapsed();
   da312:	51a8      	str	r0, [r5, r6]

    numTimers++;
   da314:	f8d5 3240 	ldr.w	r3, [r5, #576]	; 0x240
   da318:	3301      	adds	r3, #1
   da31a:	f8c5 3240 	str.w	r3, [r5, #576]	; 0x240

    return freeTimer;
   da31e:	4620      	mov	r0, r4
   da320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        init();
    }

    freeTimer = findFirstFreeSlot();
    if (freeTimer < 0) {
        return -1;
   da324:	f04f 30ff 	mov.w	r0, #4294967295
    timer[freeTimer].prev_millis = elapsed();

    numTimers++;

    return freeTimer;
}
   da328:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000da32c <_ZN10BlynkTimer11setIntervalEmPFvvE>:

int SimpleTimer::setTimer(unsigned long d, timer_callback_p f, void* p, unsigned n) {
  return setupTimer(d, (void *)f, p, true, n);
}

int SimpleTimer::setInterval(unsigned long d, timer_callback f) {
   da32c:	b507      	push	{r0, r1, r2, lr}
    return setupTimer(d, (void *)f, NULL, false, RUN_FOREVER);
   da32e:	2300      	movs	r3, #0
   da330:	9301      	str	r3, [sp, #4]
   da332:	9300      	str	r3, [sp, #0]
   da334:	f7ff ffca 	bl	da2cc <_ZN10BlynkTimer10setupTimerEmPvS0_bj>
}
   da338:	b003      	add	sp, #12
   da33a:	f85d fb04 	ldr.w	pc, [sp], #4

000da33e <_ZN10BlynkTimer11deleteTimerEj>:
    // false return for non-used numTimer, no callback
    return false;
}

void SimpleTimer::deleteTimer(unsigned timerId) {
    if (timerId >= MAX_TIMERS) {
   da33e:	290f      	cmp	r1, #15
    }
    // false return for non-used numTimer, no callback
    return false;
}

void SimpleTimer::deleteTimer(unsigned timerId) {
   da340:	b538      	push	{r3, r4, r5, lr}
   da342:	4604      	mov	r4, r0
    if (timerId >= MAX_TIMERS) {
   da344:	d813      	bhi.n	da36e <_ZN10BlynkTimer11deleteTimerEj+0x30>
        return;
    }

    // nothing to delete if no timers are in use
    if (numTimers == 0) {
   da346:	f8d0 3240 	ldr.w	r3, [r0, #576]	; 0x240
   da34a:	b183      	cbz	r3, da36e <_ZN10BlynkTimer11deleteTimerEj+0x30>
   da34c:	2224      	movs	r2, #36	; 0x24
   da34e:	fb02 f501 	mul.w	r5, r2, r1
   da352:	4428      	add	r0, r5
        return;
    }

    // don't decrease the number of timers if the
    // specified slot is already empty
    if (timer[timerId].callback != NULL) {
   da354:	6843      	ldr	r3, [r0, #4]
   da356:	b153      	cbz	r3, da36e <_ZN10BlynkTimer11deleteTimerEj+0x30>
        memset(&timer[timerId], 0, sizeof (timer_t));
   da358:	2100      	movs	r1, #0
   da35a:	f009 f916 	bl	e358a <memset>
#include "Blynk/BlynkTimer.h"
#include <string.h>

// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }
   da35e:	f000 f855 	bl	da40c <_Z11BlynkMillisv>

    // don't decrease the number of timers if the
    // specified slot is already empty
    if (timer[timerId].callback != NULL) {
        memset(&timer[timerId], 0, sizeof (timer_t));
        timer[timerId].prev_millis = elapsed();
   da362:	5160      	str	r0, [r4, r5]

        // update number of timers
        numTimers--;
   da364:	f8d4 3240 	ldr.w	r3, [r4, #576]	; 0x240
   da368:	3b01      	subs	r3, #1
   da36a:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
   da36e:	bd38      	pop	{r3, r4, r5, pc}

000da370 <_ZN10BlynkTimer3runEv>:

    numTimers = 0;
}


void SimpleTimer::run() {
   da370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da374:	4605      	mov	r5, r0
   da376:	f505 7711 	add.w	r7, r5, #580	; 0x244
#include "Blynk/BlynkTimer.h"
#include <string.h>

// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }
   da37a:	f000 f847 	bl	da40c <_Z11BlynkMillisv>
                    if (timer[i].maxNumRuns == RUN_FOREVER) {
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
                    }
                    // other timers get executed the specified number of times
                    else if (timer[i].numRuns < timer[i].maxNumRuns) {
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
   da37e:	2601      	movs	r6, #1
   da380:	1d2b      	adds	r3, r5, #4
    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {

        timer[i].toBeCalled = DEFCALL_DONTRUN;
   da382:	f04f 0e00 	mov.w	lr, #0
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
                        timer[i].numRuns++;

                        // after the last run, delete the timer
                        if (timer[i].numRuns >= timer[i].maxNumRuns) {
                            timer[i].toBeCalled = DEFCALL_RUNANDDEL;
   da386:	f04f 0c02 	mov.w	ip, #2
    for (i = 0; i < MAX_TIMERS; i++) {

        timer[i].toBeCalled = DEFCALL_DONTRUN;

        // no callback == no timer, i.e. jump over empty slots
        if (timer[i].callback != NULL) {
   da38a:	681a      	ldr	r2, [r3, #0]
    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {

        timer[i].toBeCalled = DEFCALL_DONTRUN;
   da38c:	f8c3 e01c 	str.w	lr, [r3, #28]

        // no callback == no timer, i.e. jump over empty slots
        if (timer[i].callback != NULL) {
   da390:	b1e2      	cbz	r2, da3cc <_ZN10BlynkTimer3runEv+0x5c>

            // is it time to process this timer ?
            // see http://arduino.cc/forum/index.php/topic,124048.msg932592.html#msg932592

            if ((current_millis - timer[i].prev_millis) >= timer[i].delay) {
   da392:	f853 8c04 	ldr.w	r8, [r3, #-4]
   da396:	68dc      	ldr	r4, [r3, #12]
   da398:	ebc8 0200 	rsb	r2, r8, r0
   da39c:	42a2      	cmp	r2, r4
   da39e:	d315      	bcc.n	da3cc <_ZN10BlynkTimer3runEv+0x5c>

                unsigned long skipTimes = (current_millis - timer[i].prev_millis) / timer[i].delay;
                // update time
                timer[i].prev_millis += timer[i].delay * skipTimes;
   da3a0:	fbb2 f1f4 	udiv	r1, r2, r4
   da3a4:	fb04 8201 	mla	r2, r4, r1, r8
   da3a8:	f843 2c04 	str.w	r2, [r3, #-4]

                // check if the timer callback has to be executed
                if (timer[i].enabled) {
   da3ac:	7e1a      	ldrb	r2, [r3, #24]
   da3ae:	b16a      	cbz	r2, da3cc <_ZN10BlynkTimer3runEv+0x5c>

                    // "run forever" timers must always be executed
                    if (timer[i].maxNumRuns == RUN_FOREVER) {
   da3b0:	6919      	ldr	r1, [r3, #16]
   da3b2:	b909      	cbnz	r1, da3b8 <_ZN10BlynkTimer3runEv+0x48>
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
   da3b4:	61de      	str	r6, [r3, #28]
   da3b6:	e009      	b.n	da3cc <_ZN10BlynkTimer3runEv+0x5c>
                    }
                    // other timers get executed the specified number of times
                    else if (timer[i].numRuns < timer[i].maxNumRuns) {
   da3b8:	695a      	ldr	r2, [r3, #20]
   da3ba:	4291      	cmp	r1, r2
   da3bc:	d906      	bls.n	da3cc <_ZN10BlynkTimer3runEv+0x5c>
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
                        timer[i].numRuns++;
   da3be:	3201      	adds	r2, #1

                        // after the last run, delete the timer
                        if (timer[i].numRuns >= timer[i].maxNumRuns) {
   da3c0:	4291      	cmp	r1, r2
                    if (timer[i].maxNumRuns == RUN_FOREVER) {
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
                    }
                    // other timers get executed the specified number of times
                    else if (timer[i].numRuns < timer[i].maxNumRuns) {
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
   da3c2:	61de      	str	r6, [r3, #28]
                        timer[i].numRuns++;
   da3c4:	615a      	str	r2, [r3, #20]

                        // after the last run, delete the timer
                        if (timer[i].numRuns >= timer[i].maxNumRuns) {
                            timer[i].toBeCalled = DEFCALL_RUNANDDEL;
   da3c6:	bf98      	it	ls
   da3c8:	f8c3 c01c 	strls.w	ip, [r3, #28]
   da3cc:	3324      	adds	r3, #36	; 0x24
    unsigned long current_millis;

    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {
   da3ce:	42bb      	cmp	r3, r7
   da3d0:	d1db      	bne.n	da38a <_ZN10BlynkTimer3runEv+0x1a>
   da3d2:	462c      	mov	r4, r5
   da3d4:	2600      	movs	r6, #0
            }
        }
    }

    for (i = 0; i < MAX_TIMERS; i++) {
        if (timer[i].toBeCalled == DEFCALL_DONTRUN)
   da3d6:	6a23      	ldr	r3, [r4, #32]
   da3d8:	b16b      	cbz	r3, da3f6 <_ZN10BlynkTimer3runEv+0x86>
            continue;

        if (timer[i].hasParam)
   da3da:	7b22      	ldrb	r2, [r4, #12]
   da3dc:	6863      	ldr	r3, [r4, #4]
   da3de:	b112      	cbz	r2, da3e6 <_ZN10BlynkTimer3runEv+0x76>
            (*(timer_callback_p)timer[i].callback)(timer[i].param);
   da3e0:	68a0      	ldr	r0, [r4, #8]
   da3e2:	4798      	blx	r3
   da3e4:	e000      	b.n	da3e8 <_ZN10BlynkTimer3runEv+0x78>
        else
            (*(timer_callback)timer[i].callback)();
   da3e6:	4798      	blx	r3

        if (timer[i].toBeCalled == DEFCALL_RUNANDDEL)
   da3e8:	6a23      	ldr	r3, [r4, #32]
   da3ea:	2b02      	cmp	r3, #2
   da3ec:	d103      	bne.n	da3f6 <_ZN10BlynkTimer3runEv+0x86>
            deleteTimer(i);
   da3ee:	4631      	mov	r1, r6
   da3f0:	4628      	mov	r0, r5
   da3f2:	f7ff ffa4 	bl	da33e <_ZN10BlynkTimer11deleteTimerEj>
                }
            }
        }
    }

    for (i = 0; i < MAX_TIMERS; i++) {
   da3f6:	3601      	adds	r6, #1
   da3f8:	2e10      	cmp	r6, #16
   da3fa:	f104 0424 	add.w	r4, r4, #36	; 0x24
   da3fe:	d1ea      	bne.n	da3d6 <_ZN10BlynkTimer3runEv+0x66>
            (*(timer_callback)timer[i].callback)();

        if (timer[i].toBeCalled == DEFCALL_RUNANDDEL)
            deleteTimer(i);
    }
}
   da400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000da404 <_GLOBAL__sub_I__ZN10BlynkTimerC2Ev>:
   da404:	f000 b832 	b.w	da46c <HAL_Pin_Map>

000da408 <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   da408:	f001 b9f6 	b.w	db7f8 <delay>

000da40c <_Z11BlynkMillisv>:
   da40c:	f000 b8ae 	b.w	da56c <HAL_Timer_Get_Milli_Seconds>

000da410 <_Z12BlynkFreeRamv>:

#ifdef _BLYNK_USE_DEFAULT_FREE_RAM
    size_t BlynkFreeRam()
    {
        return 0;
    }
   da410:	2000      	movs	r0, #0
   da412:	4770      	bx	lr

000da414 <_GLOBAL__sub_I__Z10BlynkResetv>:
   da414:	f000 b82a 	b.w	da46c <HAL_Pin_Map>

000da418 <BlynkWidgetRead>:

void BlynkNoOpCbk()
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
   da418:	4770      	bx	lr

000da41a <BlynkWidgetWrite>:
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
   da41a:	4770      	bx	lr

000da41c <BlynkNoOpCbk>:
#include <Blynk/BlynkConfig.h>
#include <Blynk/BlynkHandlers.h>
#include <Blynk/BlynkDebug.h>

void BlynkNoOpCbk()
{}
   da41c:	4770      	bx	lr
	...

000da420 <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   da420:	287f      	cmp	r0, #127	; 0x7f
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   da422:	bf9a      	itte	ls
   da424:	4b02      	ldrls	r3, [pc, #8]	; (da430 <GetReadHandler+0x10>)
   da426:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
        return NULL;
   da42a:	2000      	movhi	r0, #0
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
#endif
}
   da42c:	4770      	bx	lr
   da42e:	bf00      	nop
   da430:	000e7adc 	.word	0x000e7adc

000da434 <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   da434:	287f      	cmp	r0, #127	; 0x7f
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   da436:	bf9a      	itte	ls
   da438:	4b02      	ldrls	r3, [pc, #8]	; (da444 <GetWriteHandler+0x10>)
   da43a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
}

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
        return NULL;
   da43e:	2000      	movhi	r0, #0
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
#endif
}
   da440:	4770      	bx	lr
   da442:	bf00      	nop
   da444:	000e78dc 	.word	0x000e78dc

000da448 <_GLOBAL__sub_I_BlynkNoOpCbk>:
   da448:	f000 b810 	b.w	da46c <HAL_Pin_Map>

000da44c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   da44c:	b508      	push	{r3, lr}
   da44e:	4b02      	ldr	r3, [pc, #8]	; (da458 <netdb_freeaddrinfo+0xc>)
   da450:	681b      	ldr	r3, [r3, #0]
   da452:	689b      	ldr	r3, [r3, #8]
   da454:	9301      	str	r3, [sp, #4]
   da456:	bd08      	pop	{r3, pc}
   da458:	00030268 	.word	0x00030268

000da45c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   da45c:	b508      	push	{r3, lr}
   da45e:	4b02      	ldr	r3, [pc, #8]	; (da468 <netdb_getaddrinfo+0xc>)
   da460:	681b      	ldr	r3, [r3, #0]
   da462:	68db      	ldr	r3, [r3, #12]
   da464:	9301      	str	r3, [sp, #4]
   da466:	bd08      	pop	{r3, pc}
   da468:	00030268 	.word	0x00030268

000da46c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   da46c:	b508      	push	{r3, lr}
   da46e:	4b02      	ldr	r3, [pc, #8]	; (da478 <HAL_Pin_Map+0xc>)
   da470:	681b      	ldr	r3, [r3, #0]
   da472:	681b      	ldr	r3, [r3, #0]
   da474:	9301      	str	r3, [sp, #4]
   da476:	bd08      	pop	{r3, pc}
   da478:	0003022c 	.word	0x0003022c

000da47c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   da47c:	b508      	push	{r3, lr}
   da47e:	4b02      	ldr	r3, [pc, #8]	; (da488 <HAL_Validate_Pin_Function+0xc>)
   da480:	681b      	ldr	r3, [r3, #0]
   da482:	685b      	ldr	r3, [r3, #4]
   da484:	9301      	str	r3, [sp, #4]
   da486:	bd08      	pop	{r3, pc}
   da488:	0003022c 	.word	0x0003022c

000da48c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   da48c:	b508      	push	{r3, lr}
   da48e:	4b02      	ldr	r3, [pc, #8]	; (da498 <HAL_Pin_Mode+0xc>)
   da490:	681b      	ldr	r3, [r3, #0]
   da492:	689b      	ldr	r3, [r3, #8]
   da494:	9301      	str	r3, [sp, #4]
   da496:	bd08      	pop	{r3, pc}
   da498:	0003022c 	.word	0x0003022c

000da49c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   da49c:	b508      	push	{r3, lr}
   da49e:	4b02      	ldr	r3, [pc, #8]	; (da4a8 <HAL_Get_Pin_Mode+0xc>)
   da4a0:	681b      	ldr	r3, [r3, #0]
   da4a2:	68db      	ldr	r3, [r3, #12]
   da4a4:	9301      	str	r3, [sp, #4]
   da4a6:	bd08      	pop	{r3, pc}
   da4a8:	0003022c 	.word	0x0003022c

000da4ac <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   da4ac:	b508      	push	{r3, lr}
   da4ae:	4b02      	ldr	r3, [pc, #8]	; (da4b8 <HAL_GPIO_Write+0xc>)
   da4b0:	681b      	ldr	r3, [r3, #0]
   da4b2:	691b      	ldr	r3, [r3, #16]
   da4b4:	9301      	str	r3, [sp, #4]
   da4b6:	bd08      	pop	{r3, pc}
   da4b8:	0003022c 	.word	0x0003022c

000da4bc <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   da4bc:	b508      	push	{r3, lr}
   da4be:	4b02      	ldr	r3, [pc, #8]	; (da4c8 <HAL_GPIO_Read+0xc>)
   da4c0:	681b      	ldr	r3, [r3, #0]
   da4c2:	695b      	ldr	r3, [r3, #20]
   da4c4:	9301      	str	r3, [sp, #4]
   da4c6:	bd08      	pop	{r3, pc}
   da4c8:	0003022c 	.word	0x0003022c

000da4cc <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   da4cc:	b508      	push	{r3, lr}
   da4ce:	4b02      	ldr	r3, [pc, #8]	; (da4d8 <HAL_Interrupts_Attach+0xc>)
   da4d0:	681b      	ldr	r3, [r3, #0]
   da4d2:	699b      	ldr	r3, [r3, #24]
   da4d4:	9301      	str	r3, [sp, #4]
   da4d6:	bd08      	pop	{r3, pc}
   da4d8:	0003022c 	.word	0x0003022c

000da4dc <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   da4dc:	b508      	push	{r3, lr}
   da4de:	4b02      	ldr	r3, [pc, #8]	; (da4e8 <HAL_Interrupts_Detach+0xc>)
   da4e0:	681b      	ldr	r3, [r3, #0]
   da4e2:	69db      	ldr	r3, [r3, #28]
   da4e4:	9301      	str	r3, [sp, #4]
   da4e6:	bd08      	pop	{r3, pc}
   da4e8:	0003022c 	.word	0x0003022c

000da4ec <HAL_DAC_Write>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   da4ec:	b508      	push	{r3, lr}
   da4ee:	4b02      	ldr	r3, [pc, #8]	; (da4f8 <HAL_DAC_Write+0xc>)
   da4f0:	681b      	ldr	r3, [r3, #0]
   da4f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   da4f4:	9301      	str	r3, [sp, #4]
   da4f6:	bd08      	pop	{r3, pc}
   da4f8:	0003022c 	.word	0x0003022c

000da4fc <HAL_ADC_Read>:
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   da4fc:	b508      	push	{r3, lr}
   da4fe:	4b02      	ldr	r3, [pc, #8]	; (da508 <HAL_ADC_Read+0xc>)
   da500:	681b      	ldr	r3, [r3, #0]
   da502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   da504:	9301      	str	r3, [sp, #4]
   da506:	bd08      	pop	{r3, pc}
   da508:	0003022c 	.word	0x0003022c

000da50c <HAL_PWM_Write_Ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, HAL_PWM_Get_Resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, HAL_PWM_Set_Resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, HAL_PWM_Write_Ext, void(uint16_t, uint32_t))
   da50c:	b508      	push	{r3, lr}
   da50e:	4b02      	ldr	r3, [pc, #8]	; (da518 <HAL_PWM_Write_Ext+0xc>)
   da510:	681b      	ldr	r3, [r3, #0]
   da512:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   da514:	9301      	str	r3, [sp, #4]
   da516:	bd08      	pop	{r3, pc}
   da518:	0003022c 	.word	0x0003022c

000da51c <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   da51c:	b508      	push	{r3, lr}
   da51e:	4b02      	ldr	r3, [pc, #8]	; (da528 <HAL_SPI_Send_Receive_Data+0xc>)
   da520:	681b      	ldr	r3, [r3, #0]
   da522:	695b      	ldr	r3, [r3, #20]
   da524:	9301      	str	r3, [sp, #4]
   da526:	bd08      	pop	{r3, pc}
   da528:	00030230 	.word	0x00030230

000da52c <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   da52c:	b508      	push	{r3, lr}
   da52e:	4b02      	ldr	r3, [pc, #8]	; (da538 <HAL_SPI_Init+0xc>)
   da530:	681b      	ldr	r3, [r3, #0]
   da532:	69db      	ldr	r3, [r3, #28]
   da534:	9301      	str	r3, [sp, #4]
   da536:	bd08      	pop	{r3, pc}
   da538:	00030230 	.word	0x00030230

000da53c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   da53c:	b508      	push	{r3, lr}
   da53e:	4b02      	ldr	r3, [pc, #8]	; (da548 <HAL_SPI_Is_Enabled+0xc>)
   da540:	681b      	ldr	r3, [r3, #0]
   da542:	6a1b      	ldr	r3, [r3, #32]
   da544:	9301      	str	r3, [sp, #4]
   da546:	bd08      	pop	{r3, pc}
   da548:	00030230 	.word	0x00030230

000da54c <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   da54c:	b508      	push	{r3, lr}
   da54e:	4b02      	ldr	r3, [pc, #8]	; (da558 <if_index_to_name+0xc>)
   da550:	681b      	ldr	r3, [r3, #0]
   da552:	695b      	ldr	r3, [r3, #20]
   da554:	9301      	str	r3, [sp, #4]
   da556:	bd08      	pop	{r3, pc}
   da558:	0003026c 	.word	0x0003026c

000da55c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   da55c:	b508      	push	{r3, lr}
   da55e:	4b02      	ldr	r3, [pc, #8]	; (da568 <HAL_RNG_GetRandomNumber+0xc>)
   da560:	681b      	ldr	r3, [r3, #0]
   da562:	685b      	ldr	r3, [r3, #4]
   da564:	9301      	str	r3, [sp, #4]
   da566:	bd08      	pop	{r3, pc}
   da568:	00030218 	.word	0x00030218

000da56c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   da56c:	b508      	push	{r3, lr}
   da56e:	4b02      	ldr	r3, [pc, #8]	; (da578 <HAL_Timer_Get_Milli_Seconds+0xc>)
   da570:	681b      	ldr	r3, [r3, #0]
   da572:	695b      	ldr	r3, [r3, #20]
   da574:	9301      	str	r3, [sp, #4]
   da576:	bd08      	pop	{r3, pc}
   da578:	00030218 	.word	0x00030218

000da57c <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   da57c:	b508      	push	{r3, lr}
   da57e:	4b02      	ldr	r3, [pc, #8]	; (da588 <HAL_RTC_Get_UnixTime+0xc>)
   da580:	681b      	ldr	r3, [r3, #0]
   da582:	69db      	ldr	r3, [r3, #28]
   da584:	9301      	str	r3, [sp, #4]
   da586:	bd08      	pop	{r3, pc}
   da588:	00030218 	.word	0x00030218

000da58c <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   da58c:	b508      	push	{r3, lr}
   da58e:	4b02      	ldr	r3, [pc, #8]	; (da598 <HAL_RTC_Time_Is_Valid+0xc>)
   da590:	681b      	ldr	r3, [r3, #0]
   da592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   da594:	9301      	str	r3, [sp, #4]
   da596:	bd08      	pop	{r3, pc}
   da598:	00030218 	.word	0x00030218

000da59c <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   da59c:	b508      	push	{r3, lr}
   da59e:	4b02      	ldr	r3, [pc, #8]	; (da5a8 <hal_timer_millis+0xc>)
   da5a0:	681b      	ldr	r3, [r3, #0]
   da5a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   da5a4:	9301      	str	r3, [sp, #4]
   da5a6:	bd08      	pop	{r3, pc}
   da5a8:	00030218 	.word	0x00030218

000da5ac <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   da5ac:	b508      	push	{r3, lr}
   da5ae:	4b02      	ldr	r3, [pc, #8]	; (da5b8 <HAL_Core_System_Reset_Ex+0xc>)
   da5b0:	681b      	ldr	r3, [r3, #0]
   da5b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   da5b4:	9301      	str	r3, [sp, #4]
   da5b6:	bd08      	pop	{r3, pc}
   da5b8:	00030234 	.word	0x00030234

000da5bc <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   da5bc:	b508      	push	{r3, lr}
   da5be:	4b02      	ldr	r3, [pc, #8]	; (da5c8 <HAL_Core_Get_Last_Reset_Info+0xc>)
   da5c0:	681b      	ldr	r3, [r3, #0]
   da5c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   da5c4:	9301      	str	r3, [sp, #4]
   da5c6:	bd08      	pop	{r3, pc}
   da5c8:	00030234 	.word	0x00030234

000da5cc <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   da5cc:	b508      	push	{r3, lr}
   da5ce:	4b02      	ldr	r3, [pc, #8]	; (da5d8 <os_thread_is_current+0xc>)
   da5d0:	681b      	ldr	r3, [r3, #0]
   da5d2:	689b      	ldr	r3, [r3, #8]
   da5d4:	9301      	str	r3, [sp, #4]
   da5d6:	bd08      	pop	{r3, pc}
   da5d8:	00030248 	.word	0x00030248

000da5dc <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   da5dc:	b508      	push	{r3, lr}
   da5de:	4b02      	ldr	r3, [pc, #8]	; (da5e8 <os_thread_join+0xc>)
   da5e0:	681b      	ldr	r3, [r3, #0]
   da5e2:	691b      	ldr	r3, [r3, #16]
   da5e4:	9301      	str	r3, [sp, #4]
   da5e6:	bd08      	pop	{r3, pc}
   da5e8:	00030248 	.word	0x00030248

000da5ec <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   da5ec:	b508      	push	{r3, lr}
   da5ee:	4b02      	ldr	r3, [pc, #8]	; (da5f8 <os_thread_cleanup+0xc>)
   da5f0:	681b      	ldr	r3, [r3, #0]
   da5f2:	695b      	ldr	r3, [r3, #20]
   da5f4:	9301      	str	r3, [sp, #4]
   da5f6:	bd08      	pop	{r3, pc}
   da5f8:	00030248 	.word	0x00030248

000da5fc <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   da5fc:	b508      	push	{r3, lr}
   da5fe:	4b02      	ldr	r3, [pc, #8]	; (da608 <os_mutex_create+0xc>)
   da600:	681b      	ldr	r3, [r3, #0]
   da602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   da604:	9301      	str	r3, [sp, #4]
   da606:	bd08      	pop	{r3, pc}
   da608:	00030248 	.word	0x00030248

000da60c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   da60c:	b508      	push	{r3, lr}
   da60e:	4b02      	ldr	r3, [pc, #8]	; (da618 <os_mutex_recursive_create+0xc>)
   da610:	681b      	ldr	r3, [r3, #0]
   da612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   da614:	9301      	str	r3, [sp, #4]
   da616:	bd08      	pop	{r3, pc}
   da618:	00030248 	.word	0x00030248

000da61c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   da61c:	b508      	push	{r3, lr}
   da61e:	4b02      	ldr	r3, [pc, #8]	; (da628 <inet_inet_ntop+0xc>)
   da620:	681b      	ldr	r3, [r3, #0]
   da622:	695b      	ldr	r3, [r3, #20]
   da624:	9301      	str	r3, [sp, #4]
   da626:	bd08      	pop	{r3, pc}
   da628:	00030264 	.word	0x00030264

000da62c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   da62c:	b508      	push	{r3, lr}
   da62e:	4b02      	ldr	r3, [pc, #8]	; (da638 <inet_htonl+0xc>)
   da630:	681b      	ldr	r3, [r3, #0]
   da632:	6a1b      	ldr	r3, [r3, #32]
   da634:	9301      	str	r3, [sp, #4]
   da636:	bd08      	pop	{r3, pc}
   da638:	00030264 	.word	0x00030264

000da63c <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   da63c:	b508      	push	{r3, lr}
   da63e:	4b02      	ldr	r3, [pc, #8]	; (da648 <inet_htons+0xc>)
   da640:	681b      	ldr	r3, [r3, #0]
   da642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   da644:	9301      	str	r3, [sp, #4]
   da646:	bd08      	pop	{r3, pc}
   da648:	00030264 	.word	0x00030264

000da64c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   da64c:	b508      	push	{r3, lr}
   da64e:	4b02      	ldr	r3, [pc, #8]	; (da658 <HAL_USART_Init+0xc>)
   da650:	681b      	ldr	r3, [r3, #0]
   da652:	681b      	ldr	r3, [r3, #0]
   da654:	9301      	str	r3, [sp, #4]
   da656:	bd08      	pop	{r3, pc}
   da658:	0003023c 	.word	0x0003023c

000da65c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   da65c:	b508      	push	{r3, lr}
   da65e:	4b02      	ldr	r3, [pc, #8]	; (da668 <HAL_USART_Write_Data+0xc>)
   da660:	681b      	ldr	r3, [r3, #0]
   da662:	68db      	ldr	r3, [r3, #12]
   da664:	9301      	str	r3, [sp, #4]
   da666:	bd08      	pop	{r3, pc}
   da668:	0003023c 	.word	0x0003023c

000da66c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   da66c:	b508      	push	{r3, lr}
   da66e:	4b02      	ldr	r3, [pc, #8]	; (da678 <HAL_USART_Available_Data+0xc>)
   da670:	681b      	ldr	r3, [r3, #0]
   da672:	691b      	ldr	r3, [r3, #16]
   da674:	9301      	str	r3, [sp, #4]
   da676:	bd08      	pop	{r3, pc}
   da678:	0003023c 	.word	0x0003023c

000da67c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   da67c:	b508      	push	{r3, lr}
   da67e:	4b02      	ldr	r3, [pc, #8]	; (da688 <HAL_USART_Read_Data+0xc>)
   da680:	681b      	ldr	r3, [r3, #0]
   da682:	695b      	ldr	r3, [r3, #20]
   da684:	9301      	str	r3, [sp, #4]
   da686:	bd08      	pop	{r3, pc}
   da688:	0003023c 	.word	0x0003023c

000da68c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   da68c:	b508      	push	{r3, lr}
   da68e:	4b02      	ldr	r3, [pc, #8]	; (da698 <HAL_USART_Peek_Data+0xc>)
   da690:	681b      	ldr	r3, [r3, #0]
   da692:	699b      	ldr	r3, [r3, #24]
   da694:	9301      	str	r3, [sp, #4]
   da696:	bd08      	pop	{r3, pc}
   da698:	0003023c 	.word	0x0003023c

000da69c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   da69c:	b508      	push	{r3, lr}
   da69e:	4b02      	ldr	r3, [pc, #8]	; (da6a8 <HAL_USART_Flush_Data+0xc>)
   da6a0:	681b      	ldr	r3, [r3, #0]
   da6a2:	69db      	ldr	r3, [r3, #28]
   da6a4:	9301      	str	r3, [sp, #4]
   da6a6:	bd08      	pop	{r3, pc}
   da6a8:	0003023c 	.word	0x0003023c

000da6ac <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   da6ac:	b508      	push	{r3, lr}
   da6ae:	4b02      	ldr	r3, [pc, #8]	; (da6b8 <HAL_USART_Is_Enabled+0xc>)
   da6b0:	681b      	ldr	r3, [r3, #0]
   da6b2:	6a1b      	ldr	r3, [r3, #32]
   da6b4:	9301      	str	r3, [sp, #4]
   da6b6:	bd08      	pop	{r3, pc}
   da6b8:	0003023c 	.word	0x0003023c

000da6bc <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   da6bc:	b508      	push	{r3, lr}
   da6be:	4b02      	ldr	r3, [pc, #8]	; (da6c8 <HAL_USART_Available_Data_For_Write+0xc>)
   da6c0:	681b      	ldr	r3, [r3, #0]
   da6c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   da6c4:	9301      	str	r3, [sp, #4]
   da6c6:	bd08      	pop	{r3, pc}
   da6c8:	0003023c 	.word	0x0003023c

000da6cc <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   da6cc:	b508      	push	{r3, lr}
   da6ce:	4b02      	ldr	r3, [pc, #8]	; (da6d8 <HAL_USART_BeginConfig+0xc>)
   da6d0:	681b      	ldr	r3, [r3, #0]
   da6d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   da6d4:	9301      	str	r3, [sp, #4]
   da6d6:	bd08      	pop	{r3, pc}
   da6d8:	0003023c 	.word	0x0003023c

000da6dc <HAL_I2C_Set_Speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
   da6dc:	b508      	push	{r3, lr}
   da6de:	4b02      	ldr	r3, [pc, #8]	; (da6e8 <HAL_I2C_Set_Speed+0xc>)
   da6e0:	681b      	ldr	r3, [r3, #0]
   da6e2:	681b      	ldr	r3, [r3, #0]
   da6e4:	9301      	str	r3, [sp, #4]
   da6e6:	bd08      	pop	{r3, pc}
   da6e8:	00030228 	.word	0x00030228

000da6ec <HAL_I2C_Begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   da6ec:	b508      	push	{r3, lr}
   da6ee:	4b02      	ldr	r3, [pc, #8]	; (da6f8 <HAL_I2C_Begin+0xc>)
   da6f0:	681b      	ldr	r3, [r3, #0]
   da6f2:	68db      	ldr	r3, [r3, #12]
   da6f4:	9301      	str	r3, [sp, #4]
   da6f6:	bd08      	pop	{r3, pc}
   da6f8:	00030228 	.word	0x00030228

000da6fc <HAL_I2C_End>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
   da6fc:	b508      	push	{r3, lr}
   da6fe:	4b02      	ldr	r3, [pc, #8]	; (da708 <HAL_I2C_End+0xc>)
   da700:	681b      	ldr	r3, [r3, #0]
   da702:	691b      	ldr	r3, [r3, #16]
   da704:	9301      	str	r3, [sp, #4]
   da706:	bd08      	pop	{r3, pc}
   da708:	00030228 	.word	0x00030228

000da70c <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   da70c:	b508      	push	{r3, lr}
   da70e:	4b02      	ldr	r3, [pc, #8]	; (da718 <HAL_I2C_Request_Data+0xc>)
   da710:	681b      	ldr	r3, [r3, #0]
   da712:	695b      	ldr	r3, [r3, #20]
   da714:	9301      	str	r3, [sp, #4]
   da716:	bd08      	pop	{r3, pc}
   da718:	00030228 	.word	0x00030228

000da71c <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   da71c:	b508      	push	{r3, lr}
   da71e:	4b02      	ldr	r3, [pc, #8]	; (da728 <HAL_I2C_Begin_Transmission+0xc>)
   da720:	681b      	ldr	r3, [r3, #0]
   da722:	699b      	ldr	r3, [r3, #24]
   da724:	9301      	str	r3, [sp, #4]
   da726:	bd08      	pop	{r3, pc}
   da728:	00030228 	.word	0x00030228

000da72c <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   da72c:	b508      	push	{r3, lr}
   da72e:	4b02      	ldr	r3, [pc, #8]	; (da738 <HAL_I2C_End_Transmission+0xc>)
   da730:	681b      	ldr	r3, [r3, #0]
   da732:	69db      	ldr	r3, [r3, #28]
   da734:	9301      	str	r3, [sp, #4]
   da736:	bd08      	pop	{r3, pc}
   da738:	00030228 	.word	0x00030228

000da73c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   da73c:	b508      	push	{r3, lr}
   da73e:	4b02      	ldr	r3, [pc, #8]	; (da748 <HAL_I2C_Write_Data+0xc>)
   da740:	681b      	ldr	r3, [r3, #0]
   da742:	6a1b      	ldr	r3, [r3, #32]
   da744:	9301      	str	r3, [sp, #4]
   da746:	bd08      	pop	{r3, pc}
   da748:	00030228 	.word	0x00030228

000da74c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   da74c:	b508      	push	{r3, lr}
   da74e:	4b02      	ldr	r3, [pc, #8]	; (da758 <HAL_I2C_Available_Data+0xc>)
   da750:	681b      	ldr	r3, [r3, #0]
   da752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   da754:	9301      	str	r3, [sp, #4]
   da756:	bd08      	pop	{r3, pc}
   da758:	00030228 	.word	0x00030228

000da75c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   da75c:	b508      	push	{r3, lr}
   da75e:	4b02      	ldr	r3, [pc, #8]	; (da768 <HAL_I2C_Read_Data+0xc>)
   da760:	681b      	ldr	r3, [r3, #0]
   da762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   da764:	9301      	str	r3, [sp, #4]
   da766:	bd08      	pop	{r3, pc}
   da768:	00030228 	.word	0x00030228

000da76c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   da76c:	b508      	push	{r3, lr}
   da76e:	4b02      	ldr	r3, [pc, #8]	; (da778 <HAL_I2C_Peek_Data+0xc>)
   da770:	681b      	ldr	r3, [r3, #0]
   da772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   da774:	9301      	str	r3, [sp, #4]
   da776:	bd08      	pop	{r3, pc}
   da778:	00030228 	.word	0x00030228

000da77c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   da77c:	b508      	push	{r3, lr}
   da77e:	4b02      	ldr	r3, [pc, #8]	; (da788 <HAL_I2C_Flush_Data+0xc>)
   da780:	681b      	ldr	r3, [r3, #0]
   da782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   da784:	9301      	str	r3, [sp, #4]
   da786:	bd08      	pop	{r3, pc}
   da788:	00030228 	.word	0x00030228

000da78c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   da78c:	b508      	push	{r3, lr}
   da78e:	4b02      	ldr	r3, [pc, #8]	; (da798 <HAL_I2C_Is_Enabled+0xc>)
   da790:	681b      	ldr	r3, [r3, #0]
   da792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   da794:	9301      	str	r3, [sp, #4]
   da796:	bd08      	pop	{r3, pc}
   da798:	00030228 	.word	0x00030228

000da79c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   da79c:	b508      	push	{r3, lr}
   da79e:	4b02      	ldr	r3, [pc, #8]	; (da7a8 <HAL_I2C_Init+0xc>)
   da7a0:	681b      	ldr	r3, [r3, #0]
   da7a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   da7a4:	9301      	str	r3, [sp, #4]
   da7a6:	bd08      	pop	{r3, pc}
   da7a8:	00030228 	.word	0x00030228

000da7ac <HAL_I2C_Reset>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
   da7ac:	b508      	push	{r3, lr}
   da7ae:	4b02      	ldr	r3, [pc, #8]	; (da7b8 <HAL_I2C_Reset+0xc>)
   da7b0:	681b      	ldr	r3, [r3, #0]
   da7b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   da7b4:	9301      	str	r3, [sp, #4]
   da7b6:	bd08      	pop	{r3, pc}
   da7b8:	00030228 	.word	0x00030228

000da7bc <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   da7bc:	b508      	push	{r3, lr}
   da7be:	4b02      	ldr	r3, [pc, #8]	; (da7c8 <HAL_I2C_Acquire+0xc>)
   da7c0:	681b      	ldr	r3, [r3, #0]
   da7c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   da7c4:	9301      	str	r3, [sp, #4]
   da7c6:	bd08      	pop	{r3, pc}
   da7c8:	00030228 	.word	0x00030228

000da7cc <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   da7cc:	b508      	push	{r3, lr}
   da7ce:	4b02      	ldr	r3, [pc, #8]	; (da7d8 <HAL_I2C_Release+0xc>)
   da7d0:	681b      	ldr	r3, [r3, #0]
   da7d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   da7d4:	9301      	str	r3, [sp, #4]
   da7d6:	bd08      	pop	{r3, pc}
   da7d8:	00030228 	.word	0x00030228

000da7dc <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   da7dc:	b508      	push	{r3, lr}
   da7de:	4b02      	ldr	r3, [pc, #8]	; (da7e8 <sock_setsockopt+0xc>)
   da7e0:	681b      	ldr	r3, [r3, #0]
   da7e2:	699b      	ldr	r3, [r3, #24]
   da7e4:	9301      	str	r3, [sp, #4]
   da7e6:	bd08      	pop	{r3, pc}
   da7e8:	00030238 	.word	0x00030238

000da7ec <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   da7ec:	b508      	push	{r3, lr}
   da7ee:	4b02      	ldr	r3, [pc, #8]	; (da7f8 <sock_close+0xc>)
   da7f0:	681b      	ldr	r3, [r3, #0]
   da7f2:	69db      	ldr	r3, [r3, #28]
   da7f4:	9301      	str	r3, [sp, #4]
   da7f6:	bd08      	pop	{r3, pc}
   da7f8:	00030238 	.word	0x00030238

000da7fc <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   da7fc:	b508      	push	{r3, lr}
   da7fe:	4b02      	ldr	r3, [pc, #8]	; (da808 <sock_connect+0xc>)
   da800:	681b      	ldr	r3, [r3, #0]
   da802:	6a1b      	ldr	r3, [r3, #32]
   da804:	9301      	str	r3, [sp, #4]
   da806:	bd08      	pop	{r3, pc}
   da808:	00030238 	.word	0x00030238

000da80c <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   da80c:	b508      	push	{r3, lr}
   da80e:	4b02      	ldr	r3, [pc, #8]	; (da818 <sock_recv+0xc>)
   da810:	681b      	ldr	r3, [r3, #0]
   da812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   da814:	9301      	str	r3, [sp, #4]
   da816:	bd08      	pop	{r3, pc}
   da818:	00030238 	.word	0x00030238

000da81c <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   da81c:	b508      	push	{r3, lr}
   da81e:	4b02      	ldr	r3, [pc, #8]	; (da828 <sock_send+0xc>)
   da820:	681b      	ldr	r3, [r3, #0]
   da822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   da824:	9301      	str	r3, [sp, #4]
   da826:	bd08      	pop	{r3, pc}
   da828:	00030238 	.word	0x00030238

000da82c <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   da82c:	b508      	push	{r3, lr}
   da82e:	4b02      	ldr	r3, [pc, #8]	; (da838 <sock_socket+0xc>)
   da830:	681b      	ldr	r3, [r3, #0]
   da832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   da834:	9301      	str	r3, [sp, #4]
   da836:	bd08      	pop	{r3, pc}
   da838:	00030238 	.word	0x00030238

000da83c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   da83c:	b508      	push	{r3, lr}
   da83e:	4b02      	ldr	r3, [pc, #8]	; (da848 <HAL_USB_USART_Init+0xc>)
   da840:	681b      	ldr	r3, [r3, #0]
   da842:	681b      	ldr	r3, [r3, #0]
   da844:	9301      	str	r3, [sp, #4]
   da846:	bd08      	pop	{r3, pc}
   da848:	0003024c 	.word	0x0003024c

000da84c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   da84c:	b508      	push	{r3, lr}
   da84e:	4b02      	ldr	r3, [pc, #8]	; (da858 <HAL_USB_USART_Begin+0xc>)
   da850:	681b      	ldr	r3, [r3, #0]
   da852:	685b      	ldr	r3, [r3, #4]
   da854:	9301      	str	r3, [sp, #4]
   da856:	bd08      	pop	{r3, pc}
   da858:	0003024c 	.word	0x0003024c

000da85c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   da85c:	b508      	push	{r3, lr}
   da85e:	4b02      	ldr	r3, [pc, #8]	; (da868 <HAL_USB_USART_Available_Data+0xc>)
   da860:	681b      	ldr	r3, [r3, #0]
   da862:	691b      	ldr	r3, [r3, #16]
   da864:	9301      	str	r3, [sp, #4]
   da866:	bd08      	pop	{r3, pc}
   da868:	0003024c 	.word	0x0003024c

000da86c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   da86c:	b508      	push	{r3, lr}
   da86e:	4b02      	ldr	r3, [pc, #8]	; (da878 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   da870:	681b      	ldr	r3, [r3, #0]
   da872:	695b      	ldr	r3, [r3, #20]
   da874:	9301      	str	r3, [sp, #4]
   da876:	bd08      	pop	{r3, pc}
   da878:	0003024c 	.word	0x0003024c

000da87c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   da87c:	b508      	push	{r3, lr}
   da87e:	4b02      	ldr	r3, [pc, #8]	; (da888 <HAL_USB_USART_Receive_Data+0xc>)
   da880:	681b      	ldr	r3, [r3, #0]
   da882:	699b      	ldr	r3, [r3, #24]
   da884:	9301      	str	r3, [sp, #4]
   da886:	bd08      	pop	{r3, pc}
   da888:	0003024c 	.word	0x0003024c

000da88c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   da88c:	b508      	push	{r3, lr}
   da88e:	4b02      	ldr	r3, [pc, #8]	; (da898 <HAL_USB_USART_Send_Data+0xc>)
   da890:	681b      	ldr	r3, [r3, #0]
   da892:	69db      	ldr	r3, [r3, #28]
   da894:	9301      	str	r3, [sp, #4]
   da896:	bd08      	pop	{r3, pc}
   da898:	0003024c 	.word	0x0003024c

000da89c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   da89c:	b508      	push	{r3, lr}
   da89e:	4b02      	ldr	r3, [pc, #8]	; (da8a8 <HAL_USB_USART_Flush_Data+0xc>)
   da8a0:	681b      	ldr	r3, [r3, #0]
   da8a2:	6a1b      	ldr	r3, [r3, #32]
   da8a4:	9301      	str	r3, [sp, #4]
   da8a6:	bd08      	pop	{r3, pc}
   da8a8:	0003024c 	.word	0x0003024c

000da8ac <wlan_connected_info>:
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
DYNALIB_FN(25, hal_wlan, softap_set_application_page_handler, int(PageProvider* provider, void* reserved))
DYNALIB_FN(26, hal_wlan, wlan_restart, int(void*))
DYNALIB_FN(27, hal_wlan, wlan_set_hostname, int(const char*, void*))
DYNALIB_FN(28, hal_wlan, wlan_get_hostname, int(char*, size_t, void*))
DYNALIB_FN(29, hal_wlan, wlan_connected_info, int(void*, wlan_connected_info_t*, void*))
   da8ac:	b508      	push	{r3, lr}
   da8ae:	4b02      	ldr	r3, [pc, #8]	; (da8b8 <wlan_connected_info+0xc>)
   da8b0:	681b      	ldr	r3, [r3, #0]
   da8b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   da8b4:	9301      	str	r3, [sp, #4]
   da8b6:	bd08      	pop	{r3, pc}
   da8b8:	00030274 	.word	0x00030274

000da8bc <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   da8bc:	b508      	push	{r3, lr}
   da8be:	4b02      	ldr	r3, [pc, #8]	; (da8c8 <LED_SetSignalingColor+0xc>)
   da8c0:	681b      	ldr	r3, [r3, #0]
   da8c2:	685b      	ldr	r3, [r3, #4]
   da8c4:	9301      	str	r3, [sp, #4]
   da8c6:	bd08      	pop	{r3, pc}
   da8c8:	00030260 	.word	0x00030260

000da8cc <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   da8cc:	b508      	push	{r3, lr}
   da8ce:	4b02      	ldr	r3, [pc, #8]	; (da8d8 <LED_Signaling_Start+0xc>)
   da8d0:	681b      	ldr	r3, [r3, #0]
   da8d2:	689b      	ldr	r3, [r3, #8]
   da8d4:	9301      	str	r3, [sp, #4]
   da8d6:	bd08      	pop	{r3, pc}
   da8d8:	00030260 	.word	0x00030260

000da8dc <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   da8dc:	b508      	push	{r3, lr}
   da8de:	4b02      	ldr	r3, [pc, #8]	; (da8e8 <LED_Signaling_Stop+0xc>)
   da8e0:	681b      	ldr	r3, [r3, #0]
   da8e2:	68db      	ldr	r3, [r3, #12]
   da8e4:	9301      	str	r3, [sp, #4]
   da8e6:	bd08      	pop	{r3, pc}
   da8e8:	00030260 	.word	0x00030260

000da8ec <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   da8ec:	b508      	push	{r3, lr}
   da8ee:	4b02      	ldr	r3, [pc, #8]	; (da8f8 <LED_RGB_IsOverRidden+0xc>)
   da8f0:	681b      	ldr	r3, [r3, #0]
   da8f2:	699b      	ldr	r3, [r3, #24]
   da8f4:	9301      	str	r3, [sp, #4]
   da8f6:	bd08      	pop	{r3, pc}
   da8f8:	00030260 	.word	0x00030260

000da8fc <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   da8fc:	b508      	push	{r3, lr}
   da8fe:	4b02      	ldr	r3, [pc, #8]	; (da908 <LED_On+0xc>)
   da900:	681b      	ldr	r3, [r3, #0]
   da902:	69db      	ldr	r3, [r3, #28]
   da904:	9301      	str	r3, [sp, #4]
   da906:	bd08      	pop	{r3, pc}
   da908:	00030260 	.word	0x00030260

000da90c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   da90c:	b508      	push	{r3, lr}
   da90e:	4b02      	ldr	r3, [pc, #8]	; (da918 <log_message+0xc>)
   da910:	681b      	ldr	r3, [r3, #0]
   da912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   da914:	9301      	str	r3, [sp, #4]
   da916:	bd08      	pop	{r3, pc}
   da918:	00030260 	.word	0x00030260

000da91c <led_set_status_active>:
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
DYNALIB_FN(29, services, set_thread_current_function_pointers, void(void*, void*, void*, void*, void*))
DYNALIB_FN(30, services, system_error_message, const char*(int, void*))
DYNALIB_FN(31, services, LED_SetCallbacks, void(LedCallbacks, void*))
DYNALIB_FN(32, services, led_set_status_active, void(LEDStatusData*, int, void*))
   da91c:	b508      	push	{r3, lr}
   da91e:	4b03      	ldr	r3, [pc, #12]	; (da92c <led_set_status_active+0x10>)
   da920:	681b      	ldr	r3, [r3, #0]
   da922:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   da926:	9301      	str	r3, [sp, #4]
   da928:	bd08      	pop	{r3, pc}
   da92a:	0000      	.short	0x0000
   da92c:	00030260 	.word	0x00030260

000da930 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   da930:	b508      	push	{r3, lr}
   da932:	4b02      	ldr	r3, [pc, #8]	; (da93c <system_mode+0xc>)
   da934:	681b      	ldr	r3, [r3, #0]
   da936:	681b      	ldr	r3, [r3, #0]
   da938:	9301      	str	r3, [sp, #4]
   da93a:	bd08      	pop	{r3, pc}
   da93c:	00030220 	.word	0x00030220

000da940 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   da940:	b508      	push	{r3, lr}
   da942:	4b02      	ldr	r3, [pc, #8]	; (da94c <set_system_mode+0xc>)
   da944:	681b      	ldr	r3, [r3, #0]
   da946:	685b      	ldr	r3, [r3, #4]
   da948:	9301      	str	r3, [sp, #4]
   da94a:	bd08      	pop	{r3, pc}
   da94c:	00030220 	.word	0x00030220

000da950 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   da950:	b508      	push	{r3, lr}
   da952:	4b02      	ldr	r3, [pc, #8]	; (da95c <system_delay_ms+0xc>)
   da954:	681b      	ldr	r3, [r3, #0]
   da956:	695b      	ldr	r3, [r3, #20]
   da958:	9301      	str	r3, [sp, #4]
   da95a:	bd08      	pop	{r3, pc}
   da95c:	00030220 	.word	0x00030220

000da960 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
   da960:	b508      	push	{r3, lr}
   da962:	4b02      	ldr	r3, [pc, #8]	; (da96c <system_sleep+0xc>)
   da964:	681b      	ldr	r3, [r3, #0]
   da966:	699b      	ldr	r3, [r3, #24]
   da968:	9301      	str	r3, [sp, #4]
   da96a:	bd08      	pop	{r3, pc}
   da96c:	00030220 	.word	0x00030220

000da970 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   da970:	b508      	push	{r3, lr}
   da972:	4b02      	ldr	r3, [pc, #8]	; (da97c <application_thread_current+0xc>)
   da974:	681b      	ldr	r3, [r3, #0]
   da976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   da978:	9301      	str	r3, [sp, #4]
   da97a:	bd08      	pop	{r3, pc}
   da97c:	00030220 	.word	0x00030220

000da980 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   da980:	b508      	push	{r3, lr}
   da982:	4b02      	ldr	r3, [pc, #8]	; (da98c <application_thread_invoke+0xc>)
   da984:	681b      	ldr	r3, [r3, #0]
   da986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   da988:	9301      	str	r3, [sp, #4]
   da98a:	bd08      	pop	{r3, pc}
   da98c:	00030220 	.word	0x00030220

000da990 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   da990:	b508      	push	{r3, lr}
   da992:	4b02      	ldr	r3, [pc, #8]	; (da99c <system_thread_get_state+0xc>)
   da994:	681b      	ldr	r3, [r3, #0]
   da996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   da998:	9301      	str	r3, [sp, #4]
   da99a:	bd08      	pop	{r3, pc}
   da99c:	00030220 	.word	0x00030220

000da9a0 <led_pattern_period>:
DYNALIB_FN(BASE_IDX + 1, system, led_stop_signal, void(int, int, void*))
DYNALIB_FN(BASE_IDX + 2, system, led_signal_started, int(int, void*))
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
   da9a0:	b508      	push	{r3, lr}
   da9a2:	4b02      	ldr	r3, [pc, #8]	; (da9ac <led_pattern_period+0xc>)
   da9a4:	681b      	ldr	r3, [r3, #0]
   da9a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   da9a8:	9301      	str	r3, [sp, #4]
   da9aa:	bd08      	pop	{r3, pc}
   da9ac:	00030220 	.word	0x00030220

000da9b0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   da9b0:	b508      	push	{r3, lr}
   da9b2:	4b03      	ldr	r3, [pc, #12]	; (da9c0 <system_ctrl_set_app_request_handler+0x10>)
   da9b4:	681b      	ldr	r3, [r3, #0]
   da9b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   da9ba:	9301      	str	r3, [sp, #4]
   da9bc:	bd08      	pop	{r3, pc}
   da9be:	0000      	.short	0x0000
   da9c0:	00030220 	.word	0x00030220

000da9c4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   da9c4:	b508      	push	{r3, lr}
   da9c6:	4b03      	ldr	r3, [pc, #12]	; (da9d4 <system_ctrl_set_result+0x10>)
   da9c8:	681b      	ldr	r3, [r3, #0]
   da9ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   da9ce:	9301      	str	r3, [sp, #4]
   da9d0:	bd08      	pop	{r3, pc}
   da9d2:	0000      	.short	0x0000
   da9d4:	00030220 	.word	0x00030220

000da9d8 <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
   da9d8:	b508      	push	{r3, lr}
   da9da:	4b03      	ldr	r3, [pc, #12]	; (da9e8 <system_sleep_pins+0x10>)
   da9dc:	681b      	ldr	r3, [r3, #0]
   da9de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   da9e2:	9301      	str	r3, [sp, #4]
   da9e4:	bd08      	pop	{r3, pc}
   da9e6:	0000      	.short	0x0000
   da9e8:	00030220 	.word	0x00030220

000da9ec <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   da9ec:	b508      	push	{r3, lr}
   da9ee:	4b02      	ldr	r3, [pc, #8]	; (da9f8 <network_connect+0xc>)
   da9f0:	681b      	ldr	r3, [r3, #0]
   da9f2:	685b      	ldr	r3, [r3, #4]
   da9f4:	9301      	str	r3, [sp, #4]
   da9f6:	bd08      	pop	{r3, pc}
   da9f8:	00030240 	.word	0x00030240

000da9fc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   da9fc:	b508      	push	{r3, lr}
   da9fe:	4b02      	ldr	r3, [pc, #8]	; (daa08 <network_connecting+0xc>)
   daa00:	681b      	ldr	r3, [r3, #0]
   daa02:	689b      	ldr	r3, [r3, #8]
   daa04:	9301      	str	r3, [sp, #4]
   daa06:	bd08      	pop	{r3, pc}
   daa08:	00030240 	.word	0x00030240

000daa0c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   daa0c:	b508      	push	{r3, lr}
   daa0e:	4b02      	ldr	r3, [pc, #8]	; (daa18 <network_disconnect+0xc>)
   daa10:	681b      	ldr	r3, [r3, #0]
   daa12:	68db      	ldr	r3, [r3, #12]
   daa14:	9301      	str	r3, [sp, #4]
   daa16:	bd08      	pop	{r3, pc}
   daa18:	00030240 	.word	0x00030240

000daa1c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   daa1c:	b508      	push	{r3, lr}
   daa1e:	4b02      	ldr	r3, [pc, #8]	; (daa28 <network_ready+0xc>)
   daa20:	681b      	ldr	r3, [r3, #0]
   daa22:	691b      	ldr	r3, [r3, #16]
   daa24:	9301      	str	r3, [sp, #4]
   daa26:	bd08      	pop	{r3, pc}
   daa28:	00030240 	.word	0x00030240

000daa2c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   daa2c:	b508      	push	{r3, lr}
   daa2e:	4b02      	ldr	r3, [pc, #8]	; (daa38 <network_on+0xc>)
   daa30:	681b      	ldr	r3, [r3, #0]
   daa32:	695b      	ldr	r3, [r3, #20]
   daa34:	9301      	str	r3, [sp, #4]
   daa36:	bd08      	pop	{r3, pc}
   daa38:	00030240 	.word	0x00030240

000daa3c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   daa3c:	b508      	push	{r3, lr}
   daa3e:	4b02      	ldr	r3, [pc, #8]	; (daa48 <network_off+0xc>)
   daa40:	681b      	ldr	r3, [r3, #0]
   daa42:	699b      	ldr	r3, [r3, #24]
   daa44:	9301      	str	r3, [sp, #4]
   daa46:	bd08      	pop	{r3, pc}
   daa48:	00030240 	.word	0x00030240

000daa4c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   daa4c:	b508      	push	{r3, lr}
   daa4e:	4b02      	ldr	r3, [pc, #8]	; (daa58 <network_listen+0xc>)
   daa50:	681b      	ldr	r3, [r3, #0]
   daa52:	69db      	ldr	r3, [r3, #28]
   daa54:	9301      	str	r3, [sp, #4]
   daa56:	bd08      	pop	{r3, pc}
   daa58:	00030240 	.word	0x00030240

000daa5c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   daa5c:	b508      	push	{r3, lr}
   daa5e:	4b02      	ldr	r3, [pc, #8]	; (daa68 <network_listening+0xc>)
   daa60:	681b      	ldr	r3, [r3, #0]
   daa62:	6a1b      	ldr	r3, [r3, #32]
   daa64:	9301      	str	r3, [sp, #4]
   daa66:	bd08      	pop	{r3, pc}
   daa68:	00030240 	.word	0x00030240

000daa6c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   daa6c:	b508      	push	{r3, lr}
   daa6e:	4b02      	ldr	r3, [pc, #8]	; (daa78 <network_set_listen_timeout+0xc>)
   daa70:	681b      	ldr	r3, [r3, #0]
   daa72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   daa74:	9301      	str	r3, [sp, #4]
   daa76:	bd08      	pop	{r3, pc}
   daa78:	00030240 	.word	0x00030240

000daa7c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   daa7c:	b508      	push	{r3, lr}
   daa7e:	4b02      	ldr	r3, [pc, #8]	; (daa88 <network_get_listen_timeout+0xc>)
   daa80:	681b      	ldr	r3, [r3, #0]
   daa82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   daa84:	9301      	str	r3, [sp, #4]
   daa86:	bd08      	pop	{r3, pc}
   daa88:	00030240 	.word	0x00030240

000daa8c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   daa8c:	b508      	push	{r3, lr}
   daa8e:	4b02      	ldr	r3, [pc, #8]	; (daa98 <spark_process+0xc>)
   daa90:	681b      	ldr	r3, [r3, #0]
   daa92:	689b      	ldr	r3, [r3, #8]
   daa94:	9301      	str	r3, [sp, #4]
   daa96:	bd08      	pop	{r3, pc}
   daa98:	00030244 	.word	0x00030244

000daa9c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   daa9c:	b508      	push	{r3, lr}
   daa9e:	4b02      	ldr	r3, [pc, #8]	; (daaa8 <spark_cloud_flag_connect+0xc>)
   daaa0:	681b      	ldr	r3, [r3, #0]
   daaa2:	68db      	ldr	r3, [r3, #12]
   daaa4:	9301      	str	r3, [sp, #4]
   daaa6:	bd08      	pop	{r3, pc}
   daaa8:	00030244 	.word	0x00030244

000daaac <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   daaac:	b508      	push	{r3, lr}
   daaae:	4b02      	ldr	r3, [pc, #8]	; (daab8 <spark_cloud_flag_connected+0xc>)
   daab0:	681b      	ldr	r3, [r3, #0]
   daab2:	695b      	ldr	r3, [r3, #20]
   daab4:	9301      	str	r3, [sp, #4]
   daab6:	bd08      	pop	{r3, pc}
   daab8:	00030244 	.word	0x00030244

000daabc <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   daabc:	b508      	push	{r3, lr}
   daabe:	4b02      	ldr	r3, [pc, #8]	; (daac8 <spark_send_event+0xc>)
   daac0:	681b      	ldr	r3, [r3, #0]
   daac2:	6a1b      	ldr	r3, [r3, #32]
   daac4:	9301      	str	r3, [sp, #4]
   daac6:	bd08      	pop	{r3, pc}
   daac8:	00030244 	.word	0x00030244

000daacc <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   daacc:	b508      	push	{r3, lr}
   daace:	4b02      	ldr	r3, [pc, #8]	; (daad8 <spark_subscribe+0xc>)
   daad0:	681b      	ldr	r3, [r3, #0]
   daad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   daad4:	9301      	str	r3, [sp, #4]
   daad6:	bd08      	pop	{r3, pc}
   daad8:	00030244 	.word	0x00030244

000daadc <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   daadc:	b508      	push	{r3, lr}
   daade:	4b02      	ldr	r3, [pc, #8]	; (daae8 <spark_sync_time_pending+0xc>)
   daae0:	681b      	ldr	r3, [r3, #0]
   daae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   daae4:	9301      	str	r3, [sp, #4]
   daae6:	bd08      	pop	{r3, pc}
   daae8:	00030244 	.word	0x00030244

000daaec <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   daaec:	b508      	push	{r3, lr}
   daaee:	4b02      	ldr	r3, [pc, #8]	; (daaf8 <spark_set_random_seed_from_cloud_handler+0xc>)
   daaf0:	681b      	ldr	r3, [r3, #0]
   daaf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   daaf4:	9301      	str	r3, [sp, #4]
   daaf6:	bd08      	pop	{r3, pc}
   daaf8:	00030244 	.word	0x00030244

000daafc <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   daafc:	b508      	push	{r3, lr}
   daafe:	4b02      	ldr	r3, [pc, #8]	; (dab08 <malloc+0xc>)
   dab00:	681b      	ldr	r3, [r3, #0]
   dab02:	681b      	ldr	r3, [r3, #0]
   dab04:	9301      	str	r3, [sp, #4]
   dab06:	bd08      	pop	{r3, pc}
   dab08:	0003021c 	.word	0x0003021c

000dab0c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   dab0c:	b508      	push	{r3, lr}
   dab0e:	4b02      	ldr	r3, [pc, #8]	; (dab18 <free+0xc>)
   dab10:	681b      	ldr	r3, [r3, #0]
   dab12:	685b      	ldr	r3, [r3, #4]
   dab14:	9301      	str	r3, [sp, #4]
   dab16:	bd08      	pop	{r3, pc}
   dab18:	0003021c 	.word	0x0003021c

000dab1c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   dab1c:	b508      	push	{r3, lr}
   dab1e:	4b02      	ldr	r3, [pc, #8]	; (dab28 <realloc+0xc>)
   dab20:	681b      	ldr	r3, [r3, #0]
   dab22:	689b      	ldr	r3, [r3, #8]
   dab24:	9301      	str	r3, [sp, #4]
   dab26:	bd08      	pop	{r3, pc}
   dab28:	0003021c 	.word	0x0003021c

000dab2c <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   dab2c:	b508      	push	{r3, lr}
   dab2e:	4b02      	ldr	r3, [pc, #8]	; (dab38 <siprintf+0xc>)
   dab30:	681b      	ldr	r3, [r3, #0]
   dab32:	691b      	ldr	r3, [r3, #16]
   dab34:	9301      	str	r3, [sp, #4]
   dab36:	bd08      	pop	{r3, pc}
   dab38:	0003021c 	.word	0x0003021c

000dab3c <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   dab3c:	b508      	push	{r3, lr}
   dab3e:	4b02      	ldr	r3, [pc, #8]	; (dab48 <siscanf+0xc>)
   dab40:	681b      	ldr	r3, [r3, #0]
   dab42:	699b      	ldr	r3, [r3, #24]
   dab44:	9301      	str	r3, [sp, #4]
   dab46:	bd08      	pop	{r3, pc}
   dab48:	0003021c 	.word	0x0003021c

000dab4c <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   dab4c:	b508      	push	{r3, lr}
   dab4e:	4b02      	ldr	r3, [pc, #8]	; (dab58 <snprintf+0xc>)
   dab50:	681b      	ldr	r3, [r3, #0]
   dab52:	69db      	ldr	r3, [r3, #28]
   dab54:	9301      	str	r3, [sp, #4]
   dab56:	bd08      	pop	{r3, pc}
   dab58:	0003021c 	.word	0x0003021c

000dab5c <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
   dab5c:	b508      	push	{r3, lr}
   dab5e:	4b02      	ldr	r3, [pc, #8]	; (dab68 <sniprintf+0xc>)
   dab60:	681b      	ldr	r3, [r3, #0]
   dab62:	6a1b      	ldr	r3, [r3, #32]
   dab64:	9301      	str	r3, [sp, #4]
   dab66:	bd08      	pop	{r3, pc}
   dab68:	0003021c 	.word	0x0003021c

000dab6c <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   dab6c:	b508      	push	{r3, lr}
   dab6e:	4b02      	ldr	r3, [pc, #8]	; (dab78 <vsnprintf+0xc>)
   dab70:	681b      	ldr	r3, [r3, #0]
   dab72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   dab74:	9301      	str	r3, [sp, #4]
   dab76:	bd08      	pop	{r3, pc}
   dab78:	0003021c 	.word	0x0003021c

000dab7c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   dab7c:	b508      	push	{r3, lr}
   dab7e:	4b02      	ldr	r3, [pc, #8]	; (dab88 <abort+0xc>)
   dab80:	681b      	ldr	r3, [r3, #0]
   dab82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   dab84:	9301      	str	r3, [sp, #4]
   dab86:	bd08      	pop	{r3, pc}
   dab88:	0003021c 	.word	0x0003021c

000dab8c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   dab8c:	b508      	push	{r3, lr}
   dab8e:	4b02      	ldr	r3, [pc, #8]	; (dab98 <_malloc_r+0xc>)
   dab90:	681b      	ldr	r3, [r3, #0]
   dab92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dab94:	9301      	str	r3, [sp, #4]
   dab96:	bd08      	pop	{r3, pc}
   dab98:	0003021c 	.word	0x0003021c

000dab9c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   dab9c:	b508      	push	{r3, lr}
   dab9e:	4b02      	ldr	r3, [pc, #8]	; (daba8 <__errno+0xc>)
   daba0:	681b      	ldr	r3, [r3, #0]
   daba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   daba4:	9301      	str	r3, [sp, #4]
   daba6:	bd08      	pop	{r3, pc}
   daba8:	0003021c 	.word	0x0003021c

000dabac <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   dabac:	2200      	movs	r2, #0
   dabae:	4611      	mov	r1, r2
   dabb0:	6840      	ldr	r0, [r0, #4]
   dabb2:	f7ff bf53 	b.w	daa5c <network_listening>

000dabb6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   dabb6:	2200      	movs	r2, #0
   dabb8:	4611      	mov	r1, r2
   dabba:	6840      	ldr	r0, [r0, #4]
   dabbc:	f7ff bf5e 	b.w	daa7c <network_get_listen_timeout>

000dabc0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   dabc0:	2200      	movs	r2, #0
   dabc2:	6840      	ldr	r0, [r0, #4]
   dabc4:	f7ff bf52 	b.w	daa6c <network_set_listen_timeout>

000dabc8 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   dabc8:	2200      	movs	r2, #0
   dabca:	f081 0101 	eor.w	r1, r1, #1
   dabce:	6840      	ldr	r0, [r0, #4]
   dabd0:	f7ff bf3c 	b.w	daa4c <network_listen>

000dabd4 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   dabd4:	2300      	movs	r3, #0
   dabd6:	461a      	mov	r2, r3
   dabd8:	4619      	mov	r1, r3
   dabda:	6840      	ldr	r0, [r0, #4]
   dabdc:	f7ff bf2e 	b.w	daa3c <network_off>

000dabe0 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   dabe0:	2300      	movs	r3, #0
   dabe2:	461a      	mov	r2, r3
   dabe4:	4619      	mov	r1, r3
   dabe6:	6840      	ldr	r0, [r0, #4]
   dabe8:	f7ff bf20 	b.w	daa2c <network_on>

000dabec <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   dabec:	2200      	movs	r2, #0
   dabee:	4611      	mov	r1, r2
   dabf0:	6840      	ldr	r0, [r0, #4]
   dabf2:	f7ff bf13 	b.w	daa1c <network_ready>

000dabf6 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   dabf6:	2200      	movs	r2, #0
   dabf8:	4611      	mov	r1, r2
   dabfa:	6840      	ldr	r0, [r0, #4]
   dabfc:	f7ff befe 	b.w	da9fc <network_connecting>

000dac00 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   dac00:	2200      	movs	r2, #0
   dac02:	2102      	movs	r1, #2
   dac04:	6840      	ldr	r0, [r0, #4]
   dac06:	f7ff bf01 	b.w	daa0c <network_disconnect>

000dac0a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   dac0a:	2300      	movs	r3, #0
   dac0c:	461a      	mov	r2, r3
   dac0e:	6840      	ldr	r0, [r0, #4]
   dac10:	f7ff beec 	b.w	da9ec <network_connect>

000dac14 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   dac14:	4b02      	ldr	r3, [pc, #8]	; (dac20 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   dac16:	2203      	movs	r2, #3
   dac18:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   dac1a:	4a02      	ldr	r2, [pc, #8]	; (dac24 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   dac1c:	601a      	str	r2, [r3, #0]
   dac1e:	4770      	bx	lr
   dac20:	2003e270 	.word	0x2003e270
   dac24:	000e7ce4 	.word	0x000e7ce4

000dac28 <_ZN8particle9LEDStatus14updateCallbackEmPv>:
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   dac28:	680a      	ldr	r2, [r1, #0]
    } else {
        d_.period = period;
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
   dac2a:	460b      	mov	r3, r1
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   dac2c:	6892      	ldr	r2, [r2, #8]
   dac2e:	4601      	mov	r1, r0
   dac30:	4618      	mov	r0, r3
   dac32:	4710      	bx	r2

000dac34 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>:
 */

#include "spark_wiring_led.h"

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
   dac34:	b570      	push	{r4, r5, r6, lr}
   dac36:	4c0e      	ldr	r4, [pc, #56]	; (dac70 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x3c>)
   dac38:	6004      	str	r4, [r0, #0]
    d_.size = sizeof(LEDStatusData);
   dac3a:	241c      	movs	r4, #28
   dac3c:	6044      	str	r4, [r0, #4]
    d_.next = nullptr;
    d_.prev = nullptr;
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   dac3e:	f89d 4014 	ldrb.w	r4, [sp, #20]
   dac42:	f89d 6010 	ldrb.w	r6, [sp, #16]
   dac46:	f004 0403 	and.w	r4, r4, #3
   dac4a:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
#include "spark_wiring_led.h"

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
    d_.size = sizeof(LEDStatusData);
    d_.next = nullptr;
   dac4e:	2500      	movs	r5, #0
    d_.prev = nullptr;
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   dac50:	b2e4      	uxtb	r4, r4
   dac52:	7404      	strb	r4, [r0, #16]
    d_.pattern = pattern;
   dac54:	7442      	strb	r2, [r0, #17]
    d_.flags = 0;
   dac56:	7485      	strb	r5, [r0, #18]
    d_.color = color;
   dac58:	6141      	str	r1, [r0, #20]
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   dac5a:	7c42      	ldrb	r2, [r0, #17]
#include "spark_wiring_led.h"

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
    d_.size = sizeof(LEDStatusData);
    d_.next = nullptr;
   dac5c:	6085      	str	r5, [r0, #8]
    d_.prev = nullptr;
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
    d_.pattern = pattern;
    d_.flags = 0;
    d_.color = color;
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   dac5e:	2a0f      	cmp	r2, #15
        d_.callback = updateCallback; // User callback
   dac60:	bf08      	it	eq
   dac62:	4b04      	ldreq	r3, [pc, #16]	; (dac74 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x40>)

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
    d_.size = sizeof(LEDStatusData);
    d_.next = nullptr;
    d_.prev = nullptr;
   dac64:	60c5      	str	r5, [r0, #12]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
    d_.pattern = pattern;
    d_.flags = 0;
    d_.color = color;
    if (d_.pattern == LED_PATTERN_CUSTOM) {
        d_.callback = updateCallback; // User callback
   dac66:	bf06      	itte	eq
   dac68:	6183      	streq	r3, [r0, #24]
        d_.data = this; // Callback data
   dac6a:	61c0      	streq	r0, [r0, #28]
    } else {
        d_.period = period;
   dac6c:	8303      	strhne	r3, [r0, #24]
    }
}
   dac6e:	bd70      	pop	{r4, r5, r6, pc}
   dac70:	000e6ad4 	.word	0x000e6ad4
   dac74:	000dac29 	.word	0x000dac29

000dac78 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   dac78:	4770      	bx	lr

000dac7a <_ZN8SPIClassD0Ev>:
   dac7a:	b510      	push	{r4, lr}
   dac7c:	2110      	movs	r1, #16
   dac7e:	4604      	mov	r4, r0
   dac80:	f002 f9db 	bl	dd03a <_ZdlPvj>
   dac84:	4620      	mov	r0, r4
   dac86:	bd10      	pop	{r4, pc}

000dac88 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   dac88:	b570      	push	{r4, r5, r6, lr}
   dac8a:	4b08      	ldr	r3, [pc, #32]	; (dacac <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   dac8c:	6003      	str	r3, [r0, #0]
   dac8e:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   dac90:	2500      	movs	r5, #0
   dac92:	460e      	mov	r6, r1
   dac94:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   dac98:	f7ff fcb0 	bl	da5fc <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   dac9c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   dac9e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   daca0:	f7ff fc44 	bl	da52c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   daca4:	60a5      	str	r5, [r4, #8]
}
   daca6:	4620      	mov	r0, r4
   daca8:	bd70      	pop	{r4, r5, r6, pc}
   dacaa:	bf00      	nop
   dacac:	000e7d18 	.word	0x000e7d18

000dacb0 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
   dacb0:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
   dacb2:	7900      	ldrb	r0, [r0, #4]
   dacb4:	f7ff fc32 	bl	da51c <HAL_SPI_Send_Receive_Data>
}
   dacb8:	b2c0      	uxtb	r0, r0
   dacba:	bd08      	pop	{r3, pc}

000dacbc <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   dacbc:	7900      	ldrb	r0, [r0, #4]
   dacbe:	f7ff bc3d 	b.w	da53c <HAL_SPI_Is_Enabled>

000dacc2 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   dacc2:	4601      	mov	r1, r0
   dacc4:	2200      	movs	r2, #0
   dacc6:	208c      	movs	r0, #140	; 0x8c
   dacc8:	f7ff bc70 	b.w	da5ac <HAL_Core_System_Reset_Ex>

000daccc <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   daccc:	2000      	movs	r0, #0
   dacce:	f7ff bff8 	b.w	dacc2 <_ZN11SystemClass5resetEm>
	...

000dacd4 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
   dacd4:	b510      	push	{r4, lr}
   dacd6:	4604      	mov	r4, r0
   dacd8:	4608      	mov	r0, r1
   dacda:	4611      	mov	r1, r2
   dacdc:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
   dacde:	2300      	movs	r3, #0
   dace0:	f7ff fe3e 	bl	da960 <system_sleep>
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
   dace4:	4b06      	ldr	r3, [pc, #24]	; (dad00 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x2c>)
   dace6:	2200      	movs	r2, #0
   dace8:	701a      	strb	r2, [r3, #0]
   dacea:	f64f 72ff 	movw	r2, #65535	; 0xffff
   dacee:	8058      	strh	r0, [r3, #2]
   dacf0:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
   dacf2:	681a      	ldr	r2, [r3, #0]
   dacf4:	889b      	ldrh	r3, [r3, #4]
   dacf6:	6022      	str	r2, [r4, #0]
   dacf8:	80a3      	strh	r3, [r4, #4]
}
   dacfa:	4620      	mov	r0, r4
   dacfc:	bd10      	pop	{r4, pc}
   dacfe:	bf00      	nop
   dad00:	2003e278 	.word	0x2003e278

000dad04 <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   dad04:	b510      	push	{r4, lr}
   dad06:	2400      	movs	r4, #0
   dad08:	7004      	strb	r4, [r0, #0]
   dad0a:	8044      	strh	r4, [r0, #2]
    if (ret > 0) {
   dad0c:	2900      	cmp	r1, #0
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   dad0e:	f64f 74ff 	movw	r4, #65535	; 0xffff
   dad12:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
   dad14:	dd07      	ble.n	dad26 <_ZN11SleepResultC1EiPKtj+0x22>
        // pin
        --ret;
        if ((size_t)ret < pinsSize) {
   dad16:	3901      	subs	r1, #1
   dad18:	4299      	cmp	r1, r3
   dad1a:	d209      	bcs.n	dad30 <_ZN11SleepResultC1EiPKtj+0x2c>
            pin_ = pins[ret];
   dad1c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   dad20:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
   dad22:	2301      	movs	r3, #1
   dad24:	e001      	b.n	dad2a <_ZN11SleepResultC1EiPKtj+0x26>
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
   dad26:	d102      	bne.n	dad2e <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
   dad28:	2302      	movs	r3, #2
   dad2a:	7003      	strb	r3, [r0, #0]
   dad2c:	bd10      	pop	{r4, pc}
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
   dad2e:	8041      	strh	r1, [r0, #2]
    }
}
   dad30:	bd10      	pop	{r4, pc}
	...

000dad34 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   dad34:	b570      	push	{r4, r5, r6, lr}
   dad36:	b086      	sub	sp, #24
   dad38:	4616      	mov	r6, r2
   dad3a:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   dad3c:	2300      	movs	r3, #0
   dad3e:	9302      	str	r3, [sp, #8]
   dad40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   dad42:	9301      	str	r3, [sp, #4]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   dad44:	460d      	mov	r5, r1
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   dad46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   dad48:	9300      	str	r3, [sp, #0]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   dad4a:	4604      	mov	r4, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   dad4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dad4e:	4631      	mov	r1, r6
   dad50:	4628      	mov	r0, r5
   dad52:	f7ff fe41 	bl	da9d8 <system_sleep_pins>
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
   dad56:	4633      	mov	r3, r6
   dad58:	462a      	mov	r2, r5
   dad5a:	4601      	mov	r1, r0
   dad5c:	a804      	add	r0, sp, #16
   dad5e:	f7ff ffd1 	bl	dad04 <_ZN11SleepResultC1EiPKtj>
   dad62:	4b06      	ldr	r3, [pc, #24]	; (dad7c <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
   dad64:	9804      	ldr	r0, [sp, #16]
   dad66:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   dad6a:	6018      	str	r0, [r3, #0]
   dad6c:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
   dad6e:	681a      	ldr	r2, [r3, #0]
   dad70:	889b      	ldrh	r3, [r3, #4]
   dad72:	6022      	str	r2, [r4, #0]
}
   dad74:	4620      	mov	r0, r4
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
    return System.sleepResult_;
   dad76:	80a3      	strh	r3, [r4, #4]
}
   dad78:	b006      	add	sp, #24
   dad7a:	bd70      	pop	{r4, r5, r6, pc}
   dad7c:	2003e278 	.word	0x2003e278

000dad80 <_ZNK11SleepResult6reasonEv>:
    }
}

WakeupReason SleepResult::reason() const {
    return reason_;
}
   dad80:	7800      	ldrb	r0, [r0, #0]
   dad82:	4770      	bx	lr

000dad84 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   dad84:	4b04      	ldr	r3, [pc, #16]	; (dad98 <_GLOBAL__sub_I_System+0x14>)
   dad86:	2000      	movs	r0, #0
   dad88:	f64f 72ff 	movw	r2, #65535	; 0xffff
   dad8c:	7018      	strb	r0, [r3, #0]
   dad8e:	8058      	strh	r0, [r3, #2]
   dad90:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   dad92:	f7ff bdd5 	b.w	da940 <set_system_mode>
   dad96:	bf00      	nop
   dad98:	2003e278 	.word	0x2003e278

000dad9c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   dad9c:	b510      	push	{r4, lr}
   dad9e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   dada0:	f009 fbb4 	bl	e450c <strlen>
   dada4:	3801      	subs	r0, #1
   dada6:	1823      	adds	r3, r4, r0
   dada8:	4620      	mov	r0, r4
	while(i<j){
   dadaa:	4298      	cmp	r0, r3
   dadac:	d206      	bcs.n	dadbc <_Z11str_reversePc+0x20>
		c = *i;
   dadae:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   dadb0:	7819      	ldrb	r1, [r3, #0]
   dadb2:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   dadb6:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   dadba:	e7f6      	b.n	dadaa <_Z11str_reversePc+0xe>
   dadbc:	bd10      	pop	{r4, pc}

000dadbe <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   dadbe:	b570      	push	{r4, r5, r6, lr}
   dadc0:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   dadc2:	1e91      	subs	r1, r2, #2
   dadc4:	2922      	cmp	r1, #34	; 0x22
   dadc6:	d820      	bhi.n	dae0a <ultoa+0x4c>
   dadc8:	4625      	mov	r5, r4
   dadca:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   dadcc:	b910      	cbnz	r0, dadd4 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   dadce:	4423      	add	r3, r4
            *ptr++ = '0';
   dadd0:	2230      	movs	r2, #48	; 0x30
   dadd2:	e00e      	b.n	dadf2 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   dadd4:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   dadd8:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   daddc:	b2c1      	uxtb	r1, r0
   dadde:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   dade2:	2809      	cmp	r0, #9
                *ptr += '0';
   dade4:	bf94      	ite	ls
   dade6:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   dade8:	3157      	addhi	r1, #87	; 0x57
   dadea:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   dadee:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   dadf0:	e7eb      	b.n	dadca <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   dadf2:	4299      	cmp	r1, r3
   dadf4:	d202      	bcs.n	dadfc <ultoa+0x3e>
            *ptr++ = '0';
   dadf6:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   dadfa:	e7fa      	b.n	dadf2 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   dadfc:	2300      	movs	r3, #0
	str_reverse(buffer);
   dadfe:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   dae00:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   dae02:	f7ff ffcb 	bl	dad9c <_Z11str_reversePc>
	return buffer;
   dae06:	4620      	mov	r0, r4
   dae08:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   dae0a:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   dae0c:	bd70      	pop	{r4, r5, r6, pc}

000dae0e <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   dae0e:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   dae10:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   dae12:	460c      	mov	r4, r1
   dae14:	4615      	mov	r5, r2
	if(a<0){
   dae16:	da0b      	bge.n	dae30 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   dae18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   dae1c:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   dae20:	bf14      	ite	ne
   dae22:	4258      	negne	r0, r3
   dae24:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   dae26:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   dae28:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   dae2a:	462a      	mov	r2, r5
   dae2c:	4419      	add	r1, r3
   dae2e:	e000      	b.n	dae32 <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   dae30:	2301      	movs	r3, #1
   dae32:	f7ff ffc4 	bl	dadbe <ultoa>
	}
	return buffer;
}
   dae36:	4620      	mov	r0, r4
   dae38:	bd38      	pop	{r3, r4, r5, pc}

000dae3a <utoa>:

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   dae3a:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   dae3c:	2301      	movs	r3, #1
   dae3e:	f7ff ffbe 	bl	dadbe <ultoa>
}
   dae42:	bd08      	pop	{r3, pc}

000dae44 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   dae44:	b510      	push	{r4, lr}
   dae46:	4604      	mov	r4, r0
{
	free(buffer);
   dae48:	6800      	ldr	r0, [r0, #0]
   dae4a:	f7ff fe5f 	bl	dab0c <free>
}
   dae4e:	4620      	mov	r0, r4
   dae50:	bd10      	pop	{r4, pc}

000dae52 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   dae52:	b510      	push	{r4, lr}
   dae54:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   dae56:	6800      	ldr	r0, [r0, #0]
   dae58:	b108      	cbz	r0, dae5e <_ZN6String10invalidateEv+0xc>
   dae5a:	f7ff fe57 	bl	dab0c <free>
	buffer = NULL;
   dae5e:	2300      	movs	r3, #0
   dae60:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   dae62:	60a3      	str	r3, [r4, #8]
   dae64:	6063      	str	r3, [r4, #4]
   dae66:	bd10      	pop	{r4, pc}

000dae68 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   dae68:	b538      	push	{r3, r4, r5, lr}
   dae6a:	4604      	mov	r4, r0
   dae6c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   dae6e:	6800      	ldr	r0, [r0, #0]
   dae70:	3101      	adds	r1, #1
   dae72:	f7ff fe53 	bl	dab1c <realloc>
	if (newbuffer) {
   dae76:	b110      	cbz	r0, dae7e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   dae78:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   dae7c:	2001      	movs	r0, #1
	}
	return 0;
}
   dae7e:	bd38      	pop	{r3, r4, r5, pc}

000dae80 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   dae80:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   dae82:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   dae84:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   dae86:	b113      	cbz	r3, dae8e <_ZN6String7reserveEj+0xe>
   dae88:	6843      	ldr	r3, [r0, #4]
   dae8a:	428b      	cmp	r3, r1
   dae8c:	d207      	bcs.n	dae9e <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   dae8e:	4620      	mov	r0, r4
   dae90:	f7ff ffea 	bl	dae68 <_ZN6String12changeBufferEj>
   dae94:	b120      	cbz	r0, daea0 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   dae96:	68a3      	ldr	r3, [r4, #8]
   dae98:	b90b      	cbnz	r3, dae9e <_ZN6String7reserveEj+0x1e>
   dae9a:	6822      	ldr	r2, [r4, #0]
   dae9c:	7013      	strb	r3, [r2, #0]
   dae9e:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   daea0:	bd10      	pop	{r4, pc}

000daea2 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   daea2:	b570      	push	{r4, r5, r6, lr}
   daea4:	460e      	mov	r6, r1
	if (!reserve(length)) {
   daea6:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   daea8:	4604      	mov	r4, r0
   daeaa:	4615      	mov	r5, r2
	if (!reserve(length)) {
   daeac:	f7ff ffe8 	bl	dae80 <_ZN6String7reserveEj>
   daeb0:	b918      	cbnz	r0, daeba <_ZN6String4copyEPKcj+0x18>
		invalidate();
   daeb2:	4620      	mov	r0, r4
   daeb4:	f7ff ffcd 	bl	dae52 <_ZN6String10invalidateEv>
		return *this;
   daeb8:	e009      	b.n	daece <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   daeba:	462a      	mov	r2, r5
   daebc:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   daebe:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   daec0:	6820      	ldr	r0, [r4, #0]
   daec2:	f008 fb57 	bl	e3574 <memcpy>
	buffer[len] = 0;
   daec6:	6822      	ldr	r2, [r4, #0]
   daec8:	68a3      	ldr	r3, [r4, #8]
   daeca:	2100      	movs	r1, #0
   daecc:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   daece:	4620      	mov	r0, r4
   daed0:	bd70      	pop	{r4, r5, r6, pc}

000daed2 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   daed2:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   daed4:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   daed6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   daed8:	6003      	str	r3, [r0, #0]
	capacity = 0;
   daeda:	6043      	str	r3, [r0, #4]
	len = 0;
   daedc:	6083      	str	r3, [r0, #8]
	flags = 0;
   daede:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   daee0:	460d      	mov	r5, r1
   daee2:	b139      	cbz	r1, daef4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   daee4:	4608      	mov	r0, r1
   daee6:	f009 fb11 	bl	e450c <strlen>
   daeea:	4629      	mov	r1, r5
   daeec:	4602      	mov	r2, r0
   daeee:	4620      	mov	r0, r4
   daef0:	f7ff ffd7 	bl	daea2 <_ZN6String4copyEPKcj>
}
   daef4:	4620      	mov	r0, r4
   daef6:	bd38      	pop	{r3, r4, r5, pc}

000daef8 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   daef8:	b538      	push	{r3, r4, r5, lr}
   daefa:	4605      	mov	r5, r0
	if (buffer) {
   daefc:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   daefe:	460c      	mov	r4, r1
	if (buffer) {
   daf00:	b160      	cbz	r0, daf1c <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   daf02:	686a      	ldr	r2, [r5, #4]
   daf04:	688b      	ldr	r3, [r1, #8]
   daf06:	429a      	cmp	r2, r3
   daf08:	d306      	bcc.n	daf18 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   daf0a:	6809      	ldr	r1, [r1, #0]
   daf0c:	f008 fdc6 	bl	e3a9c <strcpy>
			len = rhs.len;
   daf10:	68a3      	ldr	r3, [r4, #8]
   daf12:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   daf14:	2300      	movs	r3, #0
   daf16:	e00a      	b.n	daf2e <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   daf18:	f7ff fdf8 	bl	dab0c <free>
		}
	}
	buffer = rhs.buffer;
   daf1c:	6823      	ldr	r3, [r4, #0]
   daf1e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   daf20:	6863      	ldr	r3, [r4, #4]
   daf22:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   daf24:	68a3      	ldr	r3, [r4, #8]
   daf26:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   daf28:	2300      	movs	r3, #0
   daf2a:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   daf2c:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   daf2e:	60a3      	str	r3, [r4, #8]
   daf30:	bd38      	pop	{r3, r4, r5, pc}

000daf32 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   daf32:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   daf34:	b510      	push	{r4, lr}
   daf36:	460b      	mov	r3, r1
   daf38:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   daf3a:	d007      	beq.n	daf4c <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   daf3c:	6809      	ldr	r1, [r1, #0]
   daf3e:	b119      	cbz	r1, daf48 <_ZN6StringaSERKS_+0x16>
   daf40:	689a      	ldr	r2, [r3, #8]
   daf42:	f7ff ffae 	bl	daea2 <_ZN6String4copyEPKcj>
   daf46:	e001      	b.n	daf4c <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   daf48:	f7ff ff83 	bl	dae52 <_ZN6String10invalidateEv>

	return *this;
}
   daf4c:	4620      	mov	r0, r4
   daf4e:	bd10      	pop	{r4, pc}

000daf50 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   daf50:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   daf52:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   daf54:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   daf56:	6003      	str	r3, [r0, #0]
	capacity = 0;
   daf58:	6043      	str	r3, [r0, #4]
	len = 0;
   daf5a:	6083      	str	r3, [r0, #8]
	flags = 0;
   daf5c:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   daf5e:	f7ff ffe8 	bl	daf32 <_ZN6StringaSERKS_>
}
   daf62:	4620      	mov	r0, r4
   daf64:	bd10      	pop	{r4, pc}

000daf66 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   daf66:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   daf68:	b510      	push	{r4, lr}
   daf6a:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   daf6c:	d001      	beq.n	daf72 <_ZN6StringaSEOS_+0xc>
   daf6e:	f7ff ffc3 	bl	daef8 <_ZN6String4moveERS_>
	return *this;
}
   daf72:	4620      	mov	r0, r4
   daf74:	bd10      	pop	{r4, pc}

000daf76 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   daf76:	b538      	push	{r3, r4, r5, lr}
   daf78:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   daf7a:	460c      	mov	r4, r1
   daf7c:	b141      	cbz	r1, daf90 <_ZN6StringaSEPKc+0x1a>
   daf7e:	4608      	mov	r0, r1
   daf80:	f009 fac4 	bl	e450c <strlen>
   daf84:	4621      	mov	r1, r4
   daf86:	4602      	mov	r2, r0
   daf88:	4628      	mov	r0, r5
   daf8a:	f7ff ff8a 	bl	daea2 <_ZN6String4copyEPKcj>
   daf8e:	e001      	b.n	daf94 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   daf90:	f7ff ff5f 	bl	dae52 <_ZN6String10invalidateEv>

	return *this;
}
   daf94:	4628      	mov	r0, r5
   daf96:	bd38      	pop	{r3, r4, r5, pc}

000daf98 <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
   daf98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   daf9a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   daf9c:	2300      	movs	r3, #0
   daf9e:	6023      	str	r3, [r4, #0]
	capacity = 0;
   dafa0:	6063      	str	r3, [r4, #4]
	len = 0;
   dafa2:	60a3      	str	r3, [r4, #8]
	flags = 0;
   dafa4:	7323      	strb	r3, [r4, #12]
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
   dafa6:	4608      	mov	r0, r1
{
	init();
	char buf[9];
	utoa(value, buf, base);
   dafa8:	a901      	add	r1, sp, #4
   dafaa:	f7ff ff46 	bl	dae3a <utoa>
	*this = buf;
   dafae:	a901      	add	r1, sp, #4
   dafb0:	4620      	mov	r0, r4
   dafb2:	f7ff ffe0 	bl	daf76 <_ZN6StringaSEPKc>
}
   dafb6:	4620      	mov	r0, r4
   dafb8:	b004      	add	sp, #16
   dafba:	bd10      	pop	{r4, pc}

000dafbc <_ZN6StringC1Eih>:

String::String(int value, unsigned char base)
   dafbc:	b510      	push	{r4, lr}
   dafbe:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   dafc0:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   dafc2:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   dafc4:	6023      	str	r3, [r4, #0]
	capacity = 0;
   dafc6:	6063      	str	r3, [r4, #4]
	len = 0;
   dafc8:	60a3      	str	r3, [r4, #8]
	flags = 0;
   dafca:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   dafcc:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   dafce:	a901      	add	r1, sp, #4
   dafd0:	f7ff ff1d 	bl	dae0e <itoa>
	*this = buf;
   dafd4:	a901      	add	r1, sp, #4
   dafd6:	4620      	mov	r0, r4
   dafd8:	f7ff ffcd 	bl	daf76 <_ZN6StringaSEPKc>
}
   dafdc:	4620      	mov	r0, r4
   dafde:	b00a      	add	sp, #40	; 0x28
   dafe0:	bd10      	pop	{r4, pc}

000dafe2 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   dafe2:	b570      	push	{r4, r5, r6, lr}
   dafe4:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   dafe6:	460e      	mov	r6, r1
   dafe8:	b909      	cbnz	r1, dafee <_ZN6String6concatEPKcj+0xc>
   dafea:	2000      	movs	r0, #0
   dafec:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   dafee:	b16a      	cbz	r2, db00c <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   daff0:	6883      	ldr	r3, [r0, #8]
   daff2:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   daff4:	4629      	mov	r1, r5
   daff6:	f7ff ff43 	bl	dae80 <_ZN6String7reserveEj>
   daffa:	2800      	cmp	r0, #0
   daffc:	d0f5      	beq.n	dafea <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   daffe:	6820      	ldr	r0, [r4, #0]
   db000:	68a3      	ldr	r3, [r4, #8]
   db002:	4631      	mov	r1, r6
   db004:	4418      	add	r0, r3
   db006:	f008 fd49 	bl	e3a9c <strcpy>
	len = newlen;
   db00a:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   db00c:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   db00e:	bd70      	pop	{r4, r5, r6, pc}

000db010 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   db010:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   db012:	688a      	ldr	r2, [r1, #8]
   db014:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   db016:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   db018:	f7ff ffe3 	bl	dafe2 <_ZN6String6concatEPKcj>
   db01c:	b910      	cbnz	r0, db024 <_ZplRK15StringSumHelperRK6String+0x14>
   db01e:	4620      	mov	r0, r4
   db020:	f7ff ff17 	bl	dae52 <_ZN6String10invalidateEv>
	return a;
}
   db024:	4620      	mov	r0, r4
   db026:	bd10      	pop	{r4, pc}

000db028 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   db028:	b538      	push	{r3, r4, r5, lr}
   db02a:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   db02c:	460d      	mov	r5, r1
   db02e:	b141      	cbz	r1, db042 <_ZplRK15StringSumHelperPKc+0x1a>
   db030:	4608      	mov	r0, r1
   db032:	f009 fa6b 	bl	e450c <strlen>
   db036:	4629      	mov	r1, r5
   db038:	4602      	mov	r2, r0
   db03a:	4620      	mov	r0, r4
   db03c:	f7ff ffd1 	bl	dafe2 <_ZN6String6concatEPKcj>
   db040:	b910      	cbnz	r0, db048 <_ZplRK15StringSumHelperPKc+0x20>
   db042:	4620      	mov	r0, r4
   db044:	f7ff ff05 	bl	dae52 <_ZN6String10invalidateEv>
	return a;
}
   db048:	4620      	mov	r0, r4
   db04a:	bd38      	pop	{r3, r4, r5, pc}

000db04c <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   db04c:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   db04e:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   db050:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   db052:	b912      	cbnz	r2, db05a <_ZNK6String6equalsEPKc+0xe>
   db054:	b919      	cbnz	r1, db05e <_ZNK6String6equalsEPKc+0x12>
   db056:	2001      	movs	r0, #1
   db058:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   db05a:	b911      	cbnz	r1, db062 <_ZNK6String6equalsEPKc+0x16>
   db05c:	6803      	ldr	r3, [r0, #0]
   db05e:	7818      	ldrb	r0, [r3, #0]
   db060:	e002      	b.n	db068 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   db062:	6800      	ldr	r0, [r0, #0]
   db064:	f008 fd10 	bl	e3a88 <strcmp>
   db068:	fab0 f080 	clz	r0, r0
   db06c:	0940      	lsrs	r0, r0, #5
}
   db06e:	bd08      	pop	{r3, pc}

000db070 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   db070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (left > right) {
   db074:	429a      	cmp	r2, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   db076:	460e      	mov	r6, r1
   db078:	461c      	mov	r4, r3
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   db07a:	4910      	ldr	r1, [pc, #64]	; (db0bc <_ZNK6String9substringEjj+0x4c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
   db07c:	bf88      	it	hi
   db07e:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   db080:	4615      	mov	r5, r2
   db082:	4607      	mov	r7, r0
	if (left > right) {
   db084:	bf84      	itt	hi
   db086:	4625      	movhi	r5, r4
   db088:	461c      	movhi	r4, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   db08a:	f7ff ff22 	bl	daed2 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   db08e:	68b1      	ldr	r1, [r6, #8]
   db090:	428d      	cmp	r5, r1
   db092:	d80f      	bhi.n	db0b4 <_ZNK6String9substringEjj+0x44>
   db094:	428c      	cmp	r4, r1
   db096:	bf28      	it	cs
   db098:	460c      	movcs	r4, r1
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
   db09a:	6833      	ldr	r3, [r6, #0]
	buffer[right] = '\0';
   db09c:	2200      	movs	r2, #0
		left = temp;
	}
	String out;
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
   db09e:	f813 8004 	ldrb.w	r8, [r3, r4]
	buffer[right] = '\0';
   db0a2:	551a      	strb	r2, [r3, r4]
	out = buffer + left;  // pointer arithmetic
   db0a4:	6831      	ldr	r1, [r6, #0]
   db0a6:	4638      	mov	r0, r7
   db0a8:	4429      	add	r1, r5
   db0aa:	f7ff ff64 	bl	daf76 <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
   db0ae:	6833      	ldr	r3, [r6, #0]
   db0b0:	f803 8004 	strb.w	r8, [r3, r4]
	return out;
}
   db0b4:	4638      	mov	r0, r7
   db0b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   db0ba:	bf00      	nop
   db0bc:	000e6bf1 	.word	0x000e6bf1

000db0c0 <_ZNK6String9substringEj>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
   db0c0:	b510      	push	{r4, lr}
   db0c2:	4604      	mov	r4, r0
	return substring(left, len);
   db0c4:	688b      	ldr	r3, [r1, #8]
   db0c6:	f7ff ffd3 	bl	db070 <_ZNK6String9substringEjj>
}
   db0ca:	4620      	mov	r0, r4
   db0cc:	bd10      	pop	{r4, pc}

000db0ce <_ZN6String11toLowerCaseEv>:
	buffer[len] = 0;
	return *this;
}

String& String::toLowerCase(void)
{
   db0ce:	b538      	push	{r3, r4, r5, lr}
	if (buffer) {
   db0d0:	6804      	ldr	r4, [r0, #0]
	buffer[len] = 0;
	return *this;
}

String& String::toLowerCase(void)
{
   db0d2:	4605      	mov	r5, r0
	if (buffer) {
   db0d4:	b134      	cbz	r4, db0e4 <_ZN6String11toLowerCaseEv+0x16>
            for (char *p = buffer; *p; p++) {
   db0d6:	7820      	ldrb	r0, [r4, #0]
   db0d8:	b120      	cbz	r0, db0e4 <_ZN6String11toLowerCaseEv+0x16>
                    *p = tolower(*p);
   db0da:	f00a f995 	bl	e5408 <tolower>
   db0de:	f804 0b01 	strb.w	r0, [r4], #1
}

String& String::toLowerCase(void)
{
	if (buffer) {
            for (char *p = buffer; *p; p++) {
   db0e2:	e7f8      	b.n	db0d6 <_ZN6String11toLowerCaseEv+0x8>
                    *p = tolower(*p);
            }
        }
        return *this;
}
   db0e4:	4628      	mov	r0, r5
   db0e6:	bd38      	pop	{r3, r4, r5, pc}

000db0e8 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   db0e8:	6800      	ldr	r0, [r0, #0]
   db0ea:	b108      	cbz	r0, db0f0 <_ZNK6String5toIntEv+0x8>
   db0ec:	f008 b933 	b.w	e3356 <atol>
	return 0;
}
   db0f0:	4770      	bx	lr
	...

000db0f4 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   db0f4:	b40e      	push	{r1, r2, r3}
   db0f6:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
   db0f8:	ac09      	add	r4, sp, #36	; 0x24
   db0fa:	4605      	mov	r5, r0
   db0fc:	f854 7b04 	ldr.w	r7, [r4], #4
    va_list marker;
    va_start(marker, fmt);
   db100:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   db102:	4623      	mov	r3, r4
   db104:	463a      	mov	r2, r7
   db106:	2105      	movs	r1, #5
   db108:	a802      	add	r0, sp, #8
   db10a:	f7ff fd2f 	bl	dab6c <vsnprintf>
    va_end(marker);

    String result;
   db10e:	490c      	ldr	r1, [pc, #48]	; (db140 <_ZN6String6formatEPKcz+0x4c>)
{
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   db110:	4606      	mov	r6, r0
    va_end(marker);

    String result;
   db112:	4628      	mov	r0, r5
   db114:	f7ff fedd 	bl	daed2 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   db118:	4631      	mov	r1, r6
   db11a:	4628      	mov	r0, r5
   db11c:	f7ff feb0 	bl	dae80 <_ZN6String7reserveEj>
    if (result.buffer) {
   db120:	6828      	ldr	r0, [r5, #0]
   db122:	b130      	cbz	r0, db132 <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   db124:	4623      	mov	r3, r4
   db126:	463a      	mov	r2, r7
   db128:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
   db12a:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   db12c:	f7ff fd1e 	bl	dab6c <vsnprintf>
        va_end(marker);
        result.len = n;
   db130:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
   db132:	4628      	mov	r0, r5
   db134:	b004      	add	sp, #16
   db136:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   db13a:	b003      	add	sp, #12
   db13c:	4770      	bx	lr
   db13e:	bf00      	nop
   db140:	000e6bf1 	.word	0x000e6bf1

000db144 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   db144:	680b      	ldr	r3, [r1, #0]
   db146:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   db148:	b113      	cbz	r3, db150 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   db14a:	685a      	ldr	r2, [r3, #4]
   db14c:	3201      	adds	r2, #1
   db14e:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   db150:	4770      	bx	lr
	...

000db154 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   db154:	4802      	ldr	r0, [pc, #8]	; (db160 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   db156:	2300      	movs	r3, #0
   db158:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   db15a:	f7ff ba57 	b.w	da60c <os_mutex_recursive_create>
   db15e:	bf00      	nop
   db160:	2003e280 	.word	0x2003e280

000db164 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   db164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db166:	4606      	mov	r6, r0
   db168:	460d      	mov	r5, r1
   db16a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   db16c:	2400      	movs	r4, #0
  while (size--) {
   db16e:	42bd      	cmp	r5, r7
   db170:	d00c      	beq.n	db18c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   db172:	6833      	ldr	r3, [r6, #0]
   db174:	f815 1b01 	ldrb.w	r1, [r5], #1
   db178:	689b      	ldr	r3, [r3, #8]
   db17a:	4630      	mov	r0, r6
   db17c:	4798      	blx	r3
     if (chunk>=0)
   db17e:	2800      	cmp	r0, #0
   db180:	db01      	blt.n	db186 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   db182:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   db184:	e7f3      	b.n	db16e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   db186:	2c00      	cmp	r4, #0
   db188:	bf08      	it	eq
   db18a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   db18c:	4620      	mov	r0, r4
   db18e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000db190 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   db190:	b570      	push	{r4, r5, r6, lr}
   db192:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   db194:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   db196:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   db198:	b149      	cbz	r1, db1ae <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   db19a:	f009 f9b7 	bl	e450c <strlen>
   db19e:	682b      	ldr	r3, [r5, #0]
   db1a0:	4602      	mov	r2, r0
   db1a2:	4621      	mov	r1, r4
   db1a4:	4628      	mov	r0, r5
   db1a6:	68db      	ldr	r3, [r3, #12]
    }
   db1a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   db1ac:	4718      	bx	r3
    }
   db1ae:	bd70      	pop	{r4, r5, r6, pc}

000db1b0 <_ZN5Print5printEPKc>:
   db1b0:	b508      	push	{r3, lr}
   db1b2:	f7ff ffed 	bl	db190 <_ZN5Print5writeEPKc>
   db1b6:	bd08      	pop	{r3, pc}

000db1b8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   db1b8:	6803      	ldr	r3, [r0, #0]
   db1ba:	689b      	ldr	r3, [r3, #8]
   db1bc:	4718      	bx	r3

000db1be <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   db1be:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   db1c0:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   db1c2:	4605      	mov	r5, r0
  size_t n = print('\r');
   db1c4:	f7ff fff8 	bl	db1b8 <_ZN5Print5printEc>
  n += print('\n');
   db1c8:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   db1ca:	4604      	mov	r4, r0
  n += print('\n');
   db1cc:	4628      	mov	r0, r5
   db1ce:	f7ff fff3 	bl	db1b8 <_ZN5Print5printEc>
  return n;
}
   db1d2:	4420      	add	r0, r4
   db1d4:	bd38      	pop	{r3, r4, r5, pc}

000db1d6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   db1d6:	b538      	push	{r3, r4, r5, lr}
   db1d8:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   db1da:	f7ff ffd9 	bl	db190 <_ZN5Print5writeEPKc>
   db1de:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   db1e0:	4628      	mov	r0, r5
   db1e2:	f7ff ffec 	bl	db1be <_ZN5Print7printlnEv>
  return n;
}
   db1e6:	4420      	add	r0, r4
   db1e8:	bd38      	pop	{r3, r4, r5, pc}

000db1ea <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   db1ea:	b530      	push	{r4, r5, lr}
   db1ec:	b08b      	sub	sp, #44	; 0x2c
   db1ee:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   db1f0:	2100      	movs	r1, #0
   db1f2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   db1f6:	2a01      	cmp	r2, #1
   db1f8:	bf98      	it	ls
   db1fa:	220a      	movls	r2, #10
   db1fc:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   db200:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   db204:	fb05 3312 	mls	r3, r5, r2, r3
   db208:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   db20c:	2b09      	cmp	r3, #9
   db20e:	bf94      	ite	ls
   db210:	3330      	addls	r3, #48	; 0x30
   db212:	3337      	addhi	r3, #55	; 0x37
   db214:	b2db      	uxtb	r3, r3
   db216:	4621      	mov	r1, r4
   db218:	f804 3901 	strb.w	r3, [r4], #-1
   db21c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   db21e:	2d00      	cmp	r5, #0
   db220:	d1ee      	bne.n	db200 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   db222:	f7ff ffb5 	bl	db190 <_ZN5Print5writeEPKc>
}
   db226:	b00b      	add	sp, #44	; 0x2c
   db228:	bd30      	pop	{r4, r5, pc}

000db22a <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   db22a:	b410      	push	{r4}
  if (base == 0) return write(n);
   db22c:	b92a      	cbnz	r2, db23a <_ZN5Print5printEmi+0x10>
   db22e:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   db230:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   db234:	689b      	ldr	r3, [r3, #8]
   db236:	b2c9      	uxtb	r1, r1
   db238:	4718      	bx	r3
  else return printNumber(n, base);
   db23a:	b2d2      	uxtb	r2, r2
}
   db23c:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   db240:	f7ff bfd3 	b.w	db1ea <_ZN5Print11printNumberEmh>

000db244 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   db244:	f7ff bff1 	b.w	db22a <_ZN5Print5printEmi>

000db248 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
   db248:	b538      	push	{r3, r4, r5, lr}
   db24a:	4605      	mov	r5, r0
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   db24c:	f7ff ffed 	bl	db22a <_ZN5Print5printEmi>
   db250:	4604      	mov	r4, r0
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
   db252:	4628      	mov	r0, r5
   db254:	f7ff ffb3 	bl	db1be <_ZN5Print7printlnEv>
  return n;
}
   db258:	4420      	add	r0, r4
   db25a:	bd38      	pop	{r3, r4, r5, pc}

000db25c <_ZN5Print5printEji>:
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
   db25c:	f7ff bfe5 	b.w	db22a <_ZN5Print5printEmi>

000db260 <_ZN5Print7printlnEji>:
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
{
   db260:	b538      	push	{r3, r4, r5, lr}
   db262:	4605      	mov	r5, r0
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
   db264:	f7ff ffe1 	bl	db22a <_ZN5Print5printEmi>
   db268:	4604      	mov	r4, r0
}

size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
   db26a:	4628      	mov	r0, r5
   db26c:	f7ff ffa7 	bl	db1be <_ZN5Print7printlnEv>
  return n;
}
   db270:	4420      	add	r0, r4
   db272:	bd38      	pop	{r3, r4, r5, pc}

000db274 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
   db274:	b538      	push	{r3, r4, r5, lr}
   db276:	4605      	mov	r5, r0
  size_t n = print(num, base);
   db278:	f7ff ffd7 	bl	db22a <_ZN5Print5printEmi>
   db27c:	4604      	mov	r4, r0
  n += println();
   db27e:	4628      	mov	r0, r5
   db280:	f7ff ff9d 	bl	db1be <_ZN5Print7printlnEv>
  return n;
}
   db284:	4420      	add	r0, r4
   db286:	bd38      	pop	{r3, r4, r5, pc}

000db288 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   db288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db28c:	4607      	mov	r7, r0
   db28e:	460e      	mov	r6, r1
  if (base == 0) {
   db290:	4615      	mov	r5, r2
   db292:	b92a      	cbnz	r2, db2a0 <_ZN5Print5printEli+0x18>
    return write(n);
   db294:	6803      	ldr	r3, [r0, #0]
   db296:	b2c9      	uxtb	r1, r1
   db298:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   db29a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   db29e:	4718      	bx	r3
  } else if (base == 10) {
   db2a0:	2a0a      	cmp	r2, #10
   db2a2:	d102      	bne.n	db2aa <_ZN5Print5printEli+0x22>
    if (n < 0) {
   db2a4:	2900      	cmp	r1, #0
   db2a6:	da01      	bge.n	db2ac <_ZN5Print5printEli+0x24>
   db2a8:	e004      	b.n	db2b4 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   db2aa:	b2d2      	uxtb	r2, r2
  }
}
   db2ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   db2b0:	f7ff bf9b 	b.w	db1ea <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   db2b4:	212d      	movs	r1, #45	; 0x2d
   db2b6:	f7ff ff7f 	bl	db1b8 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   db2ba:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   db2bc:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   db2be:	4271      	negs	r1, r6
   db2c0:	4638      	mov	r0, r7
   db2c2:	f7ff ff92 	bl	db1ea <_ZN5Print11printNumberEmh>
   db2c6:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   db2c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000db2cc <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
   db2cc:	b538      	push	{r3, r4, r5, lr}
   db2ce:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   db2d0:	f7ff ffda 	bl	db288 <_ZN5Print5printEli>
   db2d4:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
   db2d6:	4628      	mov	r0, r5
   db2d8:	f7ff ff71 	bl	db1be <_ZN5Print7printlnEv>
  return n;
}
   db2dc:	4420      	add	r0, r4
   db2de:	bd38      	pop	{r3, r4, r5, pc}

000db2e0 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   db2e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db2e4:	ec57 6b10 	vmov	r6, r7, d0
   db2e8:	4682      	mov	sl, r0
   db2ea:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   db2ec:	ee10 2a10 	vmov	r2, s0
   db2f0:	463b      	mov	r3, r7
   db2f2:	ee10 0a10 	vmov	r0, s0
   db2f6:	4639      	mov	r1, r7
   db2f8:	f007 ff3c 	bl	e3174 <__aeabi_dcmpun>
   db2fc:	b108      	cbz	r0, db302 <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   db2fe:	4948      	ldr	r1, [pc, #288]	; (db420 <_ZN5Print10printFloatEdh+0x140>)
   db300:	e012      	b.n	db328 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   db302:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   db306:	f04f 32ff 	mov.w	r2, #4294967295
   db30a:	4b46      	ldr	r3, [pc, #280]	; (db424 <_ZN5Print10printFloatEdh+0x144>)
   db30c:	4630      	mov	r0, r6
   db30e:	4649      	mov	r1, r9
   db310:	f007 ff30 	bl	e3174 <__aeabi_dcmpun>
   db314:	b968      	cbnz	r0, db332 <_ZN5Print10printFloatEdh+0x52>
   db316:	f04f 32ff 	mov.w	r2, #4294967295
   db31a:	4b42      	ldr	r3, [pc, #264]	; (db424 <_ZN5Print10printFloatEdh+0x144>)
   db31c:	4630      	mov	r0, r6
   db31e:	4649      	mov	r1, r9
   db320:	f007 ff0a 	bl	e3138 <__aeabi_dcmple>
   db324:	b928      	cbnz	r0, db332 <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   db326:	4940      	ldr	r1, [pc, #256]	; (db428 <_ZN5Print10printFloatEdh+0x148>)
   db328:	4650      	mov	r0, sl
   db32a:	f7ff ff31 	bl	db190 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   db32e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   db332:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   db336:	4b3d      	ldr	r3, [pc, #244]	; (db42c <_ZN5Print10printFloatEdh+0x14c>)
   db338:	4630      	mov	r0, r6
   db33a:	4639      	mov	r1, r7
   db33c:	f007 ff10 	bl	e3160 <__aeabi_dcmpgt>
   db340:	b108      	cbz	r0, db346 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   db342:	493b      	ldr	r1, [pc, #236]	; (db430 <_ZN5Print10printFloatEdh+0x150>)
   db344:	e7f0      	b.n	db328 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   db346:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   db34a:	4b3a      	ldr	r3, [pc, #232]	; (db434 <_ZN5Print10printFloatEdh+0x154>)
   db34c:	4630      	mov	r0, r6
   db34e:	4639      	mov	r1, r7
   db350:	f007 fee8 	bl	e3124 <__aeabi_dcmplt>
   db354:	2800      	cmp	r0, #0
   db356:	d1f4      	bne.n	db342 <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   db358:	2200      	movs	r2, #0
   db35a:	2300      	movs	r3, #0
   db35c:	4630      	mov	r0, r6
   db35e:	4639      	mov	r1, r7
   db360:	f007 fee0 	bl	e3124 <__aeabi_dcmplt>
   db364:	b140      	cbz	r0, db378 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   db366:	212d      	movs	r1, #45	; 0x2d
   db368:	4650      	mov	r0, sl
   db36a:	f7ff ff25 	bl	db1b8 <_ZN5Print5printEc>
     number = -number;
   db36e:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   db372:	4604      	mov	r4, r0
     number = -number;
   db374:	461f      	mov	r7, r3
   db376:	e000      	b.n	db37a <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   db378:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   db37a:	492f      	ldr	r1, [pc, #188]	; (db438 <_ZN5Print10printFloatEdh+0x158>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   db37c:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   db380:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   db382:	fa5f f388 	uxtb.w	r3, r8
   db386:	429d      	cmp	r5, r3
   db388:	d906      	bls.n	db398 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   db38a:	2200      	movs	r2, #0
   db38c:	4b2b      	ldr	r3, [pc, #172]	; (db43c <_ZN5Print10printFloatEdh+0x15c>)
   db38e:	f007 fd81 	bl	e2e94 <__aeabi_ddiv>
   db392:	f108 0801 	add.w	r8, r8, #1
   db396:	e7f4      	b.n	db382 <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   db398:	4632      	mov	r2, r6
   db39a:	463b      	mov	r3, r7
   db39c:	f007 fa9e 	bl	e28dc <__adddf3>
   db3a0:	460f      	mov	r7, r1
   db3a2:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   db3a4:	f007 ff24 	bl	e31f0 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   db3a8:	220a      	movs	r2, #10
   db3aa:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   db3ac:	4680      	mov	r8, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   db3ae:	4650      	mov	r0, sl
   db3b0:	f7ff ff1b 	bl	db1ea <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   db3b4:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   db3b6:	b37d      	cbz	r5, db418 <_ZN5Print10printFloatEdh+0x138>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   db3b8:	4640      	mov	r0, r8
   db3ba:	f007 fbcb 	bl	e2b54 <__aeabi_ui2d>
   db3be:	4602      	mov	r2, r0
   db3c0:	460b      	mov	r3, r1
   db3c2:	4630      	mov	r0, r6
   db3c4:	4639      	mov	r1, r7
   db3c6:	f007 fa87 	bl	e28d8 <__aeabi_dsub>
   db3ca:	4606      	mov	r6, r0
   db3cc:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   db3ce:	4650      	mov	r0, sl
   db3d0:	491b      	ldr	r1, [pc, #108]	; (db440 <_ZN5Print10printFloatEdh+0x160>)
   db3d2:	f7ff fedd 	bl	db190 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   db3d6:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   db3d8:	4b18      	ldr	r3, [pc, #96]	; (db43c <_ZN5Print10printFloatEdh+0x15c>)
   db3da:	2200      	movs	r2, #0
   db3dc:	4630      	mov	r0, r6
   db3de:	4639      	mov	r1, r7
   db3e0:	f007 fc2e 	bl	e2c40 <__aeabi_dmul>
   db3e4:	460f      	mov	r7, r1
   db3e6:	4606      	mov	r6, r0
    int toPrint = int(remainder);
   db3e8:	f007 feda 	bl	e31a0 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   db3ec:	220a      	movs	r2, #10
   db3ee:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
   db3f0:	4680      	mov	r8, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   db3f2:	4650      	mov	r0, sl
   db3f4:	f7ff ff48 	bl	db288 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
   db3f8:	4404      	add	r4, r0
    remainder -= toPrint;
   db3fa:	4640      	mov	r0, r8
   db3fc:	f007 fbba 	bl	e2b74 <__aeabi_i2d>
   db400:	4602      	mov	r2, r0
   db402:	460b      	mov	r3, r1
   db404:	4630      	mov	r0, r6
   db406:	4639      	mov	r1, r7
   db408:	f007 fa66 	bl	e28d8 <__aeabi_dsub>
   db40c:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   db40e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   db412:	4606      	mov	r6, r0
   db414:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   db416:	d1df      	bne.n	db3d8 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   db418:	4620      	mov	r0, r4
   db41a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db41e:	bf00      	nop
   db420:	000e7d20 	.word	0x000e7d20
   db424:	7fefffff 	.word	0x7fefffff
   db428:	000e7d28 	.word	0x000e7d28
   db42c:	41efffff 	.word	0x41efffff
   db430:	000e7d24 	.word	0x000e7d24
   db434:	c1efffff 	.word	0xc1efffff
   db438:	3fe00000 	.word	0x3fe00000
   db43c:	40240000 	.word	0x40240000
   db440:	000e6ec1 	.word	0x000e6ec1

000db444 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   db444:	b2c9      	uxtb	r1, r1
   db446:	f7ff bf4b 	b.w	db2e0 <_ZN5Print10printFloatEdh>

000db44a <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   db44a:	b538      	push	{r3, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   db44c:	b2c9      	uxtb	r1, r1
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   db44e:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   db450:	f7ff ff46 	bl	db2e0 <_ZN5Print10printFloatEdh>
   db454:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   db456:	4628      	mov	r0, r5
   db458:	f7ff feb1 	bl	db1be <_ZN5Print7printlnEv>
  return n;
}
   db45c:	4420      	add	r0, r4
   db45e:	bd38      	pop	{r3, r4, r5, pc}

000db460 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   db460:	b40c      	push	{r2, r3}
   db462:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   db466:	b087      	sub	sp, #28
   db468:	af00      	add	r7, sp, #0
   db46a:	f107 0438 	add.w	r4, r7, #56	; 0x38
   db46e:	4605      	mov	r5, r0
   db470:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   db474:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   db476:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   db478:	4623      	mov	r3, r4
   db47a:	464a      	mov	r2, r9
   db47c:	2114      	movs	r1, #20
   db47e:	1d38      	adds	r0, r7, #4
   db480:	f7ff fb74 	bl	dab6c <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   db484:	2813      	cmp	r0, #19
   db486:	d805      	bhi.n	db494 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   db488:	1d39      	adds	r1, r7, #4
   db48a:	4628      	mov	r0, r5
   db48c:	f7ff fe80 	bl	db190 <_ZN5Print5writeEPKc>
   db490:	4604      	mov	r4, r0
   db492:	e013      	b.n	db4bc <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   db494:	f100 0308 	add.w	r3, r0, #8
   db498:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   db49c:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   db49e:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   db4a2:	1c41      	adds	r1, r0, #1
   db4a4:	4623      	mov	r3, r4
   db4a6:	464a      	mov	r2, r9
   db4a8:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   db4aa:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   db4ac:	f7ff fb5e 	bl	dab6c <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   db4b0:	4669      	mov	r1, sp
   db4b2:	4628      	mov	r0, r5
   db4b4:	f7ff fe6c 	bl	db190 <_ZN5Print5writeEPKc>
   db4b8:	4604      	mov	r4, r0
   db4ba:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   db4bc:	b11e      	cbz	r6, db4c6 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   db4be:	4628      	mov	r0, r5
   db4c0:	f7ff fe7d 	bl	db1be <_ZN5Print7printlnEv>
   db4c4:	4404      	add	r4, r0
    return n;
}
   db4c6:	4620      	mov	r0, r4
   db4c8:	371c      	adds	r7, #28
   db4ca:	46bd      	mov	sp, r7
   db4cc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   db4d0:	b002      	add	sp, #8
   db4d2:	4770      	bx	lr

000db4d4 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   db4d4:	b510      	push	{r4, lr}
   db4d6:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   db4d8:	f7ff f848 	bl	da56c <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   db4dc:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   db4de:	6823      	ldr	r3, [r4, #0]
   db4e0:	4620      	mov	r0, r4
   db4e2:	695b      	ldr	r3, [r3, #20]
   db4e4:	4798      	blx	r3
    if (c >= 0) return c;
   db4e6:	2800      	cmp	r0, #0
   db4e8:	da08      	bge.n	db4fc <_ZN6Stream9timedReadEv+0x28>
   db4ea:	f7ff f83f 	bl	da56c <HAL_Timer_Get_Milli_Seconds>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
   db4ee:	68e3      	ldr	r3, [r4, #12]
   db4f0:	1ac0      	subs	r0, r0, r3
   db4f2:	68a3      	ldr	r3, [r4, #8]
   db4f4:	4298      	cmp	r0, r3
   db4f6:	d3f2      	bcc.n	db4de <_ZN6Stream9timedReadEv+0xa>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
   db4f8:	f04f 30ff 	mov.w	r0, #4294967295
}
   db4fc:	bd10      	pop	{r4, pc}

000db4fe <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   db4fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db502:	4680      	mov	r8, r0
   db504:	460d      	mov	r5, r1
   db506:	188f      	adds	r7, r1, r2
   db508:	460c      	mov	r4, r1
  size_t count = 0;
  while (count < length) {
   db50a:	42bc      	cmp	r4, r7
   db50c:	eba4 0605 	sub.w	r6, r4, r5
   db510:	d007      	beq.n	db522 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   db512:	4640      	mov	r0, r8
   db514:	f7ff ffde 	bl	db4d4 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   db518:	2800      	cmp	r0, #0
   db51a:	db02      	blt.n	db522 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   db51c:	f804 0b01 	strb.w	r0, [r4], #1
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
  size_t count = 0;
  while (count < length) {
   db520:	e7f3      	b.n	db50a <_ZN6Stream9readBytesEPcj+0xc>
    if (c < 0) break;
    *buffer++ = (char)c;
    count++;
  }
  return count;
}
   db522:	4630      	mov	r0, r6
   db524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000db528 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   db528:	4b01      	ldr	r3, [pc, #4]	; (db530 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   db52a:	4a02      	ldr	r2, [pc, #8]	; (db534 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   db52c:	601a      	str	r2, [r3, #0]
   db52e:	4770      	bx	lr
   db530:	2003e284 	.word	0x2003e284
   db534:	000e7d9f 	.word	0x000e7d9f

000db538 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   db538:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   db53a:	4b14      	ldr	r3, [pc, #80]	; (db58c <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   db53c:	4f14      	ldr	r7, [pc, #80]	; (db590 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   db53e:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   db540:	4b14      	ldr	r3, [pc, #80]	; (db594 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   db542:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   db544:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   db546:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   db548:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   db54a:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   db54c:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   db54e:	d01b      	beq.n	db588 <_ZL22Refresh_UnixTime_Cachel+0x50>
   db550:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   db552:	ad01      	add	r5, sp, #4
   db554:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   db558:	f007 ff10 	bl	e337c <localtime>
	calendar_time->tm_year += 1900;
   db55c:	6943      	ldr	r3, [r0, #20]
   db55e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   db562:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   db564:	4604      	mov	r4, r0
   db566:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   db568:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   db56a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   db56c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   db56e:	f8d4 e000 	ldr.w	lr, [r4]
   db572:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   db576:	ad01      	add	r5, sp, #4
   db578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   db57a:	4c07      	ldr	r4, [pc, #28]	; (db598 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   db57c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   db57e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   db580:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   db582:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   db584:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   db588:	b00b      	add	sp, #44	; 0x2c
   db58a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db58c:	2003e2bc 	.word	0x2003e2bc
   db590:	2003e2b8 	.word	0x2003e2b8
   db594:	2003e2b4 	.word	0x2003e2b4
   db598:	2003e288 	.word	0x2003e288

000db59c <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   db59c:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   db59e:	2000      	movs	r0, #0
   db5a0:	f7ff fa9c 	bl	daadc <spark_sync_time_pending>
   db5a4:	b128      	cbz	r0, db5b2 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   db5a6:	f7ff fa81 	bl	daaac <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   db5aa:	f080 0001 	eor.w	r0, r0, #1
   db5ae:	b2c0      	uxtb	r0, r0
   db5b0:	bd08      	pop	{r3, pc}
   db5b2:	2001      	movs	r0, #1
    }
   db5b4:	bd08      	pop	{r3, pc}
	...

000db5b8 <_ZN9TimeClass4hourEl>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   db5b8:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   db5ba:	f7ff ffbd 	bl	db538 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_hour;
}
   db5be:	4b01      	ldr	r3, [pc, #4]	; (db5c4 <_ZN9TimeClass4hourEl+0xc>)
   db5c0:	6898      	ldr	r0, [r3, #8]
   db5c2:	bd08      	pop	{r3, pc}
   db5c4:	2003e288 	.word	0x2003e288

000db5c8 <_ZN9TimeClass6minuteEl>:
	return minute(now());
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
   db5c8:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   db5ca:	f7ff ffb5 	bl	db538 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_min;
}
   db5ce:	4b01      	ldr	r3, [pc, #4]	; (db5d4 <_ZN9TimeClass6minuteEl+0xc>)
   db5d0:	6858      	ldr	r0, [r3, #4]
   db5d2:	bd08      	pop	{r3, pc}
   db5d4:	2003e288 	.word	0x2003e288

000db5d8 <_ZN9TimeClass6secondEl>:
	return second(now());
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
   db5d8:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   db5da:	f7ff ffad 	bl	db538 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_sec;
}
   db5de:	4b01      	ldr	r3, [pc, #4]	; (db5e4 <_ZN9TimeClass6secondEl+0xc>)
   db5e0:	6818      	ldr	r0, [r3, #0]
   db5e2:	bd08      	pop	{r3, pc}
   db5e4:	2003e288 	.word	0x2003e288

000db5e8 <_ZN9TimeClass3dayEl>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   db5e8:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   db5ea:	f7ff ffa5 	bl	db538 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_mday;
}
   db5ee:	4b01      	ldr	r3, [pc, #4]	; (db5f4 <_ZN9TimeClass3dayEl+0xc>)
   db5f0:	68d8      	ldr	r0, [r3, #12]
   db5f2:	bd08      	pop	{r3, pc}
   db5f4:	2003e288 	.word	0x2003e288

000db5f8 <_ZN9TimeClass7weekdayEl>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
   db5f8:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   db5fa:	f7ff ff9d 	bl	db538 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
   db5fe:	4b02      	ldr	r3, [pc, #8]	; (db608 <_ZN9TimeClass7weekdayEl+0x10>)
   db600:	6998      	ldr	r0, [r3, #24]
}
   db602:	3001      	adds	r0, #1
   db604:	bd08      	pop	{r3, pc}
   db606:	bf00      	nop
   db608:	2003e288 	.word	0x2003e288

000db60c <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   db60c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   db60e:	f7ff ff93 	bl	db538 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   db612:	4b02      	ldr	r3, [pc, #8]	; (db61c <_ZN9TimeClass5monthEl+0x10>)
   db614:	6918      	ldr	r0, [r3, #16]
}
   db616:	3001      	adds	r0, #1
   db618:	bd08      	pop	{r3, pc}
   db61a:	bf00      	nop
   db61c:	2003e288 	.word	0x2003e288

000db620 <_ZN9TimeClass4yearEl>:
	return year(now());
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
   db620:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   db622:	f7ff ff89 	bl	db538 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_year;
}
   db626:	4b01      	ldr	r3, [pc, #4]	; (db62c <_ZN9TimeClass4yearEl+0xc>)
   db628:	6958      	ldr	r0, [r3, #20]
   db62a:	bd08      	pop	{r3, pc}
   db62c:	2003e288 	.word	0x2003e288

000db630 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   db630:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   db632:	4b0e      	ldr	r3, [pc, #56]	; (db66c <_ZN9TimeClass7timeStrEl+0x3c>)
   db634:	681b      	ldr	r3, [r3, #0]
   db636:	4419      	add	r1, r3
   db638:	4b0d      	ldr	r3, [pc, #52]	; (db670 <_ZN9TimeClass7timeStrEl+0x40>)
   db63a:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   db63c:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   db63e:	a802      	add	r0, sp, #8
   db640:	4419      	add	r1, r3
   db642:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   db646:	f007 fe99 	bl	e337c <localtime>
        char* ascstr = asctime(calendar_time);
   db64a:	f007 fe41 	bl	e32d0 <asctime>
   db64e:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   db650:	f008 ff5c 	bl	e450c <strlen>
        ascstr[len-1] = 0; // remove final newline
   db654:	4428      	add	r0, r5
   db656:	2300      	movs	r3, #0
   db658:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   db65c:	4629      	mov	r1, r5
   db65e:	4620      	mov	r0, r4
   db660:	f7ff fc37 	bl	daed2 <_ZN6StringC1EPK19__FlashStringHelper>
}
   db664:	4620      	mov	r0, r4
   db666:	b003      	add	sp, #12
   db668:	bd30      	pop	{r4, r5, pc}
   db66a:	bf00      	nop
   db66c:	2003e2bc 	.word	0x2003e2bc
   db670:	2003e2b4 	.word	0x2003e2b4

000db674 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   db674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db678:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    strcpy(format_str, format);
   db67a:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   db67c:	4607      	mov	r7, r0
   db67e:	4689      	mov	r9, r1
    char format_str[64];
    strcpy(format_str, format);
   db680:	4620      	mov	r0, r4
   db682:	4611      	mov	r1, r2
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   db684:	461d      	mov	r5, r3
    char format_str[64];
    strcpy(format_str, format);
   db686:	f008 fa09 	bl	e3a9c <strcpy>
    size_t len = strlen(format_str);
   db68a:	4620      	mov	r0, r4
   db68c:	f008 ff3e 	bl	e450c <strlen>
   db690:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   db692:	b925      	cbnz	r5, db69e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2a>
        strcpy(time_zone_str, "Z");
   db694:	4924      	ldr	r1, [pc, #144]	; (db728 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb4>)
   db696:	a803      	add	r0, sp, #12
   db698:	f008 fa00 	bl	e3a9c <strcpy>
   db69c:	e013      	b.n	db6c6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x52>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   db69e:	213c      	movs	r1, #60	; 0x3c
   db6a0:	fb95 f2f1 	sdiv	r2, r5, r1
   db6a4:	2a00      	cmp	r2, #0
   db6a6:	bfb8      	it	lt
   db6a8:	4252      	neglt	r2, r2
   db6aa:	fb92 f3f1 	sdiv	r3, r2, r1
   db6ae:	fb01 2213 	mls	r2, r1, r3, r2
   db6b2:	9200      	str	r2, [sp, #0]
   db6b4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   db6b8:	4a1c      	ldr	r2, [pc, #112]	; (db72c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb8>)
   db6ba:	fb95 f3f3 	sdiv	r3, r5, r3
   db6be:	2110      	movs	r1, #16
   db6c0:	a803      	add	r0, sp, #12
   db6c2:	f7ff fa43 	bl	dab4c <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   db6c6:	4625      	mov	r5, r4
   db6c8:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   db6ca:	f108 3aff 	add.w	sl, r8, #4294967295
   db6ce:	45b2      	cmp	sl, r6
   db6d0:	d91b      	bls.n	db70a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x96>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   db6d2:	782b      	ldrb	r3, [r5, #0]
   db6d4:	2b25      	cmp	r3, #37	; 0x25
   db6d6:	d116      	bne.n	db706 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
   db6d8:	786b      	ldrb	r3, [r5, #1]
   db6da:	2b7a      	cmp	r3, #122	; 0x7a
   db6dc:	d113      	bne.n	db706 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
        {
            size_t tzlen = strlen(time_zone_str);
   db6de:	a803      	add	r0, sp, #12
   db6e0:	f008 ff14 	bl	e450c <strlen>
   db6e4:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   db6e6:	4430      	add	r0, r6
   db6e8:	ebc6 020a 	rsb	r2, r6, sl
   db6ec:	1ca9      	adds	r1, r5, #2
   db6ee:	4420      	add	r0, r4
   db6f0:	f007 ff40 	bl	e3574 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   db6f4:	4642      	mov	r2, r8
   db6f6:	a903      	add	r1, sp, #12
   db6f8:	4628      	mov	r0, r5
   db6fa:	f007 ff3b 	bl	e3574 <memcpy>
            len = strlen(format_str);
   db6fe:	4620      	mov	r0, r4
   db700:	f008 ff04 	bl	e450c <strlen>
   db704:	4680      	mov	r8, r0
   db706:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   db708:	e7de      	b.n	db6c8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x54>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
   db70a:	464b      	mov	r3, r9
   db70c:	4622      	mov	r2, r4
   db70e:	2132      	movs	r1, #50	; 0x32
   db710:	a807      	add	r0, sp, #28
   db712:	f008 fa47 	bl	e3ba4 <strftime>
    return String(buf);
   db716:	a907      	add	r1, sp, #28
   db718:	4638      	mov	r0, r7
   db71a:	f7ff fbda 	bl	daed2 <_ZN6StringC1EPK19__FlashStringHelper>
}
   db71e:	4638      	mov	r0, r7
   db720:	b024      	add	sp, #144	; 0x90
   db722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db726:	bf00      	nop
   db728:	000e882d 	.word	0x000e882d
   db72c:	000e7df3 	.word	0x000e7df3

000db730 <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
   db730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   db732:	4605      	mov	r5, r0
   db734:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
   db736:	461c      	mov	r4, r3
   db738:	b913      	cbnz	r3, db740 <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
   db73a:	4b12      	ldr	r3, [pc, #72]	; (db784 <_ZN9TimeClass6formatElPKc+0x54>)
   db73c:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
   db73e:	b12c      	cbz	r4, db74c <_ZN9TimeClass6formatElPKc+0x1c>
   db740:	4b11      	ldr	r3, [pc, #68]	; (db788 <_ZN9TimeClass6formatElPKc+0x58>)
   db742:	4620      	mov	r0, r4
   db744:	6819      	ldr	r1, [r3, #0]
   db746:	f008 f99f 	bl	e3a88 <strcmp>
   db74a:	b920      	cbnz	r0, db756 <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
   db74c:	9901      	ldr	r1, [sp, #4]
   db74e:	4628      	mov	r0, r5
   db750:	f7ff ff6e 	bl	db630 <_ZN9TimeClass7timeStrEl>
   db754:	e013      	b.n	db77e <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
   db756:	4f0d      	ldr	r7, [pc, #52]	; (db78c <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
   db758:	9a01      	ldr	r2, [sp, #4]
   db75a:	683b      	ldr	r3, [r7, #0]
   db75c:	4e0c      	ldr	r6, [pc, #48]	; (db790 <_ZN9TimeClass6formatElPKc+0x60>)
   db75e:	441a      	add	r2, r3
   db760:	6833      	ldr	r3, [r6, #0]
   db762:	a802      	add	r0, sp, #8
   db764:	4413      	add	r3, r2
   db766:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
   db76a:	f007 fe07 	bl	e337c <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
   db76e:	683a      	ldr	r2, [r7, #0]
   db770:	6833      	ldr	r3, [r6, #0]
   db772:	4601      	mov	r1, r0
   db774:	4413      	add	r3, r2
   db776:	4628      	mov	r0, r5
   db778:	4622      	mov	r2, r4
   db77a:	f7ff ff7b 	bl	db674 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
   db77e:	4628      	mov	r0, r5
   db780:	b003      	add	sp, #12
   db782:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db784:	2003e2b0 	.word	0x2003e2b0
   db788:	2003d5b8 	.word	0x2003d5b8
   db78c:	2003e2bc 	.word	0x2003e2bc
   db790:	2003e2b4 	.word	0x2003e2b4

000db794 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   db794:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   db796:	2000      	movs	r0, #0
   db798:	f7fe fef8 	bl	da58c <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   db79c:	4604      	mov	r4, r0
   db79e:	b968      	cbnz	r0, db7bc <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   db7a0:	f7ff f8c6 	bl	da930 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   db7a4:	2801      	cmp	r0, #1
   db7a6:	d10b      	bne.n	db7c0 <_ZN9TimeClass7isValidEv+0x2c>
   db7a8:	4620      	mov	r0, r4
   db7aa:	f7ff f8f1 	bl	da990 <system_thread_get_state>
   db7ae:	b938      	cbnz	r0, db7c0 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   db7b0:	f7ff fef4 	bl	db59c <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   db7b4:	b930      	cbnz	r0, db7c4 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   db7b6:	f7ff f969 	bl	daa8c <spark_process>
   db7ba:	e7f9      	b.n	db7b0 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   db7bc:	2001      	movs	r0, #1
   db7be:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   db7c0:	2000      	movs	r0, #0
   db7c2:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   db7c4:	f7ff feea 	bl	db59c <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   db7c8:	2000      	movs	r0, #0
   db7ca:	f7fe fedf 	bl	da58c <HAL_RTC_Time_Is_Valid>
   db7ce:	3000      	adds	r0, #0
   db7d0:	bf18      	it	ne
   db7d2:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   db7d4:	bd10      	pop	{r4, pc}

000db7d6 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   db7d6:	b508      	push	{r3, lr}
    (void)isValid();
   db7d8:	f7ff ffdc 	bl	db794 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   db7dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   db7e0:	f7fe becc 	b.w	da57c <HAL_RTC_Get_UnixTime>

000db7e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   db7e4:	4b02      	ldr	r3, [pc, #8]	; (db7f0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   db7e6:	681a      	ldr	r2, [r3, #0]
   db7e8:	4b02      	ldr	r3, [pc, #8]	; (db7f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   db7ea:	601a      	str	r2, [r3, #0]
   db7ec:	4770      	bx	lr
   db7ee:	bf00      	nop
   db7f0:	2003d5b8 	.word	0x2003d5b8
   db7f4:	2003e2b0 	.word	0x2003e2b0

000db7f8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   db7f8:	2100      	movs	r1, #0
   db7fa:	f7ff b8a9 	b.w	da950 <system_delay_ms>

000db7fe <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.12>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   db7fe:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   db800:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   db802:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   db804:	689b      	ldr	r3, [r3, #8]
   db806:	4798      	blx	r3
          if (--_M_weak_count == 0)
   db808:	68a3      	ldr	r3, [r4, #8]
   db80a:	3b01      	subs	r3, #1
   db80c:	60a3      	str	r3, [r4, #8]
   db80e:	b92b      	cbnz	r3, db81c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.12+0x1e>
            _M_destroy();
   db810:	6823      	ldr	r3, [r4, #0]
   db812:	4620      	mov	r0, r4
   db814:	68db      	ldr	r3, [r3, #12]
        }
    }
   db816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   db81a:	4718      	bx	r3
   db81c:	bd10      	pop	{r4, pc}
	...

000db820 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   db820:	b510      	push	{r4, lr}
   db822:	4b06      	ldr	r3, [pc, #24]	; (db83c <_ZN9TCPClientD1Ev+0x1c>)
   db824:	6003      	str	r3, [r0, #0]
   db826:	4604      	mov	r4, r0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   db828:	6980      	ldr	r0, [r0, #24]
   db82a:	b128      	cbz	r0, db838 <_ZN9TCPClientD1Ev+0x18>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   db82c:	6843      	ldr	r3, [r0, #4]
   db82e:	3b01      	subs	r3, #1
   db830:	6043      	str	r3, [r0, #4]
   db832:	b90b      	cbnz	r3, db838 <_ZN9TCPClientD1Ev+0x18>
   db834:	f7ff ffe3 	bl	db7fe <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.12>
   db838:	4620      	mov	r0, r4
   db83a:	bd10      	pop	{r4, pc}
   db83c:	000e7f2c 	.word	0x000e7f2c

000db840 <_ZN9TCPClientD0Ev>:
   db840:	b510      	push	{r4, lr}
   db842:	4604      	mov	r4, r0
   db844:	f7ff ffec 	bl	db820 <_ZN9TCPClientD1Ev>
   db848:	4620      	mov	r0, r4
   db84a:	211c      	movs	r1, #28
   db84c:	f001 fbf5 	bl	dd03a <_ZdlPvj>
   db850:	4620      	mov	r0, r4
   db852:	bd10      	pop	{r4, pc}

000db854 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   db854:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   db856:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   db858:	4604      	mov	r4, r0
    {
      if (_M_manager)
   db85a:	b113      	cbz	r3, db862 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   db85c:	2203      	movs	r2, #3
   db85e:	4601      	mov	r1, r0
   db860:	4798      	blx	r3
    }
   db862:	4620      	mov	r0, r4
   db864:	bd10      	pop	{r4, pc}

000db866 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   db866:	b510      	push	{r4, lr}
   db868:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   db86a:	f7ff fff3 	bl	db854 <_ZNSt14_Function_baseD1Ev>
   db86e:	4620      	mov	r0, r4
   db870:	bd10      	pop	{r4, pc}

000db872 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   db872:	b510      	push	{r4, lr}
   db874:	4604      	mov	r4, r0

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   db876:	f7ff f839 	bl	da8ec <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if (override == controlled()) {
   db87a:	4284      	cmp	r4, r0
   db87c:	d008      	beq.n	db890 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   db87e:	b11c      	cbz	r4, db888 <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   db880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
   db884:	f7ff b822 	b.w	da8cc <LED_Signaling_Start>
    } else {
        LED_Signaling_Stop();
    }
}
   db888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
   db88c:	f7ff b826 	b.w	da8dc <LED_Signaling_Stop>
   db890:	bd10      	pop	{r4, pc}

000db892 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   db892:	b570      	push	{r4, r5, r6, lr}
   db894:	4605      	mov	r5, r0
   db896:	460e      	mov	r6, r1
   db898:	4614      	mov	r4, r2

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   db89a:	f7ff f827 	bl	da8ec <LED_RGB_IsOverRidden>
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
    if (!controlled()) {
   db89e:	b150      	cbz	r0, db8b6 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   db8a0:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   db8a4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   db8a8:	f7ff f808 	bl	da8bc <LED_SetSignalingColor>
    LED_On(LED_RGB);
   db8ac:	20e7      	movs	r0, #231	; 0xe7
}
   db8ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
    if (!controlled()) {
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(LED_RGB);
   db8b2:	f7ff b823 	b.w	da8fc <LED_On>
   db8b6:	bd70      	pop	{r4, r5, r6, pc}

000db8b8 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   db8b8:	b513      	push	{r0, r1, r4, lr}
   db8ba:	460b      	mov	r3, r1
   db8bc:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   db8be:	c803      	ldmia	r0, {r0, r1}
   db8c0:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   db8c4:	e893 0003 	ldmia.w	r3, {r0, r1}
   db8c8:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   db8cc:	e89d 0003 	ldmia.w	sp, {r0, r1}
   db8d0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   db8d4:	b002      	add	sp, #8
   db8d6:	bd10      	pop	{r4, pc}

000db8d8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   db8d8:	4803      	ldr	r0, [pc, #12]	; (db8e8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   db8da:	4a04      	ldr	r2, [pc, #16]	; (db8ec <_GLOBAL__sub_I_RGB+0x14>)
   db8dc:	4904      	ldr	r1, [pc, #16]	; (db8f0 <_GLOBAL__sub_I_RGB+0x18>)
   db8de:	2300      	movs	r3, #0
   db8e0:	6083      	str	r3, [r0, #8]
   db8e2:	f001 bba5 	b.w	dd030 <__aeabi_atexit>
   db8e6:	bf00      	nop
   db8e8:	2003e2c0 	.word	0x2003e2c0
   db8ec:	2003d6b0 	.word	0x2003d6b0
   db8f0:	000db867 	.word	0x000db867

000db8f4 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
   db8f4:	6800      	ldr	r0, [r0, #0]
   db8f6:	f000 bd9e 	b.w	dc436 <_ZN7TwoWire4lockEv>

000db8fa <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   db8fa:	b510      	push	{r4, lr}
   db8fc:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
   db8fe:	6001      	str	r1, [r0, #0]
   db900:	7102      	strb	r2, [r0, #4]

    if (lock_) {
   db902:	b10a      	cbz	r2, db908 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   db904:	f7ff fff6 	bl	db8f4 <_ZN9FuelGauge4lockEv>
    }
}
   db908:	4620      	mov	r0, r4
   db90a:	bd10      	pop	{r4, pc}

000db90c <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
   db90c:	b538      	push	{r3, r4, r5, lr}
   db90e:	4604      	mov	r4, r0
   db910:	460d      	mov	r5, r1
        }
#endif // Wiring_Wire3
    }
#endif // HAL_PLATFORM_FUELGAUGE_MAX17043

    return &Wire;
   db912:	f001 fb6d 	bl	dcff0 <_Z19__fetch_global_Wirev>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
   db916:	462a      	mov	r2, r5
   db918:	4601      	mov	r1, r0
   db91a:	4620      	mov	r0, r4
   db91c:	f7ff ffed 	bl	db8fa <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
   db920:	4620      	mov	r0, r4
   db922:	bd38      	pop	{r3, r4, r5, pc}

000db924 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
   db924:	6800      	ldr	r0, [r0, #0]
   db926:	f000 bd8f 	b.w	dc448 <_ZN7TwoWire6unlockEv>

000db92a <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   db92a:	b510      	push	{r4, lr}
{
    if (lock_) {
   db92c:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   db92e:	4604      	mov	r4, r0
{
    if (lock_) {
   db930:	b10b      	cbz	r3, db936 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   db932:	f7ff fff7 	bl	db924 <_ZN9FuelGauge6unlockEv>
    }
}
   db936:	4620      	mov	r0, r4
   db938:	bd10      	pop	{r4, pc}
	...

000db93c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   db93c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   db93e:	4b0c      	ldr	r3, [pc, #48]	; (db970 <serialEventRun+0x34>)
   db940:	b133      	cbz	r3, db950 <serialEventRun+0x14>
   db942:	f000 fc13 	bl	dc16c <_Z16_fetch_usbserialv>
   db946:	6803      	ldr	r3, [r0, #0]
   db948:	691b      	ldr	r3, [r3, #16]
   db94a:	4798      	blx	r3
   db94c:	2800      	cmp	r0, #0
   db94e:	dc09      	bgt.n	db964 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   db950:	4b08      	ldr	r3, [pc, #32]	; (db974 <serialEventRun+0x38>)
   db952:	b163      	cbz	r3, db96e <serialEventRun+0x32>
   db954:	f000 fcbc 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   db958:	6803      	ldr	r3, [r0, #0]
   db95a:	691b      	ldr	r3, [r3, #16]
   db95c:	4798      	blx	r3
   db95e:	2800      	cmp	r0, #0
   db960:	dc03      	bgt.n	db96a <serialEventRun+0x2e>
   db962:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   db964:	f3af 8000 	nop.w
   db968:	e7f2      	b.n	db950 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   db96a:	f3af 8000 	nop.w
   db96e:	bd08      	pop	{r3, pc}
	...

000db978 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   db978:	b508      	push	{r3, lr}
	serialEventRun();
   db97a:	f7ff ffdf 	bl	db93c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   db97e:	f7fe fdf5 	bl	da56c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   db982:	4b01      	ldr	r3, [pc, #4]	; (db988 <_post_loop+0x10>)
   db984:	6018      	str	r0, [r3, #0]
   db986:	bd08      	pop	{r3, pc}
   db988:	2003e610 	.word	0x2003e610

000db98c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   db98c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   db98e:	2300      	movs	r3, #0
   db990:	9300      	str	r3, [sp, #0]
   db992:	461a      	mov	r2, r3
   db994:	f06f 0177 	mvn.w	r1, #119	; 0x77
   db998:	f7ff f814 	bl	da9c4 <system_ctrl_set_result>
}
   db99c:	b003      	add	sp, #12
   db99e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000db9a4 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   db9a4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   db9a6:	8843      	ldrh	r3, [r0, #2]
   db9a8:	2b0a      	cmp	r3, #10
   db9aa:	d008      	beq.n	db9be <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   db9ac:	2b50      	cmp	r3, #80	; 0x50
   db9ae:	d109      	bne.n	db9c4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   db9b0:	4b09      	ldr	r3, [pc, #36]	; (db9d8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   db9b2:	681b      	ldr	r3, [r3, #0]
   db9b4:	b13b      	cbz	r3, db9c6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   db9b6:	b003      	add	sp, #12
   db9b8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   db9bc:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   db9be:	f7ff ffe5 	bl	db98c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   db9c2:	e006      	b.n	db9d2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   db9c4:	2300      	movs	r3, #0
   db9c6:	9300      	str	r3, [sp, #0]
   db9c8:	461a      	mov	r2, r3
   db9ca:	f06f 0177 	mvn.w	r1, #119	; 0x77
   db9ce:	f7fe fff9 	bl	da9c4 <system_ctrl_set_result>
        break;
    }
}
   db9d2:	b003      	add	sp, #12
   db9d4:	f85d fb04 	ldr.w	pc, [sp], #4
   db9d8:	2003e2d0 	.word	0x2003e2d0

000db9dc <module_user_init_hook>:

void module_user_init_hook()
{
   db9dc:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   db9de:	f7fe fdbd 	bl	da55c <HAL_RNG_GetRandomNumber>
   db9e2:	4604      	mov	r4, r0
    srand(seed);
   db9e4:	f008 f828 	bl	e3a38 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   db9e8:	4b07      	ldr	r3, [pc, #28]	; (dba08 <module_user_init_hook+0x2c>)
   db9ea:	b113      	cbz	r3, db9f2 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   db9ec:	4620      	mov	r0, r4
   db9ee:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   db9f2:	2100      	movs	r1, #0
   db9f4:	4804      	ldr	r0, [pc, #16]	; (dba08 <module_user_init_hook+0x2c>)
   db9f6:	f7ff f879 	bl	daaec <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   db9fa:	2100      	movs	r1, #0
   db9fc:	4803      	ldr	r0, [pc, #12]	; (dba0c <module_user_init_hook+0x30>)
}
   db9fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   dba02:	f7fe bfd5 	b.w	da9b0 <system_ctrl_set_app_request_handler>
   dba06:	bf00      	nop
   dba08:	00000000 	.word	0x00000000
   dba0c:	000db9a5 	.word	0x000db9a5

000dba10 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   dba10:	4770      	bx	lr

000dba12 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   dba12:	2000      	movs	r0, #0
   dba14:	4770      	bx	lr

000dba16 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   dba16:	b510      	push	{r4, lr}
   dba18:	2110      	movs	r1, #16
   dba1a:	4604      	mov	r4, r0
   dba1c:	f001 fb0d 	bl	dd03a <_ZdlPvj>
   dba20:	4620      	mov	r0, r4
   dba22:	bd10      	pop	{r4, pc}

000dba24 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   dba24:	b508      	push	{r3, lr}
      { delete this; }
   dba26:	b108      	cbz	r0, dba2c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   dba28:	f7ff fff5 	bl	dba16 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   dba2c:	bd08      	pop	{r3, pc}

000dba2e <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   dba2e:	2200      	movs	r2, #0
   dba30:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   dba32:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   dba34:	f64f 729c 	movw	r2, #65436	; 0xff9c
   dba38:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   dba3a:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   dba3e:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   dba40:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dba42:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   dba44:	680c      	ldr	r4, [r1, #0]
   dba46:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   dba48:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   dba4a:	bd10      	pop	{r4, pc}

000dba4c <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   dba4c:	b510      	push	{r4, lr}
   dba4e:	4604      	mov	r4, r0
    free((void*)msg_);
   dba50:	6800      	ldr	r0, [r0, #0]
   dba52:	f7ff f85b 	bl	dab0c <free>
}
   dba56:	4620      	mov	r0, r4
   dba58:	bd10      	pop	{r4, pc}

000dba5a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   dba5a:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   dba5c:	68c4      	ldr	r4, [r0, #12]
   dba5e:	b1f4      	cbz	r4, dba9e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   dba60:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   dba62:	2b02      	cmp	r3, #2
   dba64:	d103      	bne.n	dba6e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   dba66:	f104 000c 	add.w	r0, r4, #12
   dba6a:	f7ff ffef 	bl	dba4c <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   dba6e:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   dba70:	b135      	cbz	r5, dba80 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dba72:	4628      	mov	r0, r5
   dba74:	f7ff feee 	bl	db854 <_ZNSt14_Function_baseD1Ev>
   dba78:	2110      	movs	r1, #16
   dba7a:	4628      	mov	r0, r5
   dba7c:	f001 fadd 	bl	dd03a <_ZdlPvj>
   dba80:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   dba82:	b135      	cbz	r5, dba92 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   dba84:	4628      	mov	r0, r5
   dba86:	f7ff fee5 	bl	db854 <_ZNSt14_Function_baseD1Ev>
   dba8a:	2110      	movs	r1, #16
   dba8c:	4628      	mov	r0, r5
   dba8e:	f001 fad4 	bl	dd03a <_ZdlPvj>
   dba92:	4620      	mov	r0, r4
   dba94:	2114      	movs	r1, #20
   dba96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dba9a:	f001 bace 	b.w	dd03a <_ZdlPvj>
   dba9e:	bd38      	pop	{r3, r4, r5, pc}

000dbaa0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   dbaa0:	b513      	push	{r0, r1, r4, lr}
   dbaa2:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   dbaa4:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   dbaa8:	2300      	movs	r3, #0
   dbaaa:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   dbaac:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   dbaae:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   dbab0:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   dbab2:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   dbab4:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   dbab6:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   dbab8:	f7fa f856 	bl	d5b68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dbabc:	4620      	mov	r0, r4
   dbabe:	b002      	add	sp, #8
   dbac0:	bd10      	pop	{r4, pc}

000dbac2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   dbac2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   dbac4:	460c      	mov	r4, r1
   dbac6:	ad02      	add	r5, sp, #8
   dbac8:	f854 3b04 	ldr.w	r3, [r4], #4
   dbacc:	f845 3d08 	str.w	r3, [r5, #-8]!
   dbad0:	4606      	mov	r6, r0
   dbad2:	460f      	mov	r7, r1
   dbad4:	a801      	add	r0, sp, #4
   dbad6:	4621      	mov	r1, r4
   dbad8:	f7ff fb34 	bl	db144 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   dbadc:	4629      	mov	r1, r5
   dbade:	4630      	mov	r0, r6
   dbae0:	f7ff ffde 	bl	dbaa0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   dbae4:	a801      	add	r0, sp, #4
   dbae6:	f7fa f83f 	bl	d5b68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dbaea:	4620      	mov	r0, r4
   dbaec:	f7fa f83c 	bl	d5b68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   dbaf0:	4638      	mov	r0, r7
   dbaf2:	2108      	movs	r1, #8
   dbaf4:	f001 faa1 	bl	dd03a <_ZdlPvj>
        return p;
    }
   dbaf8:	4630      	mov	r0, r6
   dbafa:	b003      	add	sp, #12
   dbafc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000dbb00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   dbb00:	b538      	push	{r3, r4, r5, lr}
   dbb02:	2300      	movs	r3, #0
   dbb04:	4604      	mov	r4, r0
   dbb06:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   dbb08:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   dbb0a:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   dbb0c:	f7f8 fac5 	bl	d409a <_Znwj>
   dbb10:	b128      	cbz	r0, dbb1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   dbb12:	2301      	movs	r3, #1
   dbb14:	6043      	str	r3, [r0, #4]
   dbb16:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   dbb18:	4b02      	ldr	r3, [pc, #8]	; (dbb24 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   dbb1a:	6003      	str	r3, [r0, #0]
   dbb1c:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   dbb1e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   dbb20:	4620      	mov	r0, r4
   dbb22:	bd38      	pop	{r3, r4, r5, pc}
   dbb24:	000e7e24 	.word	0x000e7e24

000dbb28 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dbb28:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   dbb2a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dbb2c:	b90a      	cbnz	r2, dbb32 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   dbb2e:	f001 fa86 	bl	dd03e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dbb32:	68c3      	ldr	r3, [r0, #12]
    }
   dbb34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dbb38:	4718      	bx	r3

000dbb3a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   dbb3a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   dbb3c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   dbb3e:	f100 0110 	add.w	r1, r0, #16
   dbb42:	f7ff fff1 	bl	dbb28 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   dbb46:	bd08      	pop	{r3, pc}

000dbb48 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dbb48:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   dbb4a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dbb4c:	b90a      	cbnz	r2, dbb52 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   dbb4e:	f001 fa76 	bl	dd03e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dbb52:	68c3      	ldr	r3, [r0, #12]
    }
   dbb54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dbb58:	4718      	bx	r3

000dbb5a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   dbb5a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   dbb5c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   dbb5e:	f100 0110 	add.w	r1, r0, #16
   dbb62:	f7ff fff1 	bl	dbb48 <_ZNKSt8functionIFvRKbEEclES1_>
   dbb66:	bd08      	pop	{r3, pc}

000dbb68 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   dbb68:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dbb6a:	2300      	movs	r3, #0
   dbb6c:	6083      	str	r3, [r0, #8]
   dbb6e:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   dbb70:	4604      	mov	r4, r0
   dbb72:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   dbb74:	b12b      	cbz	r3, dbb82 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   dbb76:	2202      	movs	r2, #2
   dbb78:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   dbb7a:	68eb      	ldr	r3, [r5, #12]
   dbb7c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   dbb7e:	68ab      	ldr	r3, [r5, #8]
   dbb80:	60a3      	str	r3, [r4, #8]
	}
    }
   dbb82:	4620      	mov	r0, r4
   dbb84:	bd38      	pop	{r3, r4, r5, pc}
	...

000dbb88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   dbb88:	b5f0      	push	{r4, r5, r6, r7, lr}
   dbb8a:	b089      	sub	sp, #36	; 0x24
   dbb8c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   dbb8e:	4668      	mov	r0, sp
   dbb90:	f7ff ff4d 	bl	dba2e <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   dbb94:	2300      	movs	r3, #0
   dbb96:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   dbb9a:	f04f 0202 	mov.w	r2, #2
   dbb9e:	e8d4 3f4f 	ldrexb	r3, [r4]
   dbba2:	2b00      	cmp	r3, #0
   dbba4:	d103      	bne.n	dbbae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   dbba6:	e8c4 2f41 	strexb	r1, r2, [r4]
   dbbaa:	2900      	cmp	r1, #0
   dbbac:	d1f7      	bne.n	dbb9e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   dbbae:	d002      	beq.n	dbbb6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   dbbb0:	f88d 3008 	strb.w	r3, [sp, #8]
   dbbb4:	e063      	b.n	dbc7e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   dbbb6:	f114 050c 	adds.w	r5, r4, #12
   dbbba:	d003      	beq.n	dbbc4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   dbbbc:	4669      	mov	r1, sp
   dbbbe:	4628      	mov	r0, r5
   dbbc0:	f7ff ff35 	bl	dba2e <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   dbbc4:	f3bf 8f5f 	dmb	sy
   dbbc8:	2301      	movs	r3, #1
   dbbca:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   dbbcc:	2000      	movs	r0, #0
   dbbce:	f104 0308 	add.w	r3, r4, #8
   dbbd2:	f3bf 8f5f 	dmb	sy
   dbbd6:	e853 6f00 	ldrex	r6, [r3]
   dbbda:	e843 0200 	strex	r2, r0, [r3]
   dbbde:	2a00      	cmp	r2, #0
   dbbe0:	d1f9      	bne.n	dbbd6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   dbbe2:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   dbbe6:	2e00      	cmp	r6, #0
   dbbe8:	d049      	beq.n	dbc7e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   dbbea:	f7fe fec1 	bl	da970 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   dbbee:	b120      	cbz	r0, dbbfa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   dbbf0:	4629      	mov	r1, r5
   dbbf2:	4630      	mov	r0, r6
   dbbf4:	f7ff ff98 	bl	dbb28 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   dbbf8:	e03a      	b.n	dbc70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   dbbfa:	4631      	mov	r1, r6
   dbbfc:	a802      	add	r0, sp, #8
   dbbfe:	f7ff ffb3 	bl	dbb68 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   dbc02:	68e0      	ldr	r0, [r4, #12]
   dbc04:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   dbc08:	b108      	cbz	r0, dbc0e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   dbc0a:	f007 ff4f 	bl	e3aac <strdup>
   dbc0e:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   dbc10:	2010      	movs	r0, #16
   dbc12:	f8ad 501c 	strh.w	r5, [sp, #28]
   dbc16:	f7f8 fa40 	bl	d409a <_Znwj>
   dbc1a:	4605      	mov	r5, r0
   dbc1c:	b1e8      	cbz	r0, dbc5a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dbc1e:	2700      	movs	r7, #0
   dbc20:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dbc22:	2018      	movs	r0, #24
   dbc24:	f7f8 fa39 	bl	d409a <_Znwj>
   dbc28:	4604      	mov	r4, r0
   dbc2a:	b188      	cbz	r0, dbc50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   dbc2c:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dbc2e:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   dbc30:	a802      	add	r0, sp, #8
   dbc32:	f7ff fe41 	bl	db8b8 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dbc36:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   dbc38:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dbc3a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dbc3c:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   dbc3e:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   dbc40:	a906      	add	r1, sp, #24
   dbc42:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dbc44:	60e3      	str	r3, [r4, #12]
   dbc46:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   dbc4a:	9205      	str	r2, [sp, #20]
   dbc4c:	f7ff feef 	bl	dba2e <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   dbc50:	4b0d      	ldr	r3, [pc, #52]	; (dbc88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   dbc52:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   dbc54:	4b0d      	ldr	r3, [pc, #52]	; (dbc8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dbc56:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   dbc58:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   dbc5a:	a806      	add	r0, sp, #24
   dbc5c:	f7ff fef6 	bl	dba4c <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dbc60:	a802      	add	r0, sp, #8
   dbc62:	f7ff fdf7 	bl	db854 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   dbc66:	2200      	movs	r2, #0
   dbc68:	4629      	mov	r1, r5
   dbc6a:	4809      	ldr	r0, [pc, #36]	; (dbc90 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   dbc6c:	f7fe fe88 	bl	da980 <application_thread_invoke>
   dbc70:	4630      	mov	r0, r6
   dbc72:	f7ff fdef 	bl	db854 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   dbc76:	2110      	movs	r1, #16
   dbc78:	4630      	mov	r0, r6
   dbc7a:	f001 f9de 	bl	dd03a <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   dbc7e:	4668      	mov	r0, sp
   dbc80:	f7ff fee4 	bl	dba4c <_ZN8particle5ErrorD1Ev>
    }
   dbc84:	b009      	add	sp, #36	; 0x24
   dbc86:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dbc88:	000dbb3b 	.word	0x000dbb3b
   dbc8c:	000dbdb1 	.word	0x000dbdb1
   dbc90:	000dc31d 	.word	0x000dc31d

000dbc94 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   dbc94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbc98:	b08b      	sub	sp, #44	; 0x2c
   dbc9a:	4606      	mov	r6, r0
   dbc9c:	460f      	mov	r7, r1
   dbc9e:	4690      	mov	r8, r2
   dbca0:	4699      	mov	r9, r3
   dbca2:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   dbca6:	f7fe ff01 	bl	daaac <spark_cloud_flag_connected>
   dbcaa:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
   dbcac:	4683      	mov	fp, r0
   dbcae:	bb30      	cbnz	r0, dbcfe <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   dbcb0:	f64f 732e 	movw	r3, #65326	; 0xff2e
   dbcb4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   dbcb6:	a905      	add	r1, sp, #20
   dbcb8:	4628      	mov	r0, r5
   dbcba:	f8ad 3018 	strh.w	r3, [sp, #24]
   dbcbe:	f7ff feb6 	bl	dba2e <_ZN8particle5ErrorC1EOS0_>
   dbcc2:	2014      	movs	r0, #20
   dbcc4:	f7f8 f9e9 	bl	d409a <_Znwj>
   dbcc8:	4604      	mov	r4, r0
   dbcca:	b158      	cbz	r0, dbce4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   dbccc:	2302      	movs	r3, #2
   dbcce:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   dbcd0:	2301      	movs	r3, #1
   dbcd2:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   dbcd4:	f8c0 b004 	str.w	fp, [r0, #4]
   dbcd8:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   dbcdc:	4629      	mov	r1, r5
   dbcde:	300c      	adds	r0, #12
   dbce0:	f7ff fea5 	bl	dba2e <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   dbce4:	4630      	mov	r0, r6
   dbce6:	4621      	mov	r1, r4
   dbce8:	f840 4b04 	str.w	r4, [r0], #4
   dbcec:	f7ff ff08 	bl	dbb00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   dbcf0:	4628      	mov	r0, r5
   dbcf2:	f7ff feab 	bl	dba4c <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   dbcf6:	a805      	add	r0, sp, #20
   dbcf8:	f7ff fea8 	bl	dba4c <_ZN8particle5ErrorD1Ev>
   dbcfc:	e052      	b.n	dbda4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   dbcfe:	2400      	movs	r4, #0
   dbd00:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   dbd02:	2014      	movs	r0, #20
   dbd04:	606c      	str	r4, [r5, #4]
   dbd06:	60ac      	str	r4, [r5, #8]
   dbd08:	9307      	str	r3, [sp, #28]
   dbd0a:	f7f8 f9c6 	bl	d409a <_Znwj>
   dbd0e:	4601      	mov	r1, r0
   dbd10:	b118      	cbz	r0, dbd1a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   dbd12:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   dbd14:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   dbd16:	6044      	str	r4, [r0, #4]
   dbd18:	6084      	str	r4, [r0, #8]
   dbd1a:	a804      	add	r0, sp, #16
   dbd1c:	9103      	str	r1, [sp, #12]
   dbd1e:	f7ff feef 	bl	dbb00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   dbd22:	4b22      	ldr	r3, [pc, #136]	; (dbdac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   dbd24:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   dbd26:	2008      	movs	r0, #8
   dbd28:	f7f8 f9b7 	bl	d409a <_Znwj>
   dbd2c:	4604      	mov	r4, r0
   dbd2e:	b128      	cbz	r0, dbd3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   dbd30:	9b03      	ldr	r3, [sp, #12]
   dbd32:	f840 3b04 	str.w	r3, [r0], #4
   dbd36:	a904      	add	r1, sp, #16
   dbd38:	f7ff fa04 	bl	db144 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   dbd3c:	9500      	str	r5, [sp, #0]
   dbd3e:	fa5f f38a 	uxtb.w	r3, sl
   dbd42:	464a      	mov	r2, r9
   dbd44:	4641      	mov	r1, r8
   dbd46:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   dbd48:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   dbd4a:	f7fe feb7 	bl	daabc <spark_send_event>
   dbd4e:	b920      	cbnz	r0, dbd5a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   dbd50:	9b03      	ldr	r3, [sp, #12]
   dbd52:	785b      	ldrb	r3, [r3, #1]
   dbd54:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   dbd58:	b183      	cbz	r3, dbd7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   dbd5a:	9b03      	ldr	r3, [sp, #12]
   dbd5c:	9305      	str	r3, [sp, #20]
   dbd5e:	a904      	add	r1, sp, #16
   dbd60:	a806      	add	r0, sp, #24
   dbd62:	f7ff f9ef 	bl	db144 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   dbd66:	a905      	add	r1, sp, #20
   dbd68:	4630      	mov	r0, r6
   dbd6a:	f7ff fe99 	bl	dbaa0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   dbd6e:	a806      	add	r0, sp, #24
   dbd70:	f7f9 fefa 	bl	d5b68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dbd74:	a804      	add	r0, sp, #16
   dbd76:	f7f9 fef7 	bl	d5b68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dbd7a:	e013      	b.n	dbda4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   dbd7c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   dbd80:	a905      	add	r1, sp, #20
   dbd82:	a803      	add	r0, sp, #12
   dbd84:	9205      	str	r2, [sp, #20]
   dbd86:	f8ad 3018 	strh.w	r3, [sp, #24]
   dbd8a:	f7ff fefd 	bl	dbb88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   dbd8e:	a805      	add	r0, sp, #20
   dbd90:	f7ff fe5c 	bl	dba4c <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   dbd94:	a805      	add	r0, sp, #20
   dbd96:	9909      	ldr	r1, [sp, #36]	; 0x24
   dbd98:	f7ff fe93 	bl	dbac2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   dbd9c:	a806      	add	r0, sp, #24
   dbd9e:	f7f9 fee3 	bl	d5b68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dbda2:	e7da      	b.n	dbd5a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   dbda4:	4630      	mov	r0, r6
   dbda6:	b00b      	add	sp, #44	; 0x2c
   dbda8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbdac:	000dbf21 	.word	0x000dbf21

000dbdb0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   dbdb0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   dbdb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dbdb4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   dbdb6:	d006      	beq.n	dbdc6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   dbdb8:	2a03      	cmp	r2, #3
   dbdba:	d017      	beq.n	dbdec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   dbdbc:	2a01      	cmp	r2, #1
   dbdbe:	d122      	bne.n	dbe06 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   dbdc0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   dbdc2:	6003      	str	r3, [r0, #0]
	      break;
   dbdc4:	e01f      	b.n	dbe06 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   dbdc6:	2018      	movs	r0, #24
   dbdc8:	680e      	ldr	r6, [r1, #0]
   dbdca:	f7f8 f966 	bl	d409a <_Znwj>
   dbdce:	4605      	mov	r5, r0
   dbdd0:	b150      	cbz	r0, dbde8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   dbdd2:	4631      	mov	r1, r6
   dbdd4:	f7ff fec8 	bl	dbb68 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   dbdd8:	6930      	ldr	r0, [r6, #16]
   dbdda:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   dbdde:	b108      	cbz	r0, dbde4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   dbde0:	f007 fe64 	bl	e3aac <strdup>
   dbde4:	6128      	str	r0, [r5, #16]
   dbde6:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   dbde8:	6025      	str	r5, [r4, #0]
   dbdea:	e00c      	b.n	dbe06 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   dbdec:	6804      	ldr	r4, [r0, #0]
   dbdee:	b154      	cbz	r4, dbe06 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   dbdf0:	f104 0010 	add.w	r0, r4, #16
   dbdf4:	f7ff fe2a 	bl	dba4c <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dbdf8:	4620      	mov	r0, r4
   dbdfa:	f7ff fd2b 	bl	db854 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   dbdfe:	2118      	movs	r1, #24
   dbe00:	4620      	mov	r0, r4
   dbe02:	f001 f91a 	bl	dd03a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   dbe06:	2000      	movs	r0, #0
   dbe08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dbe0a <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   dbe0a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dbe0c:	2300      	movs	r3, #0
   dbe0e:	6083      	str	r3, [r0, #8]
   dbe10:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   dbe12:	4604      	mov	r4, r0
   dbe14:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   dbe16:	b12b      	cbz	r3, dbe24 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   dbe18:	2202      	movs	r2, #2
   dbe1a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   dbe1c:	68eb      	ldr	r3, [r5, #12]
   dbe1e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   dbe20:	68ab      	ldr	r3, [r5, #8]
   dbe22:	60a3      	str	r3, [r4, #8]
	}
    }
   dbe24:	4620      	mov	r0, r4
   dbe26:	bd38      	pop	{r3, r4, r5, pc}

000dbe28 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   dbe28:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   dbe2a:	b570      	push	{r4, r5, r6, lr}
   dbe2c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   dbe2e:	d006      	beq.n	dbe3e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   dbe30:	2a03      	cmp	r2, #3
   dbe32:	d011      	beq.n	dbe58 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   dbe34:	2a01      	cmp	r2, #1
   dbe36:	d118      	bne.n	dbe6a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   dbe38:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   dbe3a:	6003      	str	r3, [r0, #0]
	      break;
   dbe3c:	e015      	b.n	dbe6a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   dbe3e:	2014      	movs	r0, #20
   dbe40:	680e      	ldr	r6, [r1, #0]
   dbe42:	f7f8 f92a 	bl	d409a <_Znwj>
   dbe46:	4605      	mov	r5, r0
   dbe48:	b120      	cbz	r0, dbe54 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   dbe4a:	4631      	mov	r1, r6
   dbe4c:	f7ff ffdd 	bl	dbe0a <_ZNSt8functionIFvRKbEEC1ERKS3_>
   dbe50:	7c33      	ldrb	r3, [r6, #16]
   dbe52:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   dbe54:	6025      	str	r5, [r4, #0]
   dbe56:	e008      	b.n	dbe6a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   dbe58:	6804      	ldr	r4, [r0, #0]
   dbe5a:	b134      	cbz	r4, dbe6a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dbe5c:	4620      	mov	r0, r4
   dbe5e:	f7ff fcf9 	bl	db854 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   dbe62:	2114      	movs	r1, #20
   dbe64:	4620      	mov	r0, r4
   dbe66:	f001 f8e8 	bl	dd03a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   dbe6a:	2000      	movs	r0, #0
   dbe6c:	bd70      	pop	{r4, r5, r6, pc}
	...

000dbe70 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   dbe70:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   dbe72:	2300      	movs	r3, #0
   dbe74:	b087      	sub	sp, #28
   dbe76:	460c      	mov	r4, r1
   dbe78:	f3bf 8f5f 	dmb	sy
   dbe7c:	e850 6f00 	ldrex	r6, [r0]
   dbe80:	e840 3200 	strex	r2, r3, [r0]
   dbe84:	2a00      	cmp	r2, #0
   dbe86:	d1f9      	bne.n	dbe7c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   dbe88:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   dbe8c:	2e00      	cmp	r6, #0
   dbe8e:	d03f      	beq.n	dbf10 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   dbe90:	4618      	mov	r0, r3
   dbe92:	f7fe fd6d 	bl	da970 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   dbe96:	4607      	mov	r7, r0
   dbe98:	b120      	cbz	r0, dbea4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   dbe9a:	4621      	mov	r1, r4
   dbe9c:	4630      	mov	r0, r6
   dbe9e:	f7ff fe53 	bl	dbb48 <_ZNKSt8functionIFvRKbEEclES1_>
   dbea2:	e02e      	b.n	dbf02 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   dbea4:	4631      	mov	r1, r6
   dbea6:	a801      	add	r0, sp, #4
   dbea8:	f7ff ffaf 	bl	dbe0a <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   dbeac:	7823      	ldrb	r3, [r4, #0]
   dbeae:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   dbeb2:	2010      	movs	r0, #16
   dbeb4:	f7f8 f8f1 	bl	d409a <_Znwj>
   dbeb8:	4605      	mov	r5, r0
   dbeba:	b1d0      	cbz	r0, dbef2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dbebc:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dbebe:	2014      	movs	r0, #20
   dbec0:	f7f8 f8eb 	bl	d409a <_Znwj>
   dbec4:	4604      	mov	r4, r0
   dbec6:	b178      	cbz	r0, dbee8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dbec8:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   dbeca:	4601      	mov	r1, r0
   dbecc:	a801      	add	r0, sp, #4
   dbece:	f7ff fcf3 	bl	db8b8 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dbed2:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   dbed4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dbed6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dbed8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   dbeda:	9203      	str	r2, [sp, #12]
   dbedc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dbede:	60e3      	str	r3, [r4, #12]
   dbee0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   dbee4:	9204      	str	r2, [sp, #16]
   dbee6:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   dbee8:	4b0a      	ldr	r3, [pc, #40]	; (dbf14 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   dbeea:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   dbeec:	4b0a      	ldr	r3, [pc, #40]	; (dbf18 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dbeee:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   dbef0:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dbef2:	a801      	add	r0, sp, #4
   dbef4:	f7ff fcae 	bl	db854 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   dbef8:	2200      	movs	r2, #0
   dbefa:	4629      	mov	r1, r5
   dbefc:	4807      	ldr	r0, [pc, #28]	; (dbf1c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   dbefe:	f7fe fd3f 	bl	da980 <application_thread_invoke>
   dbf02:	4630      	mov	r0, r6
   dbf04:	f7ff fca6 	bl	db854 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   dbf08:	2110      	movs	r1, #16
   dbf0a:	4630      	mov	r0, r6
   dbf0c:	f001 f895 	bl	dd03a <_ZdlPvj>
        }
    }
   dbf10:	b007      	add	sp, #28
   dbf12:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dbf14:	000dbb5b 	.word	0x000dbb5b
   dbf18:	000dbe29 	.word	0x000dbe29
   dbf1c:	000dc31d 	.word	0x000dc31d

000dbf20 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   dbf20:	b530      	push	{r4, r5, lr}
   dbf22:	b085      	sub	sp, #20
   dbf24:	4604      	mov	r4, r0
   dbf26:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   dbf28:	4668      	mov	r0, sp
   dbf2a:	4611      	mov	r1, r2
   dbf2c:	f7ff fdc9 	bl	dbac2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   dbf30:	b17c      	cbz	r4, dbf52 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   dbf32:	b224      	sxth	r4, r4
   dbf34:	4628      	mov	r0, r5
   dbf36:	b10d      	cbz	r5, dbf3c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   dbf38:	f007 fdb8 	bl	e3aac <strdup>
   dbf3c:	9002      	str	r0, [sp, #8]
   dbf3e:	a902      	add	r1, sp, #8
   dbf40:	4668      	mov	r0, sp
   dbf42:	f8ad 400c 	strh.w	r4, [sp, #12]
   dbf46:	f7ff fe1f 	bl	dbb88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   dbf4a:	a802      	add	r0, sp, #8
   dbf4c:	f7ff fd7e 	bl	dba4c <_ZN8particle5ErrorD1Ev>
   dbf50:	e01d      	b.n	dbf8e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   dbf52:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   dbf54:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   dbf58:	f04f 0201 	mov.w	r2, #1
   dbf5c:	e8d0 3f4f 	ldrexb	r3, [r0]
   dbf60:	42a3      	cmp	r3, r4
   dbf62:	d103      	bne.n	dbf6c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   dbf64:	e8c0 2f41 	strexb	r1, r2, [r0]
   dbf68:	2900      	cmp	r1, #0
   dbf6a:	d1f7      	bne.n	dbf5c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   dbf6c:	d002      	beq.n	dbf74 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   dbf6e:	f88d 3008 	strb.w	r3, [sp, #8]
   dbf72:	e00c      	b.n	dbf8e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   dbf74:	f110 010c 	adds.w	r1, r0, #12
   dbf78:	f04f 0301 	mov.w	r3, #1
   dbf7c:	bf18      	it	ne
   dbf7e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   dbf80:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   dbf84:	3004      	adds	r0, #4
   dbf86:	f800 3c03 	strb.w	r3, [r0, #-3]
   dbf8a:	f7ff ff71 	bl	dbe70 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   dbf8e:	a801      	add	r0, sp, #4
   dbf90:	f7f9 fdea 	bl	d5b68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   dbf94:	b005      	add	sp, #20
   dbf96:	bd30      	pop	{r4, r5, pc}

000dbf98 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   dbf98:	4770      	bx	lr

000dbf9a <_ZN9IPAddressD0Ev>:
   dbf9a:	b510      	push	{r4, lr}
   dbf9c:	2118      	movs	r1, #24
   dbf9e:	4604      	mov	r4, r0
   dbfa0:	f001 f84b 	bl	dd03a <_ZdlPvj>
   dbfa4:	4620      	mov	r0, r4
   dbfa6:	bd10      	pop	{r4, pc}

000dbfa8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   dbfa8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   dbfaa:	7d03      	ldrb	r3, [r0, #20]
   dbfac:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   dbfae:	b08d      	sub	sp, #52	; 0x34
   dbfb0:	460e      	mov	r6, r1
   dbfb2:	f100 0704 	add.w	r7, r0, #4
   dbfb6:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   dbfba:	d002      	beq.n	dbfc2 <_ZNK9IPAddress7printToER5Print+0x1a>
   dbfbc:	f100 0508 	add.w	r5, r0, #8
   dbfc0:	e018      	b.n	dbff4 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   dbfc2:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   dbfc4:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   dbfc6:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   dbfca:	232f      	movs	r3, #47	; 0x2f
   dbfcc:	462a      	mov	r2, r5
   dbfce:	200a      	movs	r0, #10
   dbfd0:	f7fe fb24 	bl	da61c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   dbfd4:	4628      	mov	r0, r5
   dbfd6:	f008 fa99 	bl	e450c <strlen>
   dbfda:	6833      	ldr	r3, [r6, #0]
   dbfdc:	4602      	mov	r2, r0
   dbfde:	68db      	ldr	r3, [r3, #12]
   dbfe0:	4629      	mov	r1, r5
   dbfe2:	4630      	mov	r0, r6
   dbfe4:	4798      	blx	r3
   dbfe6:	e00f      	b.n	dc008 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   dbfe8:	b124      	cbz	r4, dbff4 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   dbfea:	212e      	movs	r1, #46	; 0x2e
   dbfec:	4630      	mov	r0, r6
   dbfee:	f7ff f8e3 	bl	db1b8 <_ZN5Print5printEc>
   dbff2:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   dbff4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   dbff8:	220a      	movs	r2, #10
   dbffa:	4630      	mov	r0, r6
   dbffc:	f7ff f922 	bl	db244 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   dc000:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   dc002:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   dc004:	d1f0      	bne.n	dbfe8 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   dc006:	4620      	mov	r0, r4
    }
    return n;
}
   dc008:	b00d      	add	sp, #52	; 0x34
   dc00a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000dc00c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   dc00c:	b510      	push	{r4, lr}
   dc00e:	4b05      	ldr	r3, [pc, #20]	; (dc024 <_ZN9IPAddressC1Ev+0x18>)
   dc010:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   dc012:	2211      	movs	r2, #17
   dc014:	f840 3b04 	str.w	r3, [r0], #4
   dc018:	2100      	movs	r1, #0
   dc01a:	f007 fab6 	bl	e358a <memset>
{
    clear();
}
   dc01e:	4620      	mov	r0, r4
   dc020:	bd10      	pop	{r4, pc}
   dc022:	bf00      	nop
   dc024:	000e7e40 	.word	0x000e7e40

000dc028 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   dc028:	4603      	mov	r3, r0
   dc02a:	4a07      	ldr	r2, [pc, #28]	; (dc048 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   dc02c:	b510      	push	{r4, lr}
   dc02e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   dc032:	f101 0210 	add.w	r2, r1, #16
   dc036:	f851 4b04 	ldr.w	r4, [r1], #4
   dc03a:	f843 4b04 	str.w	r4, [r3], #4
   dc03e:	4291      	cmp	r1, r2
   dc040:	d1f9      	bne.n	dc036 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   dc042:	780a      	ldrb	r2, [r1, #0]
   dc044:	701a      	strb	r2, [r3, #0]
}
   dc046:	bd10      	pop	{r4, pc}
   dc048:	000e7e40 	.word	0x000e7e40

000dc04c <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   dc04c:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   dc04e:	2b04      	cmp	r3, #4
   dc050:	d101      	bne.n	dc056 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   dc052:	6840      	ldr	r0, [r0, #4]
   dc054:	e008      	b.n	dc068 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   dc056:	2b06      	cmp	r3, #6
   dc058:	d10a      	bne.n	dc070 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   dc05a:	6843      	ldr	r3, [r0, #4]
   dc05c:	b953      	cbnz	r3, dc074 <_ZNK9IPAddresscvbEv+0x28>
   dc05e:	6883      	ldr	r3, [r0, #8]
   dc060:	b943      	cbnz	r3, dc074 <_ZNK9IPAddresscvbEv+0x28>
   dc062:	68c3      	ldr	r3, [r0, #12]
   dc064:	b933      	cbnz	r3, dc074 <_ZNK9IPAddresscvbEv+0x28>
   dc066:	6900      	ldr	r0, [r0, #16]
   dc068:	3000      	adds	r0, #0
   dc06a:	bf18      	it	ne
   dc06c:	2001      	movne	r0, #1
   dc06e:	4770      	bx	lr
    } else {
        return false;
   dc070:	2000      	movs	r0, #0
   dc072:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   dc074:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   dc076:	4770      	bx	lr

000dc078 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   dc078:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   dc07a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   dc07e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   dc082:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   dc086:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   dc08a:	2304      	movs	r3, #4
   dc08c:	6041      	str	r1, [r0, #4]
   dc08e:	7503      	strb	r3, [r0, #20]
   dc090:	bd10      	pop	{r4, pc}

000dc092 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   dc092:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   dc094:	780d      	ldrb	r5, [r1, #0]
   dc096:	788b      	ldrb	r3, [r1, #2]
   dc098:	784a      	ldrb	r2, [r1, #1]
   dc09a:	78c9      	ldrb	r1, [r1, #3]
   dc09c:	9100      	str	r1, [sp, #0]
   dc09e:	4629      	mov	r1, r5
   dc0a0:	f7ff ffea 	bl	dc078 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   dc0a4:	b003      	add	sp, #12
   dc0a6:	bd30      	pop	{r4, r5, pc}

000dc0a8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   dc0a8:	7441      	strb	r1, [r0, #17]
   dc0aa:	4770      	bx	lr

000dc0ac <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   dc0ac:	4770      	bx	lr

000dc0ae <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   dc0ae:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   dc0b0:	2100      	movs	r1, #0
   dc0b2:	7c00      	ldrb	r0, [r0, #16]
   dc0b4:	f7fe fbe2 	bl	da87c <HAL_USB_USART_Receive_Data>
}
   dc0b8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   dc0bc:	bf28      	it	cs
   dc0be:	f04f 30ff 	movcs.w	r0, #4294967295
   dc0c2:	bd08      	pop	{r3, pc}

000dc0c4 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   dc0c4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   dc0c6:	2101      	movs	r1, #1
   dc0c8:	7c00      	ldrb	r0, [r0, #16]
   dc0ca:	f7fe fbd7 	bl	da87c <HAL_USB_USART_Receive_Data>
}
   dc0ce:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   dc0d2:	bf28      	it	cs
   dc0d4:	f04f 30ff 	movcs.w	r0, #4294967295
   dc0d8:	bd08      	pop	{r3, pc}

000dc0da <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   dc0da:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   dc0dc:	7c00      	ldrb	r0, [r0, #16]
   dc0de:	f7fe fbc5 	bl	da86c <HAL_USB_USART_Available_Data_For_Write>
}
   dc0e2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dc0e6:	bd08      	pop	{r3, pc}

000dc0e8 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   dc0e8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   dc0ea:	7c00      	ldrb	r0, [r0, #16]
   dc0ec:	f7fe fbb6 	bl	da85c <HAL_USB_USART_Available_Data>
}
   dc0f0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dc0f4:	bd08      	pop	{r3, pc}

000dc0f6 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   dc0f6:	7c00      	ldrb	r0, [r0, #16]
   dc0f8:	f7fe bbd0 	b.w	da89c <HAL_USB_USART_Flush_Data>

000dc0fc <_ZN9USBSerialD0Ev>:
   dc0fc:	b510      	push	{r4, lr}
   dc0fe:	2114      	movs	r1, #20
   dc100:	4604      	mov	r4, r0
   dc102:	f000 ff9a 	bl	dd03a <_ZdlPvj>
   dc106:	4620      	mov	r0, r4
   dc108:	bd10      	pop	{r4, pc}

000dc10a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   dc10a:	b538      	push	{r3, r4, r5, lr}
   dc10c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   dc10e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   dc110:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   dc112:	f7fe fbab 	bl	da86c <HAL_USB_USART_Available_Data_For_Write>
   dc116:	2800      	cmp	r0, #0
   dc118:	dc01      	bgt.n	dc11e <_ZN9USBSerial5writeEh+0x14>
   dc11a:	7c60      	ldrb	r0, [r4, #17]
   dc11c:	b128      	cbz	r0, dc12a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   dc11e:	4629      	mov	r1, r5
   dc120:	7c20      	ldrb	r0, [r4, #16]
   dc122:	f7fe fbb3 	bl	da88c <HAL_USB_USART_Send_Data>
   dc126:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   dc12a:	bd38      	pop	{r3, r4, r5, pc}

000dc12c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   dc12c:	b510      	push	{r4, lr}
   dc12e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   dc130:	2300      	movs	r3, #0
   dc132:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   dc134:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   dc138:	60a3      	str	r3, [r4, #8]
   dc13a:	4b05      	ldr	r3, [pc, #20]	; (dc150 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   dc13c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   dc13e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   dc140:	4608      	mov	r0, r1
{
  _serial = serial;
   dc142:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   dc144:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   dc146:	4611      	mov	r1, r2
   dc148:	f7fe fb78 	bl	da83c <HAL_USB_USART_Init>
}
   dc14c:	4620      	mov	r0, r4
   dc14e:	bd10      	pop	{r4, pc}
   dc150:	000e7e54 	.word	0x000e7e54

000dc154 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   dc154:	2200      	movs	r2, #0
   dc156:	7c00      	ldrb	r0, [r0, #16]
   dc158:	f7fe bb78 	b.w	da84c <HAL_USB_USART_Begin>

000dc15c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   dc15c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   dc15e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   dc160:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   dc162:	2100      	movs	r1, #0
   dc164:	f007 fa11 	bl	e358a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   dc168:	4620      	mov	r0, r4
   dc16a:	bd10      	pop	{r4, pc}

000dc16c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   dc16c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   dc16e:	4d0e      	ldr	r5, [pc, #56]	; (dc1a8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   dc170:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   dc172:	a801      	add	r0, sp, #4
   dc174:	f7ff fff2 	bl	dc15c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   dc178:	6829      	ldr	r1, [r5, #0]
   dc17a:	f011 0401 	ands.w	r4, r1, #1
   dc17e:	d110      	bne.n	dc1a2 <_Z16_fetch_usbserialv+0x36>
   dc180:	4628      	mov	r0, r5
   dc182:	f7f7 ff90 	bl	d40a6 <__cxa_guard_acquire>
   dc186:	b160      	cbz	r0, dc1a2 <_Z16_fetch_usbserialv+0x36>
   dc188:	aa01      	add	r2, sp, #4
   dc18a:	4621      	mov	r1, r4
   dc18c:	4807      	ldr	r0, [pc, #28]	; (dc1ac <_Z16_fetch_usbserialv+0x40>)
   dc18e:	f7ff ffcd 	bl	dc12c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   dc192:	4628      	mov	r0, r5
   dc194:	f7f7 ff8c 	bl	d40b0 <__cxa_guard_release>
   dc198:	4a05      	ldr	r2, [pc, #20]	; (dc1b0 <_Z16_fetch_usbserialv+0x44>)
   dc19a:	4906      	ldr	r1, [pc, #24]	; (dc1b4 <_Z16_fetch_usbserialv+0x48>)
   dc19c:	4803      	ldr	r0, [pc, #12]	; (dc1ac <_Z16_fetch_usbserialv+0x40>)
   dc19e:	f000 ff47 	bl	dd030 <__aeabi_atexit>
	return _usbserial;
}
   dc1a2:	4802      	ldr	r0, [pc, #8]	; (dc1ac <_Z16_fetch_usbserialv+0x40>)
   dc1a4:	b007      	add	sp, #28
   dc1a6:	bd30      	pop	{r4, r5, pc}
   dc1a8:	2003e2d4 	.word	0x2003e2d4
   dc1ac:	2003e2d8 	.word	0x2003e2d8
   dc1b0:	2003d6b0 	.word	0x2003d6b0
   dc1b4:	000dc0ad 	.word	0x000dc0ad

000dc1b8 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   dc1b8:	4700      	bx	r0
	...

000dc1bc <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   dc1bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   dc1be:	b085      	sub	sp, #20
   dc1c0:	461c      	mov	r4, r3
   dc1c2:	460e      	mov	r6, r1
   dc1c4:	4617      	mov	r7, r2
   dc1c6:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
   dc1c8:	f7fe f988 	bl	da4dc <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
   dc1cc:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
   dc1ce:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   dc1d0:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   dc1d4:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   dc1d6:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   dc1da:	bfa5      	ittet	ge
   dc1dc:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   dc1e0:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   dc1e4:	4603      	movlt	r3, r0
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   dc1e6:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   dc1e8:	9300      	str	r3, [sp, #0]
   dc1ea:	4632      	mov	r2, r6
   dc1ec:	463b      	mov	r3, r7
   dc1ee:	4906      	ldr	r1, [pc, #24]	; (dc208 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   dc1f0:	bfa8      	it	ge
   dc1f2:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   dc1f6:	4628      	mov	r0, r5
   dc1f8:	f7fe f968 	bl	da4cc <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   dc1fc:	fab0 f080 	clz	r0, r0
   dc200:	0940      	lsrs	r0, r0, #5
   dc202:	b005      	add	sp, #20
   dc204:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dc206:	bf00      	nop
   dc208:	000dc1b9 	.word	0x000dc1b9

000dc20c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   dc20c:	4770      	bx	lr

000dc20e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   dc20e:	7441      	strb	r1, [r0, #17]
   dc210:	4770      	bx	lr

000dc212 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   dc212:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   dc214:	7c00      	ldrb	r0, [r0, #16]
   dc216:	f7fe fa51 	bl	da6bc <HAL_USART_Available_Data_For_Write>
}
   dc21a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dc21e:	bd08      	pop	{r3, pc}

000dc220 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   dc220:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   dc222:	7c00      	ldrb	r0, [r0, #16]
   dc224:	f7fe fa22 	bl	da66c <HAL_USART_Available_Data>
}
   dc228:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dc22c:	bd08      	pop	{r3, pc}

000dc22e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   dc22e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   dc230:	7c00      	ldrb	r0, [r0, #16]
   dc232:	f7fe fa2b 	bl	da68c <HAL_USART_Peek_Data>
}
   dc236:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   dc23a:	bf28      	it	cs
   dc23c:	f04f 30ff 	movcs.w	r0, #4294967295
   dc240:	bd08      	pop	{r3, pc}

000dc242 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   dc242:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   dc244:	7c00      	ldrb	r0, [r0, #16]
   dc246:	f7fe fa19 	bl	da67c <HAL_USART_Read_Data>
}
   dc24a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   dc24e:	bf28      	it	cs
   dc250:	f04f 30ff 	movcs.w	r0, #4294967295
   dc254:	bd08      	pop	{r3, pc}

000dc256 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   dc256:	7c00      	ldrb	r0, [r0, #16]
   dc258:	f7fe ba20 	b.w	da69c <HAL_USART_Flush_Data>

000dc25c <_ZN11USARTSerialD0Ev>:
   dc25c:	b510      	push	{r4, lr}
   dc25e:	2114      	movs	r1, #20
   dc260:	4604      	mov	r4, r0
   dc262:	f000 feea 	bl	dd03a <_ZdlPvj>
   dc266:	4620      	mov	r0, r4
   dc268:	bd10      	pop	{r4, pc}

000dc26a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   dc26a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   dc26c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   dc26e:	4604      	mov	r4, r0
   dc270:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   dc272:	b925      	cbnz	r5, dc27e <_ZN11USARTSerial5writeEh+0x14>
   dc274:	7c00      	ldrb	r0, [r0, #16]
   dc276:	f7fe fa21 	bl	da6bc <HAL_USART_Available_Data_For_Write>
   dc27a:	2800      	cmp	r0, #0
   dc27c:	dd05      	ble.n	dc28a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   dc27e:	4631      	mov	r1, r6
   dc280:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   dc282:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   dc286:	f7fe b9e9 	b.w	da65c <HAL_USART_Write_Data>
  }
  return 0;
}
   dc28a:	4628      	mov	r0, r5
   dc28c:	bd70      	pop	{r4, r5, r6, pc}
	...

000dc290 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   dc290:	b510      	push	{r4, lr}
   dc292:	4604      	mov	r4, r0
   dc294:	4608      	mov	r0, r1
   dc296:	4611      	mov	r1, r2
   dc298:	2200      	movs	r2, #0
   dc29a:	6062      	str	r2, [r4, #4]
   dc29c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   dc2a0:	60a2      	str	r2, [r4, #8]
   dc2a2:	4a05      	ldr	r2, [pc, #20]	; (dc2b8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   dc2a4:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   dc2a6:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   dc2a8:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   dc2aa:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   dc2ac:	461a      	mov	r2, r3
   dc2ae:	f7fe f9cd 	bl	da64c <HAL_USART_Init>
}
   dc2b2:	4620      	mov	r0, r4
   dc2b4:	bd10      	pop	{r4, pc}
   dc2b6:	bf00      	nop
   dc2b8:	000e7e84 	.word	0x000e7e84

000dc2bc <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   dc2bc:	2300      	movs	r3, #0
   dc2be:	7c00      	ldrb	r0, [r0, #16]
   dc2c0:	f7fe ba04 	b.w	da6cc <HAL_USART_BeginConfig>

000dc2c4 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   dc2c4:	2200      	movs	r2, #0
   dc2c6:	f7ff bff9 	b.w	dc2bc <_ZN11USARTSerial5beginEmm>

000dc2ca <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   dc2ca:	7c00      	ldrb	r0, [r0, #16]
   dc2cc:	f7fe b9ee 	b.w	da6ac <HAL_USART_Is_Enabled>

000dc2d0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   dc2d0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   dc2d2:	4d0c      	ldr	r5, [pc, #48]	; (dc304 <_Z22__fetch_global_Serial1v+0x34>)
   dc2d4:	6829      	ldr	r1, [r5, #0]
   dc2d6:	f011 0401 	ands.w	r4, r1, #1
   dc2da:	d111      	bne.n	dc300 <_Z22__fetch_global_Serial1v+0x30>
   dc2dc:	4628      	mov	r0, r5
   dc2de:	f7f7 fee2 	bl	d40a6 <__cxa_guard_acquire>
   dc2e2:	b168      	cbz	r0, dc300 <_Z22__fetch_global_Serial1v+0x30>
   dc2e4:	4a08      	ldr	r2, [pc, #32]	; (dc308 <_Z22__fetch_global_Serial1v+0x38>)
   dc2e6:	4b09      	ldr	r3, [pc, #36]	; (dc30c <_Z22__fetch_global_Serial1v+0x3c>)
   dc2e8:	4809      	ldr	r0, [pc, #36]	; (dc310 <_Z22__fetch_global_Serial1v+0x40>)
   dc2ea:	4621      	mov	r1, r4
   dc2ec:	f7ff ffd0 	bl	dc290 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   dc2f0:	4628      	mov	r0, r5
   dc2f2:	f7f7 fedd 	bl	d40b0 <__cxa_guard_release>
   dc2f6:	4a07      	ldr	r2, [pc, #28]	; (dc314 <_Z22__fetch_global_Serial1v+0x44>)
   dc2f8:	4907      	ldr	r1, [pc, #28]	; (dc318 <_Z22__fetch_global_Serial1v+0x48>)
   dc2fa:	4805      	ldr	r0, [pc, #20]	; (dc310 <_Z22__fetch_global_Serial1v+0x40>)
   dc2fc:	f000 fe98 	bl	dd030 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   dc300:	4803      	ldr	r0, [pc, #12]	; (dc310 <_Z22__fetch_global_Serial1v+0x40>)
   dc302:	bd38      	pop	{r3, r4, r5, pc}
   dc304:	2003e384 	.word	0x2003e384
   dc308:	2003e388 	.word	0x2003e388
   dc30c:	2003e300 	.word	0x2003e300
   dc310:	2003e2ec 	.word	0x2003e2ec
   dc314:	2003d6b0 	.word	0x2003d6b0
   dc318:	000dc20d 	.word	0x000dc20d

000dc31c <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   dc31c:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dc31e:	6883      	ldr	r3, [r0, #8]
   dc320:	4604      	mov	r4, r0
   dc322:	b90b      	cbnz	r3, dc328 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   dc324:	f000 fe8b 	bl	dd03e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dc328:	68c3      	ldr	r3, [r0, #12]
   dc32a:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   dc32c:	68a3      	ldr	r3, [r4, #8]
   dc32e:	b11b      	cbz	r3, dc338 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   dc330:	2203      	movs	r2, #3
   dc332:	4621      	mov	r1, r4
   dc334:	4620      	mov	r0, r4
   dc336:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   dc338:	4620      	mov	r0, r4
   dc33a:	2110      	movs	r1, #16
}
   dc33c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   dc340:	f000 be7b 	b.w	dd03a <_ZdlPvj>

000dc344 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   dc344:	4770      	bx	lr

000dc346 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   dc346:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dc348:	4606      	mov	r6, r0
   dc34a:	4615      	mov	r5, r2
   dc34c:	460c      	mov	r4, r1
   dc34e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   dc350:	42bc      	cmp	r4, r7
   dc352:	d006      	beq.n	dc362 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   dc354:	6833      	ldr	r3, [r6, #0]
   dc356:	f814 1b01 	ldrb.w	r1, [r4], #1
   dc35a:	689b      	ldr	r3, [r3, #8]
   dc35c:	4630      	mov	r0, r6
   dc35e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   dc360:	e7f6      	b.n	dc350 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   dc362:	4628      	mov	r0, r5
   dc364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dc366 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   dc366:	2200      	movs	r2, #0
   dc368:	7c00      	ldrb	r0, [r0, #16]
   dc36a:	f7fe b9e7 	b.w	da73c <HAL_I2C_Write_Data>

000dc36e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   dc36e:	2100      	movs	r1, #0
   dc370:	7c00      	ldrb	r0, [r0, #16]
   dc372:	f7fe b9eb 	b.w	da74c <HAL_I2C_Available_Data>

000dc376 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   dc376:	2100      	movs	r1, #0
   dc378:	7c00      	ldrb	r0, [r0, #16]
   dc37a:	f7fe b9ef 	b.w	da75c <HAL_I2C_Read_Data>

000dc37e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   dc37e:	2100      	movs	r1, #0
   dc380:	7c00      	ldrb	r0, [r0, #16]
   dc382:	f7fe b9f3 	b.w	da76c <HAL_I2C_Peek_Data>

000dc386 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   dc386:	2100      	movs	r1, #0
   dc388:	7c00      	ldrb	r0, [r0, #16]
   dc38a:	f7fe b9f7 	b.w	da77c <HAL_I2C_Flush_Data>

000dc38e <_ZN7TwoWireD0Ev>:
   dc38e:	b510      	push	{r4, lr}
   dc390:	2114      	movs	r1, #20
   dc392:	4604      	mov	r4, r0
   dc394:	f000 fe51 	bl	dd03a <_ZdlPvj>
   dc398:	4620      	mov	r0, r4
   dc39a:	bd10      	pop	{r4, pc}

000dc39c <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   dc39c:	b510      	push	{r4, lr}
   dc39e:	4604      	mov	r4, r0
   dc3a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   dc3a4:	4608      	mov	r0, r1
   dc3a6:	60a3      	str	r3, [r4, #8]
   dc3a8:	2100      	movs	r1, #0
   dc3aa:	4b04      	ldr	r3, [pc, #16]	; (dc3bc <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   dc3ac:	7420      	strb	r0, [r4, #16]
   dc3ae:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   dc3b0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   dc3b2:	f7fe f9f3 	bl	da79c <HAL_I2C_Init>

}
   dc3b6:	4620      	mov	r0, r4
   dc3b8:	bd10      	pop	{r4, pc}
   dc3ba:	bf00      	nop
   dc3bc:	000e7eb4 	.word	0x000e7eb4

000dc3c0 <_ZN7TwoWire8setSpeedEm>:
// Public Methods //////////////////////////////////////////////////////////////

//setSpeed() should be called before begin() else default to 100KHz
void TwoWire::setSpeed(uint32_t clockSpeed)
{
  HAL_I2C_Set_Speed(_i2c, clockSpeed, NULL);
   dc3c0:	2200      	movs	r2, #0
   dc3c2:	7c00      	ldrb	r0, [r0, #16]
   dc3c4:	f7fe b98a 	b.w	da6dc <HAL_I2C_Set_Speed>

000dc3c8 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   dc3c8:	2300      	movs	r3, #0
   dc3ca:	461a      	mov	r2, r3
   dc3cc:	4619      	mov	r1, r3
   dc3ce:	7c00      	ldrb	r0, [r0, #16]
   dc3d0:	f7fe b98c 	b.w	da6ec <HAL_I2C_Begin>

000dc3d4 <_ZN7TwoWire3endEv>:
  begin((uint8_t)address);
}

void TwoWire::end()
{
	HAL_I2C_End(_i2c, NULL);
   dc3d4:	2100      	movs	r1, #0
   dc3d6:	7c00      	ldrb	r0, [r0, #16]
   dc3d8:	f7fe b990 	b.w	da6fc <HAL_I2C_End>

000dc3dc <_ZN7TwoWire11requestFromEhhh>:
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   dc3dc:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   dc3de:	2400      	movs	r4, #0
   dc3e0:	7c00      	ldrb	r0, [r0, #16]
   dc3e2:	9400      	str	r4, [sp, #0]
   dc3e4:	f7fe f992 	bl	da70c <HAL_I2C_Request_Data>
  return result;
}
   dc3e8:	b2c0      	uxtb	r0, r0
   dc3ea:	b002      	add	sp, #8
   dc3ec:	bd10      	pop	{r4, pc}

000dc3ee <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   dc3ee:	2301      	movs	r3, #1
   dc3f0:	f7ff bff4 	b.w	dc3dc <_ZN7TwoWire11requestFromEhhh>

000dc3f4 <_ZN7TwoWire11requestFromEii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   dc3f4:	2301      	movs	r3, #1
   dc3f6:	b2d2      	uxtb	r2, r2
   dc3f8:	b2c9      	uxtb	r1, r1
   dc3fa:	f7ff bfef 	b.w	dc3dc <_ZN7TwoWire11requestFromEhhh>

000dc3fe <_ZN7TwoWire11requestFromEiii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
   dc3fe:	b2db      	uxtb	r3, r3
   dc400:	b2d2      	uxtb	r2, r2
   dc402:	b2c9      	uxtb	r1, r1
   dc404:	f7ff bfea 	b.w	dc3dc <_ZN7TwoWire11requestFromEhhh>

000dc408 <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   dc408:	2200      	movs	r2, #0
   dc40a:	7c00      	ldrb	r0, [r0, #16]
   dc40c:	f7fe b986 	b.w	da71c <HAL_I2C_Begin_Transmission>

000dc410 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   dc410:	b2c9      	uxtb	r1, r1
   dc412:	f7ff bff9 	b.w	dc408 <_ZN7TwoWire17beginTransmissionEh>

000dc416 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   dc416:	2200      	movs	r2, #0
   dc418:	7c00      	ldrb	r0, [r0, #16]
   dc41a:	f7fe b987 	b.w	da72c <HAL_I2C_End_Transmission>

000dc41e <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   dc41e:	2101      	movs	r1, #1
   dc420:	f7ff bff9 	b.w	dc416 <_ZN7TwoWire15endTransmissionEh>

000dc424 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   dc424:	2100      	movs	r1, #0
   dc426:	7c00      	ldrb	r0, [r0, #16]
   dc428:	f7fe b9b0 	b.w	da78c <HAL_I2C_Is_Enabled>

000dc42c <_ZN7TwoWire5resetEv>:
}

void TwoWire::reset()
{
  HAL_I2C_Reset(_i2c, 0, NULL);
   dc42c:	2200      	movs	r2, #0
   dc42e:	4611      	mov	r1, r2
   dc430:	7c00      	ldrb	r0, [r0, #16]
   dc432:	f7fe b9bb 	b.w	da7ac <HAL_I2C_Reset>

000dc436 <_ZN7TwoWire4lockEv>:
}

bool TwoWire::lock()
{
   dc436:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   dc438:	2100      	movs	r1, #0
   dc43a:	7c00      	ldrb	r0, [r0, #16]
   dc43c:	f7fe f9be 	bl	da7bc <HAL_I2C_Acquire>
}
   dc440:	fab0 f080 	clz	r0, r0
   dc444:	0940      	lsrs	r0, r0, #5
   dc446:	bd08      	pop	{r3, pc}

000dc448 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   dc448:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   dc44a:	2100      	movs	r1, #0
   dc44c:	7c00      	ldrb	r0, [r0, #16]
   dc44e:	f7fe f9bd 	bl	da7cc <HAL_I2C_Release>
}
   dc452:	fab0 f080 	clz	r0, r0
   dc456:	0940      	lsrs	r0, r0, #5
   dc458:	bd08      	pop	{r3, pc}

000dc45a <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   dc45a:	2200      	movs	r2, #0
   dc45c:	4611      	mov	r1, r2
   dc45e:	6840      	ldr	r0, [r0, #4]
   dc460:	f7fe bafc 	b.w	daa5c <network_listening>

000dc464 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   dc464:	2200      	movs	r2, #0
   dc466:	4611      	mov	r1, r2
   dc468:	6840      	ldr	r0, [r0, #4]
   dc46a:	f7fe bb07 	b.w	daa7c <network_get_listen_timeout>

000dc46e <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   dc46e:	2200      	movs	r2, #0
   dc470:	6840      	ldr	r0, [r0, #4]
   dc472:	f7fe bafb 	b.w	daa6c <network_set_listen_timeout>

000dc476 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   dc476:	2200      	movs	r2, #0
   dc478:	f081 0101 	eor.w	r1, r1, #1
   dc47c:	6840      	ldr	r0, [r0, #4]
   dc47e:	f7fe bae5 	b.w	daa4c <network_listen>

000dc482 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   dc482:	2300      	movs	r3, #0
   dc484:	461a      	mov	r2, r3
   dc486:	2101      	movs	r1, #1
   dc488:	6840      	ldr	r0, [r0, #4]
   dc48a:	f7fe bad7 	b.w	daa3c <network_off>

000dc48e <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   dc48e:	2300      	movs	r3, #0
   dc490:	461a      	mov	r2, r3
   dc492:	4619      	mov	r1, r3
   dc494:	6840      	ldr	r0, [r0, #4]
   dc496:	f7fe bac9 	b.w	daa2c <network_on>

000dc49a <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   dc49a:	2200      	movs	r2, #0
   dc49c:	4611      	mov	r1, r2
   dc49e:	6840      	ldr	r0, [r0, #4]
   dc4a0:	f7fe babc 	b.w	daa1c <network_ready>

000dc4a4 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   dc4a4:	2200      	movs	r2, #0
   dc4a6:	4611      	mov	r1, r2
   dc4a8:	6840      	ldr	r0, [r0, #4]
   dc4aa:	f7fe baa7 	b.w	da9fc <network_connecting>

000dc4ae <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   dc4ae:	2200      	movs	r2, #0
   dc4b0:	2102      	movs	r1, #2
   dc4b2:	6840      	ldr	r0, [r0, #4]
   dc4b4:	f7fe baaa 	b.w	daa0c <network_disconnect>

000dc4b8 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   dc4b8:	2300      	movs	r3, #0
   dc4ba:	461a      	mov	r2, r3
   dc4bc:	6840      	ldr	r0, [r0, #4]
   dc4be:	f7fe ba95 	b.w	da9ec <network_connect>

000dc4c2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   dc4c2:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   dc4c4:	4605      	mov	r5, r0
   dc4c6:	b188      	cbz	r0, dc4ec <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   dc4c8:	6804      	ldr	r4, [r0, #0]
   dc4ca:	b14c      	cbz	r4, dc4e0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   dc4cc:	68a3      	ldr	r3, [r4, #8]
   dc4ce:	b11b      	cbz	r3, dc4d8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   dc4d0:	2203      	movs	r2, #3
   dc4d2:	4621      	mov	r1, r4
   dc4d4:	4620      	mov	r0, r4
   dc4d6:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   dc4d8:	2110      	movs	r1, #16
   dc4da:	4620      	mov	r0, r4
   dc4dc:	f000 fdad 	bl	dd03a <_ZdlPvj>
   dc4e0:	4628      	mov	r0, r5
   dc4e2:	2114      	movs	r1, #20
      }
   dc4e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   dc4e8:	f000 bda7 	b.w	dd03a <_ZdlPvj>
   dc4ec:	bd38      	pop	{r3, r4, r5, pc}

000dc4ee <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   dc4ee:	b110      	cbz	r0, dc4f6 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   dc4f0:	6803      	ldr	r3, [r0, #0]
   dc4f2:	685b      	ldr	r3, [r3, #4]
   dc4f4:	4718      	bx	r3
   dc4f6:	4770      	bx	lr

000dc4f8 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   dc4f8:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   dc4fa:	6803      	ldr	r3, [r0, #0]
   dc4fc:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   dc4fe:	b1bb      	cbz	r3, dc530 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   dc500:	6858      	ldr	r0, [r3, #4]
   dc502:	f7fe f863 	bl	da5cc <os_thread_is_current>
   dc506:	b978      	cbnz	r0, dc528 <_ZN6ThreadD1Ev+0x30>
   dc508:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   dc50a:	7c5a      	ldrb	r2, [r3, #17]
   dc50c:	b912      	cbnz	r2, dc514 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   dc50e:	6858      	ldr	r0, [r3, #4]
   dc510:	f7fe f864 	bl	da5dc <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   dc514:	6823      	ldr	r3, [r4, #0]
   dc516:	6858      	ldr	r0, [r3, #4]
   dc518:	f7fe f868 	bl	da5ec <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dc51c:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   dc51e:	2300      	movs	r3, #0
   dc520:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   dc522:	b128      	cbz	r0, dc530 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   dc524:	f7ff ffcd 	bl	dc4c2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   dc528:	6820      	ldr	r0, [r4, #0]
   dc52a:	b108      	cbz	r0, dc530 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   dc52c:	f7ff ffc9 	bl	dc4c2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   dc530:	4620      	mov	r0, r4
   dc532:	bd10      	pop	{r4, pc}

000dc534 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   dc534:	b538      	push	{r3, r4, r5, lr}
   dc536:	4b0c      	ldr	r3, [pc, #48]	; (dc568 <_ZN5spark9MeshClassD1Ev+0x34>)
   dc538:	6003      	str	r3, [r0, #0]
   dc53a:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   dc53c:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   dc540:	b108      	cbz	r0, dc546 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   dc542:	f7f7 fdae 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   dc546:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   dc54a:	b135      	cbz	r5, dc55a <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   dc54c:	4628      	mov	r0, r5
   dc54e:	f7ff ffd3 	bl	dc4f8 <_ZN6ThreadD1Ev>
   dc552:	2104      	movs	r1, #4
   dc554:	4628      	mov	r0, r5
   dc556:	f000 fd70 	bl	dd03a <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   dc55a:	68a0      	ldr	r0, [r4, #8]
   dc55c:	b108      	cbz	r0, dc562 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   dc55e:	f7ff ffc6 	bl	dc4ee <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   dc562:	4620      	mov	r0, r4
   dc564:	bd38      	pop	{r3, r4, r5, pc}
   dc566:	bf00      	nop
   dc568:	000e7edc 	.word	0x000e7edc

000dc56c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   dc56c:	b538      	push	{r3, r4, r5, lr}
   dc56e:	4c0e      	ldr	r4, [pc, #56]	; (dc5a8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   dc570:	4b0e      	ldr	r3, [pc, #56]	; (dc5ac <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   dc572:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   dc574:	2500      	movs	r5, #0
   dc576:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   dc578:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   dc57c:	6063      	str	r3, [r4, #4]
   dc57e:	60a5      	str	r5, [r4, #8]
   dc580:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   dc584:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   dc588:	f7fe f840 	bl	da60c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   dc58c:	4b08      	ldr	r3, [pc, #32]	; (dc5b0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   dc58e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   dc592:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   dc596:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   dc598:	4620      	mov	r0, r4
   dc59a:	4a06      	ldr	r2, [pc, #24]	; (dc5b4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   dc59c:	4906      	ldr	r1, [pc, #24]	; (dc5b8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   dc59e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   dc5a2:	f000 bd45 	b.w	dd030 <__aeabi_atexit>
   dc5a6:	bf00      	nop
   dc5a8:	2003e40c 	.word	0x2003e40c
   dc5ac:	000e7fe8 	.word	0x000e7fe8
   dc5b0:	000e7edc 	.word	0x000e7edc
   dc5b4:	2003d6b0 	.word	0x2003d6b0
   dc5b8:	000dc535 	.word	0x000dc535

000dc5bc <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   dc5bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dc5be:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   dc5c0:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   dc5c2:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   dc5c6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   dc5c8:	2201      	movs	r2, #1
   dc5ca:	f04f 33ff 	mov.w	r3, #4294967295
   dc5ce:	4621      	mov	r1, r4
   dc5d0:	47a8      	blx	r5
}
   dc5d2:	b003      	add	sp, #12
   dc5d4:	bd30      	pop	{r4, r5, pc}

000dc5d6 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   dc5d6:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   dc5d8:	6803      	ldr	r3, [r0, #0]
   dc5da:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   dc5dc:	f04f 33ff 	mov.w	r3, #4294967295
   dc5e0:	46a4      	mov	ip, r4
}
   dc5e2:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   dc5e6:	4760      	bx	ip

000dc5e8 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   dc5e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dc5ea:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   dc5ec:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   dc5ee:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   dc5f2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   dc5f4:	4621      	mov	r1, r4
   dc5f6:	4613      	mov	r3, r2
   dc5f8:	2201      	movs	r2, #1
   dc5fa:	47a8      	blx	r5
}
   dc5fc:	b003      	add	sp, #12
   dc5fe:	bd30      	pop	{r4, r5, pc}

000dc600 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   dc600:	4770      	bx	lr

000dc602 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   dc602:	b538      	push	{r3, r4, r5, lr}
   dc604:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   dc606:	681a      	ldr	r2, [r3, #0]
   dc608:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   dc60a:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   dc60c:	da05      	bge.n	dc61a <_ZN9TCPClient9connectedEv+0x18>
   dc60e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   dc612:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   dc616:	429a      	cmp	r2, r3
   dc618:	d001      	beq.n	dc61e <_ZN9TCPClient9connectedEv+0x1c>
   dc61a:	2501      	movs	r5, #1
   dc61c:	e00b      	b.n	dc636 <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   dc61e:	6803      	ldr	r3, [r0, #0]
   dc620:	691b      	ldr	r3, [r3, #16]
   dc622:	4798      	blx	r3
   dc624:	2800      	cmp	r0, #0
   dc626:	bf14      	ite	ne
   dc628:	2501      	movne	r5, #1
   dc62a:	2500      	moveq	r5, #0
        if (!rv) {
   dc62c:	d103      	bne.n	dc636 <_ZN9TCPClient9connectedEv+0x34>
            stop();
   dc62e:	6823      	ldr	r3, [r4, #0]
   dc630:	4620      	mov	r0, r4
   dc632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   dc634:	4798      	blx	r3
        }
    }
    return rv;
}
   dc636:	4628      	mov	r0, r5
   dc638:	bd38      	pop	{r3, r4, r5, pc}

000dc63a <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   dc63a:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   dc63c:	6818      	ldr	r0, [r3, #0]
}
   dc63e:	43c0      	mvns	r0, r0
   dc640:	0fc0      	lsrs	r0, r0, #31
   dc642:	4770      	bx	lr

000dc644 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   dc644:	4770      	bx	lr

000dc646 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   dc646:	2000      	movs	r0, #0
   dc648:	4770      	bx	lr

000dc64a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   dc64a:	b510      	push	{r4, lr}
   dc64c:	2114      	movs	r1, #20
   dc64e:	4604      	mov	r4, r0
   dc650:	f000 fcf3 	bl	dd03a <_ZdlPvj>
   dc654:	4620      	mov	r0, r4
   dc656:	bd10      	pop	{r4, pc}

000dc658 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   dc658:	f7f7 bd21 	b.w	d409e <_ZdlPv>

000dc65c <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   dc65c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   dc65e:	4616      	mov	r6, r2
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   dc660:	2200      	movs	r2, #0
   dc662:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   dc664:	9202      	str	r2, [sp, #8]
   dc666:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   dc668:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   dc66a:	4604      	mov	r4, r0
   dc66c:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   dc66e:	d008      	beq.n	dc682 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   dc670:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   dc674:	fbb3 f1f2 	udiv	r1, r3, r2
   dc678:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   dc67a:	fb02 3111 	mls	r1, r2, r1, r3
   dc67e:	434a      	muls	r2, r1
   dc680:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   dc682:	6960      	ldr	r0, [r4, #20]
   dc684:	2308      	movs	r3, #8
   dc686:	9300      	str	r3, [sp, #0]
   dc688:	f241 0205 	movw	r2, #4101	; 0x1005
   dc68c:	446b      	add	r3, sp
   dc68e:	f640 71ff 	movw	r1, #4095	; 0xfff
   dc692:	6800      	ldr	r0, [r0, #0]
   dc694:	f7fe f8a2 	bl	da7dc <sock_setsockopt>
    if (ret < 0) {
   dc698:	2800      	cmp	r0, #0
   dc69a:	db08      	blt.n	dc6ae <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   dc69c:	6960      	ldr	r0, [r4, #20]
   dc69e:	2300      	movs	r3, #0
   dc6a0:	4632      	mov	r2, r6
   dc6a2:	4629      	mov	r1, r5
   dc6a4:	6800      	ldr	r0, [r0, #0]
   dc6a6:	f7fe f8b9 	bl	da81c <sock_send>
    if (ret < 0) {
   dc6aa:	2800      	cmp	r0, #0
   dc6ac:	da04      	bge.n	dc6b8 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   dc6ae:	f7fe fa75 	bl	dab9c <__errno>
   dc6b2:	6803      	ldr	r3, [r0, #0]
   dc6b4:	6063      	str	r3, [r4, #4]
   dc6b6:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   dc6b8:	b004      	add	sp, #16
   dc6ba:	bd70      	pop	{r4, r5, r6, pc}

000dc6bc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   dc6bc:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   dc6be:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   dc6c0:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   dc6c2:	689b      	ldr	r3, [r3, #8]
   dc6c4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   dc6c6:	68a3      	ldr	r3, [r4, #8]
   dc6c8:	3b01      	subs	r3, #1
   dc6ca:	60a3      	str	r3, [r4, #8]
   dc6cc:	b92b      	cbnz	r3, dc6da <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   dc6ce:	6823      	ldr	r3, [r4, #0]
   dc6d0:	4620      	mov	r0, r4
   dc6d2:	68db      	ldr	r3, [r3, #12]
        }
    }
   dc6d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   dc6d8:	4718      	bx	r3
   dc6da:	bd10      	pop	{r4, pc}

000dc6dc <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   dc6dc:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   dc6de:	4604      	mov	r4, r0
   dc6e0:	694d      	ldr	r5, [r1, #20]
   dc6e2:	4b05      	ldr	r3, [pc, #20]	; (dc6f8 <_ZN9TCPClient8remoteIPEv+0x1c>)
   dc6e4:	f844 3b04 	str.w	r3, [r4], #4
   dc6e8:	358c      	adds	r5, #140	; 0x8c
   dc6ea:	4606      	mov	r6, r0
   dc6ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dc6ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dc6f0:	682b      	ldr	r3, [r5, #0]
   dc6f2:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   dc6f4:	4630      	mov	r0, r6
   dc6f6:	bd70      	pop	{r4, r5, r6, pc}
   dc6f8:	000e7e40 	.word	0x000e7e40

000dc6fc <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   dc6fc:	b510      	push	{r4, lr}
   dc6fe:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   dc700:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   dc704:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   dc708:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   dc70a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   dc70c:	d005      	beq.n	dc71a <_ZN9TCPClient4peekEv+0x1e>
   dc70e:	6962      	ldr	r2, [r4, #20]
   dc710:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   dc714:	4413      	add	r3, r2
   dc716:	7918      	ldrb	r0, [r3, #4]
   dc718:	bd10      	pop	{r4, pc}
   dc71a:	6803      	ldr	r3, [r0, #0]
   dc71c:	691b      	ldr	r3, [r3, #16]
   dc71e:	4798      	blx	r3
   dc720:	2800      	cmp	r0, #0
   dc722:	d1f4      	bne.n	dc70e <_ZN9TCPClient4peekEv+0x12>
   dc724:	f04f 30ff 	mov.w	r0, #4294967295
}
   dc728:	bd10      	pop	{r4, pc}

000dc72a <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   dc72a:	b510      	push	{r4, lr}
   dc72c:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   dc72e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   dc732:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   dc736:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   dc738:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   dc73a:	d008      	beq.n	dc74e <_ZN9TCPClient4readEv+0x24>
   dc73c:	6962      	ldr	r2, [r4, #20]
   dc73e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   dc742:	1c59      	adds	r1, r3, #1
   dc744:	4413      	add	r3, r2
   dc746:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   dc74a:	7918      	ldrb	r0, [r3, #4]
   dc74c:	bd10      	pop	{r4, pc}
   dc74e:	6803      	ldr	r3, [r0, #0]
   dc750:	691b      	ldr	r3, [r3, #16]
   dc752:	4798      	blx	r3
   dc754:	2800      	cmp	r0, #0
   dc756:	d1f1      	bne.n	dc73c <_ZN9TCPClient4readEv+0x12>
   dc758:	f04f 30ff 	mov.w	r0, #4294967295
}
   dc75c:	bd10      	pop	{r4, pc}

000dc75e <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   dc75e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dc760:	6943      	ldr	r3, [r0, #20]
   dc762:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   dc764:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   dc768:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   dc76c:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   dc76e:	4605      	mov	r5, r0
   dc770:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   dc772:	d106      	bne.n	dc782 <_ZN9TCPClient4readEPhj+0x24>
   dc774:	6803      	ldr	r3, [r0, #0]
   dc776:	691b      	ldr	r3, [r3, #16]
   dc778:	4798      	blx	r3
   dc77a:	b910      	cbnz	r0, dc782 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   dc77c:	f04f 34ff 	mov.w	r4, #4294967295
   dc780:	e014      	b.n	dc7ac <_ZN9TCPClient4readEPhj+0x4e>
   dc782:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   dc784:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   dc788:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   dc78c:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   dc78e:	42bc      	cmp	r4, r7
   dc790:	bf28      	it	cs
   dc792:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   dc794:	4419      	add	r1, r3
   dc796:	4622      	mov	r2, r4
   dc798:	3104      	adds	r1, #4
   dc79a:	4630      	mov	r0, r6
   dc79c:	f006 feea 	bl	e3574 <memcpy>
   dc7a0:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   dc7a2:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   dc7a6:	4423      	add	r3, r4
   dc7a8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   dc7ac:	4620      	mov	r0, r4
   dc7ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dc7b0 <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   dc7b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dc7b4:	4698      	mov	r8, r3
    stop();
   dc7b6:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   dc7b8:	b093      	sub	sp, #76	; 0x4c
    stop();
   dc7ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   dc7bc:	460d      	mov	r5, r1
   dc7be:	4606      	mov	r6, r0
   dc7c0:	4617      	mov	r7, r2
    stop();
   dc7c2:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   dc7c4:	ab12      	add	r3, sp, #72	; 0x48
   dc7c6:	2400      	movs	r4, #0
   dc7c8:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   dc7cc:	4622      	mov	r2, r4
   dc7ce:	4621      	mov	r1, r4
   dc7d0:	4628      	mov	r0, r5
   dc7d2:	f7fd fe43 	bl	da45c <netdb_getaddrinfo>
   dc7d6:	4681      	mov	r9, r0
   dc7d8:	2800      	cmp	r0, #0
   dc7da:	d13d      	bne.n	dc858 <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   dc7dc:	9b00      	ldr	r3, [sp, #0]
   dc7de:	2b00      	cmp	r3, #0
   dc7e0:	d056      	beq.n	dc890 <_ZN9TCPClient7connectEPKctm+0xe0>
   dc7e2:	695b      	ldr	r3, [r3, #20]
   dc7e4:	2b00      	cmp	r3, #0
   dc7e6:	d053      	beq.n	dc890 <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   dc7e8:	a806      	add	r0, sp, #24
   dc7ea:	f7ff fc0f 	bl	dc00c <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   dc7ee:	9b00      	ldr	r3, [sp, #0]
   dc7f0:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   dc7f2:	7863      	ldrb	r3, [r4, #1]
   dc7f4:	2b02      	cmp	r3, #2
   dc7f6:	d101      	bne.n	dc7fc <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   dc7f8:	1d21      	adds	r1, r4, #4
   dc7fa:	e013      	b.n	dc824 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   dc7fc:	2b0a      	cmp	r3, #10
   dc7fe:	d114      	bne.n	dc82a <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   dc800:	2211      	movs	r2, #17
   dc802:	4649      	mov	r1, r9
   dc804:	a801      	add	r0, sp, #4
   dc806:	f006 fec0 	bl	e358a <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   dc80a:	68a3      	ldr	r3, [r4, #8]
   dc80c:	bb33      	cbnz	r3, dc85c <_ZN9TCPClient7connectEPKctm+0xac>
   dc80e:	68e3      	ldr	r3, [r4, #12]
   dc810:	bb23      	cbnz	r3, dc85c <_ZN9TCPClient7connectEPKctm+0xac>
   dc812:	f64f 70ff 	movw	r0, #65535	; 0xffff
   dc816:	6925      	ldr	r5, [r4, #16]
   dc818:	f7fd ff08 	bl	da62c <inet_htonl>
   dc81c:	4285      	cmp	r5, r0
   dc81e:	d11d      	bne.n	dc85c <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   dc820:	f104 0114 	add.w	r1, r4, #20
   dc824:	a806      	add	r0, sp, #24
   dc826:	f7ff fc34 	bl	dc092 <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   dc82a:	a806      	add	r0, sp, #24
   dc82c:	f7ff fc0e 	bl	dc04c <_ZNK9IPAddresscvbEv>
        if (addr) {
   dc830:	2800      	cmp	r0, #0
   dc832:	d02d      	beq.n	dc890 <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   dc834:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   dc836:	ad07      	add	r5, sp, #28
   dc838:	f8d3 9020 	ldr.w	r9, [r3, #32]
   dc83c:	4b18      	ldr	r3, [pc, #96]	; (dc8a0 <_ZN9TCPClient7connectEPKctm+0xf0>)
   dc83e:	930c      	str	r3, [sp, #48]	; 0x30
   dc840:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dc842:	ac0d      	add	r4, sp, #52	; 0x34
   dc844:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dc846:	682b      	ldr	r3, [r5, #0]
   dc848:	7023      	strb	r3, [r4, #0]
   dc84a:	463a      	mov	r2, r7
   dc84c:	4643      	mov	r3, r8
   dc84e:	a90c      	add	r1, sp, #48	; 0x30
   dc850:	4630      	mov	r0, r6
   dc852:	47c8      	blx	r9
   dc854:	4681      	mov	r9, r0
   dc856:	e01b      	b.n	dc890 <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   dc858:	46a1      	mov	r9, r4
   dc85a:	e019      	b.n	dc890 <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   dc85c:	f104 0308 	add.w	r3, r4, #8
   dc860:	ad01      	add	r5, sp, #4
   dc862:	3418      	adds	r4, #24
   dc864:	6818      	ldr	r0, [r3, #0]
   dc866:	6859      	ldr	r1, [r3, #4]
   dc868:	462a      	mov	r2, r5
   dc86a:	c203      	stmia	r2!, {r0, r1}
   dc86c:	3308      	adds	r3, #8
   dc86e:	42a3      	cmp	r3, r4
   dc870:	4615      	mov	r5, r2
   dc872:	d1f7      	bne.n	dc864 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   dc874:	2306      	movs	r3, #6
            addr = IPAddress(a);
   dc876:	a901      	add	r1, sp, #4
   dc878:	a80c      	add	r0, sp, #48	; 0x30
   dc87a:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   dc87c:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   dc880:	f7ff fbd2 	bl	dc028 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   dc884:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dc886:	ac07      	add	r4, sp, #28
   dc888:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dc88a:	682b      	ldr	r3, [r5, #0]
   dc88c:	7023      	strb	r3, [r4, #0]
   dc88e:	e7cc      	b.n	dc82a <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   dc890:	9800      	ldr	r0, [sp, #0]
   dc892:	f7fd fddb 	bl	da44c <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   dc896:	4648      	mov	r0, r9
   dc898:	b013      	add	sp, #76	; 0x4c
   dc89a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dc89e:	bf00      	nop
   dc8a0:	000e7e40 	.word	0x000e7e40

000dc8a4 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   dc8a4:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   dc8a6:	2300      	movs	r3, #0
   dc8a8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   dc8ac:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   dc8ae:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   dc8b2:	4770      	bx	lr

000dc8b4 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   dc8b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dc8b8:	461e      	mov	r6, r3
    stop();
   dc8ba:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   dc8bc:	460c      	mov	r4, r1
   dc8be:	b08a      	sub	sp, #40	; 0x28
    stop();
   dc8c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   dc8c2:	4605      	mov	r5, r0
   dc8c4:	4617      	mov	r7, r2
    stop();
   dc8c6:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   dc8c8:	7d23      	ldrb	r3, [r4, #20]
   dc8ca:	f8d5 8014 	ldr.w	r8, [r5, #20]
   dc8ce:	2b04      	cmp	r3, #4
   dc8d0:	bf0c      	ite	eq
   dc8d2:	2002      	moveq	r0, #2
   dc8d4:	200a      	movne	r0, #10
   dc8d6:	2206      	movs	r2, #6
   dc8d8:	2101      	movs	r1, #1
   dc8da:	f7fd ffa7 	bl	da82c <sock_socket>
   dc8de:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   dc8e2:	696b      	ldr	r3, [r5, #20]
   dc8e4:	681b      	ldr	r3, [r3, #0]
   dc8e6:	2b00      	cmp	r3, #0
   dc8e8:	db18      	blt.n	dc91c <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   dc8ea:	4628      	mov	r0, r5
   dc8ec:	f7ff ffda 	bl	dc8a4 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   dc8f0:	b1d6      	cbz	r6, dc928 <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   dc8f2:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   dc8f4:	a903      	add	r1, sp, #12
   dc8f6:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   dc8f8:	9303      	str	r3, [sp, #12]
   dc8fa:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   dc8fe:	f7fd fe25 	bl	da54c <if_index_to_name>
   dc902:	b958      	cbnz	r0, dc91c <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   dc904:	6968      	ldr	r0, [r5, #20]
   dc906:	2306      	movs	r3, #6
   dc908:	9300      	str	r3, [sp, #0]
   dc90a:	f241 020b 	movw	r2, #4107	; 0x100b
   dc90e:	ab03      	add	r3, sp, #12
   dc910:	f640 71ff 	movw	r1, #4095	; 0xfff
   dc914:	6800      	ldr	r0, [r0, #0]
   dc916:	f7fd ff61 	bl	da7dc <sock_setsockopt>
   dc91a:	b128      	cbz	r0, dc928 <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   dc91c:	682b      	ldr	r3, [r5, #0]
   dc91e:	4628      	mov	r0, r5
   dc920:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   dc922:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   dc924:	4798      	blx	r3
   dc926:	e03b      	b.n	dc9a0 <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   dc928:	261c      	movs	r6, #28
   dc92a:	4632      	mov	r2, r6
   dc92c:	2100      	movs	r1, #0
   dc92e:	a803      	add	r0, sp, #12
   dc930:	f006 fe2b 	bl	e358a <memset>
    if (ip.version() == 4) {
   dc934:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   dc936:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   dc93a:	2b04      	cmp	r3, #4
   dc93c:	d10c      	bne.n	dc958 <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   dc93e:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   dc940:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   dc942:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   dc946:	f7fd fe79 	bl	da63c <inet_htons>
   dc94a:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   dc94e:	6860      	ldr	r0, [r4, #4]
   dc950:	f7fd fe6c 	bl	da62c <inet_htonl>
   dc954:	9004      	str	r0, [sp, #16]
   dc956:	e013      	b.n	dc980 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   dc958:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   dc95a:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   dc95c:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   dc960:	f7fd fe6c 	bl	da63c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   dc964:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   dc966:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   dc96a:	1d23      	adds	r3, r4, #4
   dc96c:	f104 0714 	add.w	r7, r4, #20
   dc970:	6818      	ldr	r0, [r3, #0]
   dc972:	6859      	ldr	r1, [r3, #4]
   dc974:	4632      	mov	r2, r6
   dc976:	c203      	stmia	r2!, {r0, r1}
   dc978:	3308      	adds	r3, #8
   dc97a:	42bb      	cmp	r3, r7
   dc97c:	4616      	mov	r6, r2
   dc97e:	d1f7      	bne.n	dc970 <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   dc980:	696b      	ldr	r3, [r5, #20]
   dc982:	221c      	movs	r2, #28
   dc984:	a903      	add	r1, sp, #12
   dc986:	6818      	ldr	r0, [r3, #0]
   dc988:	f7fd ff38 	bl	da7fc <sock_connect>
   dc98c:	2800      	cmp	r0, #0
   dc98e:	d1c5      	bne.n	dc91c <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   dc990:	3404      	adds	r4, #4
   dc992:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   dc994:	696d      	ldr	r5, [r5, #20]
   dc996:	358c      	adds	r5, #140	; 0x8c
   dc998:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   dc99a:	6823      	ldr	r3, [r4, #0]
   dc99c:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   dc99e:	2401      	movs	r4, #1
}
   dc9a0:	4620      	mov	r0, r4
   dc9a2:	b00a      	add	sp, #40	; 0x28
   dc9a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000dc9a8 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   dc9a8:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   dc9aa:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   dc9ac:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   dc9ae:	6818      	ldr	r0, [r3, #0]
   dc9b0:	2800      	cmp	r0, #0
   dc9b2:	db01      	blt.n	dc9b8 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   dc9b4:	f7fd ff1a 	bl	da7ec <sock_close>
   dc9b8:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   dc9ba:	f04f 32ff 	mov.w	r2, #4294967295
   dc9be:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   dc9c0:	6960      	ldr	r0, [r4, #20]
   dc9c2:	2211      	movs	r2, #17
   dc9c4:	2100      	movs	r1, #0
   dc9c6:	308c      	adds	r0, #140	; 0x8c
   dc9c8:	f006 fddf 	bl	e358a <memset>
    d_->remoteIP.clear();
    flush_buffer();
   dc9cc:	4620      	mov	r0, r4
}
   dc9ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   dc9d2:	f7ff bf67 	b.w	dc8a4 <_ZN9TCPClient12flush_bufferEv>
	...

000dc9d8 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   dc9d8:	b530      	push	{r4, r5, lr}
   dc9da:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   dc9dc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   dc9e0:	b08b      	sub	sp, #44	; 0x2c
   dc9e2:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   dc9e4:	b11b      	cbz	r3, dc9ee <_ZN9TCPClient9availableEv+0x16>
   dc9e6:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   dc9ea:	429a      	cmp	r2, r3
   dc9ec:	d040      	beq.n	dca70 <_ZN9TCPClient9availableEv+0x98>
   dc9ee:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   dc9f0:	6818      	ldr	r0, [r3, #0]
   dc9f2:	2800      	cmp	r0, #0
   dc9f4:	db3f      	blt.n	dca76 <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   dc9f6:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   dc9fa:	2d7f      	cmp	r5, #127	; 0x7f
   dc9fc:	d83b      	bhi.n	dca76 <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   dc9fe:	1d19      	adds	r1, r3, #4
   dca00:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   dca04:	2308      	movs	r3, #8
   dca06:	4429      	add	r1, r5
   dca08:	f7fd ff00 	bl	da80c <sock_recv>
            if (ret > 0) {
   dca0c:	2800      	cmp	r0, #0
   dca0e:	dd0c      	ble.n	dca2a <_ZN9TCPClient9availableEv+0x52>
   dca10:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   dca12:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   dca16:	b90a      	cbnz	r2, dca1c <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   dca18:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   dca1c:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   dca1e:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   dca22:	4418      	add	r0, r3
   dca24:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   dca28:	e025      	b.n	dca76 <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   dca2a:	f7fe f8b7 	bl	dab9c <__errno>
   dca2e:	6803      	ldr	r3, [r0, #0]
   dca30:	2b0b      	cmp	r3, #11
   dca32:	d020      	beq.n	dca76 <_ZN9TCPClient9availableEv+0x9e>
   dca34:	f7fe f8b2 	bl	dab9c <__errno>
   dca38:	6803      	ldr	r3, [r0, #0]
   dca3a:	2b0b      	cmp	r3, #11
   dca3c:	d01b      	beq.n	dca76 <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   dca3e:	2320      	movs	r3, #32
   dca40:	2500      	movs	r5, #0
   dca42:	9302      	str	r3, [sp, #8]
   dca44:	9503      	str	r5, [sp, #12]
   dca46:	f7fe f8a9 	bl	dab9c <__errno>
   dca4a:	6803      	ldr	r3, [r0, #0]
   dca4c:	9301      	str	r3, [sp, #4]
   dca4e:	4b0e      	ldr	r3, [pc, #56]	; (dca88 <_ZN9TCPClient9availableEv+0xb0>)
   dca50:	9300      	str	r3, [sp, #0]
   dca52:	aa02      	add	r2, sp, #8
   dca54:	462b      	mov	r3, r5
   dca56:	490d      	ldr	r1, [pc, #52]	; (dca8c <_ZN9TCPClient9availableEv+0xb4>)
   dca58:	2032      	movs	r0, #50	; 0x32
   dca5a:	f7fd ff57 	bl	da90c <log_message>
                    sock_close(d_->sock);
   dca5e:	6963      	ldr	r3, [r4, #20]
   dca60:	6818      	ldr	r0, [r3, #0]
   dca62:	f7fd fec3 	bl	da7ec <sock_close>
   dca66:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   dca68:	f04f 32ff 	mov.w	r2, #4294967295
   dca6c:	601a      	str	r2, [r3, #0]
   dca6e:	e002      	b.n	dca76 <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   dca70:	f7ff ff18 	bl	dc8a4 <_ZN9TCPClient12flush_bufferEv>
   dca74:	e7bb      	b.n	dc9ee <_ZN9TCPClient9availableEv+0x16>
   dca76:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   dca78:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   dca7c:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   dca80:	1a18      	subs	r0, r3, r0
}
   dca82:	b00b      	add	sp, #44	; 0x2c
   dca84:	bd30      	pop	{r4, r5, pc}
   dca86:	bf00      	nop
   dca88:	000e7f77 	.word	0x000e7f77
   dca8c:	000e7f70 	.word	0x000e7f70

000dca90 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   dca90:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   dca92:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   dca94:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   dca96:	6001      	str	r1, [r0, #0]
   dca98:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   dca9c:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   dcaa0:	3088      	adds	r0, #136	; 0x88
   dcaa2:	f7ff fab3 	bl	dc00c <_ZN9IPAddressC1Ev>
}
   dcaa6:	4620      	mov	r0, r4
   dcaa8:	bd10      	pop	{r4, pc}
	...

000dcaac <_ZN9TCPClientC1Ei>:
   dcaac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   dcab0:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   dcab2:	2300      	movs	r3, #0
   dcab4:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   dcab6:	4a14      	ldr	r2, [pc, #80]	; (dcb08 <_ZN9TCPClientC1Ei+0x5c>)
   dcab8:	6043      	str	r3, [r0, #4]
   dcaba:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   dcabc:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   dcabe:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   dcac0:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   dcac2:	20a0      	movs	r0, #160	; 0xa0
   dcac4:	460e      	mov	r6, r1
   dcac6:	f7f7 fae8 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   dcaca:	4605      	mov	r5, r0
   dcacc:	b110      	cbz	r0, dcad4 <_ZN9TCPClientC1Ei+0x28>
   dcace:	4631      	mov	r1, r6
   dcad0:	f7ff ffde 	bl	dca90 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   dcad4:	2014      	movs	r0, #20
   dcad6:	f7f7 fae0 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   dcada:	4603      	mov	r3, r0
   dcadc:	b128      	cbz	r0, dcaea <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   dcade:	2201      	movs	r2, #1
   dcae0:	6042      	str	r2, [r0, #4]
   dcae2:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   dcae4:	4a09      	ldr	r2, [pc, #36]	; (dcb0c <_ZN9TCPClientC1Ei+0x60>)
   dcae6:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   dcae8:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   dcaea:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   dcaec:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   dcaee:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   dcaf0:	b128      	cbz	r0, dcafe <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   dcaf2:	6843      	ldr	r3, [r0, #4]
   dcaf4:	3b01      	subs	r3, #1
   dcaf6:	6043      	str	r3, [r0, #4]
   dcaf8:	b90b      	cbnz	r3, dcafe <_ZN9TCPClientC1Ei+0x52>
   dcafa:	f7ff fddf 	bl	dc6bc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   dcafe:	4620      	mov	r0, r4
   dcb00:	f7ff fed0 	bl	dc8a4 <_ZN9TCPClient12flush_bufferEv>
}
   dcb04:	4620      	mov	r0, r4
   dcb06:	bd70      	pop	{r4, r5, r6, pc}
   dcb08:	000e7f2c 	.word	0x000e7f2c
   dcb0c:	000e7f10 	.word	0x000e7f10

000dcb10 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   dcb10:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   dcb12:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   dcb16:	4604      	mov	r4, r0
        : TCPClient(-1) {
   dcb18:	f7ff ffc8 	bl	dcaac <_ZN9TCPClientC1Ei>
}
   dcb1c:	4620      	mov	r0, r4
   dcb1e:	bd10      	pop	{r4, pc}

000dcb20 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   dcb20:	b510      	push	{r4, lr}
   dcb22:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   dcb24:	6800      	ldr	r0, [r0, #0]
   dcb26:	2800      	cmp	r0, #0
   dcb28:	db01      	blt.n	dcb2e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   dcb2a:	f7fd fe5f 	bl	da7ec <sock_close>
    }
}
   dcb2e:	4620      	mov	r0, r4
   dcb30:	bd10      	pop	{r4, pc}

000dcb32 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   dcb32:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   dcb34:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   dcb36:	4620      	mov	r0, r4
   dcb38:	f7ff fff2 	bl	dcb20 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   dcb3c:	b124      	cbz	r4, dcb48 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   dcb3e:	4620      	mov	r0, r4
   dcb40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   dcb44:	f7f7 baab 	b.w	d409e <_ZdlPv>
   dcb48:	bd10      	pop	{r4, pc}

000dcb4a <_ZN10WiFiSignalD1Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
   dcb4a:	4770      	bx	lr

000dcb4c <_ZNK10WiFiSignal19getAccessTechnologyEv>:
    return true;
}

hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}
   dcb4c:	2001      	movs	r0, #1
   dcb4e:	4770      	bx	lr

000dcb50 <_ZNK10WiFiSignal16getStrengthValueEv>:
    }
    return -1.0f;
}

float WiFiSignal::getStrengthValue() const {
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
   dcb50:	8983      	ldrh	r3, [r0, #12]
   dcb52:	b11b      	cbz	r3, dcb5c <_ZNK10WiFiSignal16getStrengthValueEv+0xc>
   dcb54:	6903      	ldr	r3, [r0, #16]
   dcb56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   dcb5a:	d102      	bne.n	dcb62 <_ZNK10WiFiSignal16getStrengthValueEv+0x12>
        return inf_.rssi / 100.0f;
    }
    return 0.0f;
   dcb5c:	ed9f 0a05 	vldr	s0, [pc, #20]	; dcb74 <_ZNK10WiFiSignal16getStrengthValueEv+0x24>
   dcb60:	4770      	bx	lr
    return -1.0f;
}

float WiFiSignal::getStrengthValue() const {
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
        return inf_.rssi / 100.0f;
   dcb62:	ee07 3a90 	vmov	s15, r3
   dcb66:	ed9f 7a04 	vldr	s14, [pc, #16]	; dcb78 <_ZNK10WiFiSignal16getStrengthValueEv+0x28>
   dcb6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   dcb6e:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }
    return 0.0f;
}
   dcb72:	4770      	bx	lr
   dcb74:	00000000 	.word	0x00000000
   dcb78:	42c80000 	.word	0x42c80000

000dcb7c <_ZNK10WiFiSignal15getQualityValueEv>:
    }
    return -1.0f;
}

float WiFiSignal::getQualityValue() const {
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
   dcb7c:	8983      	ldrh	r3, [r0, #12]
   dcb7e:	b11b      	cbz	r3, dcb88 <_ZNK10WiFiSignal15getQualityValueEv+0xc>
   dcb80:	6983      	ldr	r3, [r0, #24]
   dcb82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   dcb86:	d102      	bne.n	dcb8e <_ZNK10WiFiSignal15getQualityValueEv+0x12>
        return inf_.snr / 100.0f;
    }
    return 0.0f;
   dcb88:	ed9f 0a05 	vldr	s0, [pc, #20]	; dcba0 <_ZNK10WiFiSignal15getQualityValueEv+0x24>
   dcb8c:	4770      	bx	lr
    return -1.0f;
}

float WiFiSignal::getQualityValue() const {
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
        return inf_.snr / 100.0f;
   dcb8e:	ee07 3a90 	vmov	s15, r3
   dcb92:	ed9f 7a04 	vldr	s14, [pc, #16]	; dcba4 <_ZNK10WiFiSignal15getQualityValueEv+0x28>
   dcb96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   dcb9a:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }
    return 0.0f;
}
   dcb9e:	4770      	bx	lr
   dcba0:	00000000 	.word	0x00000000
   dcba4:	42c80000 	.word	0x42c80000

000dcba8 <_ZN10WiFiSignalD0Ev>:
   dcba8:	b510      	push	{r4, lr}
   dcbaa:	2124      	movs	r1, #36	; 0x24
   dcbac:	4604      	mov	r4, r0
   dcbae:	f000 fa44 	bl	dd03a <_ZdlPvj>
   dcbb2:	4620      	mov	r0, r4
   dcbb4:	bd10      	pop	{r4, pc}

000dcbb6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   dcbb6:	2200      	movs	r2, #0
   dcbb8:	4611      	mov	r1, r2
   dcbba:	6840      	ldr	r0, [r0, #4]
   dcbbc:	f7fd bf4e 	b.w	daa5c <network_listening>

000dcbc0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   dcbc0:	2200      	movs	r2, #0
   dcbc2:	4611      	mov	r1, r2
   dcbc4:	6840      	ldr	r0, [r0, #4]
   dcbc6:	f7fd bf59 	b.w	daa7c <network_get_listen_timeout>

000dcbca <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   dcbca:	2200      	movs	r2, #0
   dcbcc:	6840      	ldr	r0, [r0, #4]
   dcbce:	f7fd bf4d 	b.w	daa6c <network_set_listen_timeout>

000dcbd2 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   dcbd2:	2200      	movs	r2, #0
   dcbd4:	f081 0101 	eor.w	r1, r1, #1
   dcbd8:	6840      	ldr	r0, [r0, #4]
   dcbda:	f7fd bf37 	b.w	daa4c <network_listen>

000dcbde <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   dcbde:	2300      	movs	r3, #0
   dcbe0:	461a      	mov	r2, r3
   dcbe2:	4619      	mov	r1, r3
   dcbe4:	6840      	ldr	r0, [r0, #4]
   dcbe6:	f7fd bf29 	b.w	daa3c <network_off>

000dcbea <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   dcbea:	2200      	movs	r2, #0
   dcbec:	4611      	mov	r1, r2
   dcbee:	6840      	ldr	r0, [r0, #4]
   dcbf0:	f7fd bf04 	b.w	da9fc <network_connecting>

000dcbf4 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   dcbf4:	2200      	movs	r2, #0
   dcbf6:	2102      	movs	r1, #2
   dcbf8:	6840      	ldr	r0, [r0, #4]
   dcbfa:	f7fd bf07 	b.w	daa0c <network_disconnect>

000dcbfe <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   dcbfe:	2300      	movs	r3, #0
   dcc00:	461a      	mov	r2, r3
   dcc02:	6840      	ldr	r0, [r0, #4]
   dcc04:	f7fd bef2 	b.w	da9ec <network_connect>

000dcc08 <_ZNK10WiFiSignal10getQualityEv>:
    }
    return 0.0f;
}

float WiFiSignal::getQuality() const {
    if (inf_.size != 0 && inf_.quality >= 0) {
   dcc08:	8983      	ldrh	r3, [r0, #12]
   dcc0a:	b17b      	cbz	r3, dcc2c <_ZNK10WiFiSignal10getQualityEv+0x24>
   dcc0c:	6a03      	ldr	r3, [r0, #32]
   dcc0e:	2b00      	cmp	r3, #0
   dcc10:	db0c      	blt.n	dcc2c <_ZNK10WiFiSignal10getQualityEv+0x24>
        return inf_.quality / 65535.0f * 100.0f;
   dcc12:	ee07 3a90 	vmov	s15, r3
   dcc16:	eddf 6a07 	vldr	s13, [pc, #28]	; dcc34 <_ZNK10WiFiSignal10getQualityEv+0x2c>
   dcc1a:	ed9f 0a07 	vldr	s0, [pc, #28]	; dcc38 <_ZNK10WiFiSignal10getQualityEv+0x30>
   dcc1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   dcc22:	eec7 7a26 	vdiv.f32	s15, s14, s13
   dcc26:	ee27 0a80 	vmul.f32	s0, s15, s0
   dcc2a:	4770      	bx	lr
    }
    return -1.0f;
   dcc2c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   dcc30:	4770      	bx	lr
   dcc32:	bf00      	nop
   dcc34:	477fff00 	.word	0x477fff00
   dcc38:	42c80000 	.word	0x42c80000

000dcc3c <_ZNK10WiFiSignal11getStrengthEv>:
hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}

float WiFiSignal::getStrength() const {
    if (inf_.size != 0 && inf_.strength >= 0) {
   dcc3c:	8983      	ldrh	r3, [r0, #12]
   dcc3e:	b17b      	cbz	r3, dcc60 <_ZNK10WiFiSignal11getStrengthEv+0x24>
   dcc40:	6943      	ldr	r3, [r0, #20]
   dcc42:	2b00      	cmp	r3, #0
   dcc44:	db0c      	blt.n	dcc60 <_ZNK10WiFiSignal11getStrengthEv+0x24>
        return inf_.strength / 65535.0f * 100.0f;
   dcc46:	ee07 3a90 	vmov	s15, r3
   dcc4a:	eddf 6a07 	vldr	s13, [pc, #28]	; dcc68 <_ZNK10WiFiSignal11getStrengthEv+0x2c>
   dcc4e:	ed9f 0a07 	vldr	s0, [pc, #28]	; dcc6c <_ZNK10WiFiSignal11getStrengthEv+0x30>
   dcc52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   dcc56:	eec7 7a26 	vdiv.f32	s15, s14, s13
   dcc5a:	ee27 0a80 	vmul.f32	s0, s15, s0
   dcc5e:	4770      	bx	lr
    }
    return -1.0f;
   dcc60:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   dcc64:	4770      	bx	lr
   dcc66:	bf00      	nop
   dcc68:	477fff00 	.word	0x477fff00
   dcc6c:	42c80000 	.word	0x42c80000

000dcc70 <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>:

WiFiSignal::operator int8_t() const {
    return this->rssi;
}

bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   dcc70:	b570      	push	{r4, r5, r6, lr}
    inf_ = inf;
   dcc72:	460d      	mov	r5, r1

WiFiSignal::operator int8_t() const {
    return this->rssi;
}

bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   dcc74:	4606      	mov	r6, r0
    inf_ = inf;
   dcc76:	f100 040c 	add.w	r4, r0, #12
   dcc7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dcc7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dcc7e:	e895 0003 	ldmia.w	r5, {r0, r1}
   dcc82:	e884 0003 	stmia.w	r4, {r0, r1}
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
   dcc86:	6933      	ldr	r3, [r6, #16]
   dcc88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   dcc8c:	bf0e      	itee	eq
   dcc8e:	2302      	moveq	r3, #2
   dcc90:	2264      	movne	r2, #100	; 0x64
   dcc92:	fb93 f3f2 	sdivne	r3, r3, r2
   dcc96:	6073      	str	r3, [r6, #4]
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
   dcc98:	69b3      	ldr	r3, [r6, #24]
   dcc9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   dcc9e:	bf0e      	itee	eq
   dcca0:	2300      	moveq	r3, #0
   dcca2:	2264      	movne	r2, #100	; 0x64
   dcca4:	fb93 f3f2 	sdivne	r3, r3, r2
   dcca8:	60b3      	str	r3, [r6, #8]
    return true;
}
   dccaa:	2001      	movs	r0, #1
   dccac:	bd70      	pop	{r4, r5, r6, pc}
	...

000dccb0 <_ZN5spark9WiFiClass4RSSIEv>:
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
        APList apList(results, result_count);
        return apList.start();
    }

    WiFiSignal WiFiClass::RSSI() {
   dccb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
public:
    // In order to be compatible with CellularSignal
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
   dccb4:	4b16      	ldr	r3, [pc, #88]	; (dcd10 <_ZN5spark9WiFiClass4RSSIEv+0x60>)
   dccb6:	6003      	str	r3, [r0, #0]
   dccb8:	2500      	movs	r5, #0
   dccba:	4688      	mov	r8, r1
   dccbc:	2702      	movs	r7, #2
   dccbe:	2618      	movs	r6, #24
   dccc0:	b086      	sub	sp, #24
   dccc2:	6047      	str	r7, [r0, #4]
   dccc4:	6085      	str	r5, [r0, #8]
   dccc6:	4632      	mov	r2, r6
   dccc8:	4629      	mov	r1, r5
   dccca:	4604      	mov	r4, r0
   dcccc:	300c      	adds	r0, #12
   dccce:	f006 fc5c 	bl	e358a <memset>
        WiFiSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   dccd2:	462a      	mov	r2, r5
   dccd4:	4629      	mov	r1, r5
   dccd6:	f8d8 0004 	ldr.w	r0, [r8, #4]
   dccda:	f7fd fe9f 	bl	daa1c <network_ready>
   dccde:	b190      	cbz	r0, dcd06 <_ZN5spark9WiFiClass4RSSIEv+0x56>
            return sig;
        }

        wlan_connected_info_t info = {0};
   dcce0:	4632      	mov	r2, r6
   dcce2:	4629      	mov	r1, r5
   dcce4:	4668      	mov	r0, sp
   dcce6:	f006 fc50 	bl	e358a <memset>
        info.size = sizeof(info);
        int r = wlan_connected_info(nullptr, &info, nullptr);
   dccea:	462a      	mov	r2, r5
   dccec:	4669      	mov	r1, sp
   dccee:	4628      	mov	r0, r5
        if (!network_ready(*this, 0, NULL)) {
            return sig;
        }

        wlan_connected_info_t info = {0};
        info.size = sizeof(info);
   dccf0:	f8ad 6000 	strh.w	r6, [sp]
        int r = wlan_connected_info(nullptr, &info, nullptr);
   dccf4:	f7fd fdda 	bl	da8ac <wlan_connected_info>
        if (r == 0) {
   dccf8:	b920      	cbnz	r0, dcd04 <_ZN5spark9WiFiClass4RSSIEv+0x54>
            sig.fromConnectedInfo(info);
   dccfa:	4669      	mov	r1, sp
   dccfc:	4620      	mov	r0, r4
   dccfe:	f7ff ffb7 	bl	dcc70 <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>
            return sig;
   dcd02:	e000      	b.n	dcd06 <_ZN5spark9WiFiClass4RSSIEv+0x56>
        }

        sig.rssi = 2;
   dcd04:	6067      	str	r7, [r4, #4]
        return sig;
    }
   dcd06:	4620      	mov	r0, r4
   dcd08:	b006      	add	sp, #24
   dcd0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dcd0e:	bf00      	nop
   dcd10:	000e7fc4 	.word	0x000e7fc4

000dcd14 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   dcd14:	4b02      	ldr	r3, [pc, #8]	; (dcd20 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   dcd16:	2204      	movs	r2, #4
   dcd18:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   dcd1a:	4a02      	ldr	r2, [pc, #8]	; (dcd24 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   dcd1c:	601a      	str	r2, [r3, #0]
   dcd1e:	4770      	bx	lr
   dcd20:	2003e5e0 	.word	0x2003e5e0
   dcd24:	000e7f90 	.word	0x000e7f90

000dcd28 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   dcd28:	2300      	movs	r3, #0
   dcd2a:	461a      	mov	r2, r3
   dcd2c:	6840      	ldr	r0, [r0, #4]
   dcd2e:	f7fd be5d 	b.w	da9ec <network_connect>

000dcd32 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   dcd32:	2200      	movs	r2, #0
   dcd34:	2102      	movs	r1, #2
   dcd36:	6840      	ldr	r0, [r0, #4]
   dcd38:	f7fd be68 	b.w	daa0c <network_disconnect>

000dcd3c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   dcd3c:	2200      	movs	r2, #0
   dcd3e:	4611      	mov	r1, r2
   dcd40:	6840      	ldr	r0, [r0, #4]
   dcd42:	f7fd be5b 	b.w	da9fc <network_connecting>

000dcd46 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   dcd46:	2200      	movs	r2, #0
   dcd48:	4611      	mov	r1, r2
   dcd4a:	6840      	ldr	r0, [r0, #4]
   dcd4c:	f7fd be66 	b.w	daa1c <network_ready>

000dcd50 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   dcd50:	2300      	movs	r3, #0
   dcd52:	461a      	mov	r2, r3
   dcd54:	4619      	mov	r1, r3
   dcd56:	6840      	ldr	r0, [r0, #4]
   dcd58:	f7fd be68 	b.w	daa2c <network_on>

000dcd5c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   dcd5c:	2300      	movs	r3, #0
   dcd5e:	461a      	mov	r2, r3
   dcd60:	4619      	mov	r1, r3
   dcd62:	6840      	ldr	r0, [r0, #4]
   dcd64:	f7fd be6a 	b.w	daa3c <network_off>

000dcd68 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   dcd68:	2200      	movs	r2, #0
   dcd6a:	f081 0101 	eor.w	r1, r1, #1
   dcd6e:	6840      	ldr	r0, [r0, #4]
   dcd70:	f7fd be6c 	b.w	daa4c <network_listen>

000dcd74 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   dcd74:	2200      	movs	r2, #0
   dcd76:	6840      	ldr	r0, [r0, #4]
   dcd78:	f7fd be78 	b.w	daa6c <network_set_listen_timeout>

000dcd7c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   dcd7c:	2200      	movs	r2, #0
   dcd7e:	4611      	mov	r1, r2
   dcd80:	6840      	ldr	r0, [r0, #4]
   dcd82:	f7fd be7b 	b.w	daa7c <network_get_listen_timeout>

000dcd86 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   dcd86:	2200      	movs	r2, #0
   dcd88:	4611      	mov	r1, r2
   dcd8a:	6840      	ldr	r0, [r0, #4]
   dcd8c:	f7fd be66 	b.w	daa5c <network_listening>

000dcd90 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   dcd90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   dcd94:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   dcd96:	b095      	sub	sp, #84	; 0x54
   dcd98:	4616      	mov	r6, r2
   dcd9a:	460d      	mov	r5, r1
   dcd9c:	4607      	mov	r7, r0
    IPAddress addr;
   dcd9e:	f7ff f935 	bl	dc00c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   dcda2:	4621      	mov	r1, r4
   dcda4:	2220      	movs	r2, #32
   dcda6:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   dcda8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   dcdaa:	f006 fbee 	bl	e358a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   dcdae:	2340      	movs	r3, #64	; 0x40
   dcdb0:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   dcdb2:	4621      	mov	r1, r4
   dcdb4:	466b      	mov	r3, sp
   dcdb6:	aa0c      	add	r2, sp, #48	; 0x30
   dcdb8:	4630      	mov	r0, r6
   dcdba:	f7fd fb4f 	bl	da45c <netdb_getaddrinfo>
    if (!r) {
   dcdbe:	4604      	mov	r4, r0
   dcdc0:	2800      	cmp	r0, #0
   dcdc2:	d144      	bne.n	dce4e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   dcdc4:	4602      	mov	r2, r0
   dcdc6:	2101      	movs	r1, #1
   dcdc8:	6868      	ldr	r0, [r5, #4]
   dcdca:	f7fd fe27 	bl	daa1c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   dcdce:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   dcdd0:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   dcdd2:	4622      	mov	r2, r4
   dcdd4:	6868      	ldr	r0, [r5, #4]
   dcdd6:	f7fd fe21 	bl	daa1c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   dcdda:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   dcddc:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   dcdde:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   dcde0:	2e00      	cmp	r6, #0
   dcde2:	d034      	beq.n	dce4e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   dcde4:	2900      	cmp	r1, #0
   dcde6:	d132      	bne.n	dce4e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   dcde8:	6873      	ldr	r3, [r6, #4]
   dcdea:	2b02      	cmp	r3, #2
   dcdec:	d002      	beq.n	dcdf4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   dcdee:	2b0a      	cmp	r3, #10
   dcdf0:	d009      	beq.n	dce06 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   dcdf2:	e02a      	b.n	dce4a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   dcdf4:	f1b8 0f00 	cmp.w	r8, #0
   dcdf8:	d027      	beq.n	dce4a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   dcdfa:	6971      	ldr	r1, [r6, #20]
   dcdfc:	4638      	mov	r0, r7
   dcdfe:	3104      	adds	r1, #4
   dce00:	f7ff f947 	bl	dc092 <_ZN9IPAddressaSEPKh>
   dce04:	e020      	b.n	dce48 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   dce06:	f1b9 0f00 	cmp.w	r9, #0
   dce0a:	d01e      	beq.n	dce4a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   dce0c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   dce0e:	2211      	movs	r2, #17
   dce10:	a801      	add	r0, sp, #4
   dce12:	f006 fbba 	bl	e358a <memset>
                    a.v = 6;
   dce16:	2306      	movs	r3, #6
   dce18:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   dce1c:	ad01      	add	r5, sp, #4
   dce1e:	f104 0308 	add.w	r3, r4, #8
   dce22:	3418      	adds	r4, #24
   dce24:	6818      	ldr	r0, [r3, #0]
   dce26:	6859      	ldr	r1, [r3, #4]
   dce28:	462a      	mov	r2, r5
   dce2a:	c203      	stmia	r2!, {r0, r1}
   dce2c:	3308      	adds	r3, #8
   dce2e:	42a3      	cmp	r3, r4
   dce30:	4615      	mov	r5, r2
   dce32:	d1f7      	bne.n	dce24 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   dce34:	a901      	add	r1, sp, #4
   dce36:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   dce38:	ad07      	add	r5, sp, #28
   dce3a:	f7ff f8f5 	bl	dc028 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   dce3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dce40:	1d3c      	adds	r4, r7, #4
   dce42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dce44:	682b      	ldr	r3, [r5, #0]
   dce46:	7023      	strb	r3, [r4, #0]
                    ok = true;
   dce48:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   dce4a:	69f6      	ldr	r6, [r6, #28]
   dce4c:	e7c8      	b.n	dcde0 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   dce4e:	9800      	ldr	r0, [sp, #0]
   dce50:	f7fd fafc 	bl	da44c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   dce54:	4638      	mov	r0, r7
   dce56:	b015      	add	sp, #84	; 0x54
   dce58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000dce5c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   dce5c:	4b02      	ldr	r3, [pc, #8]	; (dce68 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   dce5e:	4a03      	ldr	r2, [pc, #12]	; (dce6c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   dce60:	601a      	str	r2, [r3, #0]
   dce62:	2200      	movs	r2, #0
   dce64:	605a      	str	r2, [r3, #4]
   dce66:	4770      	bx	lr
   dce68:	2003e5e8 	.word	0x2003e5e8
   dce6c:	000e7fe8 	.word	0x000e7fe8

000dce70 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   dce70:	b510      	push	{r4, lr}
   dce72:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   dce74:	480f      	ldr	r0, [pc, #60]	; (dceb4 <pinAvailable+0x44>)
   dce76:	f7fd ff21 	bl	dacbc <_ZN8SPIClass9isEnabledEv>
   dce7a:	b128      	cbz	r0, dce88 <pinAvailable+0x18>
   dce7c:	f1a4 030b 	sub.w	r3, r4, #11
   dce80:	2b02      	cmp	r3, #2
   dce82:	d801      	bhi.n	dce88 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   dce84:	2000      	movs	r0, #0
   dce86:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   dce88:	f000 f8b2 	bl	dcff0 <_Z19__fetch_global_Wirev>
   dce8c:	f7ff faca 	bl	dc424 <_ZN7TwoWire9isEnabledEv>
   dce90:	b108      	cbz	r0, dce96 <pinAvailable+0x26>
   dce92:	2c01      	cmp	r4, #1
   dce94:	d9f6      	bls.n	dce84 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   dce96:	f7ff fa1b 	bl	dc2d0 <_Z22__fetch_global_Serial1v>
   dce9a:	f7ff fa16 	bl	dc2ca <_ZN11USARTSerial9isEnabledEv>
   dce9e:	b118      	cbz	r0, dcea8 <pinAvailable+0x38>
   dcea0:	f1a4 0309 	sub.w	r3, r4, #9
   dcea4:	2b01      	cmp	r3, #1
   dcea6:	d9ed      	bls.n	dce84 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   dcea8:	2c23      	cmp	r4, #35	; 0x23
   dceaa:	bf8c      	ite	hi
   dceac:	2000      	movhi	r0, #0
   dceae:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   dceb0:	bd10      	pop	{r4, pc}
   dceb2:	bf00      	nop
   dceb4:	2003e5f0 	.word	0x2003e5f0

000dceb8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   dceb8:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   dceba:	b538      	push	{r3, r4, r5, lr}
   dcebc:	4604      	mov	r4, r0
   dcebe:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   dcec0:	d80a      	bhi.n	dced8 <pinMode+0x20>
   dcec2:	29ff      	cmp	r1, #255	; 0xff
   dcec4:	d008      	beq.n	dced8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   dcec6:	f7ff ffd3 	bl	dce70 <pinAvailable>
   dceca:	b128      	cbz	r0, dced8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   dcecc:	4629      	mov	r1, r5
   dcece:	4620      	mov	r0, r4
}
   dced0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   dced4:	f7fd bada 	b.w	da48c <HAL_Pin_Mode>
   dced8:	bd38      	pop	{r3, r4, r5, pc}

000dceda <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   dceda:	b538      	push	{r3, r4, r5, lr}
   dcedc:	4604      	mov	r4, r0
   dcede:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   dcee0:	f7fd fadc 	bl	da49c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   dcee4:	28ff      	cmp	r0, #255	; 0xff
   dcee6:	d010      	beq.n	dcf0a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   dcee8:	2806      	cmp	r0, #6
   dceea:	d804      	bhi.n	dcef6 <digitalWrite+0x1c>
   dceec:	234d      	movs	r3, #77	; 0x4d
   dceee:	fa23 f000 	lsr.w	r0, r3, r0
   dcef2:	07c3      	lsls	r3, r0, #31
   dcef4:	d409      	bmi.n	dcf0a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   dcef6:	4620      	mov	r0, r4
   dcef8:	f7ff ffba 	bl	dce70 <pinAvailable>
   dcefc:	b128      	cbz	r0, dcf0a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   dcefe:	4629      	mov	r1, r5
   dcf00:	4620      	mov	r0, r4
}
   dcf02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   dcf06:	f7fd bad1 	b.w	da4ac <HAL_GPIO_Write>
   dcf0a:	bd38      	pop	{r3, r4, r5, pc}

000dcf0c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   dcf0c:	b510      	push	{r4, lr}
   dcf0e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   dcf10:	f7fd fac4 	bl	da49c <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   dcf14:	3804      	subs	r0, #4
   dcf16:	b2c0      	uxtb	r0, r0
   dcf18:	2801      	cmp	r0, #1
   dcf1a:	d908      	bls.n	dcf2e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   dcf1c:	4620      	mov	r0, r4
   dcf1e:	f7ff ffa7 	bl	dce70 <pinAvailable>
   dcf22:	b120      	cbz	r0, dcf2e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   dcf24:	4620      	mov	r0, r4
}
   dcf26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   dcf2a:	f7fd bac7 	b.w	da4bc <HAL_GPIO_Read>
}
   dcf2e:	2000      	movs	r0, #0
   dcf30:	bd10      	pop	{r4, pc}

000dcf32 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   dcf32:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   dcf34:	b510      	push	{r4, lr}
   dcf36:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   dcf38:	bf9c      	itt	ls
   dcf3a:	340e      	addls	r4, #14
   dcf3c:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   dcf3e:	4620      	mov	r0, r4
   dcf40:	f7ff ff96 	bl	dce70 <pinAvailable>
   dcf44:	b150      	cbz	r0, dcf5c <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   dcf46:	2103      	movs	r1, #3
   dcf48:	4620      	mov	r0, r4
   dcf4a:	f7fd fa97 	bl	da47c <HAL_Validate_Pin_Function>
   dcf4e:	2803      	cmp	r0, #3
   dcf50:	d104      	bne.n	dcf5c <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   dcf52:	4620      	mov	r0, r4
}
   dcf54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   dcf58:	f7fd bad0 	b.w	da4fc <HAL_ADC_Read>
}
   dcf5c:	2000      	movs	r0, #0
   dcf5e:	bd10      	pop	{r4, pc}

000dcf60 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   dcf60:	b538      	push	{r3, r4, r5, lr}
   dcf62:	4604      	mov	r4, r0
   dcf64:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   dcf66:	f7ff ff83 	bl	dce70 <pinAvailable>
   dcf6a:	b1f0      	cbz	r0, dcfaa <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   dcf6c:	2104      	movs	r1, #4
   dcf6e:	4620      	mov	r0, r4
   dcf70:	f7fd fa84 	bl	da47c <HAL_Validate_Pin_Function>
   dcf74:	2804      	cmp	r0, #4
   dcf76:	d105      	bne.n	dcf84 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   dcf78:	b2a9      	uxth	r1, r5
   dcf7a:	4620      	mov	r0, r4
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
    }
}
   dcf7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
    {
        HAL_DAC_Write(pin, value);
   dcf80:	f7fd bab4 	b.w	da4ec <HAL_DAC_Write>
    }
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   dcf84:	2102      	movs	r1, #2
   dcf86:	4620      	mov	r0, r4
   dcf88:	f7fd fa78 	bl	da47c <HAL_Validate_Pin_Function>
   dcf8c:	2802      	cmp	r0, #2
   dcf8e:	d10c      	bne.n	dcfaa <_Z11analogWritetm+0x4a>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
   dcf90:	4620      	mov	r0, r4
   dcf92:	f7fd fa83 	bl	da49c <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   dcf96:	2801      	cmp	r0, #1
   dcf98:	d001      	beq.n	dcf9e <_Z11analogWritetm+0x3e>
   dcf9a:	2804      	cmp	r0, #4
   dcf9c:	d105      	bne.n	dcfaa <_Z11analogWritetm+0x4a>
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   dcf9e:	4629      	mov	r1, r5
   dcfa0:	4620      	mov	r0, r4
    }
}
   dcfa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   dcfa6:	f7fd bab1 	b.w	da50c <HAL_PWM_Write_Ext>
   dcfaa:	bd38      	pop	{r3, r4, r5, pc}

000dcfac <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   dcfac:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   dcfae:	4c0c      	ldr	r4, [pc, #48]	; (dcfe0 <_GLOBAL__sub_I_SPI+0x34>)
   dcfb0:	4e0c      	ldr	r6, [pc, #48]	; (dcfe4 <_GLOBAL__sub_I_SPI+0x38>)
   dcfb2:	4d0d      	ldr	r5, [pc, #52]	; (dcfe8 <_GLOBAL__sub_I_SPI+0x3c>)
   dcfb4:	2100      	movs	r1, #0
   dcfb6:	4620      	mov	r0, r4
   dcfb8:	f7fd fe66 	bl	dac88 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   dcfbc:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   dcfbe:	4c0b      	ldr	r4, [pc, #44]	; (dcfec <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   dcfc0:	4632      	mov	r2, r6
   dcfc2:	4629      	mov	r1, r5
   dcfc4:	f000 f834 	bl	dd030 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   dcfc8:	2101      	movs	r1, #1
   dcfca:	4620      	mov	r0, r4
   dcfcc:	f7fd fe5c 	bl	dac88 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   dcfd0:	4632      	mov	r2, r6
   dcfd2:	4629      	mov	r1, r5
   dcfd4:	4620      	mov	r0, r4
   dcfd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   dcfda:	f000 b829 	b.w	dd030 <__aeabi_atexit>
   dcfde:	bf00      	nop
   dcfe0:	2003e5f0 	.word	0x2003e5f0
   dcfe4:	2003d6b0 	.word	0x2003d6b0
   dcfe8:	000dac79 	.word	0x000dac79
   dcfec:	2003e600 	.word	0x2003e600

000dcff0 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   dcff0:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   dcff2:	4d0b      	ldr	r5, [pc, #44]	; (dd020 <_Z19__fetch_global_Wirev+0x30>)
   dcff4:	6829      	ldr	r1, [r5, #0]
   dcff6:	f011 0401 	ands.w	r4, r1, #1
   dcffa:	d10f      	bne.n	dd01c <_Z19__fetch_global_Wirev+0x2c>
   dcffc:	4628      	mov	r0, r5
   dcffe:	f7f7 f852 	bl	d40a6 <__cxa_guard_acquire>
   dd002:	b158      	cbz	r0, dd01c <_Z19__fetch_global_Wirev+0x2c>
   dd004:	4621      	mov	r1, r4
   dd006:	4807      	ldr	r0, [pc, #28]	; (dd024 <_Z19__fetch_global_Wirev+0x34>)
   dd008:	f7ff f9c8 	bl	dc39c <_ZN7TwoWireC1E17HAL_I2C_Interface>
   dd00c:	4628      	mov	r0, r5
   dd00e:	f7f7 f84f 	bl	d40b0 <__cxa_guard_release>
   dd012:	4a05      	ldr	r2, [pc, #20]	; (dd028 <_Z19__fetch_global_Wirev+0x38>)
   dd014:	4905      	ldr	r1, [pc, #20]	; (dd02c <_Z19__fetch_global_Wirev+0x3c>)
   dd016:	4803      	ldr	r0, [pc, #12]	; (dd024 <_Z19__fetch_global_Wirev+0x34>)
   dd018:	f000 f80a 	bl	dd030 <__aeabi_atexit>
	return wire;
}
   dd01c:	4801      	ldr	r0, [pc, #4]	; (dd024 <_Z19__fetch_global_Wirev+0x34>)
   dd01e:	bd38      	pop	{r3, r4, r5, pc}
   dd020:	2003e614 	.word	0x2003e614
   dd024:	2003e618 	.word	0x2003e618
   dd028:	2003d6b0 	.word	0x2003d6b0
   dd02c:	000dc345 	.word	0x000dc345

000dd030 <__aeabi_atexit>:
   dd030:	460b      	mov	r3, r1
   dd032:	4601      	mov	r1, r0
   dd034:	4618      	mov	r0, r3
   dd036:	f006 b993 	b.w	e3360 <__cxa_atexit>

000dd03a <_ZdlPvj>:
   dd03a:	f7f7 b830 	b.w	d409e <_ZdlPv>

000dd03e <_ZSt25__throw_bad_function_callv>:
   dd03e:	b508      	push	{r3, lr}
   dd040:	f7fd fd9c 	bl	dab7c <abort>

000dd044 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   dd044:	4b18      	ldr	r3, [pc, #96]	; (dd0a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   dd046:	681a      	ldr	r2, [r3, #0]
   dd048:	07d1      	lsls	r1, r2, #31
   dd04a:	bf5c      	itt	pl
   dd04c:	2201      	movpl	r2, #1
   dd04e:	601a      	strpl	r2, [r3, #0]
   dd050:	4b16      	ldr	r3, [pc, #88]	; (dd0ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   dd052:	681a      	ldr	r2, [r3, #0]
   dd054:	07d2      	lsls	r2, r2, #31
   dd056:	bf5c      	itt	pl
   dd058:	2201      	movpl	r2, #1
   dd05a:	601a      	strpl	r2, [r3, #0]
   dd05c:	4b14      	ldr	r3, [pc, #80]	; (dd0b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   dd05e:	681a      	ldr	r2, [r3, #0]
   dd060:	07d0      	lsls	r0, r2, #31
   dd062:	bf5c      	itt	pl
   dd064:	2201      	movpl	r2, #1
   dd066:	601a      	strpl	r2, [r3, #0]
   dd068:	4b12      	ldr	r3, [pc, #72]	; (dd0b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   dd06a:	681a      	ldr	r2, [r3, #0]
   dd06c:	07d1      	lsls	r1, r2, #31
   dd06e:	bf5c      	itt	pl
   dd070:	2201      	movpl	r2, #1
   dd072:	601a      	strpl	r2, [r3, #0]
   dd074:	4b10      	ldr	r3, [pc, #64]	; (dd0b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   dd076:	681a      	ldr	r2, [r3, #0]
   dd078:	07d2      	lsls	r2, r2, #31
   dd07a:	bf5c      	itt	pl
   dd07c:	2201      	movpl	r2, #1
   dd07e:	601a      	strpl	r2, [r3, #0]
   dd080:	4b0e      	ldr	r3, [pc, #56]	; (dd0bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   dd082:	681a      	ldr	r2, [r3, #0]
   dd084:	07d0      	lsls	r0, r2, #31
   dd086:	bf5c      	itt	pl
   dd088:	2201      	movpl	r2, #1
   dd08a:	601a      	strpl	r2, [r3, #0]
   dd08c:	4b0c      	ldr	r3, [pc, #48]	; (dd0c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   dd08e:	681a      	ldr	r2, [r3, #0]
   dd090:	07d1      	lsls	r1, r2, #31
   dd092:	bf5c      	itt	pl
   dd094:	2201      	movpl	r2, #1
   dd096:	601a      	strpl	r2, [r3, #0]
   dd098:	4b0a      	ldr	r3, [pc, #40]	; (dd0c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   dd09a:	681a      	ldr	r2, [r3, #0]
   dd09c:	07d2      	lsls	r2, r2, #31
   dd09e:	bf5c      	itt	pl
   dd0a0:	2201      	movpl	r2, #1
   dd0a2:	601a      	strpl	r2, [r3, #0]
   dd0a4:	4770      	bx	lr
   dd0a6:	bf00      	nop
   dd0a8:	2003e648 	.word	0x2003e648
   dd0ac:	2003e644 	.word	0x2003e644
   dd0b0:	2003e640 	.word	0x2003e640
   dd0b4:	2003e63c 	.word	0x2003e63c
   dd0b8:	2003e638 	.word	0x2003e638
   dd0bc:	2003e634 	.word	0x2003e634
   dd0c0:	2003e630 	.word	0x2003e630
   dd0c4:	2003e62c 	.word	0x2003e62c

000dd0c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   dd0c8:	4b24      	ldr	r3, [pc, #144]	; (dd15c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   dd0ca:	681a      	ldr	r2, [r3, #0]
   dd0cc:	07d0      	lsls	r0, r2, #31
   dd0ce:	bf5c      	itt	pl
   dd0d0:	2201      	movpl	r2, #1
   dd0d2:	601a      	strpl	r2, [r3, #0]
   dd0d4:	4b22      	ldr	r3, [pc, #136]	; (dd160 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   dd0d6:	681a      	ldr	r2, [r3, #0]
   dd0d8:	07d1      	lsls	r1, r2, #31
   dd0da:	bf5c      	itt	pl
   dd0dc:	2201      	movpl	r2, #1
   dd0de:	601a      	strpl	r2, [r3, #0]
   dd0e0:	4b20      	ldr	r3, [pc, #128]	; (dd164 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   dd0e2:	681a      	ldr	r2, [r3, #0]
   dd0e4:	07d2      	lsls	r2, r2, #31
   dd0e6:	bf5c      	itt	pl
   dd0e8:	2201      	movpl	r2, #1
   dd0ea:	601a      	strpl	r2, [r3, #0]
   dd0ec:	4b1e      	ldr	r3, [pc, #120]	; (dd168 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   dd0ee:	681a      	ldr	r2, [r3, #0]
   dd0f0:	07d0      	lsls	r0, r2, #31
   dd0f2:	bf5c      	itt	pl
   dd0f4:	2201      	movpl	r2, #1
   dd0f6:	601a      	strpl	r2, [r3, #0]
   dd0f8:	4b1c      	ldr	r3, [pc, #112]	; (dd16c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   dd0fa:	681a      	ldr	r2, [r3, #0]
   dd0fc:	07d1      	lsls	r1, r2, #31
   dd0fe:	bf5c      	itt	pl
   dd100:	2201      	movpl	r2, #1
   dd102:	601a      	strpl	r2, [r3, #0]
   dd104:	4b1a      	ldr	r3, [pc, #104]	; (dd170 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   dd106:	681a      	ldr	r2, [r3, #0]
   dd108:	07d2      	lsls	r2, r2, #31
   dd10a:	bf5c      	itt	pl
   dd10c:	2201      	movpl	r2, #1
   dd10e:	601a      	strpl	r2, [r3, #0]
   dd110:	4b18      	ldr	r3, [pc, #96]	; (dd174 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   dd112:	681a      	ldr	r2, [r3, #0]
   dd114:	07d0      	lsls	r0, r2, #31
   dd116:	bf5c      	itt	pl
   dd118:	2201      	movpl	r2, #1
   dd11a:	601a      	strpl	r2, [r3, #0]
   dd11c:	4b16      	ldr	r3, [pc, #88]	; (dd178 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   dd11e:	681a      	ldr	r2, [r3, #0]
   dd120:	07d1      	lsls	r1, r2, #31
   dd122:	bf5c      	itt	pl
   dd124:	2201      	movpl	r2, #1
   dd126:	601a      	strpl	r2, [r3, #0]
   dd128:	4b14      	ldr	r3, [pc, #80]	; (dd17c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   dd12a:	681a      	ldr	r2, [r3, #0]
   dd12c:	07d2      	lsls	r2, r2, #31
   dd12e:	bf5c      	itt	pl
   dd130:	2201      	movpl	r2, #1
   dd132:	601a      	strpl	r2, [r3, #0]
   dd134:	4b12      	ldr	r3, [pc, #72]	; (dd180 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   dd136:	681a      	ldr	r2, [r3, #0]
   dd138:	07d0      	lsls	r0, r2, #31
   dd13a:	bf5c      	itt	pl
   dd13c:	2201      	movpl	r2, #1
   dd13e:	601a      	strpl	r2, [r3, #0]
   dd140:	4b10      	ldr	r3, [pc, #64]	; (dd184 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   dd142:	681a      	ldr	r2, [r3, #0]
   dd144:	07d1      	lsls	r1, r2, #31
   dd146:	bf5c      	itt	pl
   dd148:	2201      	movpl	r2, #1
   dd14a:	601a      	strpl	r2, [r3, #0]
   dd14c:	4b0e      	ldr	r3, [pc, #56]	; (dd188 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   dd14e:	681a      	ldr	r2, [r3, #0]
   dd150:	07d2      	lsls	r2, r2, #31
   dd152:	bf5c      	itt	pl
   dd154:	2201      	movpl	r2, #1
   dd156:	601a      	strpl	r2, [r3, #0]
   dd158:	4770      	bx	lr
   dd15a:	bf00      	nop
   dd15c:	2003e678 	.word	0x2003e678
   dd160:	2003e674 	.word	0x2003e674
   dd164:	2003e670 	.word	0x2003e670
   dd168:	2003e66c 	.word	0x2003e66c
   dd16c:	2003e668 	.word	0x2003e668
   dd170:	2003e664 	.word	0x2003e664
   dd174:	2003e660 	.word	0x2003e660
   dd178:	2003e65c 	.word	0x2003e65c
   dd17c:	2003e658 	.word	0x2003e658
   dd180:	2003e654 	.word	0x2003e654
   dd184:	2003e650 	.word	0x2003e650
   dd188:	2003e64c 	.word	0x2003e64c

000dd18c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   dd18c:	4b24      	ldr	r3, [pc, #144]	; (dd220 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   dd18e:	681a      	ldr	r2, [r3, #0]
   dd190:	07d0      	lsls	r0, r2, #31
   dd192:	bf5c      	itt	pl
   dd194:	2201      	movpl	r2, #1
   dd196:	601a      	strpl	r2, [r3, #0]
   dd198:	4b22      	ldr	r3, [pc, #136]	; (dd224 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   dd19a:	681a      	ldr	r2, [r3, #0]
   dd19c:	07d1      	lsls	r1, r2, #31
   dd19e:	bf5c      	itt	pl
   dd1a0:	2201      	movpl	r2, #1
   dd1a2:	601a      	strpl	r2, [r3, #0]
   dd1a4:	4b20      	ldr	r3, [pc, #128]	; (dd228 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   dd1a6:	681a      	ldr	r2, [r3, #0]
   dd1a8:	07d2      	lsls	r2, r2, #31
   dd1aa:	bf5c      	itt	pl
   dd1ac:	2201      	movpl	r2, #1
   dd1ae:	601a      	strpl	r2, [r3, #0]
   dd1b0:	4b1e      	ldr	r3, [pc, #120]	; (dd22c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   dd1b2:	681a      	ldr	r2, [r3, #0]
   dd1b4:	07d0      	lsls	r0, r2, #31
   dd1b6:	bf5c      	itt	pl
   dd1b8:	2201      	movpl	r2, #1
   dd1ba:	601a      	strpl	r2, [r3, #0]
   dd1bc:	4b1c      	ldr	r3, [pc, #112]	; (dd230 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   dd1be:	681a      	ldr	r2, [r3, #0]
   dd1c0:	07d1      	lsls	r1, r2, #31
   dd1c2:	bf5c      	itt	pl
   dd1c4:	2201      	movpl	r2, #1
   dd1c6:	601a      	strpl	r2, [r3, #0]
   dd1c8:	4b1a      	ldr	r3, [pc, #104]	; (dd234 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   dd1ca:	681a      	ldr	r2, [r3, #0]
   dd1cc:	07d2      	lsls	r2, r2, #31
   dd1ce:	bf5c      	itt	pl
   dd1d0:	2201      	movpl	r2, #1
   dd1d2:	601a      	strpl	r2, [r3, #0]
   dd1d4:	4b18      	ldr	r3, [pc, #96]	; (dd238 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   dd1d6:	681a      	ldr	r2, [r3, #0]
   dd1d8:	07d0      	lsls	r0, r2, #31
   dd1da:	bf5c      	itt	pl
   dd1dc:	2201      	movpl	r2, #1
   dd1de:	601a      	strpl	r2, [r3, #0]
   dd1e0:	4b16      	ldr	r3, [pc, #88]	; (dd23c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   dd1e2:	681a      	ldr	r2, [r3, #0]
   dd1e4:	07d1      	lsls	r1, r2, #31
   dd1e6:	bf5c      	itt	pl
   dd1e8:	2201      	movpl	r2, #1
   dd1ea:	601a      	strpl	r2, [r3, #0]
   dd1ec:	4b14      	ldr	r3, [pc, #80]	; (dd240 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   dd1ee:	681a      	ldr	r2, [r3, #0]
   dd1f0:	07d2      	lsls	r2, r2, #31
   dd1f2:	bf5c      	itt	pl
   dd1f4:	2201      	movpl	r2, #1
   dd1f6:	601a      	strpl	r2, [r3, #0]
   dd1f8:	4b12      	ldr	r3, [pc, #72]	; (dd244 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   dd1fa:	681a      	ldr	r2, [r3, #0]
   dd1fc:	07d0      	lsls	r0, r2, #31
   dd1fe:	bf5c      	itt	pl
   dd200:	2201      	movpl	r2, #1
   dd202:	601a      	strpl	r2, [r3, #0]
   dd204:	4b10      	ldr	r3, [pc, #64]	; (dd248 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   dd206:	681a      	ldr	r2, [r3, #0]
   dd208:	07d1      	lsls	r1, r2, #31
   dd20a:	bf5c      	itt	pl
   dd20c:	2201      	movpl	r2, #1
   dd20e:	601a      	strpl	r2, [r3, #0]
   dd210:	4b0e      	ldr	r3, [pc, #56]	; (dd24c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   dd212:	681a      	ldr	r2, [r3, #0]
   dd214:	07d2      	lsls	r2, r2, #31
   dd216:	bf5c      	itt	pl
   dd218:	2201      	movpl	r2, #1
   dd21a:	601a      	strpl	r2, [r3, #0]
   dd21c:	4770      	bx	lr
   dd21e:	bf00      	nop
   dd220:	2003e6a8 	.word	0x2003e6a8
   dd224:	2003e6a4 	.word	0x2003e6a4
   dd228:	2003e6a0 	.word	0x2003e6a0
   dd22c:	2003e69c 	.word	0x2003e69c
   dd230:	2003e698 	.word	0x2003e698
   dd234:	2003e694 	.word	0x2003e694
   dd238:	2003e690 	.word	0x2003e690
   dd23c:	2003e68c 	.word	0x2003e68c
   dd240:	2003e688 	.word	0x2003e688
   dd244:	2003e684 	.word	0x2003e684
   dd248:	2003e680 	.word	0x2003e680
   dd24c:	2003e67c 	.word	0x2003e67c

000dd250 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   dd250:	4b18      	ldr	r3, [pc, #96]	; (dd2b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   dd252:	681a      	ldr	r2, [r3, #0]
   dd254:	07d1      	lsls	r1, r2, #31
   dd256:	bf5c      	itt	pl
   dd258:	2201      	movpl	r2, #1
   dd25a:	601a      	strpl	r2, [r3, #0]
   dd25c:	4b16      	ldr	r3, [pc, #88]	; (dd2b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   dd25e:	681a      	ldr	r2, [r3, #0]
   dd260:	07d2      	lsls	r2, r2, #31
   dd262:	bf5c      	itt	pl
   dd264:	2201      	movpl	r2, #1
   dd266:	601a      	strpl	r2, [r3, #0]
   dd268:	4b14      	ldr	r3, [pc, #80]	; (dd2bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   dd26a:	681a      	ldr	r2, [r3, #0]
   dd26c:	07d0      	lsls	r0, r2, #31
   dd26e:	bf5c      	itt	pl
   dd270:	2201      	movpl	r2, #1
   dd272:	601a      	strpl	r2, [r3, #0]
   dd274:	4b12      	ldr	r3, [pc, #72]	; (dd2c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   dd276:	681a      	ldr	r2, [r3, #0]
   dd278:	07d1      	lsls	r1, r2, #31
   dd27a:	bf5c      	itt	pl
   dd27c:	2201      	movpl	r2, #1
   dd27e:	601a      	strpl	r2, [r3, #0]
   dd280:	4b10      	ldr	r3, [pc, #64]	; (dd2c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   dd282:	681a      	ldr	r2, [r3, #0]
   dd284:	07d2      	lsls	r2, r2, #31
   dd286:	bf5c      	itt	pl
   dd288:	2201      	movpl	r2, #1
   dd28a:	601a      	strpl	r2, [r3, #0]
   dd28c:	4b0e      	ldr	r3, [pc, #56]	; (dd2c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   dd28e:	681a      	ldr	r2, [r3, #0]
   dd290:	07d0      	lsls	r0, r2, #31
   dd292:	bf5c      	itt	pl
   dd294:	2201      	movpl	r2, #1
   dd296:	601a      	strpl	r2, [r3, #0]
   dd298:	4b0c      	ldr	r3, [pc, #48]	; (dd2cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   dd29a:	681a      	ldr	r2, [r3, #0]
   dd29c:	07d1      	lsls	r1, r2, #31
   dd29e:	bf5c      	itt	pl
   dd2a0:	2201      	movpl	r2, #1
   dd2a2:	601a      	strpl	r2, [r3, #0]
   dd2a4:	4b0a      	ldr	r3, [pc, #40]	; (dd2d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   dd2a6:	681a      	ldr	r2, [r3, #0]
   dd2a8:	07d2      	lsls	r2, r2, #31
   dd2aa:	bf5c      	itt	pl
   dd2ac:	2201      	movpl	r2, #1
   dd2ae:	601a      	strpl	r2, [r3, #0]
   dd2b0:	4770      	bx	lr
   dd2b2:	bf00      	nop
   dd2b4:	2003e6c8 	.word	0x2003e6c8
   dd2b8:	2003e6c4 	.word	0x2003e6c4
   dd2bc:	2003e6c0 	.word	0x2003e6c0
   dd2c0:	2003e6bc 	.word	0x2003e6bc
   dd2c4:	2003e6b8 	.word	0x2003e6b8
   dd2c8:	2003e6b4 	.word	0x2003e6b4
   dd2cc:	2003e6b0 	.word	0x2003e6b0
   dd2d0:	2003e6ac 	.word	0x2003e6ac
   dd2d4:	00000000 	.word	0x00000000

000dd2d8 <atan>:
   dd2d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd2dc:	ec55 4b10 	vmov	r4, r5, d0
   dd2e0:	4bd1      	ldr	r3, [pc, #836]	; (dd628 <atan+0x350>)
   dd2e2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
   dd2e6:	429e      	cmp	r6, r3
   dd2e8:	46ab      	mov	fp, r5
   dd2ea:	dd10      	ble.n	dd30e <atan+0x36>
   dd2ec:	4bcf      	ldr	r3, [pc, #828]	; (dd62c <atan+0x354>)
   dd2ee:	429e      	cmp	r6, r3
   dd2f0:	f300 80b2 	bgt.w	dd458 <atan+0x180>
   dd2f4:	f000 80ad 	beq.w	dd452 <atan+0x17a>
   dd2f8:	f1bb 0f00 	cmp.w	fp, #0
   dd2fc:	f340 80fd 	ble.w	dd4fa <atan+0x222>
   dd300:	a5ad      	add	r5, pc, #692	; (adr r5, dd5b8 <atan+0x2e0>)
   dd302:	e9d5 4500 	ldrd	r4, r5, [r5]
   dd306:	ec45 4b10 	vmov	d0, r4, r5
   dd30a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd30e:	4bc8      	ldr	r3, [pc, #800]	; (dd630 <atan+0x358>)
   dd310:	429e      	cmp	r6, r3
   dd312:	f300 80c0 	bgt.w	dd496 <atan+0x1be>
   dd316:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   dd31a:	429e      	cmp	r6, r3
   dd31c:	f340 80a8 	ble.w	dd470 <atan+0x198>
   dd320:	f04f 3aff 	mov.w	sl, #4294967295
   dd324:	4622      	mov	r2, r4
   dd326:	462b      	mov	r3, r5
   dd328:	4620      	mov	r0, r4
   dd32a:	4629      	mov	r1, r5
   dd32c:	f005 fc88 	bl	e2c40 <__aeabi_dmul>
   dd330:	4602      	mov	r2, r0
   dd332:	460b      	mov	r3, r1
   dd334:	4680      	mov	r8, r0
   dd336:	4689      	mov	r9, r1
   dd338:	f005 fc82 	bl	e2c40 <__aeabi_dmul>
   dd33c:	a3a0      	add	r3, pc, #640	; (adr r3, dd5c0 <atan+0x2e8>)
   dd33e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd342:	4606      	mov	r6, r0
   dd344:	460f      	mov	r7, r1
   dd346:	f005 fc7b 	bl	e2c40 <__aeabi_dmul>
   dd34a:	a39f      	add	r3, pc, #636	; (adr r3, dd5c8 <atan+0x2f0>)
   dd34c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd350:	f005 fac4 	bl	e28dc <__adddf3>
   dd354:	4632      	mov	r2, r6
   dd356:	463b      	mov	r3, r7
   dd358:	f005 fc72 	bl	e2c40 <__aeabi_dmul>
   dd35c:	a39c      	add	r3, pc, #624	; (adr r3, dd5d0 <atan+0x2f8>)
   dd35e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd362:	f005 fabb 	bl	e28dc <__adddf3>
   dd366:	4632      	mov	r2, r6
   dd368:	463b      	mov	r3, r7
   dd36a:	f005 fc69 	bl	e2c40 <__aeabi_dmul>
   dd36e:	a39a      	add	r3, pc, #616	; (adr r3, dd5d8 <atan+0x300>)
   dd370:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd374:	f005 fab2 	bl	e28dc <__adddf3>
   dd378:	4632      	mov	r2, r6
   dd37a:	463b      	mov	r3, r7
   dd37c:	f005 fc60 	bl	e2c40 <__aeabi_dmul>
   dd380:	a397      	add	r3, pc, #604	; (adr r3, dd5e0 <atan+0x308>)
   dd382:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd386:	f005 faa9 	bl	e28dc <__adddf3>
   dd38a:	4632      	mov	r2, r6
   dd38c:	463b      	mov	r3, r7
   dd38e:	f005 fc57 	bl	e2c40 <__aeabi_dmul>
   dd392:	a395      	add	r3, pc, #596	; (adr r3, dd5e8 <atan+0x310>)
   dd394:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd398:	f005 faa0 	bl	e28dc <__adddf3>
   dd39c:	4642      	mov	r2, r8
   dd39e:	464b      	mov	r3, r9
   dd3a0:	f005 fc4e 	bl	e2c40 <__aeabi_dmul>
   dd3a4:	a392      	add	r3, pc, #584	; (adr r3, dd5f0 <atan+0x318>)
   dd3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd3aa:	4680      	mov	r8, r0
   dd3ac:	4689      	mov	r9, r1
   dd3ae:	4630      	mov	r0, r6
   dd3b0:	4639      	mov	r1, r7
   dd3b2:	f005 fc45 	bl	e2c40 <__aeabi_dmul>
   dd3b6:	a390      	add	r3, pc, #576	; (adr r3, dd5f8 <atan+0x320>)
   dd3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd3bc:	f005 fa8c 	bl	e28d8 <__aeabi_dsub>
   dd3c0:	4632      	mov	r2, r6
   dd3c2:	463b      	mov	r3, r7
   dd3c4:	f005 fc3c 	bl	e2c40 <__aeabi_dmul>
   dd3c8:	a38d      	add	r3, pc, #564	; (adr r3, dd600 <atan+0x328>)
   dd3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd3ce:	f005 fa83 	bl	e28d8 <__aeabi_dsub>
   dd3d2:	4632      	mov	r2, r6
   dd3d4:	463b      	mov	r3, r7
   dd3d6:	f005 fc33 	bl	e2c40 <__aeabi_dmul>
   dd3da:	a38b      	add	r3, pc, #556	; (adr r3, dd608 <atan+0x330>)
   dd3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd3e0:	f005 fa7a 	bl	e28d8 <__aeabi_dsub>
   dd3e4:	4632      	mov	r2, r6
   dd3e6:	463b      	mov	r3, r7
   dd3e8:	f005 fc2a 	bl	e2c40 <__aeabi_dmul>
   dd3ec:	a388      	add	r3, pc, #544	; (adr r3, dd610 <atan+0x338>)
   dd3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd3f2:	f005 fa71 	bl	e28d8 <__aeabi_dsub>
   dd3f6:	4632      	mov	r2, r6
   dd3f8:	463b      	mov	r3, r7
   dd3fa:	f005 fc21 	bl	e2c40 <__aeabi_dmul>
   dd3fe:	f1ba 3fff 	cmp.w	sl, #4294967295
   dd402:	4602      	mov	r2, r0
   dd404:	460b      	mov	r3, r1
   dd406:	d07c      	beq.n	dd502 <atan+0x22a>
   dd408:	4640      	mov	r0, r8
   dd40a:	4649      	mov	r1, r9
   dd40c:	f005 fa66 	bl	e28dc <__adddf3>
   dd410:	4622      	mov	r2, r4
   dd412:	462b      	mov	r3, r5
   dd414:	f005 fc14 	bl	e2c40 <__aeabi_dmul>
   dd418:	4e86      	ldr	r6, [pc, #536]	; (dd634 <atan+0x35c>)
   dd41a:	4b87      	ldr	r3, [pc, #540]	; (dd638 <atan+0x360>)
   dd41c:	ea4f 0aca 	mov.w	sl, sl, lsl #3
   dd420:	4456      	add	r6, sl
   dd422:	449a      	add	sl, r3
   dd424:	e9da 2300 	ldrd	r2, r3, [sl]
   dd428:	f005 fa56 	bl	e28d8 <__aeabi_dsub>
   dd42c:	4622      	mov	r2, r4
   dd42e:	462b      	mov	r3, r5
   dd430:	f005 fa52 	bl	e28d8 <__aeabi_dsub>
   dd434:	4602      	mov	r2, r0
   dd436:	460b      	mov	r3, r1
   dd438:	e9d6 0100 	ldrd	r0, r1, [r6]
   dd43c:	f005 fa4c 	bl	e28d8 <__aeabi_dsub>
   dd440:	f1bb 0f00 	cmp.w	fp, #0
   dd444:	db52      	blt.n	dd4ec <atan+0x214>
   dd446:	4604      	mov	r4, r0
   dd448:	460d      	mov	r5, r1
   dd44a:	ec45 4b10 	vmov	d0, r4, r5
   dd44e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd452:	2c00      	cmp	r4, #0
   dd454:	f43f af50 	beq.w	dd2f8 <atan+0x20>
   dd458:	4622      	mov	r2, r4
   dd45a:	462b      	mov	r3, r5
   dd45c:	4620      	mov	r0, r4
   dd45e:	4629      	mov	r1, r5
   dd460:	f005 fa3c 	bl	e28dc <__adddf3>
   dd464:	4604      	mov	r4, r0
   dd466:	460d      	mov	r5, r1
   dd468:	ec45 4b10 	vmov	d0, r4, r5
   dd46c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd470:	a369      	add	r3, pc, #420	; (adr r3, dd618 <atan+0x340>)
   dd472:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd476:	ee10 0a10 	vmov	r0, s0
   dd47a:	4629      	mov	r1, r5
   dd47c:	f005 fa2e 	bl	e28dc <__adddf3>
   dd480:	2200      	movs	r2, #0
   dd482:	4b6e      	ldr	r3, [pc, #440]	; (dd63c <atan+0x364>)
   dd484:	f005 fe6c 	bl	e3160 <__aeabi_dcmpgt>
   dd488:	2800      	cmp	r0, #0
   dd48a:	f43f af49 	beq.w	dd320 <atan+0x48>
   dd48e:	ec45 4b10 	vmov	d0, r4, r5
   dd492:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd496:	f000 f9cb 	bl	dd830 <fabs>
   dd49a:	4b69      	ldr	r3, [pc, #420]	; (dd640 <atan+0x368>)
   dd49c:	429e      	cmp	r6, r3
   dd49e:	ec55 4b10 	vmov	r4, r5, d0
   dd4a2:	dc3f      	bgt.n	dd524 <atan+0x24c>
   dd4a4:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   dd4a8:	429e      	cmp	r6, r3
   dd4aa:	dc68      	bgt.n	dd57e <atan+0x2a6>
   dd4ac:	ee10 2a10 	vmov	r2, s0
   dd4b0:	ee10 0a10 	vmov	r0, s0
   dd4b4:	462b      	mov	r3, r5
   dd4b6:	4629      	mov	r1, r5
   dd4b8:	f005 fa10 	bl	e28dc <__adddf3>
   dd4bc:	2200      	movs	r2, #0
   dd4be:	4b5f      	ldr	r3, [pc, #380]	; (dd63c <atan+0x364>)
   dd4c0:	f005 fa0a 	bl	e28d8 <__aeabi_dsub>
   dd4c4:	2200      	movs	r2, #0
   dd4c6:	4606      	mov	r6, r0
   dd4c8:	460f      	mov	r7, r1
   dd4ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   dd4ce:	4620      	mov	r0, r4
   dd4d0:	4629      	mov	r1, r5
   dd4d2:	f005 fa03 	bl	e28dc <__adddf3>
   dd4d6:	4602      	mov	r2, r0
   dd4d8:	460b      	mov	r3, r1
   dd4da:	4630      	mov	r0, r6
   dd4dc:	4639      	mov	r1, r7
   dd4de:	f005 fcd9 	bl	e2e94 <__aeabi_ddiv>
   dd4e2:	f04f 0a00 	mov.w	sl, #0
   dd4e6:	4604      	mov	r4, r0
   dd4e8:	460d      	mov	r5, r1
   dd4ea:	e71b      	b.n	dd324 <atan+0x4c>
   dd4ec:	4604      	mov	r4, r0
   dd4ee:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
   dd4f2:	ec45 4b10 	vmov	d0, r4, r5
   dd4f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd4fa:	a549      	add	r5, pc, #292	; (adr r5, dd620 <atan+0x348>)
   dd4fc:	e9d5 4500 	ldrd	r4, r5, [r5]
   dd500:	e7b2      	b.n	dd468 <atan+0x190>
   dd502:	4640      	mov	r0, r8
   dd504:	4649      	mov	r1, r9
   dd506:	f005 f9e9 	bl	e28dc <__adddf3>
   dd50a:	4622      	mov	r2, r4
   dd50c:	462b      	mov	r3, r5
   dd50e:	f005 fb97 	bl	e2c40 <__aeabi_dmul>
   dd512:	4602      	mov	r2, r0
   dd514:	460b      	mov	r3, r1
   dd516:	4620      	mov	r0, r4
   dd518:	4629      	mov	r1, r5
   dd51a:	f005 f9dd 	bl	e28d8 <__aeabi_dsub>
   dd51e:	4604      	mov	r4, r0
   dd520:	460d      	mov	r5, r1
   dd522:	e7a1      	b.n	dd468 <atan+0x190>
   dd524:	4b47      	ldr	r3, [pc, #284]	; (dd644 <atan+0x36c>)
   dd526:	429e      	cmp	r6, r3
   dd528:	dc1d      	bgt.n	dd566 <atan+0x28e>
   dd52a:	ee10 0a10 	vmov	r0, s0
   dd52e:	2200      	movs	r2, #0
   dd530:	4b45      	ldr	r3, [pc, #276]	; (dd648 <atan+0x370>)
   dd532:	4629      	mov	r1, r5
   dd534:	f005 f9d0 	bl	e28d8 <__aeabi_dsub>
   dd538:	2200      	movs	r2, #0
   dd53a:	4606      	mov	r6, r0
   dd53c:	460f      	mov	r7, r1
   dd53e:	4b42      	ldr	r3, [pc, #264]	; (dd648 <atan+0x370>)
   dd540:	4620      	mov	r0, r4
   dd542:	4629      	mov	r1, r5
   dd544:	f005 fb7c 	bl	e2c40 <__aeabi_dmul>
   dd548:	2200      	movs	r2, #0
   dd54a:	4b3c      	ldr	r3, [pc, #240]	; (dd63c <atan+0x364>)
   dd54c:	f005 f9c6 	bl	e28dc <__adddf3>
   dd550:	4602      	mov	r2, r0
   dd552:	460b      	mov	r3, r1
   dd554:	4630      	mov	r0, r6
   dd556:	4639      	mov	r1, r7
   dd558:	f005 fc9c 	bl	e2e94 <__aeabi_ddiv>
   dd55c:	f04f 0a02 	mov.w	sl, #2
   dd560:	4604      	mov	r4, r0
   dd562:	460d      	mov	r5, r1
   dd564:	e6de      	b.n	dd324 <atan+0x4c>
   dd566:	462b      	mov	r3, r5
   dd568:	ee10 2a10 	vmov	r2, s0
   dd56c:	2000      	movs	r0, #0
   dd56e:	4937      	ldr	r1, [pc, #220]	; (dd64c <atan+0x374>)
   dd570:	f005 fc90 	bl	e2e94 <__aeabi_ddiv>
   dd574:	f04f 0a03 	mov.w	sl, #3
   dd578:	4604      	mov	r4, r0
   dd57a:	460d      	mov	r5, r1
   dd57c:	e6d2      	b.n	dd324 <atan+0x4c>
   dd57e:	ee10 0a10 	vmov	r0, s0
   dd582:	2200      	movs	r2, #0
   dd584:	4b2d      	ldr	r3, [pc, #180]	; (dd63c <atan+0x364>)
   dd586:	4629      	mov	r1, r5
   dd588:	f005 f9a6 	bl	e28d8 <__aeabi_dsub>
   dd58c:	2200      	movs	r2, #0
   dd58e:	4606      	mov	r6, r0
   dd590:	460f      	mov	r7, r1
   dd592:	4b2a      	ldr	r3, [pc, #168]	; (dd63c <atan+0x364>)
   dd594:	4620      	mov	r0, r4
   dd596:	4629      	mov	r1, r5
   dd598:	f005 f9a0 	bl	e28dc <__adddf3>
   dd59c:	4602      	mov	r2, r0
   dd59e:	460b      	mov	r3, r1
   dd5a0:	4630      	mov	r0, r6
   dd5a2:	4639      	mov	r1, r7
   dd5a4:	f005 fc76 	bl	e2e94 <__aeabi_ddiv>
   dd5a8:	f04f 0a01 	mov.w	sl, #1
   dd5ac:	4604      	mov	r4, r0
   dd5ae:	460d      	mov	r5, r1
   dd5b0:	e6b8      	b.n	dd324 <atan+0x4c>
   dd5b2:	bf00      	nop
   dd5b4:	f3af 8000 	nop.w
   dd5b8:	54442d18 	.word	0x54442d18
   dd5bc:	3ff921fb 	.word	0x3ff921fb
   dd5c0:	e322da11 	.word	0xe322da11
   dd5c4:	3f90ad3a 	.word	0x3f90ad3a
   dd5c8:	24760deb 	.word	0x24760deb
   dd5cc:	3fa97b4b 	.word	0x3fa97b4b
   dd5d0:	a0d03d51 	.word	0xa0d03d51
   dd5d4:	3fb10d66 	.word	0x3fb10d66
   dd5d8:	c54c206e 	.word	0xc54c206e
   dd5dc:	3fb745cd 	.word	0x3fb745cd
   dd5e0:	920083ff 	.word	0x920083ff
   dd5e4:	3fc24924 	.word	0x3fc24924
   dd5e8:	5555550d 	.word	0x5555550d
   dd5ec:	3fd55555 	.word	0x3fd55555
   dd5f0:	2c6a6c2f 	.word	0x2c6a6c2f
   dd5f4:	bfa2b444 	.word	0xbfa2b444
   dd5f8:	52defd9a 	.word	0x52defd9a
   dd5fc:	3fadde2d 	.word	0x3fadde2d
   dd600:	af749a6d 	.word	0xaf749a6d
   dd604:	3fb3b0f2 	.word	0x3fb3b0f2
   dd608:	fe231671 	.word	0xfe231671
   dd60c:	3fbc71c6 	.word	0x3fbc71c6
   dd610:	9998ebc4 	.word	0x9998ebc4
   dd614:	3fc99999 	.word	0x3fc99999
   dd618:	8800759c 	.word	0x8800759c
   dd61c:	7e37e43c 	.word	0x7e37e43c
   dd620:	54442d18 	.word	0x54442d18
   dd624:	bff921fb 	.word	0xbff921fb
   dd628:	440fffff 	.word	0x440fffff
   dd62c:	7ff00000 	.word	0x7ff00000
   dd630:	3fdbffff 	.word	0x3fdbffff
   dd634:	000e8038 	.word	0x000e8038
   dd638:	000e8018 	.word	0x000e8018
   dd63c:	3ff00000 	.word	0x3ff00000
   dd640:	3ff2ffff 	.word	0x3ff2ffff
   dd644:	40037fff 	.word	0x40037fff
   dd648:	3ff80000 	.word	0x3ff80000
   dd64c:	bff00000 	.word	0xbff00000

000dd650 <ceil>:
   dd650:	ec51 0b10 	vmov	r0, r1, d0
   dd654:	f3c1 530a 	ubfx	r3, r1, #20, #11
   dd658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dd65c:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   dd660:	2d13      	cmp	r5, #19
   dd662:	460c      	mov	r4, r1
   dd664:	460f      	mov	r7, r1
   dd666:	ee10 6a10 	vmov	r6, s0
   dd66a:	dc22      	bgt.n	dd6b2 <ceil+0x62>
   dd66c:	2d00      	cmp	r5, #0
   dd66e:	db52      	blt.n	dd716 <ceil+0xc6>
   dd670:	4b3d      	ldr	r3, [pc, #244]	; (dd768 <ceil+0x118>)
   dd672:	fa43 f805 	asr.w	r8, r3, r5
   dd676:	ea01 0308 	and.w	r3, r1, r8
   dd67a:	4303      	orrs	r3, r0
   dd67c:	d01e      	beq.n	dd6bc <ceil+0x6c>
   dd67e:	a338      	add	r3, pc, #224	; (adr r3, dd760 <ceil+0x110>)
   dd680:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd684:	f005 f92a 	bl	e28dc <__adddf3>
   dd688:	2200      	movs	r2, #0
   dd68a:	2300      	movs	r3, #0
   dd68c:	f005 fd68 	bl	e3160 <__aeabi_dcmpgt>
   dd690:	b148      	cbz	r0, dd6a6 <ceil+0x56>
   dd692:	2c00      	cmp	r4, #0
   dd694:	dd04      	ble.n	dd6a0 <ceil+0x50>
   dd696:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   dd69a:	fa43 f505 	asr.w	r5, r3, r5
   dd69e:	442f      	add	r7, r5
   dd6a0:	ea27 0408 	bic.w	r4, r7, r8
   dd6a4:	2600      	movs	r6, #0
   dd6a6:	4623      	mov	r3, r4
   dd6a8:	4632      	mov	r2, r6
   dd6aa:	ec43 2b10 	vmov	d0, r2, r3
   dd6ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dd6b2:	2d33      	cmp	r5, #51	; 0x33
   dd6b4:	dd06      	ble.n	dd6c4 <ceil+0x74>
   dd6b6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   dd6ba:	d03e      	beq.n	dd73a <ceil+0xea>
   dd6bc:	ec41 0b10 	vmov	d0, r0, r1
   dd6c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dd6c4:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   dd6c8:	f04f 38ff 	mov.w	r8, #4294967295
   dd6cc:	fa28 f803 	lsr.w	r8, r8, r3
   dd6d0:	ea10 0f08 	tst.w	r0, r8
   dd6d4:	d0f2      	beq.n	dd6bc <ceil+0x6c>
   dd6d6:	a322      	add	r3, pc, #136	; (adr r3, dd760 <ceil+0x110>)
   dd6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd6dc:	f005 f8fe 	bl	e28dc <__adddf3>
   dd6e0:	2200      	movs	r2, #0
   dd6e2:	2300      	movs	r3, #0
   dd6e4:	f005 fd3c 	bl	e3160 <__aeabi_dcmpgt>
   dd6e8:	2800      	cmp	r0, #0
   dd6ea:	d0dc      	beq.n	dd6a6 <ceil+0x56>
   dd6ec:	2c00      	cmp	r4, #0
   dd6ee:	dd09      	ble.n	dd704 <ceil+0xb4>
   dd6f0:	2d14      	cmp	r5, #20
   dd6f2:	d031      	beq.n	dd758 <ceil+0x108>
   dd6f4:	2301      	movs	r3, #1
   dd6f6:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   dd6fa:	fa03 f505 	lsl.w	r5, r3, r5
   dd6fe:	19ae      	adds	r6, r5, r6
   dd700:	bf28      	it	cs
   dd702:	18ff      	addcs	r7, r7, r3
   dd704:	463c      	mov	r4, r7
   dd706:	ea26 0608 	bic.w	r6, r6, r8
   dd70a:	4623      	mov	r3, r4
   dd70c:	4632      	mov	r2, r6
   dd70e:	ec43 2b10 	vmov	d0, r2, r3
   dd712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dd716:	a312      	add	r3, pc, #72	; (adr r3, dd760 <ceil+0x110>)
   dd718:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd71c:	f005 f8de 	bl	e28dc <__adddf3>
   dd720:	2200      	movs	r2, #0
   dd722:	2300      	movs	r3, #0
   dd724:	f005 fd1c 	bl	e3160 <__aeabi_dcmpgt>
   dd728:	2800      	cmp	r0, #0
   dd72a:	d0bc      	beq.n	dd6a6 <ceil+0x56>
   dd72c:	2c00      	cmp	r4, #0
   dd72e:	db0f      	blt.n	dd750 <ceil+0x100>
   dd730:	4326      	orrs	r6, r4
   dd732:	d00b      	beq.n	dd74c <ceil+0xfc>
   dd734:	2600      	movs	r6, #0
   dd736:	4c0d      	ldr	r4, [pc, #52]	; (dd76c <ceil+0x11c>)
   dd738:	e7b5      	b.n	dd6a6 <ceil+0x56>
   dd73a:	ee10 2a10 	vmov	r2, s0
   dd73e:	460b      	mov	r3, r1
   dd740:	f005 f8cc 	bl	e28dc <__adddf3>
   dd744:	ec41 0b10 	vmov	d0, r0, r1
   dd748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dd74c:	4634      	mov	r4, r6
   dd74e:	e7aa      	b.n	dd6a6 <ceil+0x56>
   dd750:	2600      	movs	r6, #0
   dd752:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
   dd756:	e7a6      	b.n	dd6a6 <ceil+0x56>
   dd758:	3701      	adds	r7, #1
   dd75a:	e7d3      	b.n	dd704 <ceil+0xb4>
   dd75c:	f3af 8000 	nop.w
   dd760:	8800759c 	.word	0x8800759c
   dd764:	7e37e43c 	.word	0x7e37e43c
   dd768:	000fffff 	.word	0x000fffff
   dd76c:	3ff00000 	.word	0x3ff00000

000dd770 <cos>:
   dd770:	b500      	push	{lr}
   dd772:	ec51 0b10 	vmov	r0, r1, d0
   dd776:	4a2c      	ldr	r2, [pc, #176]	; (dd828 <cos+0xb8>)
   dd778:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   dd77c:	4293      	cmp	r3, r2
   dd77e:	b085      	sub	sp, #20
   dd780:	dd20      	ble.n	dd7c4 <cos+0x54>
   dd782:	4a2a      	ldr	r2, [pc, #168]	; (dd82c <cos+0xbc>)
   dd784:	4293      	cmp	r3, r2
   dd786:	dd09      	ble.n	dd79c <cos+0x2c>
   dd788:	ee10 2a10 	vmov	r2, s0
   dd78c:	460b      	mov	r3, r1
   dd78e:	f005 f8a3 	bl	e28d8 <__aeabi_dsub>
   dd792:	ec41 0b10 	vmov	d0, r0, r1
   dd796:	b005      	add	sp, #20
   dd798:	f85d fb04 	ldr.w	pc, [sp], #4
   dd79c:	4668      	mov	r0, sp
   dd79e:	f003 f91b 	bl	e09d8 <__ieee754_rem_pio2>
   dd7a2:	f000 0003 	and.w	r0, r0, #3
   dd7a6:	2801      	cmp	r0, #1
   dd7a8:	d028      	beq.n	dd7fc <cos+0x8c>
   dd7aa:	2802      	cmp	r0, #2
   dd7ac:	d015      	beq.n	dd7da <cos+0x6a>
   dd7ae:	b360      	cbz	r0, dd80a <cos+0x9a>
   dd7b0:	2001      	movs	r0, #1
   dd7b2:	ed9d 1b02 	vldr	d1, [sp, #8]
   dd7b6:	ed9d 0b00 	vldr	d0, [sp]
   dd7ba:	f004 fa3d 	bl	e1c38 <__kernel_sin>
   dd7be:	ec51 0b10 	vmov	r0, r1, d0
   dd7c2:	e7e6      	b.n	dd792 <cos+0x22>
   dd7c4:	ed9f 1b16 	vldr	d1, [pc, #88]	; dd820 <cos+0xb0>
   dd7c8:	f003 fce2 	bl	e1190 <__kernel_cos>
   dd7cc:	ec51 0b10 	vmov	r0, r1, d0
   dd7d0:	ec41 0b10 	vmov	d0, r0, r1
   dd7d4:	b005      	add	sp, #20
   dd7d6:	f85d fb04 	ldr.w	pc, [sp], #4
   dd7da:	ed9d 1b02 	vldr	d1, [sp, #8]
   dd7de:	ed9d 0b00 	vldr	d0, [sp]
   dd7e2:	f003 fcd5 	bl	e1190 <__kernel_cos>
   dd7e6:	ec53 2b10 	vmov	r2, r3, d0
   dd7ea:	ee10 0a10 	vmov	r0, s0
   dd7ee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   dd7f2:	ec41 0b10 	vmov	d0, r0, r1
   dd7f6:	b005      	add	sp, #20
   dd7f8:	f85d fb04 	ldr.w	pc, [sp], #4
   dd7fc:	ed9d 1b02 	vldr	d1, [sp, #8]
   dd800:	ed9d 0b00 	vldr	d0, [sp]
   dd804:	f004 fa18 	bl	e1c38 <__kernel_sin>
   dd808:	e7ed      	b.n	dd7e6 <cos+0x76>
   dd80a:	ed9d 1b02 	vldr	d1, [sp, #8]
   dd80e:	ed9d 0b00 	vldr	d0, [sp]
   dd812:	f003 fcbd 	bl	e1190 <__kernel_cos>
   dd816:	ec51 0b10 	vmov	r0, r1, d0
   dd81a:	e7ba      	b.n	dd792 <cos+0x22>
   dd81c:	f3af 8000 	nop.w
	...
   dd828:	3fe921fb 	.word	0x3fe921fb
   dd82c:	7fefffff 	.word	0x7fefffff

000dd830 <fabs>:
   dd830:	ec53 2b10 	vmov	r2, r3, d0
   dd834:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   dd838:	ec43 2b10 	vmov	d0, r2, r3
   dd83c:	4770      	bx	lr
   dd83e:	bf00      	nop

000dd840 <floor>:
   dd840:	ec51 0b10 	vmov	r0, r1, d0
   dd844:	f3c1 530a 	ubfx	r3, r1, #20, #11
   dd848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dd84c:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   dd850:	2d13      	cmp	r5, #19
   dd852:	460c      	mov	r4, r1
   dd854:	460f      	mov	r7, r1
   dd856:	ee10 6a10 	vmov	r6, s0
   dd85a:	dc1d      	bgt.n	dd898 <floor+0x58>
   dd85c:	2d00      	cmp	r5, #0
   dd85e:	db43      	blt.n	dd8e8 <floor+0xa8>
   dd860:	4b3d      	ldr	r3, [pc, #244]	; (dd958 <floor+0x118>)
   dd862:	fa43 f805 	asr.w	r8, r3, r5
   dd866:	ea01 0308 	and.w	r3, r1, r8
   dd86a:	4303      	orrs	r3, r0
   dd86c:	d019      	beq.n	dd8a2 <floor+0x62>
   dd86e:	a338      	add	r3, pc, #224	; (adr r3, dd950 <floor+0x110>)
   dd870:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd874:	f005 f832 	bl	e28dc <__adddf3>
   dd878:	2200      	movs	r2, #0
   dd87a:	2300      	movs	r3, #0
   dd87c:	f005 fc70 	bl	e3160 <__aeabi_dcmpgt>
   dd880:	b120      	cbz	r0, dd88c <floor+0x4c>
   dd882:	2c00      	cmp	r4, #0
   dd884:	db49      	blt.n	dd91a <floor+0xda>
   dd886:	ea27 0408 	bic.w	r4, r7, r8
   dd88a:	2600      	movs	r6, #0
   dd88c:	4623      	mov	r3, r4
   dd88e:	4632      	mov	r2, r6
   dd890:	ec43 2b10 	vmov	d0, r2, r3
   dd894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dd898:	2d33      	cmp	r5, #51	; 0x33
   dd89a:	dd06      	ble.n	dd8aa <floor+0x6a>
   dd89c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   dd8a0:	d032      	beq.n	dd908 <floor+0xc8>
   dd8a2:	ec41 0b10 	vmov	d0, r0, r1
   dd8a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dd8aa:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   dd8ae:	f04f 38ff 	mov.w	r8, #4294967295
   dd8b2:	fa28 f803 	lsr.w	r8, r8, r3
   dd8b6:	ea10 0f08 	tst.w	r0, r8
   dd8ba:	d0f2      	beq.n	dd8a2 <floor+0x62>
   dd8bc:	a324      	add	r3, pc, #144	; (adr r3, dd950 <floor+0x110>)
   dd8be:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd8c2:	f005 f80b 	bl	e28dc <__adddf3>
   dd8c6:	2200      	movs	r2, #0
   dd8c8:	2300      	movs	r3, #0
   dd8ca:	f005 fc49 	bl	e3160 <__aeabi_dcmpgt>
   dd8ce:	2800      	cmp	r0, #0
   dd8d0:	d0dc      	beq.n	dd88c <floor+0x4c>
   dd8d2:	2c00      	cmp	r4, #0
   dd8d4:	db27      	blt.n	dd926 <floor+0xe6>
   dd8d6:	463c      	mov	r4, r7
   dd8d8:	ea26 0608 	bic.w	r6, r6, r8
   dd8dc:	4623      	mov	r3, r4
   dd8de:	4632      	mov	r2, r6
   dd8e0:	ec43 2b10 	vmov	d0, r2, r3
   dd8e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dd8e8:	a319      	add	r3, pc, #100	; (adr r3, dd950 <floor+0x110>)
   dd8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd8ee:	f004 fff5 	bl	e28dc <__adddf3>
   dd8f2:	2200      	movs	r2, #0
   dd8f4:	2300      	movs	r3, #0
   dd8f6:	f005 fc33 	bl	e3160 <__aeabi_dcmpgt>
   dd8fa:	2800      	cmp	r0, #0
   dd8fc:	d0c6      	beq.n	dd88c <floor+0x4c>
   dd8fe:	2c00      	cmp	r4, #0
   dd900:	db1c      	blt.n	dd93c <floor+0xfc>
   dd902:	2600      	movs	r6, #0
   dd904:	4634      	mov	r4, r6
   dd906:	e7c1      	b.n	dd88c <floor+0x4c>
   dd908:	ee10 2a10 	vmov	r2, s0
   dd90c:	460b      	mov	r3, r1
   dd90e:	f004 ffe5 	bl	e28dc <__adddf3>
   dd912:	ec41 0b10 	vmov	d0, r0, r1
   dd916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dd91a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   dd91e:	fa43 f505 	asr.w	r5, r3, r5
   dd922:	442f      	add	r7, r5
   dd924:	e7af      	b.n	dd886 <floor+0x46>
   dd926:	2d14      	cmp	r5, #20
   dd928:	d010      	beq.n	dd94c <floor+0x10c>
   dd92a:	2301      	movs	r3, #1
   dd92c:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   dd930:	fa03 f505 	lsl.w	r5, r3, r5
   dd934:	19ae      	adds	r6, r5, r6
   dd936:	bf28      	it	cs
   dd938:	18ff      	addcs	r7, r7, r3
   dd93a:	e7cc      	b.n	dd8d6 <floor+0x96>
   dd93c:	f024 4200 	bic.w	r2, r4, #2147483648	; 0x80000000
   dd940:	4b06      	ldr	r3, [pc, #24]	; (dd95c <floor+0x11c>)
   dd942:	4332      	orrs	r2, r6
   dd944:	bf18      	it	ne
   dd946:	461c      	movne	r4, r3
   dd948:	2600      	movs	r6, #0
   dd94a:	e79f      	b.n	dd88c <floor+0x4c>
   dd94c:	3701      	adds	r7, #1
   dd94e:	e7c2      	b.n	dd8d6 <floor+0x96>
   dd950:	8800759c 	.word	0x8800759c
   dd954:	7e37e43c 	.word	0x7e37e43c
   dd958:	000fffff 	.word	0x000fffff
   dd95c:	bff00000 	.word	0xbff00000

000dd960 <sin>:
   dd960:	b500      	push	{lr}
   dd962:	ec51 0b10 	vmov	r0, r1, d0
   dd966:	4a2c      	ldr	r2, [pc, #176]	; (dda18 <sin+0xb8>)
   dd968:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   dd96c:	4293      	cmp	r3, r2
   dd96e:	b085      	sub	sp, #20
   dd970:	dd27      	ble.n	dd9c2 <sin+0x62>
   dd972:	4a2a      	ldr	r2, [pc, #168]	; (dda1c <sin+0xbc>)
   dd974:	4293      	cmp	r3, r2
   dd976:	dd09      	ble.n	dd98c <sin+0x2c>
   dd978:	ee10 2a10 	vmov	r2, s0
   dd97c:	460b      	mov	r3, r1
   dd97e:	f004 ffab 	bl	e28d8 <__aeabi_dsub>
   dd982:	ec41 0b10 	vmov	d0, r0, r1
   dd986:	b005      	add	sp, #20
   dd988:	f85d fb04 	ldr.w	pc, [sp], #4
   dd98c:	4668      	mov	r0, sp
   dd98e:	f003 f823 	bl	e09d8 <__ieee754_rem_pio2>
   dd992:	f000 0003 	and.w	r0, r0, #3
   dd996:	2801      	cmp	r0, #1
   dd998:	d027      	beq.n	dd9ea <sin+0x8a>
   dd99a:	2802      	cmp	r0, #2
   dd99c:	d01d      	beq.n	dd9da <sin+0x7a>
   dd99e:	b368      	cbz	r0, dd9fc <sin+0x9c>
   dd9a0:	ed9d 1b02 	vldr	d1, [sp, #8]
   dd9a4:	ed9d 0b00 	vldr	d0, [sp]
   dd9a8:	f003 fbf2 	bl	e1190 <__kernel_cos>
   dd9ac:	ec53 2b10 	vmov	r2, r3, d0
   dd9b0:	ee10 0a10 	vmov	r0, s0
   dd9b4:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   dd9b8:	ec41 0b10 	vmov	d0, r0, r1
   dd9bc:	b005      	add	sp, #20
   dd9be:	f85d fb04 	ldr.w	pc, [sp], #4
   dd9c2:	2000      	movs	r0, #0
   dd9c4:	ed9f 1b12 	vldr	d1, [pc, #72]	; dda10 <sin+0xb0>
   dd9c8:	f004 f936 	bl	e1c38 <__kernel_sin>
   dd9cc:	ec51 0b10 	vmov	r0, r1, d0
   dd9d0:	ec41 0b10 	vmov	d0, r0, r1
   dd9d4:	b005      	add	sp, #20
   dd9d6:	f85d fb04 	ldr.w	pc, [sp], #4
   dd9da:	2001      	movs	r0, #1
   dd9dc:	ed9d 1b02 	vldr	d1, [sp, #8]
   dd9e0:	ed9d 0b00 	vldr	d0, [sp]
   dd9e4:	f004 f928 	bl	e1c38 <__kernel_sin>
   dd9e8:	e7e0      	b.n	dd9ac <sin+0x4c>
   dd9ea:	ed9d 1b02 	vldr	d1, [sp, #8]
   dd9ee:	ed9d 0b00 	vldr	d0, [sp]
   dd9f2:	f003 fbcd 	bl	e1190 <__kernel_cos>
   dd9f6:	ec51 0b10 	vmov	r0, r1, d0
   dd9fa:	e7c2      	b.n	dd982 <sin+0x22>
   dd9fc:	2001      	movs	r0, #1
   dd9fe:	ed9d 1b02 	vldr	d1, [sp, #8]
   dda02:	ed9d 0b00 	vldr	d0, [sp]
   dda06:	f004 f917 	bl	e1c38 <__kernel_sin>
   dda0a:	ec51 0b10 	vmov	r0, r1, d0
   dda0e:	e7b8      	b.n	dd982 <sin+0x22>
	...
   dda18:	3fe921fb 	.word	0x3fe921fb
   dda1c:	7fefffff 	.word	0x7fefffff

000dda20 <tan>:
   dda20:	b500      	push	{lr}
   dda22:	ec51 0b10 	vmov	r0, r1, d0
   dda26:	4a18      	ldr	r2, [pc, #96]	; (dda88 <tan+0x68>)
   dda28:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   dda2c:	4293      	cmp	r3, r2
   dda2e:	b085      	sub	sp, #20
   dda30:	dd1d      	ble.n	dda6e <tan+0x4e>
   dda32:	4a16      	ldr	r2, [pc, #88]	; (dda8c <tan+0x6c>)
   dda34:	4293      	cmp	r3, r2
   dda36:	dd09      	ble.n	dda4c <tan+0x2c>
   dda38:	ee10 2a10 	vmov	r2, s0
   dda3c:	460b      	mov	r3, r1
   dda3e:	f004 ff4b 	bl	e28d8 <__aeabi_dsub>
   dda42:	ec41 0b10 	vmov	d0, r0, r1
   dda46:	b005      	add	sp, #20
   dda48:	f85d fb04 	ldr.w	pc, [sp], #4
   dda4c:	4668      	mov	r0, sp
   dda4e:	f002 ffc3 	bl	e09d8 <__ieee754_rem_pio2>
   dda52:	0040      	lsls	r0, r0, #1
   dda54:	f000 0002 	and.w	r0, r0, #2
   dda58:	f1c0 0001 	rsb	r0, r0, #1
   dda5c:	ed9d 1b02 	vldr	d1, [sp, #8]
   dda60:	ed9d 0b00 	vldr	d0, [sp]
   dda64:	f004 f9b4 	bl	e1dd0 <__kernel_tan>
   dda68:	b005      	add	sp, #20
   dda6a:	f85d fb04 	ldr.w	pc, [sp], #4
   dda6e:	2001      	movs	r0, #1
   dda70:	ed9f 1b03 	vldr	d1, [pc, #12]	; dda80 <tan+0x60>
   dda74:	f004 f9ac 	bl	e1dd0 <__kernel_tan>
   dda78:	b005      	add	sp, #20
   dda7a:	f85d fb04 	ldr.w	pc, [sp], #4
   dda7e:	bf00      	nop
	...
   dda88:	3fe921fb 	.word	0x3fe921fb
   dda8c:	7fefffff 	.word	0x7fefffff

000dda90 <tanh>:
   dda90:	b5d0      	push	{r4, r6, r7, lr}
   dda92:	ec57 6b10 	vmov	r6, r7, d0
   dda96:	4a42      	ldr	r2, [pc, #264]	; (ddba0 <tanh+0x110>)
   dda98:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
   dda9c:	4293      	cmp	r3, r2
   dda9e:	463c      	mov	r4, r7
   ddaa0:	dd10      	ble.n	ddac4 <tanh+0x34>
   ddaa2:	2f00      	cmp	r7, #0
   ddaa4:	ee10 2a10 	vmov	r2, s0
   ddaa8:	463b      	mov	r3, r7
   ddaaa:	f04f 0000 	mov.w	r0, #0
   ddaae:	493d      	ldr	r1, [pc, #244]	; (ddba4 <tanh+0x114>)
   ddab0:	db40      	blt.n	ddb34 <tanh+0xa4>
   ddab2:	f005 f9ef 	bl	e2e94 <__aeabi_ddiv>
   ddab6:	2200      	movs	r2, #0
   ddab8:	4b3a      	ldr	r3, [pc, #232]	; (ddba4 <tanh+0x114>)
   ddaba:	f004 ff0f 	bl	e28dc <__adddf3>
   ddabe:	ec41 0b10 	vmov	d0, r0, r1
   ddac2:	bdd0      	pop	{r4, r6, r7, pc}
   ddac4:	4a38      	ldr	r2, [pc, #224]	; (ddba8 <tanh+0x118>)
   ddac6:	4293      	cmp	r3, r2
   ddac8:	dd0a      	ble.n	ddae0 <tanh+0x50>
   ddaca:	4b36      	ldr	r3, [pc, #216]	; (ddba4 <tanh+0x114>)
   ddacc:	2200      	movs	r2, #0
   ddace:	2c00      	cmp	r4, #0
   ddad0:	4610      	mov	r0, r2
   ddad2:	bfb4      	ite	lt
   ddad4:	f103 4100 	addlt.w	r1, r3, #2147483648	; 0x80000000
   ddad8:	4619      	movge	r1, r3
   ddada:	ec41 0b10 	vmov	d0, r0, r1
   ddade:	bdd0      	pop	{r4, r6, r7, pc}
   ddae0:	f1b3 5f72 	cmp.w	r3, #1015021568	; 0x3c800000
   ddae4:	db2f      	blt.n	ddb46 <tanh+0xb6>
   ddae6:	4a31      	ldr	r2, [pc, #196]	; (ddbac <tanh+0x11c>)
   ddae8:	4293      	cmp	r3, r2
   ddaea:	dd38      	ble.n	ddb5e <tanh+0xce>
   ddaec:	f7ff fea0 	bl	dd830 <fabs>
   ddaf0:	ec53 2b10 	vmov	r2, r3, d0
   ddaf4:	ee10 0a10 	vmov	r0, s0
   ddaf8:	4619      	mov	r1, r3
   ddafa:	f004 feef 	bl	e28dc <__adddf3>
   ddafe:	ec41 0b10 	vmov	d0, r0, r1
   ddb02:	f004 fb49 	bl	e2198 <expm1>
   ddb06:	2200      	movs	r2, #0
   ddb08:	ec51 0b10 	vmov	r0, r1, d0
   ddb0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   ddb10:	f004 fee4 	bl	e28dc <__adddf3>
   ddb14:	4602      	mov	r2, r0
   ddb16:	460b      	mov	r3, r1
   ddb18:	2000      	movs	r0, #0
   ddb1a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   ddb1e:	f005 f9b9 	bl	e2e94 <__aeabi_ddiv>
   ddb22:	4602      	mov	r2, r0
   ddb24:	460b      	mov	r3, r1
   ddb26:	2000      	movs	r0, #0
   ddb28:	491e      	ldr	r1, [pc, #120]	; (ddba4 <tanh+0x114>)
   ddb2a:	f004 fed5 	bl	e28d8 <__aeabi_dsub>
   ddb2e:	4602      	mov	r2, r0
   ddb30:	460b      	mov	r3, r1
   ddb32:	e7cc      	b.n	ddace <tanh+0x3e>
   ddb34:	f005 f9ae 	bl	e2e94 <__aeabi_ddiv>
   ddb38:	2200      	movs	r2, #0
   ddb3a:	4b1a      	ldr	r3, [pc, #104]	; (ddba4 <tanh+0x114>)
   ddb3c:	f004 fecc 	bl	e28d8 <__aeabi_dsub>
   ddb40:	ec41 0b10 	vmov	d0, r0, r1
   ddb44:	bdd0      	pop	{r4, r6, r7, pc}
   ddb46:	2200      	movs	r2, #0
   ddb48:	4b16      	ldr	r3, [pc, #88]	; (ddba4 <tanh+0x114>)
   ddb4a:	ee10 0a10 	vmov	r0, s0
   ddb4e:	4639      	mov	r1, r7
   ddb50:	f004 fec4 	bl	e28dc <__adddf3>
   ddb54:	4632      	mov	r2, r6
   ddb56:	463b      	mov	r3, r7
   ddb58:	f005 f872 	bl	e2c40 <__aeabi_dmul>
   ddb5c:	e7af      	b.n	ddabe <tanh+0x2e>
   ddb5e:	f7ff fe67 	bl	dd830 <fabs>
   ddb62:	2200      	movs	r2, #0
   ddb64:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
   ddb68:	ec51 0b10 	vmov	r0, r1, d0
   ddb6c:	f005 f868 	bl	e2c40 <__aeabi_dmul>
   ddb70:	ec41 0b10 	vmov	d0, r0, r1
   ddb74:	f004 fb10 	bl	e2198 <expm1>
   ddb78:	ec51 0b10 	vmov	r0, r1, d0
   ddb7c:	2200      	movs	r2, #0
   ddb7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   ddb82:	ee10 6a10 	vmov	r6, s0
   ddb86:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   ddb8a:	f004 fea7 	bl	e28dc <__adddf3>
   ddb8e:	4602      	mov	r2, r0
   ddb90:	460b      	mov	r3, r1
   ddb92:	4630      	mov	r0, r6
   ddb94:	4639      	mov	r1, r7
   ddb96:	f005 f97d 	bl	e2e94 <__aeabi_ddiv>
   ddb9a:	4602      	mov	r2, r0
   ddb9c:	460b      	mov	r3, r1
   ddb9e:	e796      	b.n	ddace <tanh+0x3e>
   ddba0:	7fefffff 	.word	0x7fefffff
   ddba4:	3ff00000 	.word	0x3ff00000
   ddba8:	4035ffff 	.word	0x4035ffff
   ddbac:	3fefffff 	.word	0x3fefffff

000ddbb0 <acos>:
   ddbb0:	b530      	push	{r4, r5, lr}
   ddbb2:	ed2d 8b04 	vpush	{d8-d9}
   ddbb6:	eeb0 8a40 	vmov.f32	s16, s0
   ddbba:	eef0 8a60 	vmov.f32	s17, s1
   ddbbe:	4c29      	ldr	r4, [pc, #164]	; (ddc64 <acos+0xb4>)
   ddbc0:	b08b      	sub	sp, #44	; 0x2c
   ddbc2:	f000 fd99 	bl	de6f8 <__ieee754_acos>
   ddbc6:	f994 3000 	ldrsb.w	r3, [r4]
   ddbca:	eeb0 9a40 	vmov.f32	s18, s0
   ddbce:	eef0 9a60 	vmov.f32	s19, s1
   ddbd2:	3301      	adds	r3, #1
   ddbd4:	d032      	beq.n	ddc3c <acos+0x8c>
   ddbd6:	ec53 2b18 	vmov	r2, r3, d8
   ddbda:	ec51 0b18 	vmov	r0, r1, d8
   ddbde:	f005 fac9 	bl	e3174 <__aeabi_dcmpun>
   ddbe2:	4605      	mov	r5, r0
   ddbe4:	bb50      	cbnz	r0, ddc3c <acos+0x8c>
   ddbe6:	eeb0 0a48 	vmov.f32	s0, s16
   ddbea:	eef0 0a68 	vmov.f32	s1, s17
   ddbee:	f7ff fe1f 	bl	dd830 <fabs>
   ddbf2:	2200      	movs	r2, #0
   ddbf4:	4b1c      	ldr	r3, [pc, #112]	; (ddc68 <acos+0xb8>)
   ddbf6:	ec51 0b10 	vmov	r0, r1, d0
   ddbfa:	f005 fab1 	bl	e3160 <__aeabi_dcmpgt>
   ddbfe:	b1e8      	cbz	r0, ddc3c <acos+0x8c>
   ddc00:	4b1a      	ldr	r3, [pc, #104]	; (ddc6c <acos+0xbc>)
   ddc02:	481b      	ldr	r0, [pc, #108]	; (ddc70 <acos+0xc0>)
   ddc04:	9508      	str	r5, [sp, #32]
   ddc06:	2201      	movs	r2, #1
   ddc08:	e88d 000c 	stmia.w	sp, {r2, r3}
   ddc0c:	ed8d 8b04 	vstr	d8, [sp, #16]
   ddc10:	ed8d 8b02 	vstr	d8, [sp, #8]
   ddc14:	f004 fd2c 	bl	e2670 <nan>
   ddc18:	f994 3000 	ldrsb.w	r3, [r4]
   ddc1c:	2b02      	cmp	r3, #2
   ddc1e:	ed8d 0b06 	vstr	d0, [sp, #24]
   ddc22:	d013      	beq.n	ddc4c <acos+0x9c>
   ddc24:	4668      	mov	r0, sp
   ddc26:	f004 fd21 	bl	e266c <matherr>
   ddc2a:	b178      	cbz	r0, ddc4c <acos+0x9c>
   ddc2c:	9b08      	ldr	r3, [sp, #32]
   ddc2e:	b9a3      	cbnz	r3, ddc5a <acos+0xaa>
   ddc30:	ed9d 0b06 	vldr	d0, [sp, #24]
   ddc34:	b00b      	add	sp, #44	; 0x2c
   ddc36:	ecbd 8b04 	vpop	{d8-d9}
   ddc3a:	bd30      	pop	{r4, r5, pc}
   ddc3c:	eeb0 0a49 	vmov.f32	s0, s18
   ddc40:	eef0 0a69 	vmov.f32	s1, s19
   ddc44:	b00b      	add	sp, #44	; 0x2c
   ddc46:	ecbd 8b04 	vpop	{d8-d9}
   ddc4a:	bd30      	pop	{r4, r5, pc}
   ddc4c:	f7fc ffa6 	bl	dab9c <__errno>
   ddc50:	2321      	movs	r3, #33	; 0x21
   ddc52:	6003      	str	r3, [r0, #0]
   ddc54:	9b08      	ldr	r3, [sp, #32]
   ddc56:	2b00      	cmp	r3, #0
   ddc58:	d0ea      	beq.n	ddc30 <acos+0x80>
   ddc5a:	f7fc ff9f 	bl	dab9c <__errno>
   ddc5e:	9b08      	ldr	r3, [sp, #32]
   ddc60:	6003      	str	r3, [r0, #0]
   ddc62:	e7e5      	b.n	ddc30 <acos+0x80>
   ddc64:	2003d5bc 	.word	0x2003d5bc
   ddc68:	3ff00000 	.word	0x3ff00000
   ddc6c:	000e8058 	.word	0x000e8058
   ddc70:	000e8078 	.word	0x000e8078

000ddc74 <asin>:
   ddc74:	b530      	push	{r4, r5, lr}
   ddc76:	ed2d 8b04 	vpush	{d8-d9}
   ddc7a:	eeb0 8a40 	vmov.f32	s16, s0
   ddc7e:	eef0 8a60 	vmov.f32	s17, s1
   ddc82:	4c29      	ldr	r4, [pc, #164]	; (ddd28 <asin+0xb4>)
   ddc84:	b08b      	sub	sp, #44	; 0x2c
   ddc86:	f000 ffa7 	bl	debd8 <__ieee754_asin>
   ddc8a:	f994 3000 	ldrsb.w	r3, [r4]
   ddc8e:	eeb0 9a40 	vmov.f32	s18, s0
   ddc92:	eef0 9a60 	vmov.f32	s19, s1
   ddc96:	3301      	adds	r3, #1
   ddc98:	d032      	beq.n	ddd00 <asin+0x8c>
   ddc9a:	ec53 2b18 	vmov	r2, r3, d8
   ddc9e:	ec51 0b18 	vmov	r0, r1, d8
   ddca2:	f005 fa67 	bl	e3174 <__aeabi_dcmpun>
   ddca6:	4605      	mov	r5, r0
   ddca8:	bb50      	cbnz	r0, ddd00 <asin+0x8c>
   ddcaa:	eeb0 0a48 	vmov.f32	s0, s16
   ddcae:	eef0 0a68 	vmov.f32	s1, s17
   ddcb2:	f7ff fdbd 	bl	dd830 <fabs>
   ddcb6:	2200      	movs	r2, #0
   ddcb8:	4b1c      	ldr	r3, [pc, #112]	; (ddd2c <asin+0xb8>)
   ddcba:	ec51 0b10 	vmov	r0, r1, d0
   ddcbe:	f005 fa4f 	bl	e3160 <__aeabi_dcmpgt>
   ddcc2:	b1e8      	cbz	r0, ddd00 <asin+0x8c>
   ddcc4:	4b1a      	ldr	r3, [pc, #104]	; (ddd30 <asin+0xbc>)
   ddcc6:	481b      	ldr	r0, [pc, #108]	; (ddd34 <asin+0xc0>)
   ddcc8:	9508      	str	r5, [sp, #32]
   ddcca:	2201      	movs	r2, #1
   ddccc:	e88d 000c 	stmia.w	sp, {r2, r3}
   ddcd0:	ed8d 8b04 	vstr	d8, [sp, #16]
   ddcd4:	ed8d 8b02 	vstr	d8, [sp, #8]
   ddcd8:	f004 fcca 	bl	e2670 <nan>
   ddcdc:	f994 3000 	ldrsb.w	r3, [r4]
   ddce0:	2b02      	cmp	r3, #2
   ddce2:	ed8d 0b06 	vstr	d0, [sp, #24]
   ddce6:	d013      	beq.n	ddd10 <asin+0x9c>
   ddce8:	4668      	mov	r0, sp
   ddcea:	f004 fcbf 	bl	e266c <matherr>
   ddcee:	b178      	cbz	r0, ddd10 <asin+0x9c>
   ddcf0:	9b08      	ldr	r3, [sp, #32]
   ddcf2:	b9a3      	cbnz	r3, ddd1e <asin+0xaa>
   ddcf4:	ed9d 0b06 	vldr	d0, [sp, #24]
   ddcf8:	b00b      	add	sp, #44	; 0x2c
   ddcfa:	ecbd 8b04 	vpop	{d8-d9}
   ddcfe:	bd30      	pop	{r4, r5, pc}
   ddd00:	eeb0 0a49 	vmov.f32	s0, s18
   ddd04:	eef0 0a69 	vmov.f32	s1, s19
   ddd08:	b00b      	add	sp, #44	; 0x2c
   ddd0a:	ecbd 8b04 	vpop	{d8-d9}
   ddd0e:	bd30      	pop	{r4, r5, pc}
   ddd10:	f7fc ff44 	bl	dab9c <__errno>
   ddd14:	2321      	movs	r3, #33	; 0x21
   ddd16:	6003      	str	r3, [r0, #0]
   ddd18:	9b08      	ldr	r3, [sp, #32]
   ddd1a:	2b00      	cmp	r3, #0
   ddd1c:	d0ea      	beq.n	ddcf4 <asin+0x80>
   ddd1e:	f7fc ff3d 	bl	dab9c <__errno>
   ddd22:	9b08      	ldr	r3, [sp, #32]
   ddd24:	6003      	str	r3, [r0, #0]
   ddd26:	e7e5      	b.n	ddcf4 <asin+0x80>
   ddd28:	2003d5bc 	.word	0x2003d5bc
   ddd2c:	3ff00000 	.word	0x3ff00000
   ddd30:	000e8060 	.word	0x000e8060
   ddd34:	000e8078 	.word	0x000e8078

000ddd38 <atan2>:
   ddd38:	f001 b99e 	b.w	df078 <__ieee754_atan2>
   ddd3c:	0000      	movs	r0, r0
	...

000ddd40 <cosh>:
   ddd40:	b530      	push	{r4, r5, lr}
   ddd42:	ed2d 8b04 	vpush	{d8-d9}
   ddd46:	eeb0 8a40 	vmov.f32	s16, s0
   ddd4a:	eef0 8a60 	vmov.f32	s17, s1
   ddd4e:	4c2e      	ldr	r4, [pc, #184]	; (dde08 <cosh+0xc8>)
   ddd50:	b08b      	sub	sp, #44	; 0x2c
   ddd52:	f001 fa89 	bl	df268 <__ieee754_cosh>
   ddd56:	f994 3000 	ldrsb.w	r3, [r4]
   ddd5a:	eeb0 9a40 	vmov.f32	s18, s0
   ddd5e:	eef0 9a60 	vmov.f32	s19, s1
   ddd62:	3301      	adds	r3, #1
   ddd64:	d032      	beq.n	dddcc <cosh+0x8c>
   ddd66:	ec53 2b18 	vmov	r2, r3, d8
   ddd6a:	ec51 0b18 	vmov	r0, r1, d8
   ddd6e:	f005 fa01 	bl	e3174 <__aeabi_dcmpun>
   ddd72:	4605      	mov	r5, r0
   ddd74:	bb50      	cbnz	r0, dddcc <cosh+0x8c>
   ddd76:	eeb0 0a48 	vmov.f32	s0, s16
   ddd7a:	eef0 0a68 	vmov.f32	s1, s17
   ddd7e:	f7ff fd57 	bl	dd830 <fabs>
   ddd82:	a31f      	add	r3, pc, #124	; (adr r3, dde00 <cosh+0xc0>)
   ddd84:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddd88:	ec51 0b10 	vmov	r0, r1, d0
   ddd8c:	f005 f9e8 	bl	e3160 <__aeabi_dcmpgt>
   ddd90:	b1e0      	cbz	r0, dddcc <cosh+0x8c>
   ddd92:	4a1e      	ldr	r2, [pc, #120]	; (dde0c <cosh+0xcc>)
   ddd94:	f994 3000 	ldrsb.w	r3, [r4]
   ddd98:	9508      	str	r5, [sp, #32]
   ddd9a:	2103      	movs	r1, #3
   ddd9c:	ed8d 8b04 	vstr	d8, [sp, #16]
   ddda0:	ed8d 8b02 	vstr	d8, [sp, #8]
   ddda4:	e88d 0006 	stmia.w	sp, {r1, r2}
   ddda8:	b9c3      	cbnz	r3, ddddc <cosh+0x9c>
   dddaa:	4b19      	ldr	r3, [pc, #100]	; (dde10 <cosh+0xd0>)
   dddac:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   dddb0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   dddb4:	4668      	mov	r0, sp
   dddb6:	f004 fc59 	bl	e266c <matherr>
   dddba:	b1a8      	cbz	r0, ddde8 <cosh+0xa8>
   dddbc:	9b08      	ldr	r3, [sp, #32]
   dddbe:	b9d3      	cbnz	r3, dddf6 <cosh+0xb6>
   dddc0:	ed9d 0b06 	vldr	d0, [sp, #24]
   dddc4:	b00b      	add	sp, #44	; 0x2c
   dddc6:	ecbd 8b04 	vpop	{d8-d9}
   dddca:	bd30      	pop	{r4, r5, pc}
   dddcc:	eeb0 0a49 	vmov.f32	s0, s18
   dddd0:	eef0 0a69 	vmov.f32	s1, s19
   dddd4:	b00b      	add	sp, #44	; 0x2c
   dddd6:	ecbd 8b04 	vpop	{d8-d9}
   dddda:	bd30      	pop	{r4, r5, pc}
   ddddc:	490d      	ldr	r1, [pc, #52]	; (dde14 <cosh+0xd4>)
   dddde:	2000      	movs	r0, #0
   ddde0:	2b02      	cmp	r3, #2
   ddde2:	e9cd 0106 	strd	r0, r1, [sp, #24]
   ddde6:	d1e5      	bne.n	dddb4 <cosh+0x74>
   ddde8:	f7fc fed8 	bl	dab9c <__errno>
   dddec:	2322      	movs	r3, #34	; 0x22
   dddee:	6003      	str	r3, [r0, #0]
   dddf0:	9b08      	ldr	r3, [sp, #32]
   dddf2:	2b00      	cmp	r3, #0
   dddf4:	d0e4      	beq.n	dddc0 <cosh+0x80>
   dddf6:	f7fc fed1 	bl	dab9c <__errno>
   dddfa:	9b08      	ldr	r3, [sp, #32]
   dddfc:	6003      	str	r3, [r0, #0]
   dddfe:	e7df      	b.n	dddc0 <cosh+0x80>
   dde00:	8fb9f87d 	.word	0x8fb9f87d
   dde04:	408633ce 	.word	0x408633ce
   dde08:	2003d5bc 	.word	0x2003d5bc
   dde0c:	000e8068 	.word	0x000e8068
   dde10:	47efffff 	.word	0x47efffff
   dde14:	7ff00000 	.word	0x7ff00000

000dde18 <exp>:
   dde18:	b5f0      	push	{r4, r5, r6, r7, lr}
   dde1a:	ed2d 8b04 	vpush	{d8-d9}
   dde1e:	eeb0 9a40 	vmov.f32	s18, s0
   dde22:	eef0 9a60 	vmov.f32	s19, s1
   dde26:	4c3a      	ldr	r4, [pc, #232]	; (ddf10 <exp+0xf8>)
   dde28:	b08b      	sub	sp, #44	; 0x2c
   dde2a:	f001 fad9 	bl	df3e0 <__ieee754_exp>
   dde2e:	f994 3000 	ldrsb.w	r3, [r4]
   dde32:	eeb0 8a40 	vmov.f32	s16, s0
   dde36:	eef0 8a60 	vmov.f32	s17, s1
   dde3a:	3301      	adds	r3, #1
   dde3c:	d038      	beq.n	ddeb0 <exp+0x98>
   dde3e:	eeb0 0a49 	vmov.f32	s0, s18
   dde42:	eef0 0a69 	vmov.f32	s1, s19
   dde46:	f004 fc09 	bl	e265c <finite>
   dde4a:	b388      	cbz	r0, ddeb0 <exp+0x98>
   dde4c:	a32c      	add	r3, pc, #176	; (adr r3, ddf00 <exp+0xe8>)
   dde4e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dde52:	ec51 0b19 	vmov	r0, r1, d9
   dde56:	f005 f983 	bl	e3160 <__aeabi_dcmpgt>
   dde5a:	4605      	mov	r5, r0
   dde5c:	bb80      	cbnz	r0, ddec0 <exp+0xa8>
   dde5e:	a32a      	add	r3, pc, #168	; (adr r3, ddf08 <exp+0xf0>)
   dde60:	e9d3 2300 	ldrd	r2, r3, [r3]
   dde64:	ec51 0b19 	vmov	r0, r1, d9
   dde68:	f005 f95c 	bl	e3124 <__aeabi_dcmplt>
   dde6c:	b300      	cbz	r0, ddeb0 <exp+0x98>
   dde6e:	f994 3000 	ldrsb.w	r3, [r4]
   dde72:	4a28      	ldr	r2, [pc, #160]	; (ddf14 <exp+0xfc>)
   dde74:	9508      	str	r5, [sp, #32]
   dde76:	2600      	movs	r6, #0
   dde78:	2700      	movs	r7, #0
   dde7a:	2104      	movs	r1, #4
   dde7c:	2b02      	cmp	r3, #2
   dde7e:	ed8d 9b04 	vstr	d9, [sp, #16]
   dde82:	ed8d 9b02 	vstr	d9, [sp, #8]
   dde86:	e9cd 6706 	strd	r6, r7, [sp, #24]
   dde8a:	e88d 0006 	stmia.w	sp, {r1, r2}
   dde8e:	d030      	beq.n	ddef2 <exp+0xda>
   dde90:	4668      	mov	r0, sp
   dde92:	f004 fbeb 	bl	e266c <matherr>
   dde96:	b360      	cbz	r0, ddef2 <exp+0xda>
   dde98:	9b08      	ldr	r3, [sp, #32]
   dde9a:	b11b      	cbz	r3, ddea4 <exp+0x8c>
   dde9c:	f7fc fe7e 	bl	dab9c <__errno>
   ddea0:	9b08      	ldr	r3, [sp, #32]
   ddea2:	6003      	str	r3, [r0, #0]
   ddea4:	ed9d 0b06 	vldr	d0, [sp, #24]
   ddea8:	b00b      	add	sp, #44	; 0x2c
   ddeaa:	ecbd 8b04 	vpop	{d8-d9}
   ddeae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ddeb0:	eeb0 0a48 	vmov.f32	s0, s16
   ddeb4:	eef0 0a68 	vmov.f32	s1, s17
   ddeb8:	b00b      	add	sp, #44	; 0x2c
   ddeba:	ecbd 8b04 	vpop	{d8-d9}
   ddebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ddec0:	4a14      	ldr	r2, [pc, #80]	; (ddf14 <exp+0xfc>)
   ddec2:	f994 3000 	ldrsb.w	r3, [r4]
   ddec6:	9201      	str	r2, [sp, #4]
   ddec8:	2103      	movs	r1, #3
   ddeca:	2200      	movs	r2, #0
   ddecc:	ed8d 9b04 	vstr	d9, [sp, #16]
   dded0:	ed8d 9b02 	vstr	d9, [sp, #8]
   dded4:	9100      	str	r1, [sp, #0]
   dded6:	9208      	str	r2, [sp, #32]
   dded8:	b92b      	cbnz	r3, ddee6 <exp+0xce>
   ddeda:	4b0f      	ldr	r3, [pc, #60]	; (ddf18 <exp+0x100>)
   ddedc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   ddee0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   ddee4:	e7d4      	b.n	dde90 <exp+0x78>
   ddee6:	490d      	ldr	r1, [pc, #52]	; (ddf1c <exp+0x104>)
   ddee8:	2000      	movs	r0, #0
   ddeea:	2b02      	cmp	r3, #2
   ddeec:	e9cd 0106 	strd	r0, r1, [sp, #24]
   ddef0:	d1ce      	bne.n	dde90 <exp+0x78>
   ddef2:	f7fc fe53 	bl	dab9c <__errno>
   ddef6:	2322      	movs	r3, #34	; 0x22
   ddef8:	6003      	str	r3, [r0, #0]
   ddefa:	e7cd      	b.n	dde98 <exp+0x80>
   ddefc:	f3af 8000 	nop.w
   ddf00:	fefa39ef 	.word	0xfefa39ef
   ddf04:	40862e42 	.word	0x40862e42
   ddf08:	d52d3051 	.word	0xd52d3051
   ddf0c:	c0874910 	.word	0xc0874910
   ddf10:	2003d5bc 	.word	0x2003d5bc
   ddf14:	000e8070 	.word	0x000e8070
   ddf18:	47efffff 	.word	0x47efffff
   ddf1c:	7ff00000 	.word	0x7ff00000

000ddf20 <fmod>:
   ddf20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ddf24:	ed2d 8b02 	vpush	{d8}
   ddf28:	b08b      	sub	sp, #44	; 0x2c
   ddf2a:	ec57 6b10 	vmov	r6, r7, d0
   ddf2e:	ec55 4b11 	vmov	r4, r5, d1
   ddf32:	f001 fbe7 	bl	df704 <__ieee754_fmod>
   ddf36:	4b2e      	ldr	r3, [pc, #184]	; (ddff0 <fmod+0xd0>)
   ddf38:	eeb0 8a40 	vmov.f32	s16, s0
   ddf3c:	eef0 8a60 	vmov.f32	s17, s1
   ddf40:	f993 8000 	ldrsb.w	r8, [r3]
   ddf44:	f1b8 3fff 	cmp.w	r8, #4294967295
   ddf48:	d031      	beq.n	ddfae <fmod+0x8e>
   ddf4a:	4622      	mov	r2, r4
   ddf4c:	462b      	mov	r3, r5
   ddf4e:	4620      	mov	r0, r4
   ddf50:	4629      	mov	r1, r5
   ddf52:	f005 f90f 	bl	e3174 <__aeabi_dcmpun>
   ddf56:	bb50      	cbnz	r0, ddfae <fmod+0x8e>
   ddf58:	4632      	mov	r2, r6
   ddf5a:	463b      	mov	r3, r7
   ddf5c:	4630      	mov	r0, r6
   ddf5e:	4639      	mov	r1, r7
   ddf60:	f005 f908 	bl	e3174 <__aeabi_dcmpun>
   ddf64:	4681      	mov	r9, r0
   ddf66:	bb10      	cbnz	r0, ddfae <fmod+0x8e>
   ddf68:	2200      	movs	r2, #0
   ddf6a:	2300      	movs	r3, #0
   ddf6c:	4620      	mov	r0, r4
   ddf6e:	4629      	mov	r1, r5
   ddf70:	f005 f8ce 	bl	e3110 <__aeabi_dcmpeq>
   ddf74:	b1d8      	cbz	r0, ddfae <fmod+0x8e>
   ddf76:	4b1f      	ldr	r3, [pc, #124]	; (ddff4 <fmod+0xd4>)
   ddf78:	f8cd 9020 	str.w	r9, [sp, #32]
   ddf7c:	2201      	movs	r2, #1
   ddf7e:	e9cd 6702 	strd	r6, r7, [sp, #8]
   ddf82:	e9cd 4504 	strd	r4, r5, [sp, #16]
   ddf86:	e88d 000c 	stmia.w	sp, {r2, r3}
   ddf8a:	f1b8 0f00 	cmp.w	r8, #0
   ddf8e:	d117      	bne.n	ddfc0 <fmod+0xa0>
   ddf90:	e9cd 6706 	strd	r6, r7, [sp, #24]
   ddf94:	4668      	mov	r0, sp
   ddf96:	f004 fb69 	bl	e266c <matherr>
   ddf9a:	b1e0      	cbz	r0, ddfd6 <fmod+0xb6>
   ddf9c:	9b08      	ldr	r3, [sp, #32]
   ddf9e:	bb0b      	cbnz	r3, ddfe4 <fmod+0xc4>
   ddfa0:	ed9d 0b06 	vldr	d0, [sp, #24]
   ddfa4:	b00b      	add	sp, #44	; 0x2c
   ddfa6:	ecbd 8b02 	vpop	{d8}
   ddfaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   ddfae:	eeb0 0a48 	vmov.f32	s0, s16
   ddfb2:	eef0 0a68 	vmov.f32	s1, s17
   ddfb6:	b00b      	add	sp, #44	; 0x2c
   ddfb8:	ecbd 8b02 	vpop	{d8}
   ddfbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   ddfc0:	2200      	movs	r2, #0
   ddfc2:	2300      	movs	r3, #0
   ddfc4:	4610      	mov	r0, r2
   ddfc6:	4619      	mov	r1, r3
   ddfc8:	f004 ff64 	bl	e2e94 <__aeabi_ddiv>
   ddfcc:	f1b8 0f02 	cmp.w	r8, #2
   ddfd0:	e9cd 0106 	strd	r0, r1, [sp, #24]
   ddfd4:	d1de      	bne.n	ddf94 <fmod+0x74>
   ddfd6:	f7fc fde1 	bl	dab9c <__errno>
   ddfda:	2321      	movs	r3, #33	; 0x21
   ddfdc:	6003      	str	r3, [r0, #0]
   ddfde:	9b08      	ldr	r3, [sp, #32]
   ddfe0:	2b00      	cmp	r3, #0
   ddfe2:	d0dd      	beq.n	ddfa0 <fmod+0x80>
   ddfe4:	f7fc fdda 	bl	dab9c <__errno>
   ddfe8:	9b08      	ldr	r3, [sp, #32]
   ddfea:	6003      	str	r3, [r0, #0]
   ddfec:	e7d8      	b.n	ddfa0 <fmod+0x80>
   ddfee:	bf00      	nop
   ddff0:	2003d5bc 	.word	0x2003d5bc
   ddff4:	000e8074 	.word	0x000e8074

000ddff8 <log>:
   ddff8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ddffc:	ed2d 8b02 	vpush	{d8}
   de000:	b08b      	sub	sp, #44	; 0x2c
   de002:	ec55 4b10 	vmov	r4, r5, d0
   de006:	f001 fcb7 	bl	df978 <__ieee754_log>
   de00a:	4b3a      	ldr	r3, [pc, #232]	; (de0f4 <log+0xfc>)
   de00c:	eeb0 8a40 	vmov.f32	s16, s0
   de010:	eef0 8a60 	vmov.f32	s17, s1
   de014:	f993 6000 	ldrsb.w	r6, [r3]
   de018:	1c73      	adds	r3, r6, #1
   de01a:	d00d      	beq.n	de038 <log+0x40>
   de01c:	4622      	mov	r2, r4
   de01e:	462b      	mov	r3, r5
   de020:	4620      	mov	r0, r4
   de022:	4629      	mov	r1, r5
   de024:	f005 f8a6 	bl	e3174 <__aeabi_dcmpun>
   de028:	b930      	cbnz	r0, de038 <log+0x40>
   de02a:	2200      	movs	r2, #0
   de02c:	2300      	movs	r3, #0
   de02e:	4620      	mov	r0, r4
   de030:	4629      	mov	r1, r5
   de032:	f005 f895 	bl	e3160 <__aeabi_dcmpgt>
   de036:	b140      	cbz	r0, de04a <log+0x52>
   de038:	eeb0 0a48 	vmov.f32	s0, s16
   de03c:	eef0 0a68 	vmov.f32	s1, s17
   de040:	b00b      	add	sp, #44	; 0x2c
   de042:	ecbd 8b02 	vpop	{d8}
   de046:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   de04a:	4b2b      	ldr	r3, [pc, #172]	; (de0f8 <log+0x100>)
   de04c:	9008      	str	r0, [sp, #32]
   de04e:	e9cd 4502 	strd	r4, r5, [sp, #8]
   de052:	e9cd 4504 	strd	r4, r5, [sp, #16]
   de056:	9301      	str	r3, [sp, #4]
   de058:	b9de      	cbnz	r6, de092 <log+0x9a>
   de05a:	4f28      	ldr	r7, [pc, #160]	; (de0fc <log+0x104>)
   de05c:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
   de060:	4620      	mov	r0, r4
   de062:	4629      	mov	r1, r5
   de064:	2200      	movs	r2, #0
   de066:	2300      	movs	r3, #0
   de068:	e9cd 6706 	strd	r6, r7, [sp, #24]
   de06c:	f005 f850 	bl	e3110 <__aeabi_dcmpeq>
   de070:	2800      	cmp	r0, #0
   de072:	d037      	beq.n	de0e4 <log+0xec>
   de074:	2302      	movs	r3, #2
   de076:	9300      	str	r3, [sp, #0]
   de078:	4668      	mov	r0, sp
   de07a:	f004 faf7 	bl	e266c <matherr>
   de07e:	b1c8      	cbz	r0, de0b4 <log+0xbc>
   de080:	9b08      	ldr	r3, [sp, #32]
   de082:	b9e3      	cbnz	r3, de0be <log+0xc6>
   de084:	ed9d 0b06 	vldr	d0, [sp, #24]
   de088:	b00b      	add	sp, #44	; 0x2c
   de08a:	ecbd 8b02 	vpop	{d8}
   de08e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   de092:	f8df 9070 	ldr.w	r9, [pc, #112]	; de104 <log+0x10c>
   de096:	f04f 0800 	mov.w	r8, #0
   de09a:	4620      	mov	r0, r4
   de09c:	4629      	mov	r1, r5
   de09e:	2200      	movs	r2, #0
   de0a0:	2300      	movs	r3, #0
   de0a2:	e9cd 8906 	strd	r8, r9, [sp, #24]
   de0a6:	f005 f833 	bl	e3110 <__aeabi_dcmpeq>
   de0aa:	b168      	cbz	r0, de0c8 <log+0xd0>
   de0ac:	2302      	movs	r3, #2
   de0ae:	429e      	cmp	r6, r3
   de0b0:	9300      	str	r3, [sp, #0]
   de0b2:	d1e1      	bne.n	de078 <log+0x80>
   de0b4:	f7fc fd72 	bl	dab9c <__errno>
   de0b8:	2322      	movs	r3, #34	; 0x22
   de0ba:	6003      	str	r3, [r0, #0]
   de0bc:	e7e0      	b.n	de080 <log+0x88>
   de0be:	f7fc fd6d 	bl	dab9c <__errno>
   de0c2:	9b08      	ldr	r3, [sp, #32]
   de0c4:	6003      	str	r3, [r0, #0]
   de0c6:	e7dd      	b.n	de084 <log+0x8c>
   de0c8:	2301      	movs	r3, #1
   de0ca:	2e02      	cmp	r6, #2
   de0cc:	9300      	str	r3, [sp, #0]
   de0ce:	d10b      	bne.n	de0e8 <log+0xf0>
   de0d0:	f7fc fd64 	bl	dab9c <__errno>
   de0d4:	2321      	movs	r3, #33	; 0x21
   de0d6:	6003      	str	r3, [r0, #0]
   de0d8:	4809      	ldr	r0, [pc, #36]	; (de100 <log+0x108>)
   de0da:	f004 fac9 	bl	e2670 <nan>
   de0de:	ed8d 0b06 	vstr	d0, [sp, #24]
   de0e2:	e7cd      	b.n	de080 <log+0x88>
   de0e4:	2301      	movs	r3, #1
   de0e6:	9300      	str	r3, [sp, #0]
   de0e8:	4668      	mov	r0, sp
   de0ea:	f004 fabf 	bl	e266c <matherr>
   de0ee:	2800      	cmp	r0, #0
   de0f0:	d1f2      	bne.n	de0d8 <log+0xe0>
   de0f2:	e7ed      	b.n	de0d0 <log+0xd8>
   de0f4:	2003d5bc 	.word	0x2003d5bc
   de0f8:	000e807c 	.word	0x000e807c
   de0fc:	c7efffff 	.word	0xc7efffff
   de100:	000e8078 	.word	0x000e8078
   de104:	fff00000 	.word	0xfff00000

000de108 <log10>:
   de108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   de10c:	ed2d 8b02 	vpush	{d8}
   de110:	b08b      	sub	sp, #44	; 0x2c
   de112:	ec55 4b10 	vmov	r4, r5, d0
   de116:	f001 fe33 	bl	dfd80 <__ieee754_log10>
   de11a:	4b3b      	ldr	r3, [pc, #236]	; (de208 <log10+0x100>)
   de11c:	eeb0 8a40 	vmov.f32	s16, s0
   de120:	eef0 8a60 	vmov.f32	s17, s1
   de124:	f993 6000 	ldrsb.w	r6, [r3]
   de128:	1c73      	adds	r3, r6, #1
   de12a:	d00e      	beq.n	de14a <log10+0x42>
   de12c:	4622      	mov	r2, r4
   de12e:	462b      	mov	r3, r5
   de130:	4620      	mov	r0, r4
   de132:	4629      	mov	r1, r5
   de134:	f005 f81e 	bl	e3174 <__aeabi_dcmpun>
   de138:	4607      	mov	r7, r0
   de13a:	b930      	cbnz	r0, de14a <log10+0x42>
   de13c:	2200      	movs	r2, #0
   de13e:	2300      	movs	r3, #0
   de140:	4620      	mov	r0, r4
   de142:	4629      	mov	r1, r5
   de144:	f004 fff8 	bl	e3138 <__aeabi_dcmple>
   de148:	b940      	cbnz	r0, de15c <log10+0x54>
   de14a:	eeb0 0a48 	vmov.f32	s0, s16
   de14e:	eef0 0a68 	vmov.f32	s1, s17
   de152:	b00b      	add	sp, #44	; 0x2c
   de154:	ecbd 8b02 	vpop	{d8}
   de158:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   de15c:	4b2b      	ldr	r3, [pc, #172]	; (de20c <log10+0x104>)
   de15e:	9708      	str	r7, [sp, #32]
   de160:	e9cd 4502 	strd	r4, r5, [sp, #8]
   de164:	e9cd 4504 	strd	r4, r5, [sp, #16]
   de168:	9301      	str	r3, [sp, #4]
   de16a:	b9de      	cbnz	r6, de1a4 <log10+0x9c>
   de16c:	4f28      	ldr	r7, [pc, #160]	; (de210 <log10+0x108>)
   de16e:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
   de172:	4620      	mov	r0, r4
   de174:	4629      	mov	r1, r5
   de176:	2200      	movs	r2, #0
   de178:	2300      	movs	r3, #0
   de17a:	e9cd 6706 	strd	r6, r7, [sp, #24]
   de17e:	f004 ffc7 	bl	e3110 <__aeabi_dcmpeq>
   de182:	2800      	cmp	r0, #0
   de184:	d037      	beq.n	de1f6 <log10+0xee>
   de186:	2302      	movs	r3, #2
   de188:	9300      	str	r3, [sp, #0]
   de18a:	4668      	mov	r0, sp
   de18c:	f004 fa6e 	bl	e266c <matherr>
   de190:	b1c8      	cbz	r0, de1c6 <log10+0xbe>
   de192:	9b08      	ldr	r3, [sp, #32]
   de194:	b9e3      	cbnz	r3, de1d0 <log10+0xc8>
   de196:	ed9d 0b06 	vldr	d0, [sp, #24]
   de19a:	b00b      	add	sp, #44	; 0x2c
   de19c:	ecbd 8b02 	vpop	{d8}
   de1a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   de1a4:	f8df 9070 	ldr.w	r9, [pc, #112]	; de218 <log10+0x110>
   de1a8:	f04f 0800 	mov.w	r8, #0
   de1ac:	4620      	mov	r0, r4
   de1ae:	4629      	mov	r1, r5
   de1b0:	2200      	movs	r2, #0
   de1b2:	2300      	movs	r3, #0
   de1b4:	e9cd 8906 	strd	r8, r9, [sp, #24]
   de1b8:	f004 ffaa 	bl	e3110 <__aeabi_dcmpeq>
   de1bc:	b168      	cbz	r0, de1da <log10+0xd2>
   de1be:	2302      	movs	r3, #2
   de1c0:	429e      	cmp	r6, r3
   de1c2:	9300      	str	r3, [sp, #0]
   de1c4:	d1e1      	bne.n	de18a <log10+0x82>
   de1c6:	f7fc fce9 	bl	dab9c <__errno>
   de1ca:	2322      	movs	r3, #34	; 0x22
   de1cc:	6003      	str	r3, [r0, #0]
   de1ce:	e7e0      	b.n	de192 <log10+0x8a>
   de1d0:	f7fc fce4 	bl	dab9c <__errno>
   de1d4:	9b08      	ldr	r3, [sp, #32]
   de1d6:	6003      	str	r3, [r0, #0]
   de1d8:	e7dd      	b.n	de196 <log10+0x8e>
   de1da:	2301      	movs	r3, #1
   de1dc:	2e02      	cmp	r6, #2
   de1de:	9300      	str	r3, [sp, #0]
   de1e0:	d10b      	bne.n	de1fa <log10+0xf2>
   de1e2:	f7fc fcdb 	bl	dab9c <__errno>
   de1e6:	2321      	movs	r3, #33	; 0x21
   de1e8:	6003      	str	r3, [r0, #0]
   de1ea:	480a      	ldr	r0, [pc, #40]	; (de214 <log10+0x10c>)
   de1ec:	f004 fa40 	bl	e2670 <nan>
   de1f0:	ed8d 0b06 	vstr	d0, [sp, #24]
   de1f4:	e7cd      	b.n	de192 <log10+0x8a>
   de1f6:	2301      	movs	r3, #1
   de1f8:	9300      	str	r3, [sp, #0]
   de1fa:	4668      	mov	r0, sp
   de1fc:	f004 fa36 	bl	e266c <matherr>
   de200:	2800      	cmp	r0, #0
   de202:	d1f2      	bne.n	de1ea <log10+0xe2>
   de204:	e7ed      	b.n	de1e2 <log10+0xda>
   de206:	bf00      	nop
   de208:	2003d5bc 	.word	0x2003d5bc
   de20c:	000e8080 	.word	0x000e8080
   de210:	c7efffff 	.word	0xc7efffff
   de214:	000e8078 	.word	0x000e8078
   de218:	fff00000 	.word	0xfff00000
   de21c:	00000000 	.word	0x00000000

000de220 <pow>:
   de220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   de224:	ed2d 8b02 	vpush	{d8}
   de228:	f8df a324 	ldr.w	sl, [pc, #804]	; de550 <pow+0x330>
   de22c:	b08b      	sub	sp, #44	; 0x2c
   de22e:	ec57 6b10 	vmov	r6, r7, d0
   de232:	ec55 4b11 	vmov	r4, r5, d1
   de236:	f001 fe47 	bl	dfec8 <__ieee754_pow>
   de23a:	f99a 8000 	ldrsb.w	r8, [sl]
   de23e:	eeb0 8a40 	vmov.f32	s16, s0
   de242:	eef0 8a60 	vmov.f32	s17, s1
   de246:	f1b8 3fff 	cmp.w	r8, #4294967295
   de24a:	d048      	beq.n	de2de <pow+0xbe>
   de24c:	4622      	mov	r2, r4
   de24e:	462b      	mov	r3, r5
   de250:	4620      	mov	r0, r4
   de252:	4629      	mov	r1, r5
   de254:	f004 ff8e 	bl	e3174 <__aeabi_dcmpun>
   de258:	4683      	mov	fp, r0
   de25a:	2800      	cmp	r0, #0
   de25c:	d13f      	bne.n	de2de <pow+0xbe>
   de25e:	4632      	mov	r2, r6
   de260:	463b      	mov	r3, r7
   de262:	4630      	mov	r0, r6
   de264:	4639      	mov	r1, r7
   de266:	f004 ff85 	bl	e3174 <__aeabi_dcmpun>
   de26a:	4681      	mov	r9, r0
   de26c:	2800      	cmp	r0, #0
   de26e:	f040 8090 	bne.w	de392 <pow+0x172>
   de272:	4630      	mov	r0, r6
   de274:	4639      	mov	r1, r7
   de276:	2200      	movs	r2, #0
   de278:	2300      	movs	r3, #0
   de27a:	f004 ff49 	bl	e3110 <__aeabi_dcmpeq>
   de27e:	2800      	cmp	r0, #0
   de280:	d036      	beq.n	de2f0 <pow+0xd0>
   de282:	2200      	movs	r2, #0
   de284:	2300      	movs	r3, #0
   de286:	4620      	mov	r0, r4
   de288:	4629      	mov	r1, r5
   de28a:	f004 ff41 	bl	e3110 <__aeabi_dcmpeq>
   de28e:	4683      	mov	fp, r0
   de290:	b1b8      	cbz	r0, de2c2 <pow+0xa2>
   de292:	ed9f 7ba5 	vldr	d7, [pc, #660]	; de528 <pow+0x308>
   de296:	2201      	movs	r2, #1
   de298:	4ba9      	ldr	r3, [pc, #676]	; (de540 <pow+0x320>)
   de29a:	f8cd 9020 	str.w	r9, [sp, #32]
   de29e:	9200      	str	r2, [sp, #0]
   de2a0:	e9cd 6702 	strd	r6, r7, [sp, #8]
   de2a4:	e9cd 4504 	strd	r4, r5, [sp, #16]
   de2a8:	ed8d 7b06 	vstr	d7, [sp, #24]
   de2ac:	9301      	str	r3, [sp, #4]
   de2ae:	f1b8 0f00 	cmp.w	r8, #0
   de2b2:	d05b      	beq.n	de36c <pow+0x14c>
   de2b4:	ed9f 0b9e 	vldr	d0, [pc, #632]	; de530 <pow+0x310>
   de2b8:	b00b      	add	sp, #44	; 0x2c
   de2ba:	ecbd 8b02 	vpop	{d8}
   de2be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de2c2:	ec45 4b10 	vmov	d0, r4, r5
   de2c6:	f004 f9c9 	bl	e265c <finite>
   de2ca:	b140      	cbz	r0, de2de <pow+0xbe>
   de2cc:	2200      	movs	r2, #0
   de2ce:	2300      	movs	r3, #0
   de2d0:	4620      	mov	r0, r4
   de2d2:	4629      	mov	r1, r5
   de2d4:	f004 ff26 	bl	e3124 <__aeabi_dcmplt>
   de2d8:	2800      	cmp	r0, #0
   de2da:	f040 80c5 	bne.w	de468 <pow+0x248>
   de2de:	eeb0 0a48 	vmov.f32	s0, s16
   de2e2:	eef0 0a68 	vmov.f32	s1, s17
   de2e6:	b00b      	add	sp, #44	; 0x2c
   de2e8:	ecbd 8b02 	vpop	{d8}
   de2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de2f0:	eeb0 0a48 	vmov.f32	s0, s16
   de2f4:	eef0 0a68 	vmov.f32	s1, s17
   de2f8:	f004 f9b0 	bl	e265c <finite>
   de2fc:	4680      	mov	r8, r0
   de2fe:	2800      	cmp	r0, #0
   de300:	d061      	beq.n	de3c6 <pow+0x1a6>
   de302:	f04f 0800 	mov.w	r8, #0
   de306:	f04f 0900 	mov.w	r9, #0
   de30a:	ec51 0b18 	vmov	r0, r1, d8
   de30e:	4642      	mov	r2, r8
   de310:	464b      	mov	r3, r9
   de312:	f004 fefd 	bl	e3110 <__aeabi_dcmpeq>
   de316:	2800      	cmp	r0, #0
   de318:	d0e1      	beq.n	de2de <pow+0xbe>
   de31a:	ec47 6b10 	vmov	d0, r6, r7
   de31e:	f004 f99d 	bl	e265c <finite>
   de322:	2800      	cmp	r0, #0
   de324:	d0db      	beq.n	de2de <pow+0xbe>
   de326:	ec45 4b10 	vmov	d0, r4, r5
   de32a:	f004 f997 	bl	e265c <finite>
   de32e:	2800      	cmp	r0, #0
   de330:	d0d5      	beq.n	de2de <pow+0xbe>
   de332:	f99a 3000 	ldrsb.w	r3, [sl]
   de336:	4a82      	ldr	r2, [pc, #520]	; (de540 <pow+0x320>)
   de338:	9201      	str	r2, [sp, #4]
   de33a:	2104      	movs	r1, #4
   de33c:	2200      	movs	r2, #0
   de33e:	2b02      	cmp	r3, #2
   de340:	e9cd 6702 	strd	r6, r7, [sp, #8]
   de344:	e9cd 4504 	strd	r4, r5, [sp, #16]
   de348:	e9cd 8906 	strd	r8, r9, [sp, #24]
   de34c:	9100      	str	r1, [sp, #0]
   de34e:	9208      	str	r2, [sp, #32]
   de350:	d003      	beq.n	de35a <pow+0x13a>
   de352:	4668      	mov	r0, sp
   de354:	f004 f98a 	bl	e266c <matherr>
   de358:	b970      	cbnz	r0, de378 <pow+0x158>
   de35a:	f7fc fc1f 	bl	dab9c <__errno>
   de35e:	2322      	movs	r3, #34	; 0x22
   de360:	6003      	str	r3, [r0, #0]
   de362:	e009      	b.n	de378 <pow+0x158>
   de364:	ed9f 7b70 	vldr	d7, [pc, #448]	; de528 <pow+0x308>
   de368:	ed8d 7b06 	vstr	d7, [sp, #24]
   de36c:	4668      	mov	r0, sp
   de36e:	f004 f97d 	bl	e266c <matherr>
   de372:	2800      	cmp	r0, #0
   de374:	f000 808e 	beq.w	de494 <pow+0x274>
   de378:	9b08      	ldr	r3, [sp, #32]
   de37a:	b11b      	cbz	r3, de384 <pow+0x164>
   de37c:	f7fc fc0e 	bl	dab9c <__errno>
   de380:	9b08      	ldr	r3, [sp, #32]
   de382:	6003      	str	r3, [r0, #0]
   de384:	ed9d 0b06 	vldr	d0, [sp, #24]
   de388:	b00b      	add	sp, #44	; 0x2c
   de38a:	ecbd 8b02 	vpop	{d8}
   de38e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de392:	2200      	movs	r2, #0
   de394:	2300      	movs	r3, #0
   de396:	4620      	mov	r0, r4
   de398:	4629      	mov	r1, r5
   de39a:	f004 feb9 	bl	e3110 <__aeabi_dcmpeq>
   de39e:	2800      	cmp	r0, #0
   de3a0:	d09d      	beq.n	de2de <pow+0xbe>
   de3a2:	ed9f 0b63 	vldr	d0, [pc, #396]	; de530 <pow+0x310>
   de3a6:	4b66      	ldr	r3, [pc, #408]	; (de540 <pow+0x320>)
   de3a8:	f8cd b020 	str.w	fp, [sp, #32]
   de3ac:	2201      	movs	r2, #1
   de3ae:	f1b8 0f02 	cmp.w	r8, #2
   de3b2:	e9cd 6702 	strd	r6, r7, [sp, #8]
   de3b6:	e9cd 4504 	strd	r4, r5, [sp, #16]
   de3ba:	ed8d 0b06 	vstr	d0, [sp, #24]
   de3be:	e88d 000c 	stmia.w	sp, {r2, r3}
   de3c2:	d1d3      	bne.n	de36c <pow+0x14c>
   de3c4:	e78f      	b.n	de2e6 <pow+0xc6>
   de3c6:	ec47 6b10 	vmov	d0, r6, r7
   de3ca:	f004 f947 	bl	e265c <finite>
   de3ce:	2800      	cmp	r0, #0
   de3d0:	d097      	beq.n	de302 <pow+0xe2>
   de3d2:	ec45 4b10 	vmov	d0, r4, r5
   de3d6:	f004 f941 	bl	e265c <finite>
   de3da:	2800      	cmp	r0, #0
   de3dc:	d091      	beq.n	de302 <pow+0xe2>
   de3de:	ec53 2b18 	vmov	r2, r3, d8
   de3e2:	ee18 0a10 	vmov	r0, s16
   de3e6:	4619      	mov	r1, r3
   de3e8:	f004 fec4 	bl	e3174 <__aeabi_dcmpun>
   de3ec:	2800      	cmp	r0, #0
   de3ee:	d17c      	bne.n	de4ea <pow+0x2ca>
   de3f0:	2303      	movs	r3, #3
   de3f2:	f99a 8000 	ldrsb.w	r8, [sl]
   de3f6:	9300      	str	r3, [sp, #0]
   de3f8:	4b51      	ldr	r3, [pc, #324]	; (de540 <pow+0x320>)
   de3fa:	9008      	str	r0, [sp, #32]
   de3fc:	e9cd 6702 	strd	r6, r7, [sp, #8]
   de400:	e9cd 4504 	strd	r4, r5, [sp, #16]
   de404:	9301      	str	r3, [sp, #4]
   de406:	f1b8 0f00 	cmp.w	r8, #0
   de40a:	d148      	bne.n	de49e <pow+0x27e>
   de40c:	f8df 9144 	ldr.w	r9, [pc, #324]	; de554 <pow+0x334>
   de410:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   de414:	2200      	movs	r2, #0
   de416:	2300      	movs	r3, #0
   de418:	4630      	mov	r0, r6
   de41a:	4639      	mov	r1, r7
   de41c:	e9cd 8906 	strd	r8, r9, [sp, #24]
   de420:	f004 fe80 	bl	e3124 <__aeabi_dcmplt>
   de424:	2800      	cmp	r0, #0
   de426:	d094      	beq.n	de352 <pow+0x132>
   de428:	2200      	movs	r2, #0
   de42a:	4b46      	ldr	r3, [pc, #280]	; (de544 <pow+0x324>)
   de42c:	4620      	mov	r0, r4
   de42e:	4629      	mov	r1, r5
   de430:	f004 fc06 	bl	e2c40 <__aeabi_dmul>
   de434:	4604      	mov	r4, r0
   de436:	460d      	mov	r5, r1
   de438:	ec45 4b10 	vmov	d0, r4, r5
   de43c:	f004 f920 	bl	e2680 <rint>
   de440:	4620      	mov	r0, r4
   de442:	ec53 2b10 	vmov	r2, r3, d0
   de446:	4629      	mov	r1, r5
   de448:	f004 fe62 	bl	e3110 <__aeabi_dcmpeq>
   de44c:	2800      	cmp	r0, #0
   de44e:	d149      	bne.n	de4e4 <pow+0x2c4>
   de450:	4b3d      	ldr	r3, [pc, #244]	; (de548 <pow+0x328>)
   de452:	f99a 8000 	ldrsb.w	r8, [sl]
   de456:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   de45a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   de45e:	f1b8 0f02 	cmp.w	r8, #2
   de462:	f47f af76 	bne.w	de352 <pow+0x132>
   de466:	e778      	b.n	de35a <pow+0x13a>
   de468:	4a35      	ldr	r2, [pc, #212]	; (de540 <pow+0x320>)
   de46a:	f99a 3000 	ldrsb.w	r3, [sl]
   de46e:	f8cd b020 	str.w	fp, [sp, #32]
   de472:	2101      	movs	r1, #1
   de474:	e9cd 6702 	strd	r6, r7, [sp, #8]
   de478:	e9cd 4504 	strd	r4, r5, [sp, #16]
   de47c:	e88d 0006 	stmia.w	sp, {r1, r2}
   de480:	2b00      	cmp	r3, #0
   de482:	f43f af6f 	beq.w	de364 <pow+0x144>
   de486:	4931      	ldr	r1, [pc, #196]	; (de54c <pow+0x32c>)
   de488:	2000      	movs	r0, #0
   de48a:	2b02      	cmp	r3, #2
   de48c:	e9cd 0106 	strd	r0, r1, [sp, #24]
   de490:	f47f af6c 	bne.w	de36c <pow+0x14c>
   de494:	f7fc fb82 	bl	dab9c <__errno>
   de498:	2321      	movs	r3, #33	; 0x21
   de49a:	6003      	str	r3, [r0, #0]
   de49c:	e76c      	b.n	de378 <pow+0x158>
   de49e:	ed9f 7b26 	vldr	d7, [pc, #152]	; de538 <pow+0x318>
   de4a2:	2200      	movs	r2, #0
   de4a4:	2300      	movs	r3, #0
   de4a6:	4630      	mov	r0, r6
   de4a8:	4639      	mov	r1, r7
   de4aa:	ed8d 7b06 	vstr	d7, [sp, #24]
   de4ae:	f004 fe39 	bl	e3124 <__aeabi_dcmplt>
   de4b2:	2800      	cmp	r0, #0
   de4b4:	d0d3      	beq.n	de45e <pow+0x23e>
   de4b6:	2200      	movs	r2, #0
   de4b8:	4b22      	ldr	r3, [pc, #136]	; (de544 <pow+0x324>)
   de4ba:	4620      	mov	r0, r4
   de4bc:	4629      	mov	r1, r5
   de4be:	f004 fbbf 	bl	e2c40 <__aeabi_dmul>
   de4c2:	4604      	mov	r4, r0
   de4c4:	460d      	mov	r5, r1
   de4c6:	ec45 4b10 	vmov	d0, r4, r5
   de4ca:	f004 f8d9 	bl	e2680 <rint>
   de4ce:	4620      	mov	r0, r4
   de4d0:	ec53 2b10 	vmov	r2, r3, d0
   de4d4:	4629      	mov	r1, r5
   de4d6:	f004 fe1b 	bl	e3110 <__aeabi_dcmpeq>
   de4da:	b918      	cbnz	r0, de4e4 <pow+0x2c4>
   de4dc:	4b1b      	ldr	r3, [pc, #108]	; (de54c <pow+0x32c>)
   de4de:	2200      	movs	r2, #0
   de4e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   de4e4:	f99a 8000 	ldrsb.w	r8, [sl]
   de4e8:	e7b9      	b.n	de45e <pow+0x23e>
   de4ea:	4b15      	ldr	r3, [pc, #84]	; (de540 <pow+0x320>)
   de4ec:	f99a 9000 	ldrsb.w	r9, [sl]
   de4f0:	f8cd 8020 	str.w	r8, [sp, #32]
   de4f4:	2201      	movs	r2, #1
   de4f6:	e9cd 6702 	strd	r6, r7, [sp, #8]
   de4fa:	e9cd 4504 	strd	r4, r5, [sp, #16]
   de4fe:	e88d 000c 	stmia.w	sp, {r2, r3}
   de502:	f1b9 0f00 	cmp.w	r9, #0
   de506:	f43f af2d 	beq.w	de364 <pow+0x144>
   de50a:	2200      	movs	r2, #0
   de50c:	2300      	movs	r3, #0
   de50e:	4610      	mov	r0, r2
   de510:	4619      	mov	r1, r3
   de512:	f004 fcbf 	bl	e2e94 <__aeabi_ddiv>
   de516:	f1b9 0f02 	cmp.w	r9, #2
   de51a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   de51e:	d0b9      	beq.n	de494 <pow+0x274>
   de520:	e724      	b.n	de36c <pow+0x14c>
   de522:	bf00      	nop
   de524:	f3af 8000 	nop.w
	...
   de534:	3ff00000 	.word	0x3ff00000
   de538:	00000000 	.word	0x00000000
   de53c:	7ff00000 	.word	0x7ff00000
   de540:	000e8088 	.word	0x000e8088
   de544:	3fe00000 	.word	0x3fe00000
   de548:	c7efffff 	.word	0xc7efffff
   de54c:	fff00000 	.word	0xfff00000
   de550:	2003d5bc 	.word	0x2003d5bc
   de554:	47efffff 	.word	0x47efffff

000de558 <sinh>:
   de558:	b530      	push	{r4, r5, lr}
   de55a:	ed2d 8b04 	vpush	{d8-d9}
   de55e:	eeb0 9a40 	vmov.f32	s18, s0
   de562:	eef0 9a60 	vmov.f32	s19, s1
   de566:	4c2d      	ldr	r4, [pc, #180]	; (de61c <sinh+0xc4>)
   de568:	b08b      	sub	sp, #44	; 0x2c
   de56a:	f002 fc5d 	bl	e0e28 <__ieee754_sinh>
   de56e:	f994 3000 	ldrsb.w	r3, [r4]
   de572:	eeb0 8a40 	vmov.f32	s16, s0
   de576:	eef0 8a60 	vmov.f32	s17, s1
   de57a:	3301      	adds	r3, #1
   de57c:	d003      	beq.n	de586 <sinh+0x2e>
   de57e:	f004 f86d 	bl	e265c <finite>
   de582:	4605      	mov	r5, r0
   de584:	b138      	cbz	r0, de596 <sinh+0x3e>
   de586:	eeb0 0a48 	vmov.f32	s0, s16
   de58a:	eef0 0a68 	vmov.f32	s1, s17
   de58e:	b00b      	add	sp, #44	; 0x2c
   de590:	ecbd 8b04 	vpop	{d8-d9}
   de594:	bd30      	pop	{r4, r5, pc}
   de596:	eeb0 0a49 	vmov.f32	s0, s18
   de59a:	eef0 0a69 	vmov.f32	s1, s19
   de59e:	f004 f85d 	bl	e265c <finite>
   de5a2:	2800      	cmp	r0, #0
   de5a4:	d0ef      	beq.n	de586 <sinh+0x2e>
   de5a6:	4b1e      	ldr	r3, [pc, #120]	; (de620 <sinh+0xc8>)
   de5a8:	f994 4000 	ldrsb.w	r4, [r4]
   de5ac:	9508      	str	r5, [sp, #32]
   de5ae:	2203      	movs	r2, #3
   de5b0:	e88d 000c 	stmia.w	sp, {r2, r3}
   de5b4:	ed8d 9b04 	vstr	d9, [sp, #16]
   de5b8:	ed8d 9b02 	vstr	d9, [sp, #8]
   de5bc:	2200      	movs	r2, #0
   de5be:	2300      	movs	r3, #0
   de5c0:	ec51 0b19 	vmov	r0, r1, d9
   de5c4:	b99c      	cbnz	r4, de5ee <sinh+0x96>
   de5c6:	f004 fdcb 	bl	e3160 <__aeabi_dcmpgt>
   de5ca:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   de5ce:	b308      	cbz	r0, de614 <sinh+0xbc>
   de5d0:	4b14      	ldr	r3, [pc, #80]	; (de624 <sinh+0xcc>)
   de5d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   de5d6:	4668      	mov	r0, sp
   de5d8:	f004 f848 	bl	e266c <matherr>
   de5dc:	b180      	cbz	r0, de600 <sinh+0xa8>
   de5de:	9b08      	ldr	r3, [sp, #32]
   de5e0:	b99b      	cbnz	r3, de60a <sinh+0xb2>
   de5e2:	ed9d 0b06 	vldr	d0, [sp, #24]
   de5e6:	b00b      	add	sp, #44	; 0x2c
   de5e8:	ecbd 8b04 	vpop	{d8-d9}
   de5ec:	bd30      	pop	{r4, r5, pc}
   de5ee:	f004 fdb7 	bl	e3160 <__aeabi_dcmpgt>
   de5f2:	2200      	movs	r2, #0
   de5f4:	b180      	cbz	r0, de618 <sinh+0xc0>
   de5f6:	4b0c      	ldr	r3, [pc, #48]	; (de628 <sinh+0xd0>)
   de5f8:	2c02      	cmp	r4, #2
   de5fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
   de5fe:	d1ea      	bne.n	de5d6 <sinh+0x7e>
   de600:	f7fc facc 	bl	dab9c <__errno>
   de604:	2322      	movs	r3, #34	; 0x22
   de606:	6003      	str	r3, [r0, #0]
   de608:	e7e9      	b.n	de5de <sinh+0x86>
   de60a:	f7fc fac7 	bl	dab9c <__errno>
   de60e:	9b08      	ldr	r3, [sp, #32]
   de610:	6003      	str	r3, [r0, #0]
   de612:	e7e6      	b.n	de5e2 <sinh+0x8a>
   de614:	4b05      	ldr	r3, [pc, #20]	; (de62c <sinh+0xd4>)
   de616:	e7dc      	b.n	de5d2 <sinh+0x7a>
   de618:	4b05      	ldr	r3, [pc, #20]	; (de630 <sinh+0xd8>)
   de61a:	e7ed      	b.n	de5f8 <sinh+0xa0>
   de61c:	2003d5bc 	.word	0x2003d5bc
   de620:	000e808c 	.word	0x000e808c
   de624:	47efffff 	.word	0x47efffff
   de628:	7ff00000 	.word	0x7ff00000
   de62c:	c7efffff 	.word	0xc7efffff
   de630:	fff00000 	.word	0xfff00000

000de634 <sqrt>:
   de634:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   de638:	ed2d 8b02 	vpush	{d8}
   de63c:	b08b      	sub	sp, #44	; 0x2c
   de63e:	ec55 4b10 	vmov	r4, r5, d0
   de642:	f002 fcd5 	bl	e0ff0 <__ieee754_sqrt>
   de646:	4b29      	ldr	r3, [pc, #164]	; (de6ec <sqrt+0xb8>)
   de648:	eeb0 8a40 	vmov.f32	s16, s0
   de64c:	eef0 8a60 	vmov.f32	s17, s1
   de650:	f993 6000 	ldrsb.w	r6, [r3]
   de654:	1c73      	adds	r3, r6, #1
   de656:	d012      	beq.n	de67e <sqrt+0x4a>
   de658:	4622      	mov	r2, r4
   de65a:	462b      	mov	r3, r5
   de65c:	4620      	mov	r0, r4
   de65e:	4629      	mov	r1, r5
   de660:	f004 fd88 	bl	e3174 <__aeabi_dcmpun>
   de664:	4607      	mov	r7, r0
   de666:	b950      	cbnz	r0, de67e <sqrt+0x4a>
   de668:	f04f 0800 	mov.w	r8, #0
   de66c:	f04f 0900 	mov.w	r9, #0
   de670:	4620      	mov	r0, r4
   de672:	4629      	mov	r1, r5
   de674:	4642      	mov	r2, r8
   de676:	464b      	mov	r3, r9
   de678:	f004 fd54 	bl	e3124 <__aeabi_dcmplt>
   de67c:	b940      	cbnz	r0, de690 <sqrt+0x5c>
   de67e:	eeb0 0a48 	vmov.f32	s0, s16
   de682:	eef0 0a68 	vmov.f32	s1, s17
   de686:	b00b      	add	sp, #44	; 0x2c
   de688:	ecbd 8b02 	vpop	{d8}
   de68c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   de690:	4b17      	ldr	r3, [pc, #92]	; (de6f0 <sqrt+0xbc>)
   de692:	9708      	str	r7, [sp, #32]
   de694:	2201      	movs	r2, #1
   de696:	e9cd 4504 	strd	r4, r5, [sp, #16]
   de69a:	e9cd 4502 	strd	r4, r5, [sp, #8]
   de69e:	e88d 000c 	stmia.w	sp, {r2, r3}
   de6a2:	b1b6      	cbz	r6, de6d2 <sqrt+0x9e>
   de6a4:	4642      	mov	r2, r8
   de6a6:	464b      	mov	r3, r9
   de6a8:	4640      	mov	r0, r8
   de6aa:	4649      	mov	r1, r9
   de6ac:	f004 fbf2 	bl	e2e94 <__aeabi_ddiv>
   de6b0:	2e02      	cmp	r6, #2
   de6b2:	e9cd 0106 	strd	r0, r1, [sp, #24]
   de6b6:	d10e      	bne.n	de6d6 <sqrt+0xa2>
   de6b8:	f7fc fa70 	bl	dab9c <__errno>
   de6bc:	2321      	movs	r3, #33	; 0x21
   de6be:	6003      	str	r3, [r0, #0]
   de6c0:	9b08      	ldr	r3, [sp, #32]
   de6c2:	b973      	cbnz	r3, de6e2 <sqrt+0xae>
   de6c4:	ed9d 0b06 	vldr	d0, [sp, #24]
   de6c8:	b00b      	add	sp, #44	; 0x2c
   de6ca:	ecbd 8b02 	vpop	{d8}
   de6ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   de6d2:	e9cd 8906 	strd	r8, r9, [sp, #24]
   de6d6:	4668      	mov	r0, sp
   de6d8:	f003 ffc8 	bl	e266c <matherr>
   de6dc:	2800      	cmp	r0, #0
   de6de:	d1ef      	bne.n	de6c0 <sqrt+0x8c>
   de6e0:	e7ea      	b.n	de6b8 <sqrt+0x84>
   de6e2:	f7fc fa5b 	bl	dab9c <__errno>
   de6e6:	9b08      	ldr	r3, [sp, #32]
   de6e8:	6003      	str	r3, [r0, #0]
   de6ea:	e7eb      	b.n	de6c4 <sqrt+0x90>
   de6ec:	2003d5bc 	.word	0x2003d5bc
   de6f0:	000e8094 	.word	0x000e8094
   de6f4:	00000000 	.word	0x00000000

000de6f8 <__ieee754_acos>:
   de6f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   de6fc:	ec55 4b10 	vmov	r4, r5, d0
   de700:	49cd      	ldr	r1, [pc, #820]	; (dea38 <__ieee754_acos+0x340>)
   de702:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
   de706:	428b      	cmp	r3, r1
   de708:	dd0d      	ble.n	de726 <__ieee754_acos+0x2e>
   de70a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
   de70e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   de712:	4323      	orrs	r3, r4
   de714:	f040 80bd 	bne.w	de892 <__ieee754_acos+0x19a>
   de718:	2d00      	cmp	r5, #0
   de71a:	f340 814f 	ble.w	de9bc <__ieee754_acos+0x2c4>
   de71e:	ed9f 0baa 	vldr	d0, [pc, #680]	; de9c8 <__ieee754_acos+0x2d0>
   de722:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de726:	49c5      	ldr	r1, [pc, #788]	; (dea3c <__ieee754_acos+0x344>)
   de728:	428b      	cmp	r3, r1
   de72a:	f340 80ab 	ble.w	de884 <__ieee754_acos+0x18c>
   de72e:	2d00      	cmp	r5, #0
   de730:	f2c0 818c 	blt.w	dea4c <__ieee754_acos+0x354>
   de734:	ee10 2a10 	vmov	r2, s0
   de738:	462b      	mov	r3, r5
   de73a:	2000      	movs	r0, #0
   de73c:	49c0      	ldr	r1, [pc, #768]	; (dea40 <__ieee754_acos+0x348>)
   de73e:	f004 f8cb 	bl	e28d8 <__aeabi_dsub>
   de742:	2200      	movs	r2, #0
   de744:	4bbf      	ldr	r3, [pc, #764]	; (dea44 <__ieee754_acos+0x34c>)
   de746:	f004 fa7b 	bl	e2c40 <__aeabi_dmul>
   de74a:	4604      	mov	r4, r0
   de74c:	460d      	mov	r5, r1
   de74e:	ec45 4b10 	vmov	d0, r4, r5
   de752:	f002 fc4d 	bl	e0ff0 <__ieee754_sqrt>
   de756:	4620      	mov	r0, r4
   de758:	4629      	mov	r1, r5
   de75a:	a39d      	add	r3, pc, #628	; (adr r3, de9d0 <__ieee754_acos+0x2d8>)
   de75c:	e9d3 2300 	ldrd	r2, r3, [r3]
   de760:	ec59 8b10 	vmov	r8, r9, d0
   de764:	f004 fa6c 	bl	e2c40 <__aeabi_dmul>
   de768:	a39b      	add	r3, pc, #620	; (adr r3, de9d8 <__ieee754_acos+0x2e0>)
   de76a:	e9d3 2300 	ldrd	r2, r3, [r3]
   de76e:	f004 f8b5 	bl	e28dc <__adddf3>
   de772:	4622      	mov	r2, r4
   de774:	462b      	mov	r3, r5
   de776:	f004 fa63 	bl	e2c40 <__aeabi_dmul>
   de77a:	a399      	add	r3, pc, #612	; (adr r3, de9e0 <__ieee754_acos+0x2e8>)
   de77c:	e9d3 2300 	ldrd	r2, r3, [r3]
   de780:	f004 f8aa 	bl	e28d8 <__aeabi_dsub>
   de784:	4622      	mov	r2, r4
   de786:	462b      	mov	r3, r5
   de788:	f004 fa5a 	bl	e2c40 <__aeabi_dmul>
   de78c:	a396      	add	r3, pc, #600	; (adr r3, de9e8 <__ieee754_acos+0x2f0>)
   de78e:	e9d3 2300 	ldrd	r2, r3, [r3]
   de792:	f004 f8a3 	bl	e28dc <__adddf3>
   de796:	4622      	mov	r2, r4
   de798:	462b      	mov	r3, r5
   de79a:	f004 fa51 	bl	e2c40 <__aeabi_dmul>
   de79e:	a394      	add	r3, pc, #592	; (adr r3, de9f0 <__ieee754_acos+0x2f8>)
   de7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   de7a4:	f004 f898 	bl	e28d8 <__aeabi_dsub>
   de7a8:	4622      	mov	r2, r4
   de7aa:	462b      	mov	r3, r5
   de7ac:	f004 fa48 	bl	e2c40 <__aeabi_dmul>
   de7b0:	a391      	add	r3, pc, #580	; (adr r3, de9f8 <__ieee754_acos+0x300>)
   de7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   de7b6:	f004 f891 	bl	e28dc <__adddf3>
   de7ba:	4622      	mov	r2, r4
   de7bc:	462b      	mov	r3, r5
   de7be:	f004 fa3f 	bl	e2c40 <__aeabi_dmul>
   de7c2:	a38f      	add	r3, pc, #572	; (adr r3, dea00 <__ieee754_acos+0x308>)
   de7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   de7c8:	4682      	mov	sl, r0
   de7ca:	468b      	mov	fp, r1
   de7cc:	4620      	mov	r0, r4
   de7ce:	4629      	mov	r1, r5
   de7d0:	f004 fa36 	bl	e2c40 <__aeabi_dmul>
   de7d4:	a38c      	add	r3, pc, #560	; (adr r3, dea08 <__ieee754_acos+0x310>)
   de7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   de7da:	f004 f87d 	bl	e28d8 <__aeabi_dsub>
   de7de:	4622      	mov	r2, r4
   de7e0:	462b      	mov	r3, r5
   de7e2:	f004 fa2d 	bl	e2c40 <__aeabi_dmul>
   de7e6:	a38a      	add	r3, pc, #552	; (adr r3, dea10 <__ieee754_acos+0x318>)
   de7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   de7ec:	f004 f876 	bl	e28dc <__adddf3>
   de7f0:	4622      	mov	r2, r4
   de7f2:	462b      	mov	r3, r5
   de7f4:	f004 fa24 	bl	e2c40 <__aeabi_dmul>
   de7f8:	a387      	add	r3, pc, #540	; (adr r3, dea18 <__ieee754_acos+0x320>)
   de7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   de7fe:	f004 f86b 	bl	e28d8 <__aeabi_dsub>
   de802:	4622      	mov	r2, r4
   de804:	462b      	mov	r3, r5
   de806:	f004 fa1b 	bl	e2c40 <__aeabi_dmul>
   de80a:	2200      	movs	r2, #0
   de80c:	4b8c      	ldr	r3, [pc, #560]	; (dea40 <__ieee754_acos+0x348>)
   de80e:	f004 f865 	bl	e28dc <__adddf3>
   de812:	4602      	mov	r2, r0
   de814:	460b      	mov	r3, r1
   de816:	4650      	mov	r0, sl
   de818:	4659      	mov	r1, fp
   de81a:	f004 fb3b 	bl	e2e94 <__aeabi_ddiv>
   de81e:	4642      	mov	r2, r8
   de820:	464b      	mov	r3, r9
   de822:	f004 fa0d 	bl	e2c40 <__aeabi_dmul>
   de826:	2600      	movs	r6, #0
   de828:	4682      	mov	sl, r0
   de82a:	468b      	mov	fp, r1
   de82c:	4632      	mov	r2, r6
   de82e:	464b      	mov	r3, r9
   de830:	4630      	mov	r0, r6
   de832:	4649      	mov	r1, r9
   de834:	f004 fa04 	bl	e2c40 <__aeabi_dmul>
   de838:	4602      	mov	r2, r0
   de83a:	460b      	mov	r3, r1
   de83c:	4620      	mov	r0, r4
   de83e:	4629      	mov	r1, r5
   de840:	f004 f84a 	bl	e28d8 <__aeabi_dsub>
   de844:	4632      	mov	r2, r6
   de846:	4604      	mov	r4, r0
   de848:	460d      	mov	r5, r1
   de84a:	464b      	mov	r3, r9
   de84c:	4640      	mov	r0, r8
   de84e:	4649      	mov	r1, r9
   de850:	f004 f844 	bl	e28dc <__adddf3>
   de854:	4602      	mov	r2, r0
   de856:	460b      	mov	r3, r1
   de858:	4620      	mov	r0, r4
   de85a:	4629      	mov	r1, r5
   de85c:	f004 fb1a 	bl	e2e94 <__aeabi_ddiv>
   de860:	4602      	mov	r2, r0
   de862:	460b      	mov	r3, r1
   de864:	4650      	mov	r0, sl
   de866:	4659      	mov	r1, fp
   de868:	f004 f838 	bl	e28dc <__adddf3>
   de86c:	4632      	mov	r2, r6
   de86e:	464b      	mov	r3, r9
   de870:	f004 f834 	bl	e28dc <__adddf3>
   de874:	4602      	mov	r2, r0
   de876:	460b      	mov	r3, r1
   de878:	f004 f830 	bl	e28dc <__adddf3>
   de87c:	ec41 0b10 	vmov	d0, r0, r1
   de880:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de884:	4a70      	ldr	r2, [pc, #448]	; (dea48 <__ieee754_acos+0x350>)
   de886:	4293      	cmp	r3, r2
   de888:	dc12      	bgt.n	de8b0 <__ieee754_acos+0x1b8>
   de88a:	ed9f 0b65 	vldr	d0, [pc, #404]	; dea20 <__ieee754_acos+0x328>
   de88e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de892:	ee10 2a10 	vmov	r2, s0
   de896:	462b      	mov	r3, r5
   de898:	4620      	mov	r0, r4
   de89a:	4629      	mov	r1, r5
   de89c:	f004 f81c 	bl	e28d8 <__aeabi_dsub>
   de8a0:	4602      	mov	r2, r0
   de8a2:	460b      	mov	r3, r1
   de8a4:	f004 faf6 	bl	e2e94 <__aeabi_ddiv>
   de8a8:	ec41 0b10 	vmov	d0, r0, r1
   de8ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de8b0:	ee10 2a10 	vmov	r2, s0
   de8b4:	ee10 0a10 	vmov	r0, s0
   de8b8:	462b      	mov	r3, r5
   de8ba:	4629      	mov	r1, r5
   de8bc:	f004 f9c0 	bl	e2c40 <__aeabi_dmul>
   de8c0:	a343      	add	r3, pc, #268	; (adr r3, de9d0 <__ieee754_acos+0x2d8>)
   de8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   de8c6:	4606      	mov	r6, r0
   de8c8:	460f      	mov	r7, r1
   de8ca:	f004 f9b9 	bl	e2c40 <__aeabi_dmul>
   de8ce:	a342      	add	r3, pc, #264	; (adr r3, de9d8 <__ieee754_acos+0x2e0>)
   de8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   de8d4:	f004 f802 	bl	e28dc <__adddf3>
   de8d8:	4632      	mov	r2, r6
   de8da:	463b      	mov	r3, r7
   de8dc:	f004 f9b0 	bl	e2c40 <__aeabi_dmul>
   de8e0:	a33f      	add	r3, pc, #252	; (adr r3, de9e0 <__ieee754_acos+0x2e8>)
   de8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   de8e6:	f003 fff7 	bl	e28d8 <__aeabi_dsub>
   de8ea:	4632      	mov	r2, r6
   de8ec:	463b      	mov	r3, r7
   de8ee:	f004 f9a7 	bl	e2c40 <__aeabi_dmul>
   de8f2:	a33d      	add	r3, pc, #244	; (adr r3, de9e8 <__ieee754_acos+0x2f0>)
   de8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   de8f8:	f003 fff0 	bl	e28dc <__adddf3>
   de8fc:	4632      	mov	r2, r6
   de8fe:	463b      	mov	r3, r7
   de900:	f004 f99e 	bl	e2c40 <__aeabi_dmul>
   de904:	a33a      	add	r3, pc, #232	; (adr r3, de9f0 <__ieee754_acos+0x2f8>)
   de906:	e9d3 2300 	ldrd	r2, r3, [r3]
   de90a:	f003 ffe5 	bl	e28d8 <__aeabi_dsub>
   de90e:	4632      	mov	r2, r6
   de910:	463b      	mov	r3, r7
   de912:	f004 f995 	bl	e2c40 <__aeabi_dmul>
   de916:	a338      	add	r3, pc, #224	; (adr r3, de9f8 <__ieee754_acos+0x300>)
   de918:	e9d3 2300 	ldrd	r2, r3, [r3]
   de91c:	f003 ffde 	bl	e28dc <__adddf3>
   de920:	4632      	mov	r2, r6
   de922:	463b      	mov	r3, r7
   de924:	f004 f98c 	bl	e2c40 <__aeabi_dmul>
   de928:	a335      	add	r3, pc, #212	; (adr r3, dea00 <__ieee754_acos+0x308>)
   de92a:	e9d3 2300 	ldrd	r2, r3, [r3]
   de92e:	4680      	mov	r8, r0
   de930:	4689      	mov	r9, r1
   de932:	4630      	mov	r0, r6
   de934:	4639      	mov	r1, r7
   de936:	f004 f983 	bl	e2c40 <__aeabi_dmul>
   de93a:	a333      	add	r3, pc, #204	; (adr r3, dea08 <__ieee754_acos+0x310>)
   de93c:	e9d3 2300 	ldrd	r2, r3, [r3]
   de940:	f003 ffca 	bl	e28d8 <__aeabi_dsub>
   de944:	4632      	mov	r2, r6
   de946:	463b      	mov	r3, r7
   de948:	f004 f97a 	bl	e2c40 <__aeabi_dmul>
   de94c:	a330      	add	r3, pc, #192	; (adr r3, dea10 <__ieee754_acos+0x318>)
   de94e:	e9d3 2300 	ldrd	r2, r3, [r3]
   de952:	f003 ffc3 	bl	e28dc <__adddf3>
   de956:	4632      	mov	r2, r6
   de958:	463b      	mov	r3, r7
   de95a:	f004 f971 	bl	e2c40 <__aeabi_dmul>
   de95e:	a32e      	add	r3, pc, #184	; (adr r3, dea18 <__ieee754_acos+0x320>)
   de960:	e9d3 2300 	ldrd	r2, r3, [r3]
   de964:	f003 ffb8 	bl	e28d8 <__aeabi_dsub>
   de968:	4632      	mov	r2, r6
   de96a:	463b      	mov	r3, r7
   de96c:	f004 f968 	bl	e2c40 <__aeabi_dmul>
   de970:	2200      	movs	r2, #0
   de972:	4b33      	ldr	r3, [pc, #204]	; (dea40 <__ieee754_acos+0x348>)
   de974:	f003 ffb2 	bl	e28dc <__adddf3>
   de978:	4602      	mov	r2, r0
   de97a:	460b      	mov	r3, r1
   de97c:	4640      	mov	r0, r8
   de97e:	4649      	mov	r1, r9
   de980:	f004 fa88 	bl	e2e94 <__aeabi_ddiv>
   de984:	4622      	mov	r2, r4
   de986:	462b      	mov	r3, r5
   de988:	f004 f95a 	bl	e2c40 <__aeabi_dmul>
   de98c:	4602      	mov	r2, r0
   de98e:	460b      	mov	r3, r1
   de990:	a125      	add	r1, pc, #148	; (adr r1, dea28 <__ieee754_acos+0x330>)
   de992:	e9d1 0100 	ldrd	r0, r1, [r1]
   de996:	f003 ff9f 	bl	e28d8 <__aeabi_dsub>
   de99a:	4602      	mov	r2, r0
   de99c:	460b      	mov	r3, r1
   de99e:	4620      	mov	r0, r4
   de9a0:	4629      	mov	r1, r5
   de9a2:	f003 ff99 	bl	e28d8 <__aeabi_dsub>
   de9a6:	4602      	mov	r2, r0
   de9a8:	460b      	mov	r3, r1
   de9aa:	a11d      	add	r1, pc, #116	; (adr r1, dea20 <__ieee754_acos+0x328>)
   de9ac:	e9d1 0100 	ldrd	r0, r1, [r1]
   de9b0:	f003 ff92 	bl	e28d8 <__aeabi_dsub>
   de9b4:	ec41 0b10 	vmov	d0, r0, r1
   de9b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de9bc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; dea30 <__ieee754_acos+0x338>
   de9c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de9c4:	f3af 8000 	nop.w
	...
   de9d0:	0dfdf709 	.word	0x0dfdf709
   de9d4:	3f023de1 	.word	0x3f023de1
   de9d8:	7501b288 	.word	0x7501b288
   de9dc:	3f49efe0 	.word	0x3f49efe0
   de9e0:	b5688f3b 	.word	0xb5688f3b
   de9e4:	3fa48228 	.word	0x3fa48228
   de9e8:	0e884455 	.word	0x0e884455
   de9ec:	3fc9c155 	.word	0x3fc9c155
   de9f0:	03eb6f7d 	.word	0x03eb6f7d
   de9f4:	3fd4d612 	.word	0x3fd4d612
   de9f8:	55555555 	.word	0x55555555
   de9fc:	3fc55555 	.word	0x3fc55555
   dea00:	b12e9282 	.word	0xb12e9282
   dea04:	3fb3b8c5 	.word	0x3fb3b8c5
   dea08:	1b8d0159 	.word	0x1b8d0159
   dea0c:	3fe6066c 	.word	0x3fe6066c
   dea10:	9c598ac8 	.word	0x9c598ac8
   dea14:	40002ae5 	.word	0x40002ae5
   dea18:	1c8a2d4b 	.word	0x1c8a2d4b
   dea1c:	40033a27 	.word	0x40033a27
   dea20:	54442d18 	.word	0x54442d18
   dea24:	3ff921fb 	.word	0x3ff921fb
   dea28:	33145c07 	.word	0x33145c07
   dea2c:	3c91a626 	.word	0x3c91a626
   dea30:	54442d18 	.word	0x54442d18
   dea34:	400921fb 	.word	0x400921fb
   dea38:	3fefffff 	.word	0x3fefffff
   dea3c:	3fdfffff 	.word	0x3fdfffff
   dea40:	3ff00000 	.word	0x3ff00000
   dea44:	3fe00000 	.word	0x3fe00000
   dea48:	3c600000 	.word	0x3c600000
   dea4c:	ee10 0a10 	vmov	r0, s0
   dea50:	4629      	mov	r1, r5
   dea52:	2200      	movs	r2, #0
   dea54:	4b5e      	ldr	r3, [pc, #376]	; (debd0 <__ieee754_acos+0x4d8>)
   dea56:	f003 ff41 	bl	e28dc <__adddf3>
   dea5a:	2200      	movs	r2, #0
   dea5c:	4b5d      	ldr	r3, [pc, #372]	; (debd4 <__ieee754_acos+0x4dc>)
   dea5e:	f004 f8ef 	bl	e2c40 <__aeabi_dmul>
   dea62:	a343      	add	r3, pc, #268	; (adr r3, deb70 <__ieee754_acos+0x478>)
   dea64:	e9d3 2300 	ldrd	r2, r3, [r3]
   dea68:	4604      	mov	r4, r0
   dea6a:	460d      	mov	r5, r1
   dea6c:	f004 f8e8 	bl	e2c40 <__aeabi_dmul>
   dea70:	a341      	add	r3, pc, #260	; (adr r3, deb78 <__ieee754_acos+0x480>)
   dea72:	e9d3 2300 	ldrd	r2, r3, [r3]
   dea76:	f003 ff31 	bl	e28dc <__adddf3>
   dea7a:	4622      	mov	r2, r4
   dea7c:	462b      	mov	r3, r5
   dea7e:	f004 f8df 	bl	e2c40 <__aeabi_dmul>
   dea82:	a33f      	add	r3, pc, #252	; (adr r3, deb80 <__ieee754_acos+0x488>)
   dea84:	e9d3 2300 	ldrd	r2, r3, [r3]
   dea88:	f003 ff26 	bl	e28d8 <__aeabi_dsub>
   dea8c:	4622      	mov	r2, r4
   dea8e:	462b      	mov	r3, r5
   dea90:	f004 f8d6 	bl	e2c40 <__aeabi_dmul>
   dea94:	a33c      	add	r3, pc, #240	; (adr r3, deb88 <__ieee754_acos+0x490>)
   dea96:	e9d3 2300 	ldrd	r2, r3, [r3]
   dea9a:	f003 ff1f 	bl	e28dc <__adddf3>
   dea9e:	4622      	mov	r2, r4
   deaa0:	462b      	mov	r3, r5
   deaa2:	f004 f8cd 	bl	e2c40 <__aeabi_dmul>
   deaa6:	a33a      	add	r3, pc, #232	; (adr r3, deb90 <__ieee754_acos+0x498>)
   deaa8:	e9d3 2300 	ldrd	r2, r3, [r3]
   deaac:	f003 ff14 	bl	e28d8 <__aeabi_dsub>
   deab0:	4622      	mov	r2, r4
   deab2:	462b      	mov	r3, r5
   deab4:	f004 f8c4 	bl	e2c40 <__aeabi_dmul>
   deab8:	a337      	add	r3, pc, #220	; (adr r3, deb98 <__ieee754_acos+0x4a0>)
   deaba:	e9d3 2300 	ldrd	r2, r3, [r3]
   deabe:	f003 ff0d 	bl	e28dc <__adddf3>
   deac2:	4622      	mov	r2, r4
   deac4:	462b      	mov	r3, r5
   deac6:	f004 f8bb 	bl	e2c40 <__aeabi_dmul>
   deaca:	ec45 4b10 	vmov	d0, r4, r5
   deace:	4680      	mov	r8, r0
   dead0:	4689      	mov	r9, r1
   dead2:	f002 fa8d 	bl	e0ff0 <__ieee754_sqrt>
   dead6:	4620      	mov	r0, r4
   dead8:	4629      	mov	r1, r5
   deada:	a331      	add	r3, pc, #196	; (adr r3, deba0 <__ieee754_acos+0x4a8>)
   deadc:	e9d3 2300 	ldrd	r2, r3, [r3]
   deae0:	ec57 6b10 	vmov	r6, r7, d0
   deae4:	f004 f8ac 	bl	e2c40 <__aeabi_dmul>
   deae8:	a32f      	add	r3, pc, #188	; (adr r3, deba8 <__ieee754_acos+0x4b0>)
   deaea:	e9d3 2300 	ldrd	r2, r3, [r3]
   deaee:	f003 fef3 	bl	e28d8 <__aeabi_dsub>
   deaf2:	4622      	mov	r2, r4
   deaf4:	462b      	mov	r3, r5
   deaf6:	f004 f8a3 	bl	e2c40 <__aeabi_dmul>
   deafa:	a32d      	add	r3, pc, #180	; (adr r3, debb0 <__ieee754_acos+0x4b8>)
   deafc:	e9d3 2300 	ldrd	r2, r3, [r3]
   deb00:	f003 feec 	bl	e28dc <__adddf3>
   deb04:	4622      	mov	r2, r4
   deb06:	462b      	mov	r3, r5
   deb08:	f004 f89a 	bl	e2c40 <__aeabi_dmul>
   deb0c:	a32a      	add	r3, pc, #168	; (adr r3, debb8 <__ieee754_acos+0x4c0>)
   deb0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   deb12:	f003 fee1 	bl	e28d8 <__aeabi_dsub>
   deb16:	4622      	mov	r2, r4
   deb18:	462b      	mov	r3, r5
   deb1a:	f004 f891 	bl	e2c40 <__aeabi_dmul>
   deb1e:	2200      	movs	r2, #0
   deb20:	4b2b      	ldr	r3, [pc, #172]	; (debd0 <__ieee754_acos+0x4d8>)
   deb22:	f003 fedb 	bl	e28dc <__adddf3>
   deb26:	4602      	mov	r2, r0
   deb28:	460b      	mov	r3, r1
   deb2a:	4640      	mov	r0, r8
   deb2c:	4649      	mov	r1, r9
   deb2e:	f004 f9b1 	bl	e2e94 <__aeabi_ddiv>
   deb32:	4632      	mov	r2, r6
   deb34:	463b      	mov	r3, r7
   deb36:	f004 f883 	bl	e2c40 <__aeabi_dmul>
   deb3a:	a321      	add	r3, pc, #132	; (adr r3, debc0 <__ieee754_acos+0x4c8>)
   deb3c:	e9d3 2300 	ldrd	r2, r3, [r3]
   deb40:	f003 feca 	bl	e28d8 <__aeabi_dsub>
   deb44:	4632      	mov	r2, r6
   deb46:	463b      	mov	r3, r7
   deb48:	f003 fec8 	bl	e28dc <__adddf3>
   deb4c:	4602      	mov	r2, r0
   deb4e:	460b      	mov	r3, r1
   deb50:	f003 fec4 	bl	e28dc <__adddf3>
   deb54:	4602      	mov	r2, r0
   deb56:	460b      	mov	r3, r1
   deb58:	a11b      	add	r1, pc, #108	; (adr r1, debc8 <__ieee754_acos+0x4d0>)
   deb5a:	e9d1 0100 	ldrd	r0, r1, [r1]
   deb5e:	f003 febb 	bl	e28d8 <__aeabi_dsub>
   deb62:	ec41 0b10 	vmov	d0, r0, r1
   deb66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   deb6a:	bf00      	nop
   deb6c:	f3af 8000 	nop.w
   deb70:	0dfdf709 	.word	0x0dfdf709
   deb74:	3f023de1 	.word	0x3f023de1
   deb78:	7501b288 	.word	0x7501b288
   deb7c:	3f49efe0 	.word	0x3f49efe0
   deb80:	b5688f3b 	.word	0xb5688f3b
   deb84:	3fa48228 	.word	0x3fa48228
   deb88:	0e884455 	.word	0x0e884455
   deb8c:	3fc9c155 	.word	0x3fc9c155
   deb90:	03eb6f7d 	.word	0x03eb6f7d
   deb94:	3fd4d612 	.word	0x3fd4d612
   deb98:	55555555 	.word	0x55555555
   deb9c:	3fc55555 	.word	0x3fc55555
   deba0:	b12e9282 	.word	0xb12e9282
   deba4:	3fb3b8c5 	.word	0x3fb3b8c5
   deba8:	1b8d0159 	.word	0x1b8d0159
   debac:	3fe6066c 	.word	0x3fe6066c
   debb0:	9c598ac8 	.word	0x9c598ac8
   debb4:	40002ae5 	.word	0x40002ae5
   debb8:	1c8a2d4b 	.word	0x1c8a2d4b
   debbc:	40033a27 	.word	0x40033a27
   debc0:	33145c07 	.word	0x33145c07
   debc4:	3c91a626 	.word	0x3c91a626
   debc8:	54442d18 	.word	0x54442d18
   debcc:	400921fb 	.word	0x400921fb
   debd0:	3ff00000 	.word	0x3ff00000
   debd4:	3fe00000 	.word	0x3fe00000

000debd8 <__ieee754_asin>:
   debd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   debdc:	ec57 6b10 	vmov	r6, r7, d0
   debe0:	4bcb      	ldr	r3, [pc, #812]	; (def10 <__ieee754_asin+0x338>)
   debe2:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
   debe6:	429d      	cmp	r5, r3
   debe8:	b083      	sub	sp, #12
   debea:	dd17      	ble.n	dec1c <__ieee754_asin+0x44>
   debec:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
   debf0:	ee10 3a10 	vmov	r3, s0
   debf4:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
   debf8:	432b      	orrs	r3, r5
   debfa:	d02b      	beq.n	dec54 <__ieee754_asin+0x7c>
   debfc:	ee10 2a10 	vmov	r2, s0
   dec00:	463b      	mov	r3, r7
   dec02:	4630      	mov	r0, r6
   dec04:	4639      	mov	r1, r7
   dec06:	f003 fe67 	bl	e28d8 <__aeabi_dsub>
   dec0a:	4602      	mov	r2, r0
   dec0c:	460b      	mov	r3, r1
   dec0e:	f004 f941 	bl	e2e94 <__aeabi_ddiv>
   dec12:	ec41 0b10 	vmov	d0, r0, r1
   dec16:	b003      	add	sp, #12
   dec18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dec1c:	4bbd      	ldr	r3, [pc, #756]	; (def14 <__ieee754_asin+0x33c>)
   dec1e:	429d      	cmp	r5, r3
   dec20:	463c      	mov	r4, r7
   dec22:	dc33      	bgt.n	dec8c <__ieee754_asin+0xb4>
   dec24:	f1b5 5f79 	cmp.w	r5, #1044381696	; 0x3e400000
   dec28:	f280 817c 	bge.w	def24 <__ieee754_asin+0x34c>
   dec2c:	a39c      	add	r3, pc, #624	; (adr r3, deea0 <__ieee754_asin+0x2c8>)
   dec2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dec32:	ee10 0a10 	vmov	r0, s0
   dec36:	4639      	mov	r1, r7
   dec38:	f003 fe50 	bl	e28dc <__adddf3>
   dec3c:	2200      	movs	r2, #0
   dec3e:	4bb6      	ldr	r3, [pc, #728]	; (def18 <__ieee754_asin+0x340>)
   dec40:	f004 fa8e 	bl	e3160 <__aeabi_dcmpgt>
   dec44:	b310      	cbz	r0, dec8c <__ieee754_asin+0xb4>
   dec46:	4630      	mov	r0, r6
   dec48:	4639      	mov	r1, r7
   dec4a:	ec41 0b10 	vmov	d0, r0, r1
   dec4e:	b003      	add	sp, #12
   dec50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dec54:	ee10 0a10 	vmov	r0, s0
   dec58:	a393      	add	r3, pc, #588	; (adr r3, deea8 <__ieee754_asin+0x2d0>)
   dec5a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dec5e:	4639      	mov	r1, r7
   dec60:	f003 ffee 	bl	e2c40 <__aeabi_dmul>
   dec64:	a392      	add	r3, pc, #584	; (adr r3, deeb0 <__ieee754_asin+0x2d8>)
   dec66:	e9d3 2300 	ldrd	r2, r3, [r3]
   dec6a:	4604      	mov	r4, r0
   dec6c:	460d      	mov	r5, r1
   dec6e:	4630      	mov	r0, r6
   dec70:	4639      	mov	r1, r7
   dec72:	f003 ffe5 	bl	e2c40 <__aeabi_dmul>
   dec76:	4602      	mov	r2, r0
   dec78:	460b      	mov	r3, r1
   dec7a:	4620      	mov	r0, r4
   dec7c:	4629      	mov	r1, r5
   dec7e:	f003 fe2d 	bl	e28dc <__adddf3>
   dec82:	ec41 0b10 	vmov	d0, r0, r1
   dec86:	b003      	add	sp, #12
   dec88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dec8c:	ec47 6b10 	vmov	d0, r6, r7
   dec90:	f7fe fdce 	bl	dd830 <fabs>
   dec94:	2000      	movs	r0, #0
   dec96:	ec53 2b10 	vmov	r2, r3, d0
   dec9a:	499f      	ldr	r1, [pc, #636]	; (def18 <__ieee754_asin+0x340>)
   dec9c:	f003 fe1c 	bl	e28d8 <__aeabi_dsub>
   deca0:	2200      	movs	r2, #0
   deca2:	4b9e      	ldr	r3, [pc, #632]	; (def1c <__ieee754_asin+0x344>)
   deca4:	f003 ffcc 	bl	e2c40 <__aeabi_dmul>
   deca8:	a383      	add	r3, pc, #524	; (adr r3, deeb8 <__ieee754_asin+0x2e0>)
   decaa:	e9d3 2300 	ldrd	r2, r3, [r3]
   decae:	4606      	mov	r6, r0
   decb0:	460f      	mov	r7, r1
   decb2:	f003 ffc5 	bl	e2c40 <__aeabi_dmul>
   decb6:	a382      	add	r3, pc, #520	; (adr r3, deec0 <__ieee754_asin+0x2e8>)
   decb8:	e9d3 2300 	ldrd	r2, r3, [r3]
   decbc:	f003 fe0e 	bl	e28dc <__adddf3>
   decc0:	4632      	mov	r2, r6
   decc2:	463b      	mov	r3, r7
   decc4:	f003 ffbc 	bl	e2c40 <__aeabi_dmul>
   decc8:	a37f      	add	r3, pc, #508	; (adr r3, deec8 <__ieee754_asin+0x2f0>)
   decca:	e9d3 2300 	ldrd	r2, r3, [r3]
   decce:	f003 fe03 	bl	e28d8 <__aeabi_dsub>
   decd2:	4632      	mov	r2, r6
   decd4:	463b      	mov	r3, r7
   decd6:	f003 ffb3 	bl	e2c40 <__aeabi_dmul>
   decda:	a37d      	add	r3, pc, #500	; (adr r3, deed0 <__ieee754_asin+0x2f8>)
   decdc:	e9d3 2300 	ldrd	r2, r3, [r3]
   dece0:	f003 fdfc 	bl	e28dc <__adddf3>
   dece4:	4632      	mov	r2, r6
   dece6:	463b      	mov	r3, r7
   dece8:	f003 ffaa 	bl	e2c40 <__aeabi_dmul>
   decec:	a37a      	add	r3, pc, #488	; (adr r3, deed8 <__ieee754_asin+0x300>)
   decee:	e9d3 2300 	ldrd	r2, r3, [r3]
   decf2:	f003 fdf1 	bl	e28d8 <__aeabi_dsub>
   decf6:	4632      	mov	r2, r6
   decf8:	463b      	mov	r3, r7
   decfa:	f003 ffa1 	bl	e2c40 <__aeabi_dmul>
   decfe:	a378      	add	r3, pc, #480	; (adr r3, deee0 <__ieee754_asin+0x308>)
   ded00:	e9d3 2300 	ldrd	r2, r3, [r3]
   ded04:	f003 fdea 	bl	e28dc <__adddf3>
   ded08:	4632      	mov	r2, r6
   ded0a:	463b      	mov	r3, r7
   ded0c:	f003 ff98 	bl	e2c40 <__aeabi_dmul>
   ded10:	a375      	add	r3, pc, #468	; (adr r3, deee8 <__ieee754_asin+0x310>)
   ded12:	e9d3 2300 	ldrd	r2, r3, [r3]
   ded16:	4680      	mov	r8, r0
   ded18:	4689      	mov	r9, r1
   ded1a:	4630      	mov	r0, r6
   ded1c:	4639      	mov	r1, r7
   ded1e:	f003 ff8f 	bl	e2c40 <__aeabi_dmul>
   ded22:	a373      	add	r3, pc, #460	; (adr r3, deef0 <__ieee754_asin+0x318>)
   ded24:	e9d3 2300 	ldrd	r2, r3, [r3]
   ded28:	f003 fdd6 	bl	e28d8 <__aeabi_dsub>
   ded2c:	4632      	mov	r2, r6
   ded2e:	463b      	mov	r3, r7
   ded30:	f003 ff86 	bl	e2c40 <__aeabi_dmul>
   ded34:	a370      	add	r3, pc, #448	; (adr r3, deef8 <__ieee754_asin+0x320>)
   ded36:	e9d3 2300 	ldrd	r2, r3, [r3]
   ded3a:	f003 fdcf 	bl	e28dc <__adddf3>
   ded3e:	4632      	mov	r2, r6
   ded40:	463b      	mov	r3, r7
   ded42:	f003 ff7d 	bl	e2c40 <__aeabi_dmul>
   ded46:	a36e      	add	r3, pc, #440	; (adr r3, def00 <__ieee754_asin+0x328>)
   ded48:	e9d3 2300 	ldrd	r2, r3, [r3]
   ded4c:	f003 fdc4 	bl	e28d8 <__aeabi_dsub>
   ded50:	4632      	mov	r2, r6
   ded52:	463b      	mov	r3, r7
   ded54:	f003 ff74 	bl	e2c40 <__aeabi_dmul>
   ded58:	4b6f      	ldr	r3, [pc, #444]	; (def18 <__ieee754_asin+0x340>)
   ded5a:	2200      	movs	r2, #0
   ded5c:	f003 fdbe 	bl	e28dc <__adddf3>
   ded60:	ec47 6b10 	vmov	d0, r6, r7
   ded64:	e9cd 0100 	strd	r0, r1, [sp]
   ded68:	f002 f942 	bl	e0ff0 <__ieee754_sqrt>
   ded6c:	4b6c      	ldr	r3, [pc, #432]	; (def20 <__ieee754_asin+0x348>)
   ded6e:	429d      	cmp	r5, r3
   ded70:	ec5b ab10 	vmov	sl, fp, d0
   ded74:	e9dd 0100 	ldrd	r0, r1, [sp]
   ded78:	dc6e      	bgt.n	dee58 <__ieee754_asin+0x280>
   ded7a:	4602      	mov	r2, r0
   ded7c:	460b      	mov	r3, r1
   ded7e:	4640      	mov	r0, r8
   ded80:	4649      	mov	r1, r9
   ded82:	2500      	movs	r5, #0
   ded84:	e9cd ab00 	strd	sl, fp, [sp]
   ded88:	9500      	str	r5, [sp, #0]
   ded8a:	f004 f883 	bl	e2e94 <__aeabi_ddiv>
   ded8e:	e9dd 8900 	ldrd	r8, r9, [sp]
   ded92:	4652      	mov	r2, sl
   ded94:	e9cd 0100 	strd	r0, r1, [sp]
   ded98:	465b      	mov	r3, fp
   ded9a:	4650      	mov	r0, sl
   ded9c:	4659      	mov	r1, fp
   ded9e:	f003 fd9d 	bl	e28dc <__adddf3>
   deda2:	4602      	mov	r2, r0
   deda4:	460b      	mov	r3, r1
   deda6:	e9dd 0100 	ldrd	r0, r1, [sp]
   dedaa:	f003 ff49 	bl	e2c40 <__aeabi_dmul>
   dedae:	4642      	mov	r2, r8
   dedb0:	e9cd 0100 	strd	r0, r1, [sp]
   dedb4:	464b      	mov	r3, r9
   dedb6:	4640      	mov	r0, r8
   dedb8:	4649      	mov	r1, r9
   dedba:	f003 ff41 	bl	e2c40 <__aeabi_dmul>
   dedbe:	4602      	mov	r2, r0
   dedc0:	460b      	mov	r3, r1
   dedc2:	4630      	mov	r0, r6
   dedc4:	4639      	mov	r1, r7
   dedc6:	f003 fd87 	bl	e28d8 <__aeabi_dsub>
   dedca:	4642      	mov	r2, r8
   dedcc:	4606      	mov	r6, r0
   dedce:	460f      	mov	r7, r1
   dedd0:	464b      	mov	r3, r9
   dedd2:	4650      	mov	r0, sl
   dedd4:	4659      	mov	r1, fp
   dedd6:	f003 fd81 	bl	e28dc <__adddf3>
   dedda:	4602      	mov	r2, r0
   deddc:	460b      	mov	r3, r1
   dedde:	4630      	mov	r0, r6
   dede0:	4639      	mov	r1, r7
   dede2:	f004 f857 	bl	e2e94 <__aeabi_ddiv>
   dede6:	4602      	mov	r2, r0
   dede8:	460b      	mov	r3, r1
   dedea:	f003 fd77 	bl	e28dc <__adddf3>
   dedee:	4602      	mov	r2, r0
   dedf0:	460b      	mov	r3, r1
   dedf2:	a12f      	add	r1, pc, #188	; (adr r1, deeb0 <__ieee754_asin+0x2d8>)
   dedf4:	e9d1 0100 	ldrd	r0, r1, [r1]
   dedf8:	f003 fd6e 	bl	e28d8 <__aeabi_dsub>
   dedfc:	4602      	mov	r2, r0
   dedfe:	460b      	mov	r3, r1
   dee00:	e9dd 0100 	ldrd	r0, r1, [sp]
   dee04:	f003 fd68 	bl	e28d8 <__aeabi_dsub>
   dee08:	4642      	mov	r2, r8
   dee0a:	4606      	mov	r6, r0
   dee0c:	460f      	mov	r7, r1
   dee0e:	464b      	mov	r3, r9
   dee10:	4640      	mov	r0, r8
   dee12:	4649      	mov	r1, r9
   dee14:	f003 fd62 	bl	e28dc <__adddf3>
   dee18:	4602      	mov	r2, r0
   dee1a:	460b      	mov	r3, r1
   dee1c:	a13a      	add	r1, pc, #232	; (adr r1, def08 <__ieee754_asin+0x330>)
   dee1e:	e9d1 0100 	ldrd	r0, r1, [r1]
   dee22:	f003 fd59 	bl	e28d8 <__aeabi_dsub>
   dee26:	4602      	mov	r2, r0
   dee28:	460b      	mov	r3, r1
   dee2a:	4630      	mov	r0, r6
   dee2c:	4639      	mov	r1, r7
   dee2e:	f003 fd53 	bl	e28d8 <__aeabi_dsub>
   dee32:	4602      	mov	r2, r0
   dee34:	460b      	mov	r3, r1
   dee36:	a134      	add	r1, pc, #208	; (adr r1, def08 <__ieee754_asin+0x330>)
   dee38:	e9d1 0100 	ldrd	r0, r1, [r1]
   dee3c:	f003 fd4c 	bl	e28d8 <__aeabi_dsub>
   dee40:	4602      	mov	r2, r0
   dee42:	460b      	mov	r3, r1
   dee44:	2c00      	cmp	r4, #0
   dee46:	f340 80e4 	ble.w	df012 <__ieee754_asin+0x43a>
   dee4a:	4610      	mov	r0, r2
   dee4c:	4619      	mov	r1, r3
   dee4e:	ec41 0b10 	vmov	d0, r0, r1
   dee52:	b003      	add	sp, #12
   dee54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dee58:	4602      	mov	r2, r0
   dee5a:	460b      	mov	r3, r1
   dee5c:	4640      	mov	r0, r8
   dee5e:	4649      	mov	r1, r9
   dee60:	f004 f818 	bl	e2e94 <__aeabi_ddiv>
   dee64:	4652      	mov	r2, sl
   dee66:	465b      	mov	r3, fp
   dee68:	f003 feea 	bl	e2c40 <__aeabi_dmul>
   dee6c:	4652      	mov	r2, sl
   dee6e:	465b      	mov	r3, fp
   dee70:	f003 fd34 	bl	e28dc <__adddf3>
   dee74:	4602      	mov	r2, r0
   dee76:	460b      	mov	r3, r1
   dee78:	f003 fd30 	bl	e28dc <__adddf3>
   dee7c:	a30c      	add	r3, pc, #48	; (adr r3, deeb0 <__ieee754_asin+0x2d8>)
   dee7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dee82:	f003 fd29 	bl	e28d8 <__aeabi_dsub>
   dee86:	4602      	mov	r2, r0
   dee88:	460b      	mov	r3, r1
   dee8a:	a107      	add	r1, pc, #28	; (adr r1, deea8 <__ieee754_asin+0x2d0>)
   dee8c:	e9d1 0100 	ldrd	r0, r1, [r1]
   dee90:	f003 fd22 	bl	e28d8 <__aeabi_dsub>
   dee94:	4602      	mov	r2, r0
   dee96:	460b      	mov	r3, r1
   dee98:	e7d4      	b.n	dee44 <__ieee754_asin+0x26c>
   dee9a:	bf00      	nop
   dee9c:	f3af 8000 	nop.w
   deea0:	8800759c 	.word	0x8800759c
   deea4:	7e37e43c 	.word	0x7e37e43c
   deea8:	54442d18 	.word	0x54442d18
   deeac:	3ff921fb 	.word	0x3ff921fb
   deeb0:	33145c07 	.word	0x33145c07
   deeb4:	3c91a626 	.word	0x3c91a626
   deeb8:	0dfdf709 	.word	0x0dfdf709
   deebc:	3f023de1 	.word	0x3f023de1
   deec0:	7501b288 	.word	0x7501b288
   deec4:	3f49efe0 	.word	0x3f49efe0
   deec8:	b5688f3b 	.word	0xb5688f3b
   deecc:	3fa48228 	.word	0x3fa48228
   deed0:	0e884455 	.word	0x0e884455
   deed4:	3fc9c155 	.word	0x3fc9c155
   deed8:	03eb6f7d 	.word	0x03eb6f7d
   deedc:	3fd4d612 	.word	0x3fd4d612
   deee0:	55555555 	.word	0x55555555
   deee4:	3fc55555 	.word	0x3fc55555
   deee8:	b12e9282 	.word	0xb12e9282
   deeec:	3fb3b8c5 	.word	0x3fb3b8c5
   deef0:	1b8d0159 	.word	0x1b8d0159
   deef4:	3fe6066c 	.word	0x3fe6066c
   deef8:	9c598ac8 	.word	0x9c598ac8
   deefc:	40002ae5 	.word	0x40002ae5
   def00:	1c8a2d4b 	.word	0x1c8a2d4b
   def04:	40033a27 	.word	0x40033a27
   def08:	54442d18 	.word	0x54442d18
   def0c:	3fe921fb 	.word	0x3fe921fb
   def10:	3fefffff 	.word	0x3fefffff
   def14:	3fdfffff 	.word	0x3fdfffff
   def18:	3ff00000 	.word	0x3ff00000
   def1c:	3fe00000 	.word	0x3fe00000
   def20:	3fef3332 	.word	0x3fef3332
   def24:	ee10 2a10 	vmov	r2, s0
   def28:	ee10 0a10 	vmov	r0, s0
   def2c:	463b      	mov	r3, r7
   def2e:	4639      	mov	r1, r7
   def30:	f003 fe86 	bl	e2c40 <__aeabi_dmul>
   def34:	a33b      	add	r3, pc, #236	; (adr r3, df024 <__ieee754_asin+0x44c>)
   def36:	e9d3 2300 	ldrd	r2, r3, [r3]
   def3a:	4604      	mov	r4, r0
   def3c:	460d      	mov	r5, r1
   def3e:	f003 fe7f 	bl	e2c40 <__aeabi_dmul>
   def42:	a33a      	add	r3, pc, #232	; (adr r3, df02c <__ieee754_asin+0x454>)
   def44:	e9d3 2300 	ldrd	r2, r3, [r3]
   def48:	f003 fcc8 	bl	e28dc <__adddf3>
   def4c:	4622      	mov	r2, r4
   def4e:	462b      	mov	r3, r5
   def50:	f003 fe76 	bl	e2c40 <__aeabi_dmul>
   def54:	a337      	add	r3, pc, #220	; (adr r3, df034 <__ieee754_asin+0x45c>)
   def56:	e9d3 2300 	ldrd	r2, r3, [r3]
   def5a:	f003 fcbd 	bl	e28d8 <__aeabi_dsub>
   def5e:	4622      	mov	r2, r4
   def60:	462b      	mov	r3, r5
   def62:	f003 fe6d 	bl	e2c40 <__aeabi_dmul>
   def66:	a335      	add	r3, pc, #212	; (adr r3, df03c <__ieee754_asin+0x464>)
   def68:	e9d3 2300 	ldrd	r2, r3, [r3]
   def6c:	f003 fcb6 	bl	e28dc <__adddf3>
   def70:	4622      	mov	r2, r4
   def72:	462b      	mov	r3, r5
   def74:	f003 fe64 	bl	e2c40 <__aeabi_dmul>
   def78:	a332      	add	r3, pc, #200	; (adr r3, df044 <__ieee754_asin+0x46c>)
   def7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   def7e:	f003 fcab 	bl	e28d8 <__aeabi_dsub>
   def82:	4622      	mov	r2, r4
   def84:	462b      	mov	r3, r5
   def86:	f003 fe5b 	bl	e2c40 <__aeabi_dmul>
   def8a:	a330      	add	r3, pc, #192	; (adr r3, df04c <__ieee754_asin+0x474>)
   def8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   def90:	f003 fca4 	bl	e28dc <__adddf3>
   def94:	4622      	mov	r2, r4
   def96:	462b      	mov	r3, r5
   def98:	f003 fe52 	bl	e2c40 <__aeabi_dmul>
   def9c:	a32d      	add	r3, pc, #180	; (adr r3, df054 <__ieee754_asin+0x47c>)
   def9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   defa2:	4680      	mov	r8, r0
   defa4:	4689      	mov	r9, r1
   defa6:	4620      	mov	r0, r4
   defa8:	4629      	mov	r1, r5
   defaa:	f003 fe49 	bl	e2c40 <__aeabi_dmul>
   defae:	a32b      	add	r3, pc, #172	; (adr r3, df05c <__ieee754_asin+0x484>)
   defb0:	e9d3 2300 	ldrd	r2, r3, [r3]
   defb4:	f003 fc90 	bl	e28d8 <__aeabi_dsub>
   defb8:	4622      	mov	r2, r4
   defba:	462b      	mov	r3, r5
   defbc:	f003 fe40 	bl	e2c40 <__aeabi_dmul>
   defc0:	a328      	add	r3, pc, #160	; (adr r3, df064 <__ieee754_asin+0x48c>)
   defc2:	e9d3 2300 	ldrd	r2, r3, [r3]
   defc6:	f003 fc89 	bl	e28dc <__adddf3>
   defca:	4622      	mov	r2, r4
   defcc:	462b      	mov	r3, r5
   defce:	f003 fe37 	bl	e2c40 <__aeabi_dmul>
   defd2:	a326      	add	r3, pc, #152	; (adr r3, df06c <__ieee754_asin+0x494>)
   defd4:	e9d3 2300 	ldrd	r2, r3, [r3]
   defd8:	f003 fc7e 	bl	e28d8 <__aeabi_dsub>
   defdc:	4622      	mov	r2, r4
   defde:	462b      	mov	r3, r5
   defe0:	f003 fe2e 	bl	e2c40 <__aeabi_dmul>
   defe4:	2200      	movs	r2, #0
   defe6:	4b0e      	ldr	r3, [pc, #56]	; (df020 <__ieee754_asin+0x448>)
   defe8:	f003 fc78 	bl	e28dc <__adddf3>
   defec:	4602      	mov	r2, r0
   defee:	460b      	mov	r3, r1
   deff0:	4640      	mov	r0, r8
   deff2:	4649      	mov	r1, r9
   deff4:	f003 ff4e 	bl	e2e94 <__aeabi_ddiv>
   deff8:	4632      	mov	r2, r6
   deffa:	463b      	mov	r3, r7
   deffc:	f003 fe20 	bl	e2c40 <__aeabi_dmul>
   df000:	4632      	mov	r2, r6
   df002:	463b      	mov	r3, r7
   df004:	f003 fc6a 	bl	e28dc <__adddf3>
   df008:	ec41 0b10 	vmov	d0, r0, r1
   df00c:	b003      	add	sp, #12
   df00e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df012:	4610      	mov	r0, r2
   df014:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   df018:	e5fb      	b.n	dec12 <__ieee754_asin+0x3a>
   df01a:	bf00      	nop
   df01c:	f3af 8000 	nop.w
   df020:	3ff00000 	.word	0x3ff00000
   df024:	0dfdf709 	.word	0x0dfdf709
   df028:	3f023de1 	.word	0x3f023de1
   df02c:	7501b288 	.word	0x7501b288
   df030:	3f49efe0 	.word	0x3f49efe0
   df034:	b5688f3b 	.word	0xb5688f3b
   df038:	3fa48228 	.word	0x3fa48228
   df03c:	0e884455 	.word	0x0e884455
   df040:	3fc9c155 	.word	0x3fc9c155
   df044:	03eb6f7d 	.word	0x03eb6f7d
   df048:	3fd4d612 	.word	0x3fd4d612
   df04c:	55555555 	.word	0x55555555
   df050:	3fc55555 	.word	0x3fc55555
   df054:	b12e9282 	.word	0xb12e9282
   df058:	3fb3b8c5 	.word	0x3fb3b8c5
   df05c:	1b8d0159 	.word	0x1b8d0159
   df060:	3fe6066c 	.word	0x3fe6066c
   df064:	9c598ac8 	.word	0x9c598ac8
   df068:	40002ae5 	.word	0x40002ae5
   df06c:	1c8a2d4b 	.word	0x1c8a2d4b
   df070:	40033a27 	.word	0x40033a27
   df074:	00000000 	.word	0x00000000

000df078 <__ieee754_atan2>:
   df078:	ec51 0b11 	vmov	r0, r1, d1
   df07c:	4243      	negs	r3, r0
   df07e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   df082:	4303      	orrs	r3, r0
   df084:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   df088:	4f75      	ldr	r7, [pc, #468]	; (df260 <__ieee754_atan2+0x1e8>)
   df08a:	ea48 73d3 	orr.w	r3, r8, r3, lsr #31
   df08e:	42bb      	cmp	r3, r7
   df090:	ec55 4b10 	vmov	r4, r5, d0
   df094:	d849      	bhi.n	df12a <__ieee754_atan2+0xb2>
   df096:	4263      	negs	r3, r4
   df098:	4323      	orrs	r3, r4
   df09a:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
   df09e:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
   df0a2:	42bb      	cmp	r3, r7
   df0a4:	46a9      	mov	r9, r5
   df0a6:	d840      	bhi.n	df12a <__ieee754_atan2+0xb2>
   df0a8:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
   df0ac:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   df0b0:	4303      	orrs	r3, r0
   df0b2:	468e      	mov	lr, r1
   df0b4:	d050      	beq.n	df158 <__ieee754_atan2+0xe0>
   df0b6:	178e      	asrs	r6, r1, #30
   df0b8:	f006 0602 	and.w	r6, r6, #2
   df0bc:	ea54 030a 	orrs.w	r3, r4, sl
   df0c0:	ea46 76d5 	orr.w	r6, r6, r5, lsr #31
   df0c4:	d039      	beq.n	df13a <__ieee754_atan2+0xc2>
   df0c6:	ea50 0308 	orrs.w	r3, r0, r8
   df0ca:	d03e      	beq.n	df14a <__ieee754_atan2+0xd2>
   df0cc:	45b8      	cmp	r8, r7
   df0ce:	d055      	beq.n	df17c <__ieee754_atan2+0x104>
   df0d0:	45ba      	cmp	sl, r7
   df0d2:	d03a      	beq.n	df14a <__ieee754_atan2+0xd2>
   df0d4:	ebc8 080a 	rsb	r8, r8, sl
   df0d8:	ea4f 5828 	mov.w	r8, r8, asr #20
   df0dc:	f1b8 0f3c 	cmp.w	r8, #60	; 0x3c
   df0e0:	dc40      	bgt.n	df164 <__ieee754_atan2+0xec>
   df0e2:	2900      	cmp	r1, #0
   df0e4:	db70      	blt.n	df1c8 <__ieee754_atan2+0x150>
   df0e6:	4602      	mov	r2, r0
   df0e8:	460b      	mov	r3, r1
   df0ea:	4620      	mov	r0, r4
   df0ec:	4629      	mov	r1, r5
   df0ee:	f003 fed1 	bl	e2e94 <__aeabi_ddiv>
   df0f2:	ec41 0b10 	vmov	d0, r0, r1
   df0f6:	f7fe fb9b 	bl	dd830 <fabs>
   df0fa:	f7fe f8ed 	bl	dd2d8 <atan>
   df0fe:	ec51 0b10 	vmov	r0, r1, d0
   df102:	2e01      	cmp	r6, #1
   df104:	d05a      	beq.n	df1bc <__ieee754_atan2+0x144>
   df106:	2e02      	cmp	r6, #2
   df108:	d048      	beq.n	df19c <__ieee754_atan2+0x124>
   df10a:	2e00      	cmp	r6, #0
   df10c:	d042      	beq.n	df194 <__ieee754_atan2+0x11c>
   df10e:	a33e      	add	r3, pc, #248	; (adr r3, df208 <__ieee754_atan2+0x190>)
   df110:	e9d3 2300 	ldrd	r2, r3, [r3]
   df114:	f003 fbe0 	bl	e28d8 <__aeabi_dsub>
   df118:	a33d      	add	r3, pc, #244	; (adr r3, df210 <__ieee754_atan2+0x198>)
   df11a:	e9d3 2300 	ldrd	r2, r3, [r3]
   df11e:	f003 fbdb 	bl	e28d8 <__aeabi_dsub>
   df122:	ec41 0b10 	vmov	d0, r0, r1
   df126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df12a:	4622      	mov	r2, r4
   df12c:	462b      	mov	r3, r5
   df12e:	f003 fbd5 	bl	e28dc <__adddf3>
   df132:	ec41 0b10 	vmov	d0, r0, r1
   df136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df13a:	2e02      	cmp	r6, #2
   df13c:	d016      	beq.n	df16c <__ieee754_atan2+0xf4>
   df13e:	2e03      	cmp	r6, #3
   df140:	d10e      	bne.n	df160 <__ieee754_atan2+0xe8>
   df142:	ed9f 0b35 	vldr	d0, [pc, #212]	; df218 <__ieee754_atan2+0x1a0>
   df146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df14a:	f1b9 0f00 	cmp.w	r9, #0
   df14e:	db11      	blt.n	df174 <__ieee754_atan2+0xfc>
   df150:	ed9f 0b33 	vldr	d0, [pc, #204]	; df220 <__ieee754_atan2+0x1a8>
   df154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df158:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   df15c:	f7fe b8bc 	b.w	dd2d8 <atan>
   df160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df164:	a12e      	add	r1, pc, #184	; (adr r1, df220 <__ieee754_atan2+0x1a8>)
   df166:	e9d1 0100 	ldrd	r0, r1, [r1]
   df16a:	e7ca      	b.n	df102 <__ieee754_atan2+0x8a>
   df16c:	ed9f 0b28 	vldr	d0, [pc, #160]	; df210 <__ieee754_atan2+0x198>
   df170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df174:	ed9f 0b2c 	vldr	d0, [pc, #176]	; df228 <__ieee754_atan2+0x1b0>
   df178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df17c:	45c2      	cmp	sl, r8
   df17e:	d029      	beq.n	df1d4 <__ieee754_atan2+0x15c>
   df180:	2e02      	cmp	r6, #2
   df182:	d0f3      	beq.n	df16c <__ieee754_atan2+0xf4>
   df184:	2e03      	cmp	r6, #3
   df186:	d0dc      	beq.n	df142 <__ieee754_atan2+0xca>
   df188:	2e01      	cmp	r6, #1
   df18a:	d02d      	beq.n	df1e8 <__ieee754_atan2+0x170>
   df18c:	ed9f 0b28 	vldr	d0, [pc, #160]	; df230 <__ieee754_atan2+0x1b8>
   df190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df194:	ec41 0b10 	vmov	d0, r0, r1
   df198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df19c:	a31a      	add	r3, pc, #104	; (adr r3, df208 <__ieee754_atan2+0x190>)
   df19e:	e9d3 2300 	ldrd	r2, r3, [r3]
   df1a2:	f003 fb99 	bl	e28d8 <__aeabi_dsub>
   df1a6:	4602      	mov	r2, r0
   df1a8:	460b      	mov	r3, r1
   df1aa:	a119      	add	r1, pc, #100	; (adr r1, df210 <__ieee754_atan2+0x198>)
   df1ac:	e9d1 0100 	ldrd	r0, r1, [r1]
   df1b0:	f003 fb92 	bl	e28d8 <__aeabi_dsub>
   df1b4:	ec41 0b10 	vmov	d0, r0, r1
   df1b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df1bc:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   df1c0:	ec41 0b10 	vmov	d0, r0, r1
   df1c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df1c8:	f118 0f3c 	cmn.w	r8, #60	; 0x3c
   df1cc:	da8b      	bge.n	df0e6 <__ieee754_atan2+0x6e>
   df1ce:	2000      	movs	r0, #0
   df1d0:	2100      	movs	r1, #0
   df1d2:	e796      	b.n	df102 <__ieee754_atan2+0x8a>
   df1d4:	2e02      	cmp	r6, #2
   df1d6:	d013      	beq.n	df200 <__ieee754_atan2+0x188>
   df1d8:	2e03      	cmp	r6, #3
   df1da:	d00d      	beq.n	df1f8 <__ieee754_atan2+0x180>
   df1dc:	2e01      	cmp	r6, #1
   df1de:	d007      	beq.n	df1f0 <__ieee754_atan2+0x178>
   df1e0:	ed9f 0b15 	vldr	d0, [pc, #84]	; df238 <__ieee754_atan2+0x1c0>
   df1e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df1e8:	ed9f 0b15 	vldr	d0, [pc, #84]	; df240 <__ieee754_atan2+0x1c8>
   df1ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df1f0:	ed9f 0b15 	vldr	d0, [pc, #84]	; df248 <__ieee754_atan2+0x1d0>
   df1f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df1f8:	ed9f 0b15 	vldr	d0, [pc, #84]	; df250 <__ieee754_atan2+0x1d8>
   df1fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df200:	ed9f 0b15 	vldr	d0, [pc, #84]	; df258 <__ieee754_atan2+0x1e0>
   df204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df208:	33145c07 	.word	0x33145c07
   df20c:	3ca1a626 	.word	0x3ca1a626
   df210:	54442d18 	.word	0x54442d18
   df214:	400921fb 	.word	0x400921fb
   df218:	54442d18 	.word	0x54442d18
   df21c:	c00921fb 	.word	0xc00921fb
   df220:	54442d18 	.word	0x54442d18
   df224:	3ff921fb 	.word	0x3ff921fb
   df228:	54442d18 	.word	0x54442d18
   df22c:	bff921fb 	.word	0xbff921fb
	...
   df238:	54442d18 	.word	0x54442d18
   df23c:	3fe921fb 	.word	0x3fe921fb
   df240:	00000000 	.word	0x00000000
   df244:	80000000 	.word	0x80000000
   df248:	54442d18 	.word	0x54442d18
   df24c:	bfe921fb 	.word	0xbfe921fb
   df250:	7f3321d2 	.word	0x7f3321d2
   df254:	c002d97c 	.word	0xc002d97c
   df258:	7f3321d2 	.word	0x7f3321d2
   df25c:	4002d97c 	.word	0x4002d97c
   df260:	7ff00000 	.word	0x7ff00000
   df264:	00000000 	.word	0x00000000

000df268 <__ieee754_cosh>:
   df268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   df26c:	ec53 2b10 	vmov	r2, r3, d0
   df270:	4953      	ldr	r1, [pc, #332]	; (df3c0 <__ieee754_cosh+0x158>)
   df272:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   df276:	428c      	cmp	r4, r1
   df278:	dc12      	bgt.n	df2a0 <__ieee754_cosh+0x38>
   df27a:	4952      	ldr	r1, [pc, #328]	; (df3c4 <__ieee754_cosh+0x15c>)
   df27c:	428c      	cmp	r4, r1
   df27e:	dd17      	ble.n	df2b0 <__ieee754_cosh+0x48>
   df280:	4951      	ldr	r1, [pc, #324]	; (df3c8 <__ieee754_cosh+0x160>)
   df282:	428c      	cmp	r4, r1
   df284:	dd64      	ble.n	df350 <__ieee754_cosh+0xe8>
   df286:	4951      	ldr	r1, [pc, #324]	; (df3cc <__ieee754_cosh+0x164>)
   df288:	428c      	cmp	r4, r1
   df28a:	f340 8084 	ble.w	df396 <__ieee754_cosh+0x12e>
   df28e:	4950      	ldr	r1, [pc, #320]	; (df3d0 <__ieee754_cosh+0x168>)
   df290:	428c      	cmp	r4, r1
   df292:	dd3e      	ble.n	df312 <__ieee754_cosh+0xaa>
   df294:	3101      	adds	r1, #1
   df296:	428c      	cmp	r4, r1
   df298:	d038      	beq.n	df30c <__ieee754_cosh+0xa4>
   df29a:	a347      	add	r3, pc, #284	; (adr r3, df3b8 <__ieee754_cosh+0x150>)
   df29c:	e9d3 2300 	ldrd	r2, r3, [r3]
   df2a0:	4610      	mov	r0, r2
   df2a2:	4619      	mov	r1, r3
   df2a4:	f003 fccc 	bl	e2c40 <__aeabi_dmul>
   df2a8:	ec41 0b10 	vmov	d0, r0, r1
   df2ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   df2b0:	f7fe fabe 	bl	dd830 <fabs>
   df2b4:	f002 ff70 	bl	e2198 <expm1>
   df2b8:	ec59 8b10 	vmov	r8, r9, d0
   df2bc:	2200      	movs	r2, #0
   df2be:	4b45      	ldr	r3, [pc, #276]	; (df3d4 <__ieee754_cosh+0x16c>)
   df2c0:	ee10 0a10 	vmov	r0, s0
   df2c4:	4649      	mov	r1, r9
   df2c6:	f003 fb09 	bl	e28dc <__adddf3>
   df2ca:	f1b4 5f72 	cmp.w	r4, #1015021568	; 0x3c800000
   df2ce:	4606      	mov	r6, r0
   df2d0:	460f      	mov	r7, r1
   df2d2:	db5c      	blt.n	df38e <__ieee754_cosh+0x126>
   df2d4:	4642      	mov	r2, r8
   df2d6:	464b      	mov	r3, r9
   df2d8:	4640      	mov	r0, r8
   df2da:	4649      	mov	r1, r9
   df2dc:	f003 fcb0 	bl	e2c40 <__aeabi_dmul>
   df2e0:	4632      	mov	r2, r6
   df2e2:	4604      	mov	r4, r0
   df2e4:	460d      	mov	r5, r1
   df2e6:	463b      	mov	r3, r7
   df2e8:	4630      	mov	r0, r6
   df2ea:	4639      	mov	r1, r7
   df2ec:	f003 faf6 	bl	e28dc <__adddf3>
   df2f0:	4602      	mov	r2, r0
   df2f2:	460b      	mov	r3, r1
   df2f4:	4620      	mov	r0, r4
   df2f6:	4629      	mov	r1, r5
   df2f8:	f003 fdcc 	bl	e2e94 <__aeabi_ddiv>
   df2fc:	2200      	movs	r2, #0
   df2fe:	4b35      	ldr	r3, [pc, #212]	; (df3d4 <__ieee754_cosh+0x16c>)
   df300:	f003 faec 	bl	e28dc <__adddf3>
   df304:	ec41 0b10 	vmov	d0, r0, r1
   df308:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   df30c:	4932      	ldr	r1, [pc, #200]	; (df3d8 <__ieee754_cosh+0x170>)
   df30e:	428a      	cmp	r2, r1
   df310:	d8c3      	bhi.n	df29a <__ieee754_cosh+0x32>
   df312:	ec43 2b10 	vmov	d0, r2, r3
   df316:	f7fe fa8b 	bl	dd830 <fabs>
   df31a:	2200      	movs	r2, #0
   df31c:	4b2f      	ldr	r3, [pc, #188]	; (df3dc <__ieee754_cosh+0x174>)
   df31e:	ec51 0b10 	vmov	r0, r1, d0
   df322:	f003 fc8d 	bl	e2c40 <__aeabi_dmul>
   df326:	ec41 0b10 	vmov	d0, r0, r1
   df32a:	f000 f859 	bl	df3e0 <__ieee754_exp>
   df32e:	ec55 4b10 	vmov	r4, r5, d0
   df332:	ee10 0a10 	vmov	r0, s0
   df336:	2200      	movs	r2, #0
   df338:	4b28      	ldr	r3, [pc, #160]	; (df3dc <__ieee754_cosh+0x174>)
   df33a:	4629      	mov	r1, r5
   df33c:	f003 fc80 	bl	e2c40 <__aeabi_dmul>
   df340:	4622      	mov	r2, r4
   df342:	462b      	mov	r3, r5
   df344:	f003 fc7c 	bl	e2c40 <__aeabi_dmul>
   df348:	ec41 0b10 	vmov	d0, r0, r1
   df34c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   df350:	f7fe fa6e 	bl	dd830 <fabs>
   df354:	f000 f844 	bl	df3e0 <__ieee754_exp>
   df358:	ec55 4b10 	vmov	r4, r5, d0
   df35c:	ee10 0a10 	vmov	r0, s0
   df360:	2200      	movs	r2, #0
   df362:	4b1e      	ldr	r3, [pc, #120]	; (df3dc <__ieee754_cosh+0x174>)
   df364:	4629      	mov	r1, r5
   df366:	f003 fc6b 	bl	e2c40 <__aeabi_dmul>
   df36a:	4622      	mov	r2, r4
   df36c:	4606      	mov	r6, r0
   df36e:	460f      	mov	r7, r1
   df370:	462b      	mov	r3, r5
   df372:	2000      	movs	r0, #0
   df374:	4919      	ldr	r1, [pc, #100]	; (df3dc <__ieee754_cosh+0x174>)
   df376:	f003 fd8d 	bl	e2e94 <__aeabi_ddiv>
   df37a:	4602      	mov	r2, r0
   df37c:	460b      	mov	r3, r1
   df37e:	4630      	mov	r0, r6
   df380:	4639      	mov	r1, r7
   df382:	f003 faab 	bl	e28dc <__adddf3>
   df386:	ec41 0b10 	vmov	d0, r0, r1
   df38a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   df38e:	ec47 6b10 	vmov	d0, r6, r7
   df392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   df396:	f7fe fa4b 	bl	dd830 <fabs>
   df39a:	f000 f821 	bl	df3e0 <__ieee754_exp>
   df39e:	2200      	movs	r2, #0
   df3a0:	4b0e      	ldr	r3, [pc, #56]	; (df3dc <__ieee754_cosh+0x174>)
   df3a2:	ec51 0b10 	vmov	r0, r1, d0
   df3a6:	f003 fc4b 	bl	e2c40 <__aeabi_dmul>
   df3aa:	ec41 0b10 	vmov	d0, r0, r1
   df3ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   df3b2:	bf00      	nop
   df3b4:	f3af 8000 	nop.w
   df3b8:	8800759c 	.word	0x8800759c
   df3bc:	7e37e43c 	.word	0x7e37e43c
   df3c0:	7fefffff 	.word	0x7fefffff
   df3c4:	3fd62e42 	.word	0x3fd62e42
   df3c8:	4035ffff 	.word	0x4035ffff
   df3cc:	40862e41 	.word	0x40862e41
   df3d0:	408633cd 	.word	0x408633cd
   df3d4:	3ff00000 	.word	0x3ff00000
   df3d8:	8fb9f87d 	.word	0x8fb9f87d
   df3dc:	3fe00000 	.word	0x3fe00000

000df3e0 <__ieee754_exp>:
   df3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   df3e4:	ec55 4b10 	vmov	r4, r5, d0
   df3e8:	49bd      	ldr	r1, [pc, #756]	; (df6e0 <__ieee754_exp+0x300>)
   df3ea:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   df3ee:	428a      	cmp	r2, r1
   df3f0:	b083      	sub	sp, #12
   df3f2:	ea4f 77d5 	mov.w	r7, r5, lsr #31
   df3f6:	d90d      	bls.n	df414 <__ieee754_exp+0x34>
   df3f8:	49ba      	ldr	r1, [pc, #744]	; (df6e4 <__ieee754_exp+0x304>)
   df3fa:	428a      	cmp	r2, r1
   df3fc:	d92a      	bls.n	df454 <__ieee754_exp+0x74>
   df3fe:	f3c5 0313 	ubfx	r3, r5, #0, #20
   df402:	4323      	orrs	r3, r4
   df404:	f040 80fa 	bne.w	df5fc <__ieee754_exp+0x21c>
   df408:	b10f      	cbz	r7, df40e <__ieee754_exp+0x2e>
   df40a:	ed9f 0b9d 	vldr	d0, [pc, #628]	; df680 <__ieee754_exp+0x2a0>
   df40e:	b003      	add	sp, #12
   df410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df414:	4bb4      	ldr	r3, [pc, #720]	; (df6e8 <__ieee754_exp+0x308>)
   df416:	429a      	cmp	r2, r3
   df418:	f200 80d5 	bhi.w	df5c6 <__ieee754_exp+0x1e6>
   df41c:	4bb3      	ldr	r3, [pc, #716]	; (df6ec <__ieee754_exp+0x30c>)
   df41e:	429a      	cmp	r2, r3
   df420:	f200 80ea 	bhi.w	df5f8 <__ieee754_exp+0x218>
   df424:	a398      	add	r3, pc, #608	; (adr r3, df688 <__ieee754_exp+0x2a8>)
   df426:	e9d3 2300 	ldrd	r2, r3, [r3]
   df42a:	ee10 0a10 	vmov	r0, s0
   df42e:	4629      	mov	r1, r5
   df430:	f003 fa54 	bl	e28dc <__adddf3>
   df434:	2200      	movs	r2, #0
   df436:	4bae      	ldr	r3, [pc, #696]	; (df6f0 <__ieee754_exp+0x310>)
   df438:	f003 fe92 	bl	e3160 <__aeabi_dcmpgt>
   df43c:	2800      	cmp	r0, #0
   df43e:	f000 811c 	beq.w	df67a <__ieee754_exp+0x29a>
   df442:	4620      	mov	r0, r4
   df444:	4629      	mov	r1, r5
   df446:	2200      	movs	r2, #0
   df448:	4ba9      	ldr	r3, [pc, #676]	; (df6f0 <__ieee754_exp+0x310>)
   df44a:	f003 fa47 	bl	e28dc <__adddf3>
   df44e:	ec41 0b10 	vmov	d0, r0, r1
   df452:	e7dc      	b.n	df40e <__ieee754_exp+0x2e>
   df454:	a38e      	add	r3, pc, #568	; (adr r3, df690 <__ieee754_exp+0x2b0>)
   df456:	e9d3 2300 	ldrd	r2, r3, [r3]
   df45a:	ee10 0a10 	vmov	r0, s0
   df45e:	4629      	mov	r1, r5
   df460:	f003 fe7e 	bl	e3160 <__aeabi_dcmpgt>
   df464:	2800      	cmp	r0, #0
   df466:	f040 80d3 	bne.w	df610 <__ieee754_exp+0x230>
   df46a:	a38b      	add	r3, pc, #556	; (adr r3, df698 <__ieee754_exp+0x2b8>)
   df46c:	e9d3 2300 	ldrd	r2, r3, [r3]
   df470:	4620      	mov	r0, r4
   df472:	4629      	mov	r1, r5
   df474:	f003 fe56 	bl	e3124 <__aeabi_dcmplt>
   df478:	2800      	cmp	r0, #0
   df47a:	d1c6      	bne.n	df40a <__ieee754_exp+0x2a>
   df47c:	4e9d      	ldr	r6, [pc, #628]	; (df6f4 <__ieee754_exp+0x314>)
   df47e:	a388      	add	r3, pc, #544	; (adr r3, df6a0 <__ieee754_exp+0x2c0>)
   df480:	e9d3 2300 	ldrd	r2, r3, [r3]
   df484:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
   df488:	4620      	mov	r0, r4
   df48a:	4629      	mov	r1, r5
   df48c:	f003 fbd8 	bl	e2c40 <__aeabi_dmul>
   df490:	e9d6 2300 	ldrd	r2, r3, [r6]
   df494:	f003 fa22 	bl	e28dc <__adddf3>
   df498:	f003 fe82 	bl	e31a0 <__aeabi_d2iz>
   df49c:	4606      	mov	r6, r0
   df49e:	f003 fb69 	bl	e2b74 <__aeabi_i2d>
   df4a2:	a381      	add	r3, pc, #516	; (adr r3, df6a8 <__ieee754_exp+0x2c8>)
   df4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   df4a8:	4680      	mov	r8, r0
   df4aa:	4689      	mov	r9, r1
   df4ac:	f003 fbc8 	bl	e2c40 <__aeabi_dmul>
   df4b0:	4602      	mov	r2, r0
   df4b2:	460b      	mov	r3, r1
   df4b4:	4620      	mov	r0, r4
   df4b6:	4629      	mov	r1, r5
   df4b8:	f003 fa0e 	bl	e28d8 <__aeabi_dsub>
   df4bc:	a37c      	add	r3, pc, #496	; (adr r3, df6b0 <__ieee754_exp+0x2d0>)
   df4be:	e9d3 2300 	ldrd	r2, r3, [r3]
   df4c2:	e9cd 0100 	strd	r0, r1, [sp]
   df4c6:	4640      	mov	r0, r8
   df4c8:	4649      	mov	r1, r9
   df4ca:	f003 fbb9 	bl	e2c40 <__aeabi_dmul>
   df4ce:	4682      	mov	sl, r0
   df4d0:	468b      	mov	fp, r1
   df4d2:	4652      	mov	r2, sl
   df4d4:	465b      	mov	r3, fp
   df4d6:	e9dd 0100 	ldrd	r0, r1, [sp]
   df4da:	f003 f9fd 	bl	e28d8 <__aeabi_dsub>
   df4de:	4604      	mov	r4, r0
   df4e0:	460d      	mov	r5, r1
   df4e2:	4622      	mov	r2, r4
   df4e4:	462b      	mov	r3, r5
   df4e6:	4620      	mov	r0, r4
   df4e8:	4629      	mov	r1, r5
   df4ea:	f003 fba9 	bl	e2c40 <__aeabi_dmul>
   df4ee:	a372      	add	r3, pc, #456	; (adr r3, df6b8 <__ieee754_exp+0x2d8>)
   df4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   df4f4:	4680      	mov	r8, r0
   df4f6:	4689      	mov	r9, r1
   df4f8:	f003 fba2 	bl	e2c40 <__aeabi_dmul>
   df4fc:	a370      	add	r3, pc, #448	; (adr r3, df6c0 <__ieee754_exp+0x2e0>)
   df4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   df502:	f003 f9e9 	bl	e28d8 <__aeabi_dsub>
   df506:	4642      	mov	r2, r8
   df508:	464b      	mov	r3, r9
   df50a:	f003 fb99 	bl	e2c40 <__aeabi_dmul>
   df50e:	a36e      	add	r3, pc, #440	; (adr r3, df6c8 <__ieee754_exp+0x2e8>)
   df510:	e9d3 2300 	ldrd	r2, r3, [r3]
   df514:	f003 f9e2 	bl	e28dc <__adddf3>
   df518:	4642      	mov	r2, r8
   df51a:	464b      	mov	r3, r9
   df51c:	f003 fb90 	bl	e2c40 <__aeabi_dmul>
   df520:	a36b      	add	r3, pc, #428	; (adr r3, df6d0 <__ieee754_exp+0x2f0>)
   df522:	e9d3 2300 	ldrd	r2, r3, [r3]
   df526:	f003 f9d7 	bl	e28d8 <__aeabi_dsub>
   df52a:	4642      	mov	r2, r8
   df52c:	464b      	mov	r3, r9
   df52e:	f003 fb87 	bl	e2c40 <__aeabi_dmul>
   df532:	a369      	add	r3, pc, #420	; (adr r3, df6d8 <__ieee754_exp+0x2f8>)
   df534:	e9d3 2300 	ldrd	r2, r3, [r3]
   df538:	f003 f9d0 	bl	e28dc <__adddf3>
   df53c:	4642      	mov	r2, r8
   df53e:	464b      	mov	r3, r9
   df540:	f003 fb7e 	bl	e2c40 <__aeabi_dmul>
   df544:	4602      	mov	r2, r0
   df546:	460b      	mov	r3, r1
   df548:	4620      	mov	r0, r4
   df54a:	4629      	mov	r1, r5
   df54c:	f003 f9c4 	bl	e28d8 <__aeabi_dsub>
   df550:	4680      	mov	r8, r0
   df552:	4689      	mov	r9, r1
   df554:	2e00      	cmp	r6, #0
   df556:	d065      	beq.n	df624 <__ieee754_exp+0x244>
   df558:	4620      	mov	r0, r4
   df55a:	4629      	mov	r1, r5
   df55c:	4642      	mov	r2, r8
   df55e:	464b      	mov	r3, r9
   df560:	f003 fb6e 	bl	e2c40 <__aeabi_dmul>
   df564:	4642      	mov	r2, r8
   df566:	4604      	mov	r4, r0
   df568:	460d      	mov	r5, r1
   df56a:	464b      	mov	r3, r9
   df56c:	2000      	movs	r0, #0
   df56e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   df572:	f003 f9b1 	bl	e28d8 <__aeabi_dsub>
   df576:	4602      	mov	r2, r0
   df578:	460b      	mov	r3, r1
   df57a:	4620      	mov	r0, r4
   df57c:	4629      	mov	r1, r5
   df57e:	f003 fc89 	bl	e2e94 <__aeabi_ddiv>
   df582:	4602      	mov	r2, r0
   df584:	460b      	mov	r3, r1
   df586:	4650      	mov	r0, sl
   df588:	4659      	mov	r1, fp
   df58a:	f003 f9a5 	bl	e28d8 <__aeabi_dsub>
   df58e:	e9dd 2300 	ldrd	r2, r3, [sp]
   df592:	f003 f9a1 	bl	e28d8 <__aeabi_dsub>
   df596:	460b      	mov	r3, r1
   df598:	4602      	mov	r2, r0
   df59a:	4955      	ldr	r1, [pc, #340]	; (df6f0 <__ieee754_exp+0x310>)
   df59c:	2000      	movs	r0, #0
   df59e:	f003 f99b 	bl	e28d8 <__aeabi_dsub>
   df5a2:	f46f 737f 	mvn.w	r3, #1020	; 0x3fc
   df5a6:	429e      	cmp	r6, r3
   df5a8:	da60      	bge.n	df66c <__ieee754_exp+0x28c>
   df5aa:	f506 767a 	add.w	r6, r6, #1000	; 0x3e8
   df5ae:	eb01 5106 	add.w	r1, r1, r6, lsl #20
   df5b2:	2200      	movs	r2, #0
   df5b4:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
   df5b8:	f003 fb42 	bl	e2c40 <__aeabi_dmul>
   df5bc:	ec41 0b10 	vmov	d0, r0, r1
   df5c0:	b003      	add	sp, #12
   df5c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df5c6:	4b4c      	ldr	r3, [pc, #304]	; (df6f8 <__ieee754_exp+0x318>)
   df5c8:	429a      	cmp	r2, r3
   df5ca:	f63f af57 	bhi.w	df47c <__ieee754_exp+0x9c>
   df5ce:	4b4b      	ldr	r3, [pc, #300]	; (df6fc <__ieee754_exp+0x31c>)
   df5d0:	ea4f 08c7 	mov.w	r8, r7, lsl #3
   df5d4:	4443      	add	r3, r8
   df5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   df5da:	ee10 0a10 	vmov	r0, s0
   df5de:	4629      	mov	r1, r5
   df5e0:	f003 f97a 	bl	e28d8 <__aeabi_dsub>
   df5e4:	4b46      	ldr	r3, [pc, #280]	; (df700 <__ieee754_exp+0x320>)
   df5e6:	f1c7 0601 	rsb	r6, r7, #1
   df5ea:	4498      	add	r8, r3
   df5ec:	e9cd 0100 	strd	r0, r1, [sp]
   df5f0:	e9d8 ab00 	ldrd	sl, fp, [r8]
   df5f4:	1bf6      	subs	r6, r6, r7
   df5f6:	e76c      	b.n	df4d2 <__ieee754_exp+0xf2>
   df5f8:	2600      	movs	r6, #0
   df5fa:	e772      	b.n	df4e2 <__ieee754_exp+0x102>
   df5fc:	ee10 2a10 	vmov	r2, s0
   df600:	462b      	mov	r3, r5
   df602:	4620      	mov	r0, r4
   df604:	4629      	mov	r1, r5
   df606:	f003 f969 	bl	e28dc <__adddf3>
   df60a:	ec41 0b10 	vmov	d0, r0, r1
   df60e:	e6fe      	b.n	df40e <__ieee754_exp+0x2e>
   df610:	a31d      	add	r3, pc, #116	; (adr r3, df688 <__ieee754_exp+0x2a8>)
   df612:	e9d3 2300 	ldrd	r2, r3, [r3]
   df616:	4610      	mov	r0, r2
   df618:	4619      	mov	r1, r3
   df61a:	f003 fb11 	bl	e2c40 <__aeabi_dmul>
   df61e:	ec41 0b10 	vmov	d0, r0, r1
   df622:	e6f4      	b.n	df40e <__ieee754_exp+0x2e>
   df624:	4602      	mov	r2, r0
   df626:	460b      	mov	r3, r1
   df628:	4620      	mov	r0, r4
   df62a:	4629      	mov	r1, r5
   df62c:	f003 fb08 	bl	e2c40 <__aeabi_dmul>
   df630:	2200      	movs	r2, #0
   df632:	4606      	mov	r6, r0
   df634:	460f      	mov	r7, r1
   df636:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   df63a:	4640      	mov	r0, r8
   df63c:	4649      	mov	r1, r9
   df63e:	f003 f94b 	bl	e28d8 <__aeabi_dsub>
   df642:	4602      	mov	r2, r0
   df644:	460b      	mov	r3, r1
   df646:	4630      	mov	r0, r6
   df648:	4639      	mov	r1, r7
   df64a:	f003 fc23 	bl	e2e94 <__aeabi_ddiv>
   df64e:	4622      	mov	r2, r4
   df650:	462b      	mov	r3, r5
   df652:	f003 f941 	bl	e28d8 <__aeabi_dsub>
   df656:	4602      	mov	r2, r0
   df658:	460b      	mov	r3, r1
   df65a:	2000      	movs	r0, #0
   df65c:	4924      	ldr	r1, [pc, #144]	; (df6f0 <__ieee754_exp+0x310>)
   df65e:	f003 f93b 	bl	e28d8 <__aeabi_dsub>
   df662:	ec41 0b10 	vmov	d0, r0, r1
   df666:	b003      	add	sp, #12
   df668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df66c:	eb01 5106 	add.w	r1, r1, r6, lsl #20
   df670:	ec41 0b10 	vmov	d0, r0, r1
   df674:	b003      	add	sp, #12
   df676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df67a:	4606      	mov	r6, r0
   df67c:	e731      	b.n	df4e2 <__ieee754_exp+0x102>
   df67e:	bf00      	nop
	...
   df688:	8800759c 	.word	0x8800759c
   df68c:	7e37e43c 	.word	0x7e37e43c
   df690:	fefa39ef 	.word	0xfefa39ef
   df694:	40862e42 	.word	0x40862e42
   df698:	d52d3051 	.word	0xd52d3051
   df69c:	c0874910 	.word	0xc0874910
   df6a0:	652b82fe 	.word	0x652b82fe
   df6a4:	3ff71547 	.word	0x3ff71547
   df6a8:	fee00000 	.word	0xfee00000
   df6ac:	3fe62e42 	.word	0x3fe62e42
   df6b0:	35793c76 	.word	0x35793c76
   df6b4:	3dea39ef 	.word	0x3dea39ef
   df6b8:	72bea4d0 	.word	0x72bea4d0
   df6bc:	3e663769 	.word	0x3e663769
   df6c0:	c5d26bf1 	.word	0xc5d26bf1
   df6c4:	3ebbbd41 	.word	0x3ebbbd41
   df6c8:	af25de2c 	.word	0xaf25de2c
   df6cc:	3f11566a 	.word	0x3f11566a
   df6d0:	16bebd93 	.word	0x16bebd93
   df6d4:	3f66c16c 	.word	0x3f66c16c
   df6d8:	5555553e 	.word	0x5555553e
   df6dc:	3fc55555 	.word	0x3fc55555
   df6e0:	40862e41 	.word	0x40862e41
   df6e4:	7fefffff 	.word	0x7fefffff
   df6e8:	3fd62e42 	.word	0x3fd62e42
   df6ec:	3e2fffff 	.word	0x3e2fffff
   df6f0:	3ff00000 	.word	0x3ff00000
   df6f4:	000e80a0 	.word	0x000e80a0
   df6f8:	3ff0a2b1 	.word	0x3ff0a2b1
   df6fc:	000e80c0 	.word	0x000e80c0
   df700:	000e80b0 	.word	0x000e80b0

000df704 <__ieee754_fmod>:
   df704:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   df708:	ec53 2b11 	vmov	r2, r3, d1
   df70c:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
   df710:	ea52 0009 	orrs.w	r0, r2, r9
   df714:	ec55 4b10 	vmov	r4, r5, d0
   df718:	d025      	beq.n	df766 <__ieee754_fmod+0x62>
   df71a:	f005 4600 	and.w	r6, r5, #2147483648	; 0x80000000
   df71e:	488f      	ldr	r0, [pc, #572]	; (df95c <__ieee754_fmod+0x258>)
   df720:	ea85 0b06 	eor.w	fp, r5, r6
   df724:	4583      	cmp	fp, r0
   df726:	dc1e      	bgt.n	df766 <__ieee754_fmod+0x62>
   df728:	4250      	negs	r0, r2
   df72a:	4310      	orrs	r0, r2
   df72c:	f8df c244 	ldr.w	ip, [pc, #580]	; df974 <__ieee754_fmod+0x270>
   df730:	ea49 70d0 	orr.w	r0, r9, r0, lsr #31
   df734:	4560      	cmp	r0, ip
   df736:	ee11 8a10 	vmov	r8, s2
   df73a:	d814      	bhi.n	df766 <__ieee754_fmod+0x62>
   df73c:	45cb      	cmp	fp, r9
   df73e:	461f      	mov	r7, r3
   df740:	ee10 aa10 	vmov	sl, s0
   df744:	ee11 ea10 	vmov	lr, s2
   df748:	ee10 1a10 	vmov	r1, s0
   df74c:	dc17      	bgt.n	df77e <__ieee754_fmod+0x7a>
   df74e:	db28      	blt.n	df7a2 <__ieee754_fmod+0x9e>
   df750:	4294      	cmp	r4, r2
   df752:	d326      	bcc.n	df7a2 <__ieee754_fmod+0x9e>
   df754:	d113      	bne.n	df77e <__ieee754_fmod+0x7a>
   df756:	4b82      	ldr	r3, [pc, #520]	; (df960 <__ieee754_fmod+0x25c>)
   df758:	0ff6      	lsrs	r6, r6, #31
   df75a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   df75e:	ed93 0b00 	vldr	d0, [r3]
   df762:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df766:	4620      	mov	r0, r4
   df768:	4629      	mov	r1, r5
   df76a:	f003 fa69 	bl	e2c40 <__aeabi_dmul>
   df76e:	4602      	mov	r2, r0
   df770:	460b      	mov	r3, r1
   df772:	f003 fb8f 	bl	e2e94 <__aeabi_ddiv>
   df776:	ec41 0b10 	vmov	d0, r0, r1
   df77a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df77e:	f5bb 1f80 	cmp.w	fp, #1048576	; 0x100000
   df782:	da12      	bge.n	df7aa <__ieee754_fmod+0xa6>
   df784:	f1bb 0f00 	cmp.w	fp, #0
   df788:	f040 80a7 	bne.w	df8da <__ieee754_fmod+0x1d6>
   df78c:	f1ba 0f00 	cmp.w	sl, #0
   df790:	4653      	mov	r3, sl
   df792:	4874      	ldr	r0, [pc, #464]	; (df964 <__ieee754_fmod+0x260>)
   df794:	dd0d      	ble.n	df7b2 <__ieee754_fmod+0xae>
   df796:	005b      	lsls	r3, r3, #1
   df798:	2b00      	cmp	r3, #0
   df79a:	f100 30ff 	add.w	r0, r0, #4294967295
   df79e:	dcfa      	bgt.n	df796 <__ieee754_fmod+0x92>
   df7a0:	e007      	b.n	df7b2 <__ieee754_fmod+0xae>
   df7a2:	ec45 4b10 	vmov	d0, r4, r5
   df7a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df7aa:	ea4f 502b 	mov.w	r0, fp, asr #20
   df7ae:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
   df7b2:	f5b9 1f80 	cmp.w	r9, #1048576	; 0x100000
   df7b6:	da0f      	bge.n	df7d8 <__ieee754_fmod+0xd4>
   df7b8:	f1b9 0f00 	cmp.w	r9, #0
   df7bc:	f040 80a7 	bne.w	df90e <__ieee754_fmod+0x20a>
   df7c0:	f1b8 0f00 	cmp.w	r8, #0
   df7c4:	4643      	mov	r3, r8
   df7c6:	f8df c19c 	ldr.w	ip, [pc, #412]	; df964 <__ieee754_fmod+0x260>
   df7ca:	dd09      	ble.n	df7e0 <__ieee754_fmod+0xdc>
   df7cc:	005b      	lsls	r3, r3, #1
   df7ce:	2b00      	cmp	r3, #0
   df7d0:	f10c 3cff 	add.w	ip, ip, #4294967295
   df7d4:	dcfa      	bgt.n	df7cc <__ieee754_fmod+0xc8>
   df7d6:	e003      	b.n	df7e0 <__ieee754_fmod+0xdc>
   df7d8:	ea4f 5c29 	mov.w	ip, r9, asr #20
   df7dc:	f2ac 3cff 	subw	ip, ip, #1023	; 0x3ff
   df7e0:	4b61      	ldr	r3, [pc, #388]	; (df968 <__ieee754_fmod+0x264>)
   df7e2:	4298      	cmp	r0, r3
   df7e4:	db5b      	blt.n	df89e <__ieee754_fmod+0x19a>
   df7e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
   df7ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   df7ee:	4a5e      	ldr	r2, [pc, #376]	; (df968 <__ieee754_fmod+0x264>)
   df7f0:	4594      	cmp	ip, r2
   df7f2:	db63      	blt.n	df8bc <__ieee754_fmod+0x1b8>
   df7f4:	f3c7 0513 	ubfx	r5, r7, #0, #20
   df7f8:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
   df7fc:	ebcc 0000 	rsb	r0, ip, r0
   df800:	e007      	b.n	df812 <__ieee754_fmod+0x10e>
   df802:	ea52 0304 	orrs.w	r3, r2, r4
   df806:	d013      	beq.n	df830 <__ieee754_fmod+0x12c>
   df808:	0fe3      	lsrs	r3, r4, #31
   df80a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   df80e:	0061      	lsls	r1, r4, #1
   df810:	3801      	subs	r0, #1
   df812:	ebce 0401 	rsb	r4, lr, r1
   df816:	1b5a      	subs	r2, r3, r5
   df818:	b190      	cbz	r0, df840 <__ieee754_fmod+0x13c>
   df81a:	4571      	cmp	r1, lr
   df81c:	bf38      	it	cc
   df81e:	f102 32ff 	addcc.w	r2, r2, #4294967295
   df822:	2a00      	cmp	r2, #0
   df824:	daed      	bge.n	df802 <__ieee754_fmod+0xfe>
   df826:	0fca      	lsrs	r2, r1, #31
   df828:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   df82c:	0049      	lsls	r1, r1, #1
   df82e:	e7ef      	b.n	df810 <__ieee754_fmod+0x10c>
   df830:	4b4b      	ldr	r3, [pc, #300]	; (df960 <__ieee754_fmod+0x25c>)
   df832:	0ff6      	lsrs	r6, r6, #31
   df834:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   df838:	ed96 0b00 	vldr	d0, [r6]
   df83c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df840:	4571      	cmp	r1, lr
   df842:	4615      	mov	r5, r2
   df844:	bf38      	it	cc
   df846:	f102 35ff 	addcc.w	r5, r2, #4294967295
   df84a:	2d00      	cmp	r5, #0
   df84c:	bfac      	ite	ge
   df84e:	ebce 0101 	rsbge	r1, lr, r1
   df852:	461d      	movlt	r5, r3
   df854:	ea55 0301 	orrs.w	r3, r5, r1
   df858:	d0ea      	beq.n	df830 <__ieee754_fmod+0x12c>
   df85a:	4a44      	ldr	r2, [pc, #272]	; (df96c <__ieee754_fmod+0x268>)
   df85c:	4295      	cmp	r5, r2
   df85e:	dc08      	bgt.n	df872 <__ieee754_fmod+0x16e>
   df860:	0fcb      	lsrs	r3, r1, #31
   df862:	eb03 0545 	add.w	r5, r3, r5, lsl #1
   df866:	4295      	cmp	r5, r2
   df868:	f10c 3cff 	add.w	ip, ip, #4294967295
   df86c:	ea4f 0141 	mov.w	r1, r1, lsl #1
   df870:	ddf6      	ble.n	df860 <__ieee754_fmod+0x15c>
   df872:	4b3d      	ldr	r3, [pc, #244]	; (df968 <__ieee754_fmod+0x264>)
   df874:	459c      	cmp	ip, r3
   df876:	da54      	bge.n	df922 <__ieee754_fmod+0x21e>
   df878:	4a3b      	ldr	r2, [pc, #236]	; (df968 <__ieee754_fmod+0x264>)
   df87a:	ebcc 0202 	rsb	r2, ip, r2
   df87e:	2a14      	cmp	r2, #20
   df880:	dc5b      	bgt.n	df93a <__ieee754_fmod+0x236>
   df882:	f1c2 0320 	rsb	r3, r2, #32
   df886:	fa05 f303 	lsl.w	r3, r5, r3
   df88a:	40d1      	lsrs	r1, r2
   df88c:	430b      	orrs	r3, r1
   df88e:	4115      	asrs	r5, r2
   df890:	ea45 0106 	orr.w	r1, r5, r6
   df894:	4618      	mov	r0, r3
   df896:	ec41 0b10 	vmov	d0, r0, r1
   df89a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df89e:	4932      	ldr	r1, [pc, #200]	; (df968 <__ieee754_fmod+0x264>)
   df8a0:	1a09      	subs	r1, r1, r0
   df8a2:	291f      	cmp	r1, #31
   df8a4:	dc2d      	bgt.n	df902 <__ieee754_fmod+0x1fe>
   df8a6:	f1c1 0320 	rsb	r3, r1, #32
   df8aa:	fa0b fb01 	lsl.w	fp, fp, r1
   df8ae:	fa2a f303 	lsr.w	r3, sl, r3
   df8b2:	ea43 030b 	orr.w	r3, r3, fp
   df8b6:	fa0a f101 	lsl.w	r1, sl, r1
   df8ba:	e798      	b.n	df7ee <__ieee754_fmod+0xea>
   df8bc:	4c2a      	ldr	r4, [pc, #168]	; (df968 <__ieee754_fmod+0x264>)
   df8be:	ebcc 0404 	rsb	r4, ip, r4
   df8c2:	2c1f      	cmp	r4, #31
   df8c4:	dc15      	bgt.n	df8f2 <__ieee754_fmod+0x1ee>
   df8c6:	f1c4 0220 	rsb	r2, r4, #32
   df8ca:	fa09 f504 	lsl.w	r5, r9, r4
   df8ce:	fa28 f202 	lsr.w	r2, r8, r2
   df8d2:	4315      	orrs	r5, r2
   df8d4:	fa08 fe04 	lsl.w	lr, r8, r4
   df8d8:	e790      	b.n	df7fc <__ieee754_fmod+0xf8>
   df8da:	ea4f 23cb 	mov.w	r3, fp, lsl #11
   df8de:	2b00      	cmp	r3, #0
   df8e0:	4821      	ldr	r0, [pc, #132]	; (df968 <__ieee754_fmod+0x264>)
   df8e2:	f77f af66 	ble.w	df7b2 <__ieee754_fmod+0xae>
   df8e6:	005b      	lsls	r3, r3, #1
   df8e8:	2b00      	cmp	r3, #0
   df8ea:	f100 30ff 	add.w	r0, r0, #4294967295
   df8ee:	dcfa      	bgt.n	df8e6 <__ieee754_fmod+0x1e2>
   df8f0:	e75f      	b.n	df7b2 <__ieee754_fmod+0xae>
   df8f2:	4d1f      	ldr	r5, [pc, #124]	; (df970 <__ieee754_fmod+0x26c>)
   df8f4:	ebcc 0505 	rsb	r5, ip, r5
   df8f8:	fa08 f505 	lsl.w	r5, r8, r5
   df8fc:	f04f 0e00 	mov.w	lr, #0
   df900:	e77c      	b.n	df7fc <__ieee754_fmod+0xf8>
   df902:	4b1b      	ldr	r3, [pc, #108]	; (df970 <__ieee754_fmod+0x26c>)
   df904:	1a1b      	subs	r3, r3, r0
   df906:	fa0a f303 	lsl.w	r3, sl, r3
   df90a:	2100      	movs	r1, #0
   df90c:	e76f      	b.n	df7ee <__ieee754_fmod+0xea>
   df90e:	f8df c058 	ldr.w	ip, [pc, #88]	; df968 <__ieee754_fmod+0x264>
   df912:	ea4f 23c9 	mov.w	r3, r9, lsl #11
   df916:	005b      	lsls	r3, r3, #1
   df918:	2b00      	cmp	r3, #0
   df91a:	f10c 3cff 	add.w	ip, ip, #4294967295
   df91e:	dcfa      	bgt.n	df916 <__ieee754_fmod+0x212>
   df920:	e75e      	b.n	df7e0 <__ieee754_fmod+0xdc>
   df922:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
   df926:	432e      	orrs	r6, r5
   df928:	f20c 3cff 	addw	ip, ip, #1023	; 0x3ff
   df92c:	ea46 530c 	orr.w	r3, r6, ip, lsl #20
   df930:	460a      	mov	r2, r1
   df932:	ec43 2b10 	vmov	d0, r2, r3
   df936:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df93a:	2a1f      	cmp	r2, #31
   df93c:	dc07      	bgt.n	df94e <__ieee754_fmod+0x24a>
   df93e:	f1c2 0320 	rsb	r3, r2, #32
   df942:	409d      	lsls	r5, r3
   df944:	40d1      	lsrs	r1, r2
   df946:	ea45 0301 	orr.w	r3, r5, r1
   df94a:	4635      	mov	r5, r6
   df94c:	e7a0      	b.n	df890 <__ieee754_fmod+0x18c>
   df94e:	4b08      	ldr	r3, [pc, #32]	; (df970 <__ieee754_fmod+0x26c>)
   df950:	ebcc 0303 	rsb	r3, ip, r3
   df954:	fa45 f303 	asr.w	r3, r5, r3
   df958:	4635      	mov	r5, r6
   df95a:	e799      	b.n	df890 <__ieee754_fmod+0x18c>
   df95c:	7fefffff 	.word	0x7fefffff
   df960:	000e80d0 	.word	0x000e80d0
   df964:	fffffbed 	.word	0xfffffbed
   df968:	fffffc02 	.word	0xfffffc02
   df96c:	000fffff 	.word	0x000fffff
   df970:	fffffbe2 	.word	0xfffffbe2
   df974:	7ff00000 	.word	0x7ff00000

000df978 <__ieee754_log>:
   df978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   df97c:	ec51 0b10 	vmov	r0, r1, d0
   df980:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   df984:	b085      	sub	sp, #20
   df986:	460b      	mov	r3, r1
   df988:	da59      	bge.n	dfa3e <__ieee754_log+0xc6>
   df98a:	ee10 2a10 	vmov	r2, s0
   df98e:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
   df992:	4322      	orrs	r2, r4
   df994:	f000 80f8 	beq.w	dfb88 <__ieee754_log+0x210>
   df998:	2900      	cmp	r1, #0
   df99a:	f2c0 8180 	blt.w	dfc9e <__ieee754_log+0x326>
   df99e:	2200      	movs	r2, #0
   df9a0:	4bdd      	ldr	r3, [pc, #884]	; (dfd18 <__ieee754_log+0x3a0>)
   df9a2:	4cde      	ldr	r4, [pc, #888]	; (dfd1c <__ieee754_log+0x3a4>)
   df9a4:	f003 f94c 	bl	e2c40 <__aeabi_dmul>
   df9a8:	460b      	mov	r3, r1
   df9aa:	42a3      	cmp	r3, r4
   df9ac:	f06f 0235 	mvn.w	r2, #53	; 0x35
   df9b0:	dc4a      	bgt.n	dfa48 <__ieee754_log+0xd0>
   df9b2:	f3c3 0513 	ubfx	r5, r3, #0, #20
   df9b6:	f505 2415 	add.w	r4, r5, #610304	; 0x95000
   df9ba:	f604 7464 	addw	r4, r4, #3940	; 0xf64
   df9be:	f404 1680 	and.w	r6, r4, #1048576	; 0x100000
   df9c2:	f086 547f 	eor.w	r4, r6, #1069547520	; 0x3fc00000
   df9c6:	151b      	asrs	r3, r3, #20
   df9c8:	f484 1440 	eor.w	r4, r4, #3145728	; 0x300000
   df9cc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   df9d0:	ea44 0105 	orr.w	r1, r4, r5
   df9d4:	189c      	adds	r4, r3, r2
   df9d6:	2200      	movs	r2, #0
   df9d8:	4bd1      	ldr	r3, [pc, #836]	; (dfd20 <__ieee754_log+0x3a8>)
   df9da:	f002 ff7d 	bl	e28d8 <__aeabi_dsub>
   df9de:	1cab      	adds	r3, r5, #2
   df9e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
   df9e4:	2b02      	cmp	r3, #2
   df9e6:	eb04 5416 	add.w	r4, r4, r6, lsr #20
   df9ea:	4682      	mov	sl, r0
   df9ec:	468b      	mov	fp, r1
   df9ee:	f04f 0200 	mov.w	r2, #0
   df9f2:	dc32      	bgt.n	dfa5a <__ieee754_log+0xe2>
   df9f4:	2300      	movs	r3, #0
   df9f6:	f003 fb8b 	bl	e3110 <__aeabi_dcmpeq>
   df9fa:	2800      	cmp	r0, #0
   df9fc:	f000 80cf 	beq.w	dfb9e <__ieee754_log+0x226>
   dfa00:	2c00      	cmp	r4, #0
   dfa02:	f000 8158 	beq.w	dfcb6 <__ieee754_log+0x33e>
   dfa06:	4620      	mov	r0, r4
   dfa08:	f003 f8b4 	bl	e2b74 <__aeabi_i2d>
   dfa0c:	a3ac      	add	r3, pc, #688	; (adr r3, dfcc0 <__ieee754_log+0x348>)
   dfa0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfa12:	4606      	mov	r6, r0
   dfa14:	460f      	mov	r7, r1
   dfa16:	f003 f913 	bl	e2c40 <__aeabi_dmul>
   dfa1a:	a3ab      	add	r3, pc, #684	; (adr r3, dfcc8 <__ieee754_log+0x350>)
   dfa1c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfa20:	4604      	mov	r4, r0
   dfa22:	460d      	mov	r5, r1
   dfa24:	4630      	mov	r0, r6
   dfa26:	4639      	mov	r1, r7
   dfa28:	f003 f90a 	bl	e2c40 <__aeabi_dmul>
   dfa2c:	4602      	mov	r2, r0
   dfa2e:	460b      	mov	r3, r1
   dfa30:	4620      	mov	r0, r4
   dfa32:	4629      	mov	r1, r5
   dfa34:	f002 ff52 	bl	e28dc <__adddf3>
   dfa38:	ec41 0b10 	vmov	d0, r0, r1
   dfa3c:	e00a      	b.n	dfa54 <__ieee754_log+0xdc>
   dfa3e:	4cb7      	ldr	r4, [pc, #732]	; (dfd1c <__ieee754_log+0x3a4>)
   dfa40:	42a3      	cmp	r3, r4
   dfa42:	f04f 0200 	mov.w	r2, #0
   dfa46:	ddb4      	ble.n	df9b2 <__ieee754_log+0x3a>
   dfa48:	4602      	mov	r2, r0
   dfa4a:	460b      	mov	r3, r1
   dfa4c:	f002 ff46 	bl	e28dc <__adddf3>
   dfa50:	ec41 0b10 	vmov	d0, r0, r1
   dfa54:	b005      	add	sp, #20
   dfa56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dfa5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   dfa5e:	f002 ff3d 	bl	e28dc <__adddf3>
   dfa62:	4602      	mov	r2, r0
   dfa64:	460b      	mov	r3, r1
   dfa66:	4650      	mov	r0, sl
   dfa68:	4659      	mov	r1, fp
   dfa6a:	f003 fa13 	bl	e2e94 <__aeabi_ddiv>
   dfa6e:	4606      	mov	r6, r0
   dfa70:	4620      	mov	r0, r4
   dfa72:	460f      	mov	r7, r1
   dfa74:	f003 f87e 	bl	e2b74 <__aeabi_i2d>
   dfa78:	4632      	mov	r2, r6
   dfa7a:	e9cd 0100 	strd	r0, r1, [sp]
   dfa7e:	463b      	mov	r3, r7
   dfa80:	4630      	mov	r0, r6
   dfa82:	4639      	mov	r1, r7
   dfa84:	e9cd 6702 	strd	r6, r7, [sp, #8]
   dfa88:	f003 f8da 	bl	e2c40 <__aeabi_dmul>
   dfa8c:	4602      	mov	r2, r0
   dfa8e:	460b      	mov	r3, r1
   dfa90:	4680      	mov	r8, r0
   dfa92:	4689      	mov	r9, r1
   dfa94:	f003 f8d4 	bl	e2c40 <__aeabi_dmul>
   dfa98:	a38d      	add	r3, pc, #564	; (adr r3, dfcd0 <__ieee754_log+0x358>)
   dfa9a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfa9e:	4606      	mov	r6, r0
   dfaa0:	460f      	mov	r7, r1
   dfaa2:	f003 f8cd 	bl	e2c40 <__aeabi_dmul>
   dfaa6:	a38c      	add	r3, pc, #560	; (adr r3, dfcd8 <__ieee754_log+0x360>)
   dfaa8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfaac:	f002 ff16 	bl	e28dc <__adddf3>
   dfab0:	4632      	mov	r2, r6
   dfab2:	463b      	mov	r3, r7
   dfab4:	f003 f8c4 	bl	e2c40 <__aeabi_dmul>
   dfab8:	a389      	add	r3, pc, #548	; (adr r3, dfce0 <__ieee754_log+0x368>)
   dfaba:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfabe:	f002 ff0d 	bl	e28dc <__adddf3>
   dfac2:	4632      	mov	r2, r6
   dfac4:	463b      	mov	r3, r7
   dfac6:	f003 f8bb 	bl	e2c40 <__aeabi_dmul>
   dfaca:	a387      	add	r3, pc, #540	; (adr r3, dfce8 <__ieee754_log+0x370>)
   dfacc:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfad0:	f002 ff04 	bl	e28dc <__adddf3>
   dfad4:	4642      	mov	r2, r8
   dfad6:	464b      	mov	r3, r9
   dfad8:	f003 f8b2 	bl	e2c40 <__aeabi_dmul>
   dfadc:	a384      	add	r3, pc, #528	; (adr r3, dfcf0 <__ieee754_log+0x378>)
   dfade:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfae2:	4680      	mov	r8, r0
   dfae4:	4689      	mov	r9, r1
   dfae6:	4630      	mov	r0, r6
   dfae8:	4639      	mov	r1, r7
   dfaea:	f003 f8a9 	bl	e2c40 <__aeabi_dmul>
   dfaee:	a382      	add	r3, pc, #520	; (adr r3, dfcf8 <__ieee754_log+0x380>)
   dfaf0:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfaf4:	f002 fef2 	bl	e28dc <__adddf3>
   dfaf8:	4632      	mov	r2, r6
   dfafa:	463b      	mov	r3, r7
   dfafc:	f003 f8a0 	bl	e2c40 <__aeabi_dmul>
   dfb00:	a37f      	add	r3, pc, #508	; (adr r3, dfd00 <__ieee754_log+0x388>)
   dfb02:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfb06:	f002 fee9 	bl	e28dc <__adddf3>
   dfb0a:	4632      	mov	r2, r6
   dfb0c:	463b      	mov	r3, r7
   dfb0e:	f003 f897 	bl	e2c40 <__aeabi_dmul>
   dfb12:	460b      	mov	r3, r1
   dfb14:	4602      	mov	r2, r0
   dfb16:	4649      	mov	r1, r9
   dfb18:	4640      	mov	r0, r8
   dfb1a:	f002 fedf 	bl	e28dc <__adddf3>
   dfb1e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
   dfb22:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
   dfb26:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
   dfb2a:	3551      	adds	r5, #81	; 0x51
   dfb2c:	431d      	orrs	r5, r3
   dfb2e:	2d00      	cmp	r5, #0
   dfb30:	4680      	mov	r8, r0
   dfb32:	4689      	mov	r9, r1
   dfb34:	dd5c      	ble.n	dfbf0 <__ieee754_log+0x278>
   dfb36:	2200      	movs	r2, #0
   dfb38:	4b7a      	ldr	r3, [pc, #488]	; (dfd24 <__ieee754_log+0x3ac>)
   dfb3a:	4650      	mov	r0, sl
   dfb3c:	4659      	mov	r1, fp
   dfb3e:	f003 f87f 	bl	e2c40 <__aeabi_dmul>
   dfb42:	4652      	mov	r2, sl
   dfb44:	465b      	mov	r3, fp
   dfb46:	f003 f87b 	bl	e2c40 <__aeabi_dmul>
   dfb4a:	4606      	mov	r6, r0
   dfb4c:	460f      	mov	r7, r1
   dfb4e:	2c00      	cmp	r4, #0
   dfb50:	d16e      	bne.n	dfc30 <__ieee754_log+0x2b8>
   dfb52:	4632      	mov	r2, r6
   dfb54:	463b      	mov	r3, r7
   dfb56:	4640      	mov	r0, r8
   dfb58:	4649      	mov	r1, r9
   dfb5a:	f002 febf 	bl	e28dc <__adddf3>
   dfb5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dfb62:	f003 f86d 	bl	e2c40 <__aeabi_dmul>
   dfb66:	4602      	mov	r2, r0
   dfb68:	460b      	mov	r3, r1
   dfb6a:	4630      	mov	r0, r6
   dfb6c:	4639      	mov	r1, r7
   dfb6e:	f002 feb3 	bl	e28d8 <__aeabi_dsub>
   dfb72:	4602      	mov	r2, r0
   dfb74:	460b      	mov	r3, r1
   dfb76:	4650      	mov	r0, sl
   dfb78:	4659      	mov	r1, fp
   dfb7a:	f002 fead 	bl	e28d8 <__aeabi_dsub>
   dfb7e:	ec41 0b10 	vmov	d0, r0, r1
   dfb82:	b005      	add	sp, #20
   dfb84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dfb88:	2200      	movs	r2, #0
   dfb8a:	2300      	movs	r3, #0
   dfb8c:	2000      	movs	r0, #0
   dfb8e:	4966      	ldr	r1, [pc, #408]	; (dfd28 <__ieee754_log+0x3b0>)
   dfb90:	f003 f980 	bl	e2e94 <__aeabi_ddiv>
   dfb94:	ec41 0b10 	vmov	d0, r0, r1
   dfb98:	b005      	add	sp, #20
   dfb9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dfb9e:	a35a      	add	r3, pc, #360	; (adr r3, dfd08 <__ieee754_log+0x390>)
   dfba0:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfba4:	4650      	mov	r0, sl
   dfba6:	4659      	mov	r1, fp
   dfba8:	f003 f84a 	bl	e2c40 <__aeabi_dmul>
   dfbac:	4602      	mov	r2, r0
   dfbae:	460b      	mov	r3, r1
   dfbb0:	2000      	movs	r0, #0
   dfbb2:	495c      	ldr	r1, [pc, #368]	; (dfd24 <__ieee754_log+0x3ac>)
   dfbb4:	f002 fe90 	bl	e28d8 <__aeabi_dsub>
   dfbb8:	4652      	mov	r2, sl
   dfbba:	4606      	mov	r6, r0
   dfbbc:	460f      	mov	r7, r1
   dfbbe:	465b      	mov	r3, fp
   dfbc0:	4650      	mov	r0, sl
   dfbc2:	4659      	mov	r1, fp
   dfbc4:	f003 f83c 	bl	e2c40 <__aeabi_dmul>
   dfbc8:	4602      	mov	r2, r0
   dfbca:	460b      	mov	r3, r1
   dfbcc:	4630      	mov	r0, r6
   dfbce:	4639      	mov	r1, r7
   dfbd0:	f003 f836 	bl	e2c40 <__aeabi_dmul>
   dfbd4:	4606      	mov	r6, r0
   dfbd6:	460f      	mov	r7, r1
   dfbd8:	2c00      	cmp	r4, #0
   dfbda:	f040 80a7 	bne.w	dfd2c <__ieee754_log+0x3b4>
   dfbde:	4602      	mov	r2, r0
   dfbe0:	460b      	mov	r3, r1
   dfbe2:	4650      	mov	r0, sl
   dfbe4:	4659      	mov	r1, fp
   dfbe6:	f002 fe77 	bl	e28d8 <__aeabi_dsub>
   dfbea:	ec41 0b10 	vmov	d0, r0, r1
   dfbee:	e731      	b.n	dfa54 <__ieee754_log+0xdc>
   dfbf0:	2c00      	cmp	r4, #0
   dfbf2:	f000 80af 	beq.w	dfd54 <__ieee754_log+0x3dc>
   dfbf6:	a332      	add	r3, pc, #200	; (adr r3, dfcc0 <__ieee754_log+0x348>)
   dfbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfbfc:	e9dd 0100 	ldrd	r0, r1, [sp]
   dfc00:	f003 f81e 	bl	e2c40 <__aeabi_dmul>
   dfc04:	4642      	mov	r2, r8
   dfc06:	464b      	mov	r3, r9
   dfc08:	4604      	mov	r4, r0
   dfc0a:	460d      	mov	r5, r1
   dfc0c:	4650      	mov	r0, sl
   dfc0e:	4659      	mov	r1, fp
   dfc10:	f002 fe62 	bl	e28d8 <__aeabi_dsub>
   dfc14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dfc18:	f003 f812 	bl	e2c40 <__aeabi_dmul>
   dfc1c:	a32a      	add	r3, pc, #168	; (adr r3, dfcc8 <__ieee754_log+0x350>)
   dfc1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfc22:	4606      	mov	r6, r0
   dfc24:	460f      	mov	r7, r1
   dfc26:	e9dd 0100 	ldrd	r0, r1, [sp]
   dfc2a:	f003 f809 	bl	e2c40 <__aeabi_dmul>
   dfc2e:	e021      	b.n	dfc74 <__ieee754_log+0x2fc>
   dfc30:	a323      	add	r3, pc, #140	; (adr r3, dfcc0 <__ieee754_log+0x348>)
   dfc32:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfc36:	e9dd 0100 	ldrd	r0, r1, [sp]
   dfc3a:	f003 f801 	bl	e2c40 <__aeabi_dmul>
   dfc3e:	4632      	mov	r2, r6
   dfc40:	463b      	mov	r3, r7
   dfc42:	4604      	mov	r4, r0
   dfc44:	460d      	mov	r5, r1
   dfc46:	4640      	mov	r0, r8
   dfc48:	4649      	mov	r1, r9
   dfc4a:	f002 fe47 	bl	e28dc <__adddf3>
   dfc4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dfc52:	f002 fff5 	bl	e2c40 <__aeabi_dmul>
   dfc56:	a31c      	add	r3, pc, #112	; (adr r3, dfcc8 <__ieee754_log+0x350>)
   dfc58:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfc5c:	4680      	mov	r8, r0
   dfc5e:	4689      	mov	r9, r1
   dfc60:	e9dd 0100 	ldrd	r0, r1, [sp]
   dfc64:	f002 ffec 	bl	e2c40 <__aeabi_dmul>
   dfc68:	4602      	mov	r2, r0
   dfc6a:	460b      	mov	r3, r1
   dfc6c:	4640      	mov	r0, r8
   dfc6e:	4649      	mov	r1, r9
   dfc70:	f002 fe34 	bl	e28dc <__adddf3>
   dfc74:	4602      	mov	r2, r0
   dfc76:	460b      	mov	r3, r1
   dfc78:	4630      	mov	r0, r6
   dfc7a:	4639      	mov	r1, r7
   dfc7c:	f002 fe2c 	bl	e28d8 <__aeabi_dsub>
   dfc80:	4652      	mov	r2, sl
   dfc82:	465b      	mov	r3, fp
   dfc84:	f002 fe28 	bl	e28d8 <__aeabi_dsub>
   dfc88:	4602      	mov	r2, r0
   dfc8a:	460b      	mov	r3, r1
   dfc8c:	4620      	mov	r0, r4
   dfc8e:	4629      	mov	r1, r5
   dfc90:	f002 fe22 	bl	e28d8 <__aeabi_dsub>
   dfc94:	ec41 0b10 	vmov	d0, r0, r1
   dfc98:	b005      	add	sp, #20
   dfc9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dfc9e:	ee10 2a10 	vmov	r2, s0
   dfca2:	460b      	mov	r3, r1
   dfca4:	f002 fe18 	bl	e28d8 <__aeabi_dsub>
   dfca8:	2200      	movs	r2, #0
   dfcaa:	2300      	movs	r3, #0
   dfcac:	f003 f8f2 	bl	e2e94 <__aeabi_ddiv>
   dfcb0:	ec41 0b10 	vmov	d0, r0, r1
   dfcb4:	e6ce      	b.n	dfa54 <__ieee754_log+0xdc>
   dfcb6:	ed9f 0b16 	vldr	d0, [pc, #88]	; dfd10 <__ieee754_log+0x398>
   dfcba:	e6cb      	b.n	dfa54 <__ieee754_log+0xdc>
   dfcbc:	f3af 8000 	nop.w
   dfcc0:	fee00000 	.word	0xfee00000
   dfcc4:	3fe62e42 	.word	0x3fe62e42
   dfcc8:	35793c76 	.word	0x35793c76
   dfccc:	3dea39ef 	.word	0x3dea39ef
   dfcd0:	df3e5244 	.word	0xdf3e5244
   dfcd4:	3fc2f112 	.word	0x3fc2f112
   dfcd8:	96cb03de 	.word	0x96cb03de
   dfcdc:	3fc74664 	.word	0x3fc74664
   dfce0:	94229359 	.word	0x94229359
   dfce4:	3fd24924 	.word	0x3fd24924
   dfce8:	55555593 	.word	0x55555593
   dfcec:	3fe55555 	.word	0x3fe55555
   dfcf0:	d078c69f 	.word	0xd078c69f
   dfcf4:	3fc39a09 	.word	0x3fc39a09
   dfcf8:	1d8e78af 	.word	0x1d8e78af
   dfcfc:	3fcc71c5 	.word	0x3fcc71c5
   dfd00:	9997fa04 	.word	0x9997fa04
   dfd04:	3fd99999 	.word	0x3fd99999
   dfd08:	55555555 	.word	0x55555555
   dfd0c:	3fd55555 	.word	0x3fd55555
	...
   dfd18:	43500000 	.word	0x43500000
   dfd1c:	7fefffff 	.word	0x7fefffff
   dfd20:	3ff00000 	.word	0x3ff00000
   dfd24:	3fe00000 	.word	0x3fe00000
   dfd28:	c3500000 	.word	0xc3500000
   dfd2c:	4620      	mov	r0, r4
   dfd2e:	f002 ff21 	bl	e2b74 <__aeabi_i2d>
   dfd32:	a30f      	add	r3, pc, #60	; (adr r3, dfd70 <__ieee754_log+0x3f8>)
   dfd34:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfd38:	4680      	mov	r8, r0
   dfd3a:	4689      	mov	r9, r1
   dfd3c:	f002 ff80 	bl	e2c40 <__aeabi_dmul>
   dfd40:	a30d      	add	r3, pc, #52	; (adr r3, dfd78 <__ieee754_log+0x400>)
   dfd42:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfd46:	4604      	mov	r4, r0
   dfd48:	460d      	mov	r5, r1
   dfd4a:	4640      	mov	r0, r8
   dfd4c:	4649      	mov	r1, r9
   dfd4e:	f002 ff77 	bl	e2c40 <__aeabi_dmul>
   dfd52:	e78f      	b.n	dfc74 <__ieee754_log+0x2fc>
   dfd54:	4602      	mov	r2, r0
   dfd56:	460b      	mov	r3, r1
   dfd58:	4650      	mov	r0, sl
   dfd5a:	4659      	mov	r1, fp
   dfd5c:	f002 fdbc 	bl	e28d8 <__aeabi_dsub>
   dfd60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dfd64:	f002 ff6c 	bl	e2c40 <__aeabi_dmul>
   dfd68:	e703      	b.n	dfb72 <__ieee754_log+0x1fa>
   dfd6a:	bf00      	nop
   dfd6c:	f3af 8000 	nop.w
   dfd70:	fee00000 	.word	0xfee00000
   dfd74:	3fe62e42 	.word	0x3fe62e42
   dfd78:	35793c76 	.word	0x35793c76
   dfd7c:	3dea39ef 	.word	0x3dea39ef

000dfd80 <__ieee754_log10>:
   dfd80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dfd84:	ec55 4b10 	vmov	r4, r5, d0
   dfd88:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
   dfd8c:	b083      	sub	sp, #12
   dfd8e:	462b      	mov	r3, r5
   dfd90:	da21      	bge.n	dfdd6 <__ieee754_log10+0x56>
   dfd92:	ee10 2a10 	vmov	r2, s0
   dfd96:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   dfd9a:	430a      	orrs	r2, r1
   dfd9c:	d064      	beq.n	dfe68 <__ieee754_log10+0xe8>
   dfd9e:	2d00      	cmp	r5, #0
   dfda0:	db6d      	blt.n	dfe7e <__ieee754_log10+0xfe>
   dfda2:	4629      	mov	r1, r5
   dfda4:	2200      	movs	r2, #0
   dfda6:	4b44      	ldr	r3, [pc, #272]	; (dfeb8 <__ieee754_log10+0x138>)
   dfda8:	ee10 0a10 	vmov	r0, s0
   dfdac:	f002 ff48 	bl	e2c40 <__aeabi_dmul>
   dfdb0:	460b      	mov	r3, r1
   dfdb2:	460d      	mov	r5, r1
   dfdb4:	4941      	ldr	r1, [pc, #260]	; (dfebc <__ieee754_log10+0x13c>)
   dfdb6:	428b      	cmp	r3, r1
   dfdb8:	4604      	mov	r4, r0
   dfdba:	f06f 0235 	mvn.w	r2, #53	; 0x35
   dfdbe:	dd0f      	ble.n	dfde0 <__ieee754_log10+0x60>
   dfdc0:	4622      	mov	r2, r4
   dfdc2:	462b      	mov	r3, r5
   dfdc4:	4620      	mov	r0, r4
   dfdc6:	4629      	mov	r1, r5
   dfdc8:	f002 fd88 	bl	e28dc <__adddf3>
   dfdcc:	ec41 0b10 	vmov	d0, r0, r1
   dfdd0:	b003      	add	sp, #12
   dfdd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dfdd6:	4939      	ldr	r1, [pc, #228]	; (dfebc <__ieee754_log10+0x13c>)
   dfdd8:	428b      	cmp	r3, r1
   dfdda:	f04f 0200 	mov.w	r2, #0
   dfdde:	dcef      	bgt.n	dfdc0 <__ieee754_log10+0x40>
   dfde0:	1518      	asrs	r0, r3, #20
   dfde2:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
   dfde6:	4410      	add	r0, r2
   dfde8:	ea4f 79d0 	mov.w	r9, r0, lsr #31
   dfdec:	4448      	add	r0, r9
   dfdee:	f3c3 0813 	ubfx	r8, r3, #0, #20
   dfdf2:	f002 febf 	bl	e2b74 <__aeabi_i2d>
   dfdf6:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
   dfdfa:	3303      	adds	r3, #3
   dfdfc:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
   dfe00:	ec45 4b10 	vmov	d0, r4, r5
   dfe04:	4606      	mov	r6, r0
   dfe06:	460f      	mov	r7, r1
   dfe08:	f7ff fdb6 	bl	df978 <__ieee754_log>
   dfe0c:	4630      	mov	r0, r6
   dfe0e:	4639      	mov	r1, r7
   dfe10:	a323      	add	r3, pc, #140	; (adr r3, dfea0 <__ieee754_log10+0x120>)
   dfe12:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfe16:	ed8d 0b00 	vstr	d0, [sp]
   dfe1a:	f002 ff11 	bl	e2c40 <__aeabi_dmul>
   dfe1e:	ed9d 0b00 	vldr	d0, [sp]
   dfe22:	4604      	mov	r4, r0
   dfe24:	460d      	mov	r5, r1
   dfe26:	a320      	add	r3, pc, #128	; (adr r3, dfea8 <__ieee754_log10+0x128>)
   dfe28:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfe2c:	ec51 0b10 	vmov	r0, r1, d0
   dfe30:	f002 ff06 	bl	e2c40 <__aeabi_dmul>
   dfe34:	4602      	mov	r2, r0
   dfe36:	460b      	mov	r3, r1
   dfe38:	4620      	mov	r0, r4
   dfe3a:	4629      	mov	r1, r5
   dfe3c:	f002 fd4e 	bl	e28dc <__adddf3>
   dfe40:	a31b      	add	r3, pc, #108	; (adr r3, dfeb0 <__ieee754_log10+0x130>)
   dfe42:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfe46:	4604      	mov	r4, r0
   dfe48:	460d      	mov	r5, r1
   dfe4a:	4630      	mov	r0, r6
   dfe4c:	4639      	mov	r1, r7
   dfe4e:	f002 fef7 	bl	e2c40 <__aeabi_dmul>
   dfe52:	4602      	mov	r2, r0
   dfe54:	460b      	mov	r3, r1
   dfe56:	4620      	mov	r0, r4
   dfe58:	4629      	mov	r1, r5
   dfe5a:	f002 fd3f 	bl	e28dc <__adddf3>
   dfe5e:	ec41 0b10 	vmov	d0, r0, r1
   dfe62:	b003      	add	sp, #12
   dfe64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dfe68:	2200      	movs	r2, #0
   dfe6a:	2300      	movs	r3, #0
   dfe6c:	2000      	movs	r0, #0
   dfe6e:	4914      	ldr	r1, [pc, #80]	; (dfec0 <__ieee754_log10+0x140>)
   dfe70:	f003 f810 	bl	e2e94 <__aeabi_ddiv>
   dfe74:	ec41 0b10 	vmov	d0, r0, r1
   dfe78:	b003      	add	sp, #12
   dfe7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dfe7e:	ee10 2a10 	vmov	r2, s0
   dfe82:	462b      	mov	r3, r5
   dfe84:	4620      	mov	r0, r4
   dfe86:	4629      	mov	r1, r5
   dfe88:	f002 fd26 	bl	e28d8 <__aeabi_dsub>
   dfe8c:	2200      	movs	r2, #0
   dfe8e:	2300      	movs	r3, #0
   dfe90:	f003 f800 	bl	e2e94 <__aeabi_ddiv>
   dfe94:	ec41 0b10 	vmov	d0, r0, r1
   dfe98:	e79a      	b.n	dfdd0 <__ieee754_log10+0x50>
   dfe9a:	bf00      	nop
   dfe9c:	f3af 8000 	nop.w
   dfea0:	11f12b36 	.word	0x11f12b36
   dfea4:	3d59fef3 	.word	0x3d59fef3
   dfea8:	1526e50e 	.word	0x1526e50e
   dfeac:	3fdbcb7b 	.word	0x3fdbcb7b
   dfeb0:	509f6000 	.word	0x509f6000
   dfeb4:	3fd34413 	.word	0x3fd34413
   dfeb8:	43500000 	.word	0x43500000
   dfebc:	7fefffff 	.word	0x7fefffff
   dfec0:	c3500000 	.word	0xc3500000
   dfec4:	00000000 	.word	0x00000000

000dfec8 <__ieee754_pow>:
   dfec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dfecc:	ec51 0b11 	vmov	r0, r1, d1
   dfed0:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   dfed4:	ea58 0400 	orrs.w	r4, r8, r0
   dfed8:	b093      	sub	sp, #76	; 0x4c
   dfeda:	d03c      	beq.n	dff56 <__ieee754_pow+0x8e>
   dfedc:	ec53 2b10 	vmov	r2, r3, d0
   dfee0:	4e6d      	ldr	r6, [pc, #436]	; (e0098 <__ieee754_pow+0x1d0>)
   dfee2:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   dfee6:	42b4      	cmp	r4, r6
   dfee8:	ee10 aa10 	vmov	sl, s0
   dfeec:	461d      	mov	r5, r3
   dfeee:	dc2b      	bgt.n	dff48 <__ieee754_pow+0x80>
   dfef0:	4689      	mov	r9, r1
   dfef2:	ee11 ea10 	vmov	lr, s2
   dfef6:	d026      	beq.n	dff46 <__ieee754_pow+0x7e>
   dfef8:	45b0      	cmp	r8, r6
   dfefa:	dc25      	bgt.n	dff48 <__ieee754_pow+0x80>
   dfefc:	4e66      	ldr	r6, [pc, #408]	; (e0098 <__ieee754_pow+0x1d0>)
   dfefe:	45b0      	cmp	r8, r6
   dff00:	d077      	beq.n	dfff2 <__ieee754_pow+0x12a>
   dff02:	2d00      	cmp	r5, #0
   dff04:	4616      	mov	r6, r2
   dff06:	461f      	mov	r7, r3
   dff08:	e9cd 0100 	strd	r0, r1, [sp]
   dff0c:	db75      	blt.n	dfffa <__ieee754_pow+0x132>
   dff0e:	f04f 0b00 	mov.w	fp, #0
   dff12:	f1be 0f00 	cmp.w	lr, #0
   dff16:	d12d      	bne.n	dff74 <__ieee754_pow+0xac>
   dff18:	4b5f      	ldr	r3, [pc, #380]	; (e0098 <__ieee754_pow+0x1d0>)
   dff1a:	4598      	cmp	r8, r3
   dff1c:	f000 8089 	beq.w	e0032 <__ieee754_pow+0x16a>
   dff20:	4b5e      	ldr	r3, [pc, #376]	; (e009c <__ieee754_pow+0x1d4>)
   dff22:	4598      	cmp	r8, r3
   dff24:	d05e      	beq.n	dffe4 <__ieee754_pow+0x11c>
   dff26:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
   dff2a:	f000 83de 	beq.w	e06ea <__ieee754_pow+0x822>
   dff2e:	4b5c      	ldr	r3, [pc, #368]	; (e00a0 <__ieee754_pow+0x1d8>)
   dff30:	4599      	cmp	r9, r3
   dff32:	d11f      	bne.n	dff74 <__ieee754_pow+0xac>
   dff34:	2d00      	cmp	r5, #0
   dff36:	db1d      	blt.n	dff74 <__ieee754_pow+0xac>
   dff38:	ec47 6b10 	vmov	d0, r6, r7
   dff3c:	b013      	add	sp, #76	; 0x4c
   dff3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dff42:	f001 b855 	b.w	e0ff0 <__ieee754_sqrt>
   dff46:	b15a      	cbz	r2, dff60 <__ieee754_pow+0x98>
   dff48:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   dff4c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   dff50:	ea54 030a 	orrs.w	r3, r4, sl
   dff54:	d106      	bne.n	dff64 <__ieee754_pow+0x9c>
   dff56:	ed9f 0b4a 	vldr	d0, [pc, #296]	; e0080 <__ieee754_pow+0x1b8>
   dff5a:	b013      	add	sp, #76	; 0x4c
   dff5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dff60:	45a0      	cmp	r8, r4
   dff62:	ddcb      	ble.n	dfefc <__ieee754_pow+0x34>
   dff64:	484f      	ldr	r0, [pc, #316]	; (e00a4 <__ieee754_pow+0x1dc>)
   dff66:	b013      	add	sp, #76	; 0x4c
   dff68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dff6c:	f002 bb80 	b.w	e2670 <nan>
   dff70:	f04f 0b00 	mov.w	fp, #0
   dff74:	ec47 6b10 	vmov	d0, r6, r7
   dff78:	f7fd fc5a 	bl	dd830 <fabs>
   dff7c:	ec51 0b10 	vmov	r0, r1, d0
   dff80:	f1ba 0f00 	cmp.w	sl, #0
   dff84:	d01e      	beq.n	dffc4 <__ieee754_pow+0xfc>
   dff86:	0fed      	lsrs	r5, r5, #31
   dff88:	f105 3aff 	add.w	sl, r5, #4294967295
   dff8c:	ea5b 030a 	orrs.w	r3, fp, sl
   dff90:	d063      	beq.n	e005a <__ieee754_pow+0x192>
   dff92:	4b45      	ldr	r3, [pc, #276]	; (e00a8 <__ieee754_pow+0x1e0>)
   dff94:	4598      	cmp	r8, r3
   dff96:	f340 808d 	ble.w	e00b4 <__ieee754_pow+0x1ec>
   dff9a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   dff9e:	4598      	cmp	r8, r3
   dffa0:	f340 8438 	ble.w	e0814 <__ieee754_pow+0x94c>
   dffa4:	4b41      	ldr	r3, [pc, #260]	; (e00ac <__ieee754_pow+0x1e4>)
   dffa6:	429c      	cmp	r4, r3
   dffa8:	dd62      	ble.n	e0070 <__ieee754_pow+0x1a8>
   dffaa:	f1b9 0f00 	cmp.w	r9, #0
   dffae:	dd62      	ble.n	e0076 <__ieee754_pow+0x1ae>
   dffb0:	a335      	add	r3, pc, #212	; (adr r3, e0088 <__ieee754_pow+0x1c0>)
   dffb2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dffb6:	4610      	mov	r0, r2
   dffb8:	4619      	mov	r1, r3
   dffba:	f002 fe41 	bl	e2c40 <__aeabi_dmul>
   dffbe:	ec41 0b10 	vmov	d0, r0, r1
   dffc2:	e7ca      	b.n	dff5a <__ieee754_pow+0x92>
   dffc4:	b124      	cbz	r4, dffd0 <__ieee754_pow+0x108>
   dffc6:	4b35      	ldr	r3, [pc, #212]	; (e009c <__ieee754_pow+0x1d4>)
   dffc8:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
   dffcc:	429a      	cmp	r2, r3
   dffce:	d1da      	bne.n	dff86 <__ieee754_pow+0xbe>
   dffd0:	f1b9 0f00 	cmp.w	r9, #0
   dffd4:	f2c0 83cb 	blt.w	e076e <__ieee754_pow+0x8a6>
   dffd8:	2d00      	cmp	r5, #0
   dffda:	f2c0 8374 	blt.w	e06c6 <__ieee754_pow+0x7fe>
   dffde:	ec41 0b10 	vmov	d0, r0, r1
   dffe2:	e7ba      	b.n	dff5a <__ieee754_pow+0x92>
   dffe4:	f1b9 0f00 	cmp.w	r9, #0
   dffe8:	f2c0 847a 	blt.w	e08e0 <__ieee754_pow+0xa18>
   dffec:	ec47 6b10 	vmov	d0, r6, r7
   dfff0:	e7b3      	b.n	dff5a <__ieee754_pow+0x92>
   dfff2:	f1be 0f00 	cmp.w	lr, #0
   dfff6:	d084      	beq.n	dff02 <__ieee754_pow+0x3a>
   dfff8:	e7a6      	b.n	dff48 <__ieee754_pow+0x80>
   dfffa:	4b2d      	ldr	r3, [pc, #180]	; (e00b0 <__ieee754_pow+0x1e8>)
   dfffc:	4598      	cmp	r8, r3
   dfffe:	dc29      	bgt.n	e0054 <__ieee754_pow+0x18c>
   e0000:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   e0004:	4598      	cmp	r8, r3
   e0006:	dd82      	ble.n	dff0e <__ieee754_pow+0x46>
   e0008:	ea4f 5328 	mov.w	r3, r8, asr #20
   e000c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   e0010:	2b14      	cmp	r3, #20
   e0012:	f340 847f 	ble.w	e0914 <__ieee754_pow+0xa4c>
   e0016:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   e001a:	fa2e f203 	lsr.w	r2, lr, r3
   e001e:	fa02 f303 	lsl.w	r3, r2, r3
   e0022:	459e      	cmp	lr, r3
   e0024:	f47f af73 	bne.w	dff0e <__ieee754_pow+0x46>
   e0028:	f002 0201 	and.w	r2, r2, #1
   e002c:	f1c2 0b02 	rsb	fp, r2, #2
   e0030:	e76f      	b.n	dff12 <__ieee754_pow+0x4a>
   e0032:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
   e0036:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   e003a:	ea53 030a 	orrs.w	r3, r3, sl
   e003e:	d08a      	beq.n	dff56 <__ieee754_pow+0x8e>
   e0040:	4b1a      	ldr	r3, [pc, #104]	; (e00ac <__ieee754_pow+0x1e4>)
   e0042:	429c      	cmp	r4, r3
   e0044:	f340 8385 	ble.w	e0752 <__ieee754_pow+0x88a>
   e0048:	f1b9 0f00 	cmp.w	r9, #0
   e004c:	db13      	blt.n	e0076 <__ieee754_pow+0x1ae>
   e004e:	ed9d 0b00 	vldr	d0, [sp]
   e0052:	e782      	b.n	dff5a <__ieee754_pow+0x92>
   e0054:	f04f 0b02 	mov.w	fp, #2
   e0058:	e75b      	b.n	dff12 <__ieee754_pow+0x4a>
   e005a:	4632      	mov	r2, r6
   e005c:	463b      	mov	r3, r7
   e005e:	4610      	mov	r0, r2
   e0060:	4619      	mov	r1, r3
   e0062:	f002 fc39 	bl	e28d8 <__aeabi_dsub>
   e0066:	4602      	mov	r2, r0
   e0068:	460b      	mov	r3, r1
   e006a:	f002 ff13 	bl	e2e94 <__aeabi_ddiv>
   e006e:	e7b6      	b.n	dffde <__ieee754_pow+0x116>
   e0070:	f1b9 0f00 	cmp.w	r9, #0
   e0074:	db9c      	blt.n	dffb0 <__ieee754_pow+0xe8>
   e0076:	ed9f 0b06 	vldr	d0, [pc, #24]	; e0090 <__ieee754_pow+0x1c8>
   e007a:	e76e      	b.n	dff5a <__ieee754_pow+0x92>
   e007c:	f3af 8000 	nop.w
   e0080:	00000000 	.word	0x00000000
   e0084:	3ff00000 	.word	0x3ff00000
   e0088:	8800759c 	.word	0x8800759c
   e008c:	7e37e43c 	.word	0x7e37e43c
	...
   e0098:	7ff00000 	.word	0x7ff00000
   e009c:	3ff00000 	.word	0x3ff00000
   e00a0:	3fe00000 	.word	0x3fe00000
   e00a4:	000e8078 	.word	0x000e8078
   e00a8:	41e00000 	.word	0x41e00000
   e00ac:	3fefffff 	.word	0x3fefffff
   e00b0:	433fffff 	.word	0x433fffff
   e00b4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   e00b8:	f04f 0200 	mov.w	r2, #0
   e00bc:	da05      	bge.n	e00ca <__ieee754_pow+0x202>
   e00be:	4bd6      	ldr	r3, [pc, #856]	; (e0418 <__ieee754_pow+0x550>)
   e00c0:	f002 fdbe 	bl	e2c40 <__aeabi_dmul>
   e00c4:	f06f 0234 	mvn.w	r2, #52	; 0x34
   e00c8:	460c      	mov	r4, r1
   e00ca:	1523      	asrs	r3, r4, #20
   e00cc:	4ed3      	ldr	r6, [pc, #844]	; (e041c <__ieee754_pow+0x554>)
   e00ce:	f3c4 0413 	ubfx	r4, r4, #0, #20
   e00d2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   e00d6:	4413      	add	r3, r2
   e00d8:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
   e00dc:	42b4      	cmp	r4, r6
   e00de:	461a      	mov	r2, r3
   e00e0:	930d      	str	r3, [sp, #52]	; 0x34
   e00e2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   e00e6:	f340 8349 	ble.w	e077c <__ieee754_pow+0x8b4>
   e00ea:	4bcd      	ldr	r3, [pc, #820]	; (e0420 <__ieee754_pow+0x558>)
   e00ec:	429c      	cmp	r4, r3
   e00ee:	f340 842d 	ble.w	e094c <__ieee754_pow+0xa84>
   e00f2:	ed9f 7bb3 	vldr	d7, [pc, #716]	; e03c0 <__ieee754_pow+0x4f8>
   e00f6:	ed8d 7b08 	vstr	d7, [sp, #32]
   e00fa:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   e00fe:	ed9f 7bb2 	vldr	d7, [pc, #712]	; e03c8 <__ieee754_pow+0x500>
   e0102:	4613      	mov	r3, r2
   e0104:	ed8d 7b06 	vstr	d7, [sp, #24]
   e0108:	3301      	adds	r3, #1
   e010a:	930d      	str	r3, [sp, #52]	; 0x34
   e010c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
   e0110:	f04f 0800 	mov.w	r8, #0
   e0114:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   e0118:	4629      	mov	r1, r5
   e011a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   e011e:	f002 fbdb 	bl	e28d8 <__aeabi_dsub>
   e0122:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   e0126:	4606      	mov	r6, r0
   e0128:	460f      	mov	r7, r1
   e012a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   e012e:	f002 fbd5 	bl	e28dc <__adddf3>
   e0132:	4602      	mov	r2, r0
   e0134:	460b      	mov	r3, r1
   e0136:	2000      	movs	r0, #0
   e0138:	49ba      	ldr	r1, [pc, #744]	; (e0424 <__ieee754_pow+0x55c>)
   e013a:	f002 feab 	bl	e2e94 <__aeabi_ddiv>
   e013e:	4603      	mov	r3, r0
   e0140:	460c      	mov	r4, r1
   e0142:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
   e0146:	4602      	mov	r2, r0
   e0148:	460b      	mov	r3, r1
   e014a:	4630      	mov	r0, r6
   e014c:	4639      	mov	r1, r7
   e014e:	f002 fd77 	bl	e2c40 <__aeabi_dmul>
   e0152:	106b      	asrs	r3, r5, #1
   e0154:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   e0158:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   e015c:	eb03 0508 	add.w	r5, r3, r8
   e0160:	460a      	mov	r2, r1
   e0162:	2300      	movs	r3, #0
   e0164:	4601      	mov	r1, r0
   e0166:	e9cd 1202 	strd	r1, r2, [sp, #8]
   e016a:	9302      	str	r3, [sp, #8]
   e016c:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
   e0170:	2400      	movs	r4, #0
   e0172:	e9cd 1204 	strd	r1, r2, [sp, #16]
   e0176:	462b      	mov	r3, r5
   e0178:	4622      	mov	r2, r4
   e017a:	4640      	mov	r0, r8
   e017c:	4649      	mov	r1, r9
   e017e:	f002 fd5f 	bl	e2c40 <__aeabi_dmul>
   e0182:	4602      	mov	r2, r0
   e0184:	460b      	mov	r3, r1
   e0186:	4630      	mov	r0, r6
   e0188:	4639      	mov	r1, r7
   e018a:	f002 fba5 	bl	e28d8 <__aeabi_dsub>
   e018e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   e0192:	4606      	mov	r6, r0
   e0194:	460f      	mov	r7, r1
   e0196:	4620      	mov	r0, r4
   e0198:	4629      	mov	r1, r5
   e019a:	f002 fb9d 	bl	e28d8 <__aeabi_dsub>
   e019e:	4602      	mov	r2, r0
   e01a0:	460b      	mov	r3, r1
   e01a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   e01a6:	f002 fb97 	bl	e28d8 <__aeabi_dsub>
   e01aa:	4642      	mov	r2, r8
   e01ac:	464b      	mov	r3, r9
   e01ae:	f002 fd47 	bl	e2c40 <__aeabi_dmul>
   e01b2:	4602      	mov	r2, r0
   e01b4:	460b      	mov	r3, r1
   e01b6:	4630      	mov	r0, r6
   e01b8:	4639      	mov	r1, r7
   e01ba:	f002 fb8d 	bl	e28d8 <__aeabi_dsub>
   e01be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   e01c2:	f002 fd3d 	bl	e2c40 <__aeabi_dmul>
   e01c6:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   e01ca:	e9cd 0106 	strd	r0, r1, [sp, #24]
   e01ce:	4622      	mov	r2, r4
   e01d0:	462b      	mov	r3, r5
   e01d2:	4620      	mov	r0, r4
   e01d4:	4629      	mov	r1, r5
   e01d6:	f002 fd33 	bl	e2c40 <__aeabi_dmul>
   e01da:	a37d      	add	r3, pc, #500	; (adr r3, e03d0 <__ieee754_pow+0x508>)
   e01dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   e01e0:	4604      	mov	r4, r0
   e01e2:	460d      	mov	r5, r1
   e01e4:	f002 fd2c 	bl	e2c40 <__aeabi_dmul>
   e01e8:	a37b      	add	r3, pc, #492	; (adr r3, e03d8 <__ieee754_pow+0x510>)
   e01ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   e01ee:	f002 fb75 	bl	e28dc <__adddf3>
   e01f2:	4622      	mov	r2, r4
   e01f4:	462b      	mov	r3, r5
   e01f6:	f002 fd23 	bl	e2c40 <__aeabi_dmul>
   e01fa:	a379      	add	r3, pc, #484	; (adr r3, e03e0 <__ieee754_pow+0x518>)
   e01fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0200:	f002 fb6c 	bl	e28dc <__adddf3>
   e0204:	4622      	mov	r2, r4
   e0206:	462b      	mov	r3, r5
   e0208:	f002 fd1a 	bl	e2c40 <__aeabi_dmul>
   e020c:	a376      	add	r3, pc, #472	; (adr r3, e03e8 <__ieee754_pow+0x520>)
   e020e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0212:	f002 fb63 	bl	e28dc <__adddf3>
   e0216:	4622      	mov	r2, r4
   e0218:	462b      	mov	r3, r5
   e021a:	f002 fd11 	bl	e2c40 <__aeabi_dmul>
   e021e:	a374      	add	r3, pc, #464	; (adr r3, e03f0 <__ieee754_pow+0x528>)
   e0220:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0224:	f002 fb5a 	bl	e28dc <__adddf3>
   e0228:	4622      	mov	r2, r4
   e022a:	462b      	mov	r3, r5
   e022c:	f002 fd08 	bl	e2c40 <__aeabi_dmul>
   e0230:	a371      	add	r3, pc, #452	; (adr r3, e03f8 <__ieee754_pow+0x530>)
   e0232:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0236:	f002 fb51 	bl	e28dc <__adddf3>
   e023a:	4622      	mov	r2, r4
   e023c:	4606      	mov	r6, r0
   e023e:	460f      	mov	r7, r1
   e0240:	462b      	mov	r3, r5
   e0242:	4620      	mov	r0, r4
   e0244:	4629      	mov	r1, r5
   e0246:	f002 fcfb 	bl	e2c40 <__aeabi_dmul>
   e024a:	4602      	mov	r2, r0
   e024c:	460b      	mov	r3, r1
   e024e:	4630      	mov	r0, r6
   e0250:	4639      	mov	r1, r7
   e0252:	f002 fcf5 	bl	e2c40 <__aeabi_dmul>
   e0256:	4642      	mov	r2, r8
   e0258:	4604      	mov	r4, r0
   e025a:	460d      	mov	r5, r1
   e025c:	464b      	mov	r3, r9
   e025e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e0262:	f002 fb3b 	bl	e28dc <__adddf3>
   e0266:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   e026a:	f002 fce9 	bl	e2c40 <__aeabi_dmul>
   e026e:	4622      	mov	r2, r4
   e0270:	462b      	mov	r3, r5
   e0272:	f002 fb33 	bl	e28dc <__adddf3>
   e0276:	4642      	mov	r2, r8
   e0278:	4606      	mov	r6, r0
   e027a:	460f      	mov	r7, r1
   e027c:	464b      	mov	r3, r9
   e027e:	4640      	mov	r0, r8
   e0280:	4649      	mov	r1, r9
   e0282:	f002 fcdd 	bl	e2c40 <__aeabi_dmul>
   e0286:	2200      	movs	r2, #0
   e0288:	4b67      	ldr	r3, [pc, #412]	; (e0428 <__ieee754_pow+0x560>)
   e028a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   e028e:	f002 fb25 	bl	e28dc <__adddf3>
   e0292:	4632      	mov	r2, r6
   e0294:	463b      	mov	r3, r7
   e0296:	f002 fb21 	bl	e28dc <__adddf3>
   e029a:	9802      	ldr	r0, [sp, #8]
   e029c:	460d      	mov	r5, r1
   e029e:	4604      	mov	r4, r0
   e02a0:	4622      	mov	r2, r4
   e02a2:	462b      	mov	r3, r5
   e02a4:	4640      	mov	r0, r8
   e02a6:	4649      	mov	r1, r9
   e02a8:	f002 fcca 	bl	e2c40 <__aeabi_dmul>
   e02ac:	2200      	movs	r2, #0
   e02ae:	4680      	mov	r8, r0
   e02b0:	4689      	mov	r9, r1
   e02b2:	4b5d      	ldr	r3, [pc, #372]	; (e0428 <__ieee754_pow+0x560>)
   e02b4:	4620      	mov	r0, r4
   e02b6:	4629      	mov	r1, r5
   e02b8:	f002 fb0e 	bl	e28d8 <__aeabi_dsub>
   e02bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   e02c0:	f002 fb0a 	bl	e28d8 <__aeabi_dsub>
   e02c4:	4602      	mov	r2, r0
   e02c6:	460b      	mov	r3, r1
   e02c8:	4630      	mov	r0, r6
   e02ca:	4639      	mov	r1, r7
   e02cc:	f002 fb04 	bl	e28d8 <__aeabi_dsub>
   e02d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   e02d4:	f002 fcb4 	bl	e2c40 <__aeabi_dmul>
   e02d8:	4622      	mov	r2, r4
   e02da:	4606      	mov	r6, r0
   e02dc:	460f      	mov	r7, r1
   e02de:	462b      	mov	r3, r5
   e02e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e02e4:	f002 fcac 	bl	e2c40 <__aeabi_dmul>
   e02e8:	4602      	mov	r2, r0
   e02ea:	460b      	mov	r3, r1
   e02ec:	4630      	mov	r0, r6
   e02ee:	4639      	mov	r1, r7
   e02f0:	f002 faf4 	bl	e28dc <__adddf3>
   e02f4:	4606      	mov	r6, r0
   e02f6:	460f      	mov	r7, r1
   e02f8:	4602      	mov	r2, r0
   e02fa:	460b      	mov	r3, r1
   e02fc:	4640      	mov	r0, r8
   e02fe:	4649      	mov	r1, r9
   e0300:	e9cd 8904 	strd	r8, r9, [sp, #16]
   e0304:	f002 faea 	bl	e28dc <__adddf3>
   e0308:	9802      	ldr	r0, [sp, #8]
   e030a:	a33d      	add	r3, pc, #244	; (adr r3, e0400 <__ieee754_pow+0x538>)
   e030c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0310:	4604      	mov	r4, r0
   e0312:	460d      	mov	r5, r1
   e0314:	f002 fc94 	bl	e2c40 <__aeabi_dmul>
   e0318:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   e031c:	4680      	mov	r8, r0
   e031e:	4689      	mov	r9, r1
   e0320:	4620      	mov	r0, r4
   e0322:	4629      	mov	r1, r5
   e0324:	f002 fad8 	bl	e28d8 <__aeabi_dsub>
   e0328:	4602      	mov	r2, r0
   e032a:	460b      	mov	r3, r1
   e032c:	4630      	mov	r0, r6
   e032e:	4639      	mov	r1, r7
   e0330:	f002 fad2 	bl	e28d8 <__aeabi_dsub>
   e0334:	a334      	add	r3, pc, #208	; (adr r3, e0408 <__ieee754_pow+0x540>)
   e0336:	e9d3 2300 	ldrd	r2, r3, [r3]
   e033a:	f002 fc81 	bl	e2c40 <__aeabi_dmul>
   e033e:	a334      	add	r3, pc, #208	; (adr r3, e0410 <__ieee754_pow+0x548>)
   e0340:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0344:	4606      	mov	r6, r0
   e0346:	460f      	mov	r7, r1
   e0348:	4620      	mov	r0, r4
   e034a:	4629      	mov	r1, r5
   e034c:	f002 fc78 	bl	e2c40 <__aeabi_dmul>
   e0350:	4602      	mov	r2, r0
   e0352:	460b      	mov	r3, r1
   e0354:	4630      	mov	r0, r6
   e0356:	4639      	mov	r1, r7
   e0358:	f002 fac0 	bl	e28dc <__adddf3>
   e035c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   e0360:	f002 fabc 	bl	e28dc <__adddf3>
   e0364:	4606      	mov	r6, r0
   e0366:	980d      	ldr	r0, [sp, #52]	; 0x34
   e0368:	460f      	mov	r7, r1
   e036a:	f002 fc03 	bl	e2b74 <__aeabi_i2d>
   e036e:	4632      	mov	r2, r6
   e0370:	4604      	mov	r4, r0
   e0372:	460d      	mov	r5, r1
   e0374:	463b      	mov	r3, r7
   e0376:	4640      	mov	r0, r8
   e0378:	4649      	mov	r1, r9
   e037a:	f002 faaf 	bl	e28dc <__adddf3>
   e037e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   e0382:	f002 faab 	bl	e28dc <__adddf3>
   e0386:	4622      	mov	r2, r4
   e0388:	462b      	mov	r3, r5
   e038a:	f002 faa7 	bl	e28dc <__adddf3>
   e038e:	9802      	ldr	r0, [sp, #8]
   e0390:	4622      	mov	r2, r4
   e0392:	462b      	mov	r3, r5
   e0394:	e9cd 0102 	strd	r0, r1, [sp, #8]
   e0398:	f002 fa9e 	bl	e28d8 <__aeabi_dsub>
   e039c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   e03a0:	f002 fa9a 	bl	e28d8 <__aeabi_dsub>
   e03a4:	4642      	mov	r2, r8
   e03a6:	464b      	mov	r3, r9
   e03a8:	f002 fa96 	bl	e28d8 <__aeabi_dsub>
   e03ac:	4602      	mov	r2, r0
   e03ae:	460b      	mov	r3, r1
   e03b0:	4630      	mov	r0, r6
   e03b2:	4639      	mov	r1, r7
   e03b4:	f002 fa90 	bl	e28d8 <__aeabi_dsub>
   e03b8:	4680      	mov	r8, r0
   e03ba:	4689      	mov	r9, r1
   e03bc:	e036      	b.n	e042c <__ieee754_pow+0x564>
   e03be:	bf00      	nop
	...
   e03cc:	3ff00000 	.word	0x3ff00000
   e03d0:	4a454eef 	.word	0x4a454eef
   e03d4:	3fca7e28 	.word	0x3fca7e28
   e03d8:	93c9db65 	.word	0x93c9db65
   e03dc:	3fcd864a 	.word	0x3fcd864a
   e03e0:	a91d4101 	.word	0xa91d4101
   e03e4:	3fd17460 	.word	0x3fd17460
   e03e8:	518f264d 	.word	0x518f264d
   e03ec:	3fd55555 	.word	0x3fd55555
   e03f0:	db6fabff 	.word	0xdb6fabff
   e03f4:	3fdb6db6 	.word	0x3fdb6db6
   e03f8:	33333303 	.word	0x33333303
   e03fc:	3fe33333 	.word	0x3fe33333
   e0400:	e0000000 	.word	0xe0000000
   e0404:	3feec709 	.word	0x3feec709
   e0408:	dc3a03fd 	.word	0xdc3a03fd
   e040c:	3feec709 	.word	0x3feec709
   e0410:	145b01f5 	.word	0x145b01f5
   e0414:	be3e2fe0 	.word	0xbe3e2fe0
   e0418:	43400000 	.word	0x43400000
   e041c:	0003988e 	.word	0x0003988e
   e0420:	000bb679 	.word	0x000bb679
   e0424:	3ff00000 	.word	0x3ff00000
   e0428:	40080000 	.word	0x40080000
   e042c:	f10b 33ff 	add.w	r3, fp, #4294967295
   e0430:	ea53 030a 	orrs.w	r3, r3, sl
   e0434:	f000 8188 	beq.w	e0748 <__ieee754_pow+0x880>
   e0438:	ed9f 7bd7 	vldr	d7, [pc, #860]	; e0798 <__ieee754_pow+0x8d0>
   e043c:	ed8d 7b06 	vstr	d7, [sp, #24]
   e0440:	e9dd ab00 	ldrd	sl, fp, [sp]
   e0444:	4653      	mov	r3, sl
   e0446:	465c      	mov	r4, fp
   e0448:	e9cd 3400 	strd	r3, r4, [sp]
   e044c:	2300      	movs	r3, #0
   e044e:	9300      	str	r3, [sp, #0]
   e0450:	e9dd 4500 	ldrd	r4, r5, [sp]
   e0454:	4650      	mov	r0, sl
   e0456:	4622      	mov	r2, r4
   e0458:	462b      	mov	r3, r5
   e045a:	4659      	mov	r1, fp
   e045c:	f002 fa3c 	bl	e28d8 <__aeabi_dsub>
   e0460:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   e0464:	f002 fbec 	bl	e2c40 <__aeabi_dmul>
   e0468:	4652      	mov	r2, sl
   e046a:	4606      	mov	r6, r0
   e046c:	460f      	mov	r7, r1
   e046e:	465b      	mov	r3, fp
   e0470:	4640      	mov	r0, r8
   e0472:	4649      	mov	r1, r9
   e0474:	f002 fbe4 	bl	e2c40 <__aeabi_dmul>
   e0478:	4602      	mov	r2, r0
   e047a:	460b      	mov	r3, r1
   e047c:	4630      	mov	r0, r6
   e047e:	4639      	mov	r1, r7
   e0480:	f002 fa2c 	bl	e28dc <__adddf3>
   e0484:	4622      	mov	r2, r4
   e0486:	4680      	mov	r8, r0
   e0488:	4689      	mov	r9, r1
   e048a:	462b      	mov	r3, r5
   e048c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   e0490:	e9cd 8904 	strd	r8, r9, [sp, #16]
   e0494:	f002 fbd4 	bl	e2c40 <__aeabi_dmul>
   e0498:	460b      	mov	r3, r1
   e049a:	4602      	mov	r2, r0
   e049c:	4606      	mov	r6, r0
   e049e:	460f      	mov	r7, r1
   e04a0:	4640      	mov	r0, r8
   e04a2:	4649      	mov	r1, r9
   e04a4:	f002 fa1a 	bl	e28dc <__adddf3>
   e04a8:	4bd5      	ldr	r3, [pc, #852]	; (e0800 <__ieee754_pow+0x938>)
   e04aa:	4299      	cmp	r1, r3
   e04ac:	4604      	mov	r4, r0
   e04ae:	460d      	mov	r5, r1
   e04b0:	468a      	mov	sl, r1
   e04b2:	f340 8123 	ble.w	e06fc <__ieee754_pow+0x834>
   e04b6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   e04ba:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   e04be:	4303      	orrs	r3, r0
   e04c0:	f040 8218 	bne.w	e08f4 <__ieee754_pow+0xa2c>
   e04c4:	a3b6      	add	r3, pc, #728	; (adr r3, e07a0 <__ieee754_pow+0x8d8>)
   e04c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   e04ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e04ce:	f002 fa05 	bl	e28dc <__adddf3>
   e04d2:	4632      	mov	r2, r6
   e04d4:	4680      	mov	r8, r0
   e04d6:	4689      	mov	r9, r1
   e04d8:	463b      	mov	r3, r7
   e04da:	4620      	mov	r0, r4
   e04dc:	4629      	mov	r1, r5
   e04de:	f002 f9fb 	bl	e28d8 <__aeabi_dsub>
   e04e2:	4602      	mov	r2, r0
   e04e4:	460b      	mov	r3, r1
   e04e6:	4640      	mov	r0, r8
   e04e8:	4649      	mov	r1, r9
   e04ea:	f002 fe39 	bl	e3160 <__aeabi_dcmpgt>
   e04ee:	2800      	cmp	r0, #0
   e04f0:	f040 8200 	bne.w	e08f4 <__ieee754_pow+0xa2c>
   e04f4:	46a8      	mov	r8, r5
   e04f6:	ea4f 5328 	mov.w	r3, r8, asr #20
   e04fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   e04fe:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   e0502:	fa42 f303 	asr.w	r3, r2, r3
   e0506:	4453      	add	r3, sl
   e0508:	f3c3 520a 	ubfx	r2, r3, #20, #11
   e050c:	4dbd      	ldr	r5, [pc, #756]	; (e0804 <__ieee754_pow+0x93c>)
   e050e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   e0512:	4115      	asrs	r5, r2
   e0514:	f3c3 0b13 	ubfx	fp, r3, #0, #20
   e0518:	2000      	movs	r0, #0
   e051a:	f1c2 0414 	rsb	r4, r2, #20
   e051e:	ea23 0105 	bic.w	r1, r3, r5
   e0522:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
   e0526:	f1ba 0f00 	cmp.w	sl, #0
   e052a:	4602      	mov	r2, r0
   e052c:	460b      	mov	r3, r1
   e052e:	fa4b fb04 	asr.w	fp, fp, r4
   e0532:	4630      	mov	r0, r6
   e0534:	4639      	mov	r1, r7
   e0536:	bfb8      	it	lt
   e0538:	f1cb 0b00 	rsblt	fp, fp, #0
   e053c:	f002 f9cc 	bl	e28d8 <__aeabi_dsub>
   e0540:	4602      	mov	r2, r0
   e0542:	460b      	mov	r3, r1
   e0544:	4606      	mov	r6, r0
   e0546:	460f      	mov	r7, r1
   e0548:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e054c:	f002 f9c6 	bl	e28dc <__adddf3>
   e0550:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
   e0554:	2400      	movs	r4, #0
   e0556:	a394      	add	r3, pc, #592	; (adr r3, e07a8 <__ieee754_pow+0x8e0>)
   e0558:	e9d3 2300 	ldrd	r2, r3, [r3]
   e055c:	4620      	mov	r0, r4
   e055e:	460d      	mov	r5, r1
   e0560:	f002 fb6e 	bl	e2c40 <__aeabi_dmul>
   e0564:	4632      	mov	r2, r6
   e0566:	4680      	mov	r8, r0
   e0568:	4689      	mov	r9, r1
   e056a:	463b      	mov	r3, r7
   e056c:	4620      	mov	r0, r4
   e056e:	4629      	mov	r1, r5
   e0570:	f002 f9b2 	bl	e28d8 <__aeabi_dsub>
   e0574:	4602      	mov	r2, r0
   e0576:	460b      	mov	r3, r1
   e0578:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e057c:	f002 f9ac 	bl	e28d8 <__aeabi_dsub>
   e0580:	a38b      	add	r3, pc, #556	; (adr r3, e07b0 <__ieee754_pow+0x8e8>)
   e0582:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0586:	f002 fb5b 	bl	e2c40 <__aeabi_dmul>
   e058a:	a38b      	add	r3, pc, #556	; (adr r3, e07b8 <__ieee754_pow+0x8f0>)
   e058c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0590:	4606      	mov	r6, r0
   e0592:	460f      	mov	r7, r1
   e0594:	4620      	mov	r0, r4
   e0596:	4629      	mov	r1, r5
   e0598:	f002 fb52 	bl	e2c40 <__aeabi_dmul>
   e059c:	4602      	mov	r2, r0
   e059e:	460b      	mov	r3, r1
   e05a0:	4630      	mov	r0, r6
   e05a2:	4639      	mov	r1, r7
   e05a4:	f002 f99a 	bl	e28dc <__adddf3>
   e05a8:	4606      	mov	r6, r0
   e05aa:	460f      	mov	r7, r1
   e05ac:	4602      	mov	r2, r0
   e05ae:	460b      	mov	r3, r1
   e05b0:	4640      	mov	r0, r8
   e05b2:	4649      	mov	r1, r9
   e05b4:	f002 f992 	bl	e28dc <__adddf3>
   e05b8:	4642      	mov	r2, r8
   e05ba:	464b      	mov	r3, r9
   e05bc:	4604      	mov	r4, r0
   e05be:	460d      	mov	r5, r1
   e05c0:	f002 f98a 	bl	e28d8 <__aeabi_dsub>
   e05c4:	4602      	mov	r2, r0
   e05c6:	460b      	mov	r3, r1
   e05c8:	4630      	mov	r0, r6
   e05ca:	4639      	mov	r1, r7
   e05cc:	f002 f984 	bl	e28d8 <__aeabi_dsub>
   e05d0:	4622      	mov	r2, r4
   e05d2:	4680      	mov	r8, r0
   e05d4:	4689      	mov	r9, r1
   e05d6:	462b      	mov	r3, r5
   e05d8:	4620      	mov	r0, r4
   e05da:	4629      	mov	r1, r5
   e05dc:	f002 fb30 	bl	e2c40 <__aeabi_dmul>
   e05e0:	a377      	add	r3, pc, #476	; (adr r3, e07c0 <__ieee754_pow+0x8f8>)
   e05e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   e05e6:	4606      	mov	r6, r0
   e05e8:	460f      	mov	r7, r1
   e05ea:	f002 fb29 	bl	e2c40 <__aeabi_dmul>
   e05ee:	a376      	add	r3, pc, #472	; (adr r3, e07c8 <__ieee754_pow+0x900>)
   e05f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   e05f4:	f002 f970 	bl	e28d8 <__aeabi_dsub>
   e05f8:	4632      	mov	r2, r6
   e05fa:	463b      	mov	r3, r7
   e05fc:	f002 fb20 	bl	e2c40 <__aeabi_dmul>
   e0600:	a373      	add	r3, pc, #460	; (adr r3, e07d0 <__ieee754_pow+0x908>)
   e0602:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0606:	f002 f969 	bl	e28dc <__adddf3>
   e060a:	4632      	mov	r2, r6
   e060c:	463b      	mov	r3, r7
   e060e:	f002 fb17 	bl	e2c40 <__aeabi_dmul>
   e0612:	a371      	add	r3, pc, #452	; (adr r3, e07d8 <__ieee754_pow+0x910>)
   e0614:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0618:	f002 f95e 	bl	e28d8 <__aeabi_dsub>
   e061c:	4632      	mov	r2, r6
   e061e:	463b      	mov	r3, r7
   e0620:	f002 fb0e 	bl	e2c40 <__aeabi_dmul>
   e0624:	a36e      	add	r3, pc, #440	; (adr r3, e07e0 <__ieee754_pow+0x918>)
   e0626:	e9d3 2300 	ldrd	r2, r3, [r3]
   e062a:	f002 f957 	bl	e28dc <__adddf3>
   e062e:	4632      	mov	r2, r6
   e0630:	463b      	mov	r3, r7
   e0632:	f002 fb05 	bl	e2c40 <__aeabi_dmul>
   e0636:	4602      	mov	r2, r0
   e0638:	460b      	mov	r3, r1
   e063a:	4620      	mov	r0, r4
   e063c:	4629      	mov	r1, r5
   e063e:	f002 f94b 	bl	e28d8 <__aeabi_dsub>
   e0642:	4606      	mov	r6, r0
   e0644:	460f      	mov	r7, r1
   e0646:	4602      	mov	r2, r0
   e0648:	460b      	mov	r3, r1
   e064a:	4620      	mov	r0, r4
   e064c:	4629      	mov	r1, r5
   e064e:	f002 faf7 	bl	e2c40 <__aeabi_dmul>
   e0652:	2200      	movs	r2, #0
   e0654:	e9cd 0100 	strd	r0, r1, [sp]
   e0658:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   e065c:	4630      	mov	r0, r6
   e065e:	4639      	mov	r1, r7
   e0660:	f002 f93a 	bl	e28d8 <__aeabi_dsub>
   e0664:	4602      	mov	r2, r0
   e0666:	460b      	mov	r3, r1
   e0668:	e9dd 0100 	ldrd	r0, r1, [sp]
   e066c:	f002 fc12 	bl	e2e94 <__aeabi_ddiv>
   e0670:	4642      	mov	r2, r8
   e0672:	4606      	mov	r6, r0
   e0674:	460f      	mov	r7, r1
   e0676:	464b      	mov	r3, r9
   e0678:	4620      	mov	r0, r4
   e067a:	4629      	mov	r1, r5
   e067c:	f002 fae0 	bl	e2c40 <__aeabi_dmul>
   e0680:	4642      	mov	r2, r8
   e0682:	464b      	mov	r3, r9
   e0684:	f002 f92a 	bl	e28dc <__adddf3>
   e0688:	4602      	mov	r2, r0
   e068a:	460b      	mov	r3, r1
   e068c:	4630      	mov	r0, r6
   e068e:	4639      	mov	r1, r7
   e0690:	f002 f922 	bl	e28d8 <__aeabi_dsub>
   e0694:	4622      	mov	r2, r4
   e0696:	462b      	mov	r3, r5
   e0698:	f002 f91e 	bl	e28d8 <__aeabi_dsub>
   e069c:	4602      	mov	r2, r0
   e069e:	460b      	mov	r3, r1
   e06a0:	2000      	movs	r0, #0
   e06a2:	4959      	ldr	r1, [pc, #356]	; (e0808 <__ieee754_pow+0x940>)
   e06a4:	f002 f918 	bl	e28d8 <__aeabi_dsub>
   e06a8:	448a      	add	sl, r1
   e06aa:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
   e06ae:	4602      	mov	r2, r0
   e06b0:	460b      	mov	r3, r1
   e06b2:	f2c0 815b 	blt.w	e096c <__ieee754_pow+0xaa4>
   e06b6:	4651      	mov	r1, sl
   e06b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   e06bc:	f002 fac0 	bl	e2c40 <__aeabi_dmul>
   e06c0:	ec41 0b10 	vmov	d0, r0, r1
   e06c4:	e449      	b.n	dff5a <__ieee754_pow+0x92>
   e06c6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   e06ca:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   e06ce:	ea54 030b 	orrs.w	r3, r4, fp
   e06d2:	f000 8137 	beq.w	e0944 <__ieee754_pow+0xa7c>
   e06d6:	f1bb 0f01 	cmp.w	fp, #1
   e06da:	f47f ac80 	bne.w	dffde <__ieee754_pow+0x116>
   e06de:	4602      	mov	r2, r0
   e06e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e06e4:	ec43 2b10 	vmov	d0, r2, r3
   e06e8:	e437      	b.n	dff5a <__ieee754_pow+0x92>
   e06ea:	4632      	mov	r2, r6
   e06ec:	463b      	mov	r3, r7
   e06ee:	4630      	mov	r0, r6
   e06f0:	4639      	mov	r1, r7
   e06f2:	f002 faa5 	bl	e2c40 <__aeabi_dmul>
   e06f6:	ec41 0b10 	vmov	d0, r0, r1
   e06fa:	e42e      	b.n	dff5a <__ieee754_pow+0x92>
   e06fc:	4b43      	ldr	r3, [pc, #268]	; (e080c <__ieee754_pow+0x944>)
   e06fe:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   e0702:	4598      	cmp	r8, r3
   e0704:	f340 8115 	ble.w	e0932 <__ieee754_pow+0xa6a>
   e0708:	4b41      	ldr	r3, [pc, #260]	; (e0810 <__ieee754_pow+0x948>)
   e070a:	440b      	add	r3, r1
   e070c:	4303      	orrs	r3, r0
   e070e:	d10c      	bne.n	e072a <__ieee754_pow+0x862>
   e0710:	4632      	mov	r2, r6
   e0712:	463b      	mov	r3, r7
   e0714:	f002 f8e0 	bl	e28d8 <__aeabi_dsub>
   e0718:	4602      	mov	r2, r0
   e071a:	460b      	mov	r3, r1
   e071c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e0720:	f002 fd0a 	bl	e3138 <__aeabi_dcmple>
   e0724:	2800      	cmp	r0, #0
   e0726:	f43f aee6 	beq.w	e04f6 <__ieee754_pow+0x62e>
   e072a:	a32f      	add	r3, pc, #188	; (adr r3, e07e8 <__ieee754_pow+0x920>)
   e072c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0730:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e0734:	f002 fa84 	bl	e2c40 <__aeabi_dmul>
   e0738:	a32b      	add	r3, pc, #172	; (adr r3, e07e8 <__ieee754_pow+0x920>)
   e073a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e073e:	f002 fa7f 	bl	e2c40 <__aeabi_dmul>
   e0742:	ec41 0b10 	vmov	d0, r0, r1
   e0746:	e408      	b.n	dff5a <__ieee754_pow+0x92>
   e0748:	ed9f 7b29 	vldr	d7, [pc, #164]	; e07f0 <__ieee754_pow+0x928>
   e074c:	ed8d 7b06 	vstr	d7, [sp, #24]
   e0750:	e676      	b.n	e0440 <__ieee754_pow+0x578>
   e0752:	f1b9 0f00 	cmp.w	r9, #0
   e0756:	f6bf ac8e 	bge.w	e0076 <__ieee754_pow+0x1ae>
   e075a:	e9dd 3400 	ldrd	r3, r4, [sp]
   e075e:	ee00 3a10 	vmov	s0, r3
   e0762:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   e0766:	ee00 3a90 	vmov	s1, r3
   e076a:	f7ff bbf6 	b.w	dff5a <__ieee754_pow+0x92>
   e076e:	4602      	mov	r2, r0
   e0770:	460b      	mov	r3, r1
   e0772:	2000      	movs	r0, #0
   e0774:	4924      	ldr	r1, [pc, #144]	; (e0808 <__ieee754_pow+0x940>)
   e0776:	f002 fb8d 	bl	e2e94 <__aeabi_ddiv>
   e077a:	e42d      	b.n	dffd8 <__ieee754_pow+0x110>
   e077c:	ed9f 7b1e 	vldr	d7, [pc, #120]	; e07f8 <__ieee754_pow+0x930>
   e0780:	ed8d 7b08 	vstr	d7, [sp, #32]
   e0784:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   e0788:	ed9f 7b03 	vldr	d7, [pc, #12]	; e0798 <__ieee754_pow+0x8d0>
   e078c:	f04f 0800 	mov.w	r8, #0
   e0790:	ed8d 7b06 	vstr	d7, [sp, #24]
   e0794:	e4be      	b.n	e0114 <__ieee754_pow+0x24c>
   e0796:	bf00      	nop
   e0798:	00000000 	.word	0x00000000
   e079c:	3ff00000 	.word	0x3ff00000
   e07a0:	652b82fe 	.word	0x652b82fe
   e07a4:	3c971547 	.word	0x3c971547
   e07a8:	00000000 	.word	0x00000000
   e07ac:	3fe62e43 	.word	0x3fe62e43
   e07b0:	fefa39ef 	.word	0xfefa39ef
   e07b4:	3fe62e42 	.word	0x3fe62e42
   e07b8:	0ca86c39 	.word	0x0ca86c39
   e07bc:	be205c61 	.word	0xbe205c61
   e07c0:	72bea4d0 	.word	0x72bea4d0
   e07c4:	3e663769 	.word	0x3e663769
   e07c8:	c5d26bf1 	.word	0xc5d26bf1
   e07cc:	3ebbbd41 	.word	0x3ebbbd41
   e07d0:	af25de2c 	.word	0xaf25de2c
   e07d4:	3f11566a 	.word	0x3f11566a
   e07d8:	16bebd93 	.word	0x16bebd93
   e07dc:	3f66c16c 	.word	0x3f66c16c
   e07e0:	5555553e 	.word	0x5555553e
   e07e4:	3fc55555 	.word	0x3fc55555
   e07e8:	c2f8f359 	.word	0xc2f8f359
   e07ec:	01a56e1f 	.word	0x01a56e1f
   e07f0:	00000000 	.word	0x00000000
   e07f4:	bff00000 	.word	0xbff00000
	...
   e0800:	408fffff 	.word	0x408fffff
   e0804:	000fffff 	.word	0x000fffff
   e0808:	3ff00000 	.word	0x3ff00000
   e080c:	4090cbff 	.word	0x4090cbff
   e0810:	3f6f3400 	.word	0x3f6f3400
   e0814:	4b6c      	ldr	r3, [pc, #432]	; (e09c8 <__ieee754_pow+0xb00>)
   e0816:	429c      	cmp	r4, r3
   e0818:	f77f ac2a 	ble.w	e0070 <__ieee754_pow+0x1a8>
   e081c:	4b6b      	ldr	r3, [pc, #428]	; (e09cc <__ieee754_pow+0xb04>)
   e081e:	429c      	cmp	r4, r3
   e0820:	f73f abc3 	bgt.w	dffaa <__ieee754_pow+0xe2>
   e0824:	2200      	movs	r2, #0
   e0826:	4b69      	ldr	r3, [pc, #420]	; (e09cc <__ieee754_pow+0xb04>)
   e0828:	f002 f856 	bl	e28d8 <__aeabi_dsub>
   e082c:	a356      	add	r3, pc, #344	; (adr r3, e0988 <__ieee754_pow+0xac0>)
   e082e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0832:	4604      	mov	r4, r0
   e0834:	460d      	mov	r5, r1
   e0836:	f002 fa03 	bl	e2c40 <__aeabi_dmul>
   e083a:	a355      	add	r3, pc, #340	; (adr r3, e0990 <__ieee754_pow+0xac8>)
   e083c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0840:	4680      	mov	r8, r0
   e0842:	4689      	mov	r9, r1
   e0844:	4620      	mov	r0, r4
   e0846:	4629      	mov	r1, r5
   e0848:	f002 f9fa 	bl	e2c40 <__aeabi_dmul>
   e084c:	2200      	movs	r2, #0
   e084e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   e0852:	4b5f      	ldr	r3, [pc, #380]	; (e09d0 <__ieee754_pow+0xb08>)
   e0854:	4620      	mov	r0, r4
   e0856:	4629      	mov	r1, r5
   e0858:	f002 f9f2 	bl	e2c40 <__aeabi_dmul>
   e085c:	4602      	mov	r2, r0
   e085e:	460b      	mov	r3, r1
   e0860:	a14d      	add	r1, pc, #308	; (adr r1, e0998 <__ieee754_pow+0xad0>)
   e0862:	e9d1 0100 	ldrd	r0, r1, [r1]
   e0866:	f002 f837 	bl	e28d8 <__aeabi_dsub>
   e086a:	4622      	mov	r2, r4
   e086c:	462b      	mov	r3, r5
   e086e:	f002 f9e7 	bl	e2c40 <__aeabi_dmul>
   e0872:	4602      	mov	r2, r0
   e0874:	460b      	mov	r3, r1
   e0876:	2000      	movs	r0, #0
   e0878:	4956      	ldr	r1, [pc, #344]	; (e09d4 <__ieee754_pow+0xb0c>)
   e087a:	f002 f82d 	bl	e28d8 <__aeabi_dsub>
   e087e:	4622      	mov	r2, r4
   e0880:	462b      	mov	r3, r5
   e0882:	4606      	mov	r6, r0
   e0884:	460f      	mov	r7, r1
   e0886:	4620      	mov	r0, r4
   e0888:	4629      	mov	r1, r5
   e088a:	f002 f9d9 	bl	e2c40 <__aeabi_dmul>
   e088e:	4602      	mov	r2, r0
   e0890:	460b      	mov	r3, r1
   e0892:	4630      	mov	r0, r6
   e0894:	4639      	mov	r1, r7
   e0896:	f002 f9d3 	bl	e2c40 <__aeabi_dmul>
   e089a:	a341      	add	r3, pc, #260	; (adr r3, e09a0 <__ieee754_pow+0xad8>)
   e089c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e08a0:	f002 f9ce 	bl	e2c40 <__aeabi_dmul>
   e08a4:	4602      	mov	r2, r0
   e08a6:	460b      	mov	r3, r1
   e08a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   e08ac:	f002 f814 	bl	e28d8 <__aeabi_dsub>
   e08b0:	4602      	mov	r2, r0
   e08b2:	460b      	mov	r3, r1
   e08b4:	4604      	mov	r4, r0
   e08b6:	460d      	mov	r5, r1
   e08b8:	4640      	mov	r0, r8
   e08ba:	4649      	mov	r1, r9
   e08bc:	f002 f80e 	bl	e28dc <__adddf3>
   e08c0:	4642      	mov	r2, r8
   e08c2:	464b      	mov	r3, r9
   e08c4:	2000      	movs	r0, #0
   e08c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   e08ca:	f002 f805 	bl	e28d8 <__aeabi_dsub>
   e08ce:	4602      	mov	r2, r0
   e08d0:	460b      	mov	r3, r1
   e08d2:	4620      	mov	r0, r4
   e08d4:	4629      	mov	r1, r5
   e08d6:	f001 ffff 	bl	e28d8 <__aeabi_dsub>
   e08da:	4680      	mov	r8, r0
   e08dc:	4689      	mov	r9, r1
   e08de:	e5a5      	b.n	e042c <__ieee754_pow+0x564>
   e08e0:	4632      	mov	r2, r6
   e08e2:	463b      	mov	r3, r7
   e08e4:	2000      	movs	r0, #0
   e08e6:	4939      	ldr	r1, [pc, #228]	; (e09cc <__ieee754_pow+0xb04>)
   e08e8:	f002 fad4 	bl	e2e94 <__aeabi_ddiv>
   e08ec:	ec41 0b10 	vmov	d0, r0, r1
   e08f0:	f7ff bb33 	b.w	dff5a <__ieee754_pow+0x92>
   e08f4:	a32c      	add	r3, pc, #176	; (adr r3, e09a8 <__ieee754_pow+0xae0>)
   e08f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   e08fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e08fe:	f002 f99f 	bl	e2c40 <__aeabi_dmul>
   e0902:	a329      	add	r3, pc, #164	; (adr r3, e09a8 <__ieee754_pow+0xae0>)
   e0904:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0908:	f002 f99a 	bl	e2c40 <__aeabi_dmul>
   e090c:	ec41 0b10 	vmov	d0, r0, r1
   e0910:	f7ff bb23 	b.w	dff5a <__ieee754_pow+0x92>
   e0914:	f1be 0f00 	cmp.w	lr, #0
   e0918:	f47f ab2a 	bne.w	dff70 <__ieee754_pow+0xa8>
   e091c:	f1c3 0314 	rsb	r3, r3, #20
   e0920:	fa48 f203 	asr.w	r2, r8, r3
   e0924:	fa02 f303 	lsl.w	r3, r2, r3
   e0928:	4598      	cmp	r8, r3
   e092a:	d027      	beq.n	e097c <__ieee754_pow+0xab4>
   e092c:	46f3      	mov	fp, lr
   e092e:	f7ff baf7 	b.w	dff20 <__ieee754_pow+0x58>
   e0932:	4b28      	ldr	r3, [pc, #160]	; (e09d4 <__ieee754_pow+0xb0c>)
   e0934:	4598      	cmp	r8, r3
   e0936:	f73f adde 	bgt.w	e04f6 <__ieee754_pow+0x62e>
   e093a:	e9dd 3400 	ldrd	r3, r4, [sp]
   e093e:	469a      	mov	sl, r3
   e0940:	469b      	mov	fp, r3
   e0942:	e607      	b.n	e0554 <__ieee754_pow+0x68c>
   e0944:	4602      	mov	r2, r0
   e0946:	460b      	mov	r3, r1
   e0948:	f7ff bb89 	b.w	e005e <__ieee754_pow+0x196>
   e094c:	ed9f 7b18 	vldr	d7, [pc, #96]	; e09b0 <__ieee754_pow+0xae8>
   e0950:	ed8d 7b08 	vstr	d7, [sp, #32]
   e0954:	ed9f 7b18 	vldr	d7, [pc, #96]	; e09b8 <__ieee754_pow+0xaf0>
   e0958:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   e095c:	ed9f 7b18 	vldr	d7, [pc, #96]	; e09c0 <__ieee754_pow+0xaf8>
   e0960:	f44f 2880 	mov.w	r8, #262144	; 0x40000
   e0964:	ed8d 7b06 	vstr	d7, [sp, #24]
   e0968:	f7ff bbd4 	b.w	e0114 <__ieee754_pow+0x24c>
   e096c:	4658      	mov	r0, fp
   e096e:	ec43 2b10 	vmov	d0, r2, r3
   e0972:	f001 ff19 	bl	e27a8 <scalbn>
   e0976:	ec51 0b10 	vmov	r0, r1, d0
   e097a:	e69d      	b.n	e06b8 <__ieee754_pow+0x7f0>
   e097c:	f002 0201 	and.w	r2, r2, #1
   e0980:	f1c2 0b02 	rsb	fp, r2, #2
   e0984:	f7ff bacc 	b.w	dff20 <__ieee754_pow+0x58>
   e0988:	60000000 	.word	0x60000000
   e098c:	3ff71547 	.word	0x3ff71547
   e0990:	f85ddf44 	.word	0xf85ddf44
   e0994:	3e54ae0b 	.word	0x3e54ae0b
   e0998:	55555555 	.word	0x55555555
   e099c:	3fd55555 	.word	0x3fd55555
   e09a0:	652b82fe 	.word	0x652b82fe
   e09a4:	3ff71547 	.word	0x3ff71547
   e09a8:	8800759c 	.word	0x8800759c
   e09ac:	7e37e43c 	.word	0x7e37e43c
   e09b0:	40000000 	.word	0x40000000
   e09b4:	3fe2b803 	.word	0x3fe2b803
   e09b8:	43cfd006 	.word	0x43cfd006
   e09bc:	3e4cfdeb 	.word	0x3e4cfdeb
   e09c0:	00000000 	.word	0x00000000
   e09c4:	3ff80000 	.word	0x3ff80000
   e09c8:	3feffffe 	.word	0x3feffffe
   e09cc:	3ff00000 	.word	0x3ff00000
   e09d0:	3fd00000 	.word	0x3fd00000
   e09d4:	3fe00000 	.word	0x3fe00000

000e09d8 <__ieee754_rem_pio2>:
   e09d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e09dc:	ec53 2b10 	vmov	r2, r3, d0
   e09e0:	4997      	ldr	r1, [pc, #604]	; (e0c40 <__ieee754_rem_pio2+0x268>)
   e09e2:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
   e09e6:	458b      	cmp	fp, r1
   e09e8:	b08f      	sub	sp, #60	; 0x3c
   e09ea:	f340 8087 	ble.w	e0afc <__ieee754_rem_pio2+0x124>
   e09ee:	4995      	ldr	r1, [pc, #596]	; (e0c44 <__ieee754_rem_pio2+0x26c>)
   e09f0:	458b      	cmp	fp, r1
   e09f2:	461c      	mov	r4, r3
   e09f4:	4682      	mov	sl, r0
   e09f6:	dc29      	bgt.n	e0a4c <__ieee754_rem_pio2+0x74>
   e09f8:	2c00      	cmp	r4, #0
   e09fa:	4619      	mov	r1, r3
   e09fc:	ee10 0a10 	vmov	r0, s0
   e0a00:	a385      	add	r3, pc, #532	; (adr r3, e0c18 <__ieee754_rem_pio2+0x240>)
   e0a02:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0a06:	f340 81a5 	ble.w	e0d54 <__ieee754_rem_pio2+0x37c>
   e0a0a:	f001 ff65 	bl	e28d8 <__aeabi_dsub>
   e0a0e:	4b8e      	ldr	r3, [pc, #568]	; (e0c48 <__ieee754_rem_pio2+0x270>)
   e0a10:	459b      	cmp	fp, r3
   e0a12:	4604      	mov	r4, r0
   e0a14:	460d      	mov	r5, r1
   e0a16:	f000 8087 	beq.w	e0b28 <__ieee754_rem_pio2+0x150>
   e0a1a:	a381      	add	r3, pc, #516	; (adr r3, e0c20 <__ieee754_rem_pio2+0x248>)
   e0a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0a20:	f001 ff5a 	bl	e28d8 <__aeabi_dsub>
   e0a24:	4602      	mov	r2, r0
   e0a26:	460b      	mov	r3, r1
   e0a28:	e9ca 2300 	strd	r2, r3, [sl]
   e0a2c:	4620      	mov	r0, r4
   e0a2e:	4629      	mov	r1, r5
   e0a30:	f001 ff52 	bl	e28d8 <__aeabi_dsub>
   e0a34:	a37a      	add	r3, pc, #488	; (adr r3, e0c20 <__ieee754_rem_pio2+0x248>)
   e0a36:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0a3a:	f001 ff4d 	bl	e28d8 <__aeabi_dsub>
   e0a3e:	2501      	movs	r5, #1
   e0a40:	e9ca 0102 	strd	r0, r1, [sl, #8]
   e0a44:	4628      	mov	r0, r5
   e0a46:	b00f      	add	sp, #60	; 0x3c
   e0a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e0a4c:	497f      	ldr	r1, [pc, #508]	; (e0c4c <__ieee754_rem_pio2+0x274>)
   e0a4e:	458b      	cmp	fp, r1
   e0a50:	f340 8087 	ble.w	e0b62 <__ieee754_rem_pio2+0x18a>
   e0a54:	497e      	ldr	r1, [pc, #504]	; (e0c50 <__ieee754_rem_pio2+0x278>)
   e0a56:	458b      	cmp	fp, r1
   e0a58:	dc5b      	bgt.n	e0b12 <__ieee754_rem_pio2+0x13a>
   e0a5a:	ea4f 552b 	mov.w	r5, fp, asr #20
   e0a5e:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
   e0a62:	ebab 5705 	sub.w	r7, fp, r5, lsl #20
   e0a66:	4610      	mov	r0, r2
   e0a68:	4639      	mov	r1, r7
   e0a6a:	ee10 6a10 	vmov	r6, s0
   e0a6e:	f002 fb97 	bl	e31a0 <__aeabi_d2iz>
   e0a72:	f002 f87f 	bl	e2b74 <__aeabi_i2d>
   e0a76:	4680      	mov	r8, r0
   e0a78:	4689      	mov	r9, r1
   e0a7a:	4642      	mov	r2, r8
   e0a7c:	464b      	mov	r3, r9
   e0a7e:	4630      	mov	r0, r6
   e0a80:	4639      	mov	r1, r7
   e0a82:	e9cd 8908 	strd	r8, r9, [sp, #32]
   e0a86:	f001 ff27 	bl	e28d8 <__aeabi_dsub>
   e0a8a:	2200      	movs	r2, #0
   e0a8c:	4b71      	ldr	r3, [pc, #452]	; (e0c54 <__ieee754_rem_pio2+0x27c>)
   e0a8e:	f002 f8d7 	bl	e2c40 <__aeabi_dmul>
   e0a92:	4689      	mov	r9, r1
   e0a94:	4680      	mov	r8, r0
   e0a96:	f002 fb83 	bl	e31a0 <__aeabi_d2iz>
   e0a9a:	f002 f86b 	bl	e2b74 <__aeabi_i2d>
   e0a9e:	4606      	mov	r6, r0
   e0aa0:	460f      	mov	r7, r1
   e0aa2:	4632      	mov	r2, r6
   e0aa4:	463b      	mov	r3, r7
   e0aa6:	4640      	mov	r0, r8
   e0aa8:	4649      	mov	r1, r9
   e0aaa:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
   e0aae:	f001 ff13 	bl	e28d8 <__aeabi_dsub>
   e0ab2:	2200      	movs	r2, #0
   e0ab4:	4b67      	ldr	r3, [pc, #412]	; (e0c54 <__ieee754_rem_pio2+0x27c>)
   e0ab6:	f002 f8c3 	bl	e2c40 <__aeabi_dmul>
   e0aba:	2200      	movs	r2, #0
   e0abc:	2300      	movs	r3, #0
   e0abe:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   e0ac2:	f002 fb25 	bl	e3110 <__aeabi_dcmpeq>
   e0ac6:	2800      	cmp	r0, #0
   e0ac8:	f000 8170 	beq.w	e0dac <__ieee754_rem_pio2+0x3d4>
   e0acc:	2300      	movs	r3, #0
   e0ace:	4630      	mov	r0, r6
   e0ad0:	4639      	mov	r1, r7
   e0ad2:	2200      	movs	r2, #0
   e0ad4:	f002 fb1c 	bl	e3110 <__aeabi_dcmpeq>
   e0ad8:	2800      	cmp	r0, #0
   e0ada:	bf14      	ite	ne
   e0adc:	2301      	movne	r3, #1
   e0ade:	2302      	moveq	r3, #2
   e0ae0:	4a5d      	ldr	r2, [pc, #372]	; (e0c58 <__ieee754_rem_pio2+0x280>)
   e0ae2:	9201      	str	r2, [sp, #4]
   e0ae4:	2102      	movs	r1, #2
   e0ae6:	9100      	str	r1, [sp, #0]
   e0ae8:	462a      	mov	r2, r5
   e0aea:	4651      	mov	r1, sl
   e0aec:	a808      	add	r0, sp, #32
   e0aee:	f000 fc93 	bl	e1418 <__kernel_rem_pio2>
   e0af2:	2c00      	cmp	r4, #0
   e0af4:	f2c0 814c 	blt.w	e0d90 <__ieee754_rem_pio2+0x3b8>
   e0af8:	4605      	mov	r5, r0
   e0afa:	e006      	b.n	e0b0a <__ieee754_rem_pio2+0x132>
   e0afc:	ed80 0b00 	vstr	d0, [r0]
   e0b00:	2500      	movs	r5, #0
   e0b02:	2400      	movs	r4, #0
   e0b04:	e9c0 4502 	strd	r4, r5, [r0, #8]
   e0b08:	2500      	movs	r5, #0
   e0b0a:	4628      	mov	r0, r5
   e0b0c:	b00f      	add	sp, #60	; 0x3c
   e0b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e0b12:	ee10 0a10 	vmov	r0, s0
   e0b16:	4619      	mov	r1, r3
   e0b18:	f001 fede 	bl	e28d8 <__aeabi_dsub>
   e0b1c:	2500      	movs	r5, #0
   e0b1e:	e9ca 0102 	strd	r0, r1, [sl, #8]
   e0b22:	e9ca 0100 	strd	r0, r1, [sl]
   e0b26:	e7f0      	b.n	e0b0a <__ieee754_rem_pio2+0x132>
   e0b28:	a33f      	add	r3, pc, #252	; (adr r3, e0c28 <__ieee754_rem_pio2+0x250>)
   e0b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0b2e:	f001 fed3 	bl	e28d8 <__aeabi_dsub>
   e0b32:	a33f      	add	r3, pc, #252	; (adr r3, e0c30 <__ieee754_rem_pio2+0x258>)
   e0b34:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0b38:	460d      	mov	r5, r1
   e0b3a:	4604      	mov	r4, r0
   e0b3c:	f001 fecc 	bl	e28d8 <__aeabi_dsub>
   e0b40:	4602      	mov	r2, r0
   e0b42:	460b      	mov	r3, r1
   e0b44:	e9ca 2300 	strd	r2, r3, [sl]
   e0b48:	4629      	mov	r1, r5
   e0b4a:	4620      	mov	r0, r4
   e0b4c:	f001 fec4 	bl	e28d8 <__aeabi_dsub>
   e0b50:	a337      	add	r3, pc, #220	; (adr r3, e0c30 <__ieee754_rem_pio2+0x258>)
   e0b52:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0b56:	f001 febf 	bl	e28d8 <__aeabi_dsub>
   e0b5a:	2501      	movs	r5, #1
   e0b5c:	e9ca 0102 	strd	r0, r1, [sl, #8]
   e0b60:	e7d3      	b.n	e0b0a <__ieee754_rem_pio2+0x132>
   e0b62:	f7fc fe65 	bl	dd830 <fabs>
   e0b66:	ec57 6b10 	vmov	r6, r7, d0
   e0b6a:	ee10 0a10 	vmov	r0, s0
   e0b6e:	a332      	add	r3, pc, #200	; (adr r3, e0c38 <__ieee754_rem_pio2+0x260>)
   e0b70:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0b74:	4639      	mov	r1, r7
   e0b76:	f002 f863 	bl	e2c40 <__aeabi_dmul>
   e0b7a:	2200      	movs	r2, #0
   e0b7c:	4b37      	ldr	r3, [pc, #220]	; (e0c5c <__ieee754_rem_pio2+0x284>)
   e0b7e:	f001 fead 	bl	e28dc <__adddf3>
   e0b82:	f002 fb0d 	bl	e31a0 <__aeabi_d2iz>
   e0b86:	4605      	mov	r5, r0
   e0b88:	f001 fff4 	bl	e2b74 <__aeabi_i2d>
   e0b8c:	a322      	add	r3, pc, #136	; (adr r3, e0c18 <__ieee754_rem_pio2+0x240>)
   e0b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0b92:	e9cd 0104 	strd	r0, r1, [sp, #16]
   e0b96:	f002 f853 	bl	e2c40 <__aeabi_dmul>
   e0b9a:	4602      	mov	r2, r0
   e0b9c:	460b      	mov	r3, r1
   e0b9e:	4630      	mov	r0, r6
   e0ba0:	4639      	mov	r1, r7
   e0ba2:	f001 fe99 	bl	e28d8 <__aeabi_dsub>
   e0ba6:	a31e      	add	r3, pc, #120	; (adr r3, e0c20 <__ieee754_rem_pio2+0x248>)
   e0ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0bac:	4680      	mov	r8, r0
   e0bae:	4689      	mov	r9, r1
   e0bb0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e0bb4:	f002 f844 	bl	e2c40 <__aeabi_dmul>
   e0bb8:	2d1f      	cmp	r5, #31
   e0bba:	e9cd 0102 	strd	r0, r1, [sp, #8]
   e0bbe:	dc51      	bgt.n	e0c64 <__ieee754_rem_pio2+0x28c>
   e0bc0:	4b27      	ldr	r3, [pc, #156]	; (e0c60 <__ieee754_rem_pio2+0x288>)
   e0bc2:	1e6a      	subs	r2, r5, #1
   e0bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   e0bc8:	459b      	cmp	fp, r3
   e0bca:	d04b      	beq.n	e0c64 <__ieee754_rem_pio2+0x28c>
   e0bcc:	4602      	mov	r2, r0
   e0bce:	460b      	mov	r3, r1
   e0bd0:	4640      	mov	r0, r8
   e0bd2:	4649      	mov	r1, r9
   e0bd4:	f001 fe80 	bl	e28d8 <__aeabi_dsub>
   e0bd8:	4606      	mov	r6, r0
   e0bda:	460f      	mov	r7, r1
   e0bdc:	e9ca 6700 	strd	r6, r7, [sl]
   e0be0:	4632      	mov	r2, r6
   e0be2:	463b      	mov	r3, r7
   e0be4:	4640      	mov	r0, r8
   e0be6:	4649      	mov	r1, r9
   e0be8:	f001 fe76 	bl	e28d8 <__aeabi_dsub>
   e0bec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   e0bf0:	f001 fe72 	bl	e28d8 <__aeabi_dsub>
   e0bf4:	2c00      	cmp	r4, #0
   e0bf6:	e9ca 0102 	strd	r0, r1, [sl, #8]
   e0bfa:	da86      	bge.n	e0b0a <__ieee754_rem_pio2+0x132>
   e0bfc:	f107 4400 	add.w	r4, r7, #2147483648	; 0x80000000
   e0c00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e0c04:	426d      	negs	r5, r5
   e0c06:	f8ca 6000 	str.w	r6, [sl]
   e0c0a:	f8ca 4004 	str.w	r4, [sl, #4]
   e0c0e:	f8ca 0008 	str.w	r0, [sl, #8]
   e0c12:	f8ca 300c 	str.w	r3, [sl, #12]
   e0c16:	e778      	b.n	e0b0a <__ieee754_rem_pio2+0x132>
   e0c18:	54400000 	.word	0x54400000
   e0c1c:	3ff921fb 	.word	0x3ff921fb
   e0c20:	1a626331 	.word	0x1a626331
   e0c24:	3dd0b461 	.word	0x3dd0b461
   e0c28:	1a600000 	.word	0x1a600000
   e0c2c:	3dd0b461 	.word	0x3dd0b461
   e0c30:	2e037073 	.word	0x2e037073
   e0c34:	3ba3198a 	.word	0x3ba3198a
   e0c38:	6dc9c883 	.word	0x6dc9c883
   e0c3c:	3fe45f30 	.word	0x3fe45f30
   e0c40:	3fe921fb 	.word	0x3fe921fb
   e0c44:	4002d97b 	.word	0x4002d97b
   e0c48:	3ff921fb 	.word	0x3ff921fb
   e0c4c:	413921fb 	.word	0x413921fb
   e0c50:	7fefffff 	.word	0x7fefffff
   e0c54:	41700000 	.word	0x41700000
   e0c58:	000e8160 	.word	0x000e8160
   e0c5c:	3fe00000 	.word	0x3fe00000
   e0c60:	000e80e0 	.word	0x000e80e0
   e0c64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   e0c68:	4640      	mov	r0, r8
   e0c6a:	4649      	mov	r1, r9
   e0c6c:	f001 fe34 	bl	e28d8 <__aeabi_dsub>
   e0c70:	ea4f 5b2b 	mov.w	fp, fp, asr #20
   e0c74:	f3c1 530a 	ubfx	r3, r1, #20, #11
   e0c78:	ebc3 030b 	rsb	r3, r3, fp
   e0c7c:	4606      	mov	r6, r0
   e0c7e:	460f      	mov	r7, r1
   e0c80:	2b10      	cmp	r3, #16
   e0c82:	e9ca 6700 	strd	r6, r7, [sl]
   e0c86:	ddab      	ble.n	e0be0 <__ieee754_rem_pio2+0x208>
   e0c88:	a35d      	add	r3, pc, #372	; (adr r3, e0e00 <__ieee754_rem_pio2+0x428>)
   e0c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0c8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e0c92:	f001 ffd5 	bl	e2c40 <__aeabi_dmul>
   e0c96:	4606      	mov	r6, r0
   e0c98:	460f      	mov	r7, r1
   e0c9a:	4602      	mov	r2, r0
   e0c9c:	460b      	mov	r3, r1
   e0c9e:	4640      	mov	r0, r8
   e0ca0:	4649      	mov	r1, r9
   e0ca2:	f001 fe19 	bl	e28d8 <__aeabi_dsub>
   e0ca6:	e9cd 0106 	strd	r0, r1, [sp, #24]
   e0caa:	4602      	mov	r2, r0
   e0cac:	460b      	mov	r3, r1
   e0cae:	4640      	mov	r0, r8
   e0cb0:	4649      	mov	r1, r9
   e0cb2:	f001 fe11 	bl	e28d8 <__aeabi_dsub>
   e0cb6:	4632      	mov	r2, r6
   e0cb8:	463b      	mov	r3, r7
   e0cba:	f001 fe0d 	bl	e28d8 <__aeabi_dsub>
   e0cbe:	a352      	add	r3, pc, #328	; (adr r3, e0e08 <__ieee754_rem_pio2+0x430>)
   e0cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0cc4:	4606      	mov	r6, r0
   e0cc6:	460f      	mov	r7, r1
   e0cc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e0ccc:	f001 ffb8 	bl	e2c40 <__aeabi_dmul>
   e0cd0:	4632      	mov	r2, r6
   e0cd2:	463b      	mov	r3, r7
   e0cd4:	f001 fe00 	bl	e28d8 <__aeabi_dsub>
   e0cd8:	460b      	mov	r3, r1
   e0cda:	e9cd 0102 	strd	r0, r1, [sp, #8]
   e0cde:	4602      	mov	r2, r0
   e0ce0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e0ce4:	f001 fdf8 	bl	e28d8 <__aeabi_dsub>
   e0ce8:	f3c1 530a 	ubfx	r3, r1, #20, #11
   e0cec:	ebc3 0b0b 	rsb	fp, r3, fp
   e0cf0:	4606      	mov	r6, r0
   e0cf2:	460f      	mov	r7, r1
   e0cf4:	f1bb 0f31 	cmp.w	fp, #49	; 0x31
   e0cf8:	e9ca 6700 	strd	r6, r7, [sl]
   e0cfc:	dd76      	ble.n	e0dec <__ieee754_rem_pio2+0x414>
   e0cfe:	a345      	add	r3, pc, #276	; (adr r3, e0e14 <__ieee754_rem_pio2+0x43c>)
   e0d00:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0d04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e0d08:	f001 ff9a 	bl	e2c40 <__aeabi_dmul>
   e0d0c:	4606      	mov	r6, r0
   e0d0e:	460f      	mov	r7, r1
   e0d10:	4602      	mov	r2, r0
   e0d12:	460b      	mov	r3, r1
   e0d14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e0d18:	f001 fdde 	bl	e28d8 <__aeabi_dsub>
   e0d1c:	4602      	mov	r2, r0
   e0d1e:	460b      	mov	r3, r1
   e0d20:	4680      	mov	r8, r0
   e0d22:	4689      	mov	r9, r1
   e0d24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e0d28:	f001 fdd6 	bl	e28d8 <__aeabi_dsub>
   e0d2c:	4632      	mov	r2, r6
   e0d2e:	463b      	mov	r3, r7
   e0d30:	f001 fdd2 	bl	e28d8 <__aeabi_dsub>
   e0d34:	a339      	add	r3, pc, #228	; (adr r3, e0e1c <__ieee754_rem_pio2+0x444>)
   e0d36:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0d3a:	4606      	mov	r6, r0
   e0d3c:	460f      	mov	r7, r1
   e0d3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e0d42:	f001 ff7d 	bl	e2c40 <__aeabi_dmul>
   e0d46:	4632      	mov	r2, r6
   e0d48:	463b      	mov	r3, r7
   e0d4a:	f001 fdc5 	bl	e28d8 <__aeabi_dsub>
   e0d4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   e0d52:	e73b      	b.n	e0bcc <__ieee754_rem_pio2+0x1f4>
   e0d54:	f001 fdc2 	bl	e28dc <__adddf3>
   e0d58:	4b2d      	ldr	r3, [pc, #180]	; (e0e10 <__ieee754_rem_pio2+0x438>)
   e0d5a:	459b      	cmp	fp, r3
   e0d5c:	4604      	mov	r4, r0
   e0d5e:	460d      	mov	r5, r1
   e0d60:	d026      	beq.n	e0db0 <__ieee754_rem_pio2+0x3d8>
   e0d62:	a325      	add	r3, pc, #148	; (adr r3, e0df8 <__ieee754_rem_pio2+0x420>)
   e0d64:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0d68:	f001 fdb8 	bl	e28dc <__adddf3>
   e0d6c:	4602      	mov	r2, r0
   e0d6e:	460b      	mov	r3, r1
   e0d70:	e9ca 2300 	strd	r2, r3, [sl]
   e0d74:	4629      	mov	r1, r5
   e0d76:	4620      	mov	r0, r4
   e0d78:	f001 fdae 	bl	e28d8 <__aeabi_dsub>
   e0d7c:	a31e      	add	r3, pc, #120	; (adr r3, e0df8 <__ieee754_rem_pio2+0x420>)
   e0d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0d82:	f001 fdab 	bl	e28dc <__adddf3>
   e0d86:	f04f 35ff 	mov.w	r5, #4294967295
   e0d8a:	e9ca 0102 	strd	r0, r1, [sl, #8]
   e0d8e:	e6bc      	b.n	e0b0a <__ieee754_rem_pio2+0x132>
   e0d90:	f8da 2004 	ldr.w	r2, [sl, #4]
   e0d94:	f8da 300c 	ldr.w	r3, [sl, #12]
   e0d98:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   e0d9c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   e0da0:	4245      	negs	r5, r0
   e0da2:	f8ca 2004 	str.w	r2, [sl, #4]
   e0da6:	f8ca 300c 	str.w	r3, [sl, #12]
   e0daa:	e6ae      	b.n	e0b0a <__ieee754_rem_pio2+0x132>
   e0dac:	2303      	movs	r3, #3
   e0dae:	e697      	b.n	e0ae0 <__ieee754_rem_pio2+0x108>
   e0db0:	a313      	add	r3, pc, #76	; (adr r3, e0e00 <__ieee754_rem_pio2+0x428>)
   e0db2:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0db6:	f001 fd91 	bl	e28dc <__adddf3>
   e0dba:	a313      	add	r3, pc, #76	; (adr r3, e0e08 <__ieee754_rem_pio2+0x430>)
   e0dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0dc0:	460d      	mov	r5, r1
   e0dc2:	4604      	mov	r4, r0
   e0dc4:	f001 fd8a 	bl	e28dc <__adddf3>
   e0dc8:	4602      	mov	r2, r0
   e0dca:	460b      	mov	r3, r1
   e0dcc:	e9ca 2300 	strd	r2, r3, [sl]
   e0dd0:	4629      	mov	r1, r5
   e0dd2:	4620      	mov	r0, r4
   e0dd4:	f001 fd80 	bl	e28d8 <__aeabi_dsub>
   e0dd8:	a30b      	add	r3, pc, #44	; (adr r3, e0e08 <__ieee754_rem_pio2+0x430>)
   e0dda:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0dde:	f001 fd7d 	bl	e28dc <__adddf3>
   e0de2:	f04f 35ff 	mov.w	r5, #4294967295
   e0de6:	e9ca 0102 	strd	r0, r1, [sl, #8]
   e0dea:	e68e      	b.n	e0b0a <__ieee754_rem_pio2+0x132>
   e0dec:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
   e0df0:	e6f6      	b.n	e0be0 <__ieee754_rem_pio2+0x208>
   e0df2:	bf00      	nop
   e0df4:	f3af 8000 	nop.w
   e0df8:	1a626331 	.word	0x1a626331
   e0dfc:	3dd0b461 	.word	0x3dd0b461
   e0e00:	1a600000 	.word	0x1a600000
   e0e04:	3dd0b461 	.word	0x3dd0b461
   e0e08:	2e037073 	.word	0x2e037073
   e0e0c:	3ba3198a 	.word	0x3ba3198a
   e0e10:	3ff921fb 	.word	0x3ff921fb
   e0e14:	2e000000 	.word	0x2e000000
   e0e18:	3ba3198a 	.word	0x3ba3198a
   e0e1c:	252049c1 	.word	0x252049c1
   e0e20:	397b839a 	.word	0x397b839a
   e0e24:	00000000 	.word	0x00000000

000e0e28 <__ieee754_sinh>:
   e0e28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e0e2c:	ec57 6b10 	vmov	r6, r7, d0
   e0e30:	4a65      	ldr	r2, [pc, #404]	; (e0fc8 <__ieee754_sinh+0x1a0>)
   e0e32:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
   e0e36:	4590      	cmp	r8, r2
   e0e38:	dc32      	bgt.n	e0ea0 <__ieee754_sinh+0x78>
   e0e3a:	4b64      	ldr	r3, [pc, #400]	; (e0fcc <__ieee754_sinh+0x1a4>)
   e0e3c:	2f00      	cmp	r7, #0
   e0e3e:	bfb4      	ite	lt
   e0e40:	4d63      	ldrlt	r5, [pc, #396]	; (e0fd0 <__ieee754_sinh+0x1a8>)
   e0e42:	4d64      	ldrge	r5, [pc, #400]	; (e0fd4 <__ieee754_sinh+0x1ac>)
   e0e44:	4598      	cmp	r8, r3
   e0e46:	f04f 0400 	mov.w	r4, #0
   e0e4a:	dc14      	bgt.n	e0e76 <__ieee754_sinh+0x4e>
   e0e4c:	4b62      	ldr	r3, [pc, #392]	; (e0fd8 <__ieee754_sinh+0x1b0>)
   e0e4e:	4598      	cmp	r8, r3
   e0e50:	f300 8085 	bgt.w	e0f5e <__ieee754_sinh+0x136>
   e0e54:	a35a      	add	r3, pc, #360	; (adr r3, e0fc0 <__ieee754_sinh+0x198>)
   e0e56:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0e5a:	ee10 0a10 	vmov	r0, s0
   e0e5e:	4639      	mov	r1, r7
   e0e60:	f001 fd3c 	bl	e28dc <__adddf3>
   e0e64:	2200      	movs	r2, #0
   e0e66:	4b5d      	ldr	r3, [pc, #372]	; (e0fdc <__ieee754_sinh+0x1b4>)
   e0e68:	f002 f97a 	bl	e3160 <__aeabi_dcmpgt>
   e0e6c:	b318      	cbz	r0, e0eb6 <__ieee754_sinh+0x8e>
   e0e6e:	ec47 6b10 	vmov	d0, r6, r7
   e0e72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e0e76:	4b5a      	ldr	r3, [pc, #360]	; (e0fe0 <__ieee754_sinh+0x1b8>)
   e0e78:	4598      	cmp	r8, r3
   e0e7a:	f340 8092 	ble.w	e0fa2 <__ieee754_sinh+0x17a>
   e0e7e:	4b59      	ldr	r3, [pc, #356]	; (e0fe4 <__ieee754_sinh+0x1bc>)
   e0e80:	4598      	cmp	r8, r3
   e0e82:	dd4d      	ble.n	e0f20 <__ieee754_sinh+0xf8>
   e0e84:	3301      	adds	r3, #1
   e0e86:	4598      	cmp	r8, r3
   e0e88:	d047      	beq.n	e0f1a <__ieee754_sinh+0xf2>
   e0e8a:	4630      	mov	r0, r6
   e0e8c:	4639      	mov	r1, r7
   e0e8e:	a34c      	add	r3, pc, #304	; (adr r3, e0fc0 <__ieee754_sinh+0x198>)
   e0e90:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0e94:	f001 fed4 	bl	e2c40 <__aeabi_dmul>
   e0e98:	ec41 0b10 	vmov	d0, r0, r1
   e0e9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e0ea0:	ee10 2a10 	vmov	r2, s0
   e0ea4:	463b      	mov	r3, r7
   e0ea6:	4630      	mov	r0, r6
   e0ea8:	4639      	mov	r1, r7
   e0eaa:	f001 fd17 	bl	e28dc <__adddf3>
   e0eae:	ec41 0b10 	vmov	d0, r0, r1
   e0eb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e0eb6:	ec47 6b10 	vmov	d0, r6, r7
   e0eba:	f7fc fcb9 	bl	dd830 <fabs>
   e0ebe:	f001 f96b 	bl	e2198 <expm1>
   e0ec2:	ec57 6b10 	vmov	r6, r7, d0
   e0ec6:	4632      	mov	r2, r6
   e0ec8:	463b      	mov	r3, r7
   e0eca:	4630      	mov	r0, r6
   e0ecc:	4639      	mov	r1, r7
   e0ece:	f001 fd05 	bl	e28dc <__adddf3>
   e0ed2:	4632      	mov	r2, r6
   e0ed4:	4682      	mov	sl, r0
   e0ed6:	468b      	mov	fp, r1
   e0ed8:	463b      	mov	r3, r7
   e0eda:	4630      	mov	r0, r6
   e0edc:	4639      	mov	r1, r7
   e0ede:	f001 feaf 	bl	e2c40 <__aeabi_dmul>
   e0ee2:	2200      	movs	r2, #0
   e0ee4:	4680      	mov	r8, r0
   e0ee6:	4689      	mov	r9, r1
   e0ee8:	4b3c      	ldr	r3, [pc, #240]	; (e0fdc <__ieee754_sinh+0x1b4>)
   e0eea:	4630      	mov	r0, r6
   e0eec:	4639      	mov	r1, r7
   e0eee:	f001 fcf5 	bl	e28dc <__adddf3>
   e0ef2:	4602      	mov	r2, r0
   e0ef4:	460b      	mov	r3, r1
   e0ef6:	4640      	mov	r0, r8
   e0ef8:	4649      	mov	r1, r9
   e0efa:	f001 ffcb 	bl	e2e94 <__aeabi_ddiv>
   e0efe:	4602      	mov	r2, r0
   e0f00:	460b      	mov	r3, r1
   e0f02:	4650      	mov	r0, sl
   e0f04:	4659      	mov	r1, fp
   e0f06:	f001 fce7 	bl	e28d8 <__aeabi_dsub>
   e0f0a:	4622      	mov	r2, r4
   e0f0c:	462b      	mov	r3, r5
   e0f0e:	f001 fe97 	bl	e2c40 <__aeabi_dmul>
   e0f12:	ec41 0b10 	vmov	d0, r0, r1
   e0f16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e0f1a:	4b33      	ldr	r3, [pc, #204]	; (e0fe8 <__ieee754_sinh+0x1c0>)
   e0f1c:	429e      	cmp	r6, r3
   e0f1e:	d8b4      	bhi.n	e0e8a <__ieee754_sinh+0x62>
   e0f20:	ec47 6b10 	vmov	d0, r6, r7
   e0f24:	f7fc fc84 	bl	dd830 <fabs>
   e0f28:	2200      	movs	r2, #0
   e0f2a:	4b2a      	ldr	r3, [pc, #168]	; (e0fd4 <__ieee754_sinh+0x1ac>)
   e0f2c:	ec51 0b10 	vmov	r0, r1, d0
   e0f30:	f001 fe86 	bl	e2c40 <__aeabi_dmul>
   e0f34:	ec41 0b10 	vmov	d0, r0, r1
   e0f38:	f7fe fa52 	bl	df3e0 <__ieee754_exp>
   e0f3c:	ec57 6b10 	vmov	r6, r7, d0
   e0f40:	ee10 2a10 	vmov	r2, s0
   e0f44:	463b      	mov	r3, r7
   e0f46:	4620      	mov	r0, r4
   e0f48:	4629      	mov	r1, r5
   e0f4a:	f001 fe79 	bl	e2c40 <__aeabi_dmul>
   e0f4e:	4632      	mov	r2, r6
   e0f50:	463b      	mov	r3, r7
   e0f52:	f001 fe75 	bl	e2c40 <__aeabi_dmul>
   e0f56:	ec41 0b10 	vmov	d0, r0, r1
   e0f5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e0f5e:	f7fc fc67 	bl	dd830 <fabs>
   e0f62:	f001 f919 	bl	e2198 <expm1>
   e0f66:	4b21      	ldr	r3, [pc, #132]	; (e0fec <__ieee754_sinh+0x1c4>)
   e0f68:	4598      	cmp	r8, r3
   e0f6a:	ec57 6b10 	vmov	r6, r7, d0
   e0f6e:	ddaa      	ble.n	e0ec6 <__ieee754_sinh+0x9e>
   e0f70:	ee10 0a10 	vmov	r0, s0
   e0f74:	2200      	movs	r2, #0
   e0f76:	4b19      	ldr	r3, [pc, #100]	; (e0fdc <__ieee754_sinh+0x1b4>)
   e0f78:	4639      	mov	r1, r7
   e0f7a:	f001 fcaf 	bl	e28dc <__adddf3>
   e0f7e:	4602      	mov	r2, r0
   e0f80:	460b      	mov	r3, r1
   e0f82:	4630      	mov	r0, r6
   e0f84:	4639      	mov	r1, r7
   e0f86:	f001 ff85 	bl	e2e94 <__aeabi_ddiv>
   e0f8a:	4632      	mov	r2, r6
   e0f8c:	463b      	mov	r3, r7
   e0f8e:	f001 fca5 	bl	e28dc <__adddf3>
   e0f92:	4622      	mov	r2, r4
   e0f94:	462b      	mov	r3, r5
   e0f96:	f001 fe53 	bl	e2c40 <__aeabi_dmul>
   e0f9a:	ec41 0b10 	vmov	d0, r0, r1
   e0f9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e0fa2:	f7fc fc45 	bl	dd830 <fabs>
   e0fa6:	f7fe fa1b 	bl	df3e0 <__ieee754_exp>
   e0faa:	4620      	mov	r0, r4
   e0fac:	ec53 2b10 	vmov	r2, r3, d0
   e0fb0:	4629      	mov	r1, r5
   e0fb2:	f001 fe45 	bl	e2c40 <__aeabi_dmul>
   e0fb6:	ec41 0b10 	vmov	d0, r0, r1
   e0fba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e0fbe:	bf00      	nop
   e0fc0:	3cac7433 	.word	0x3cac7433
   e0fc4:	7fac7b1f 	.word	0x7fac7b1f
   e0fc8:	7fefffff 	.word	0x7fefffff
   e0fcc:	4035ffff 	.word	0x4035ffff
   e0fd0:	bfe00000 	.word	0xbfe00000
   e0fd4:	3fe00000 	.word	0x3fe00000
   e0fd8:	3e2fffff 	.word	0x3e2fffff
   e0fdc:	3ff00000 	.word	0x3ff00000
   e0fe0:	40862e41 	.word	0x40862e41
   e0fe4:	408633cd 	.word	0x408633cd
   e0fe8:	8fb9f87d 	.word	0x8fb9f87d
   e0fec:	3fefffff 	.word	0x3fefffff

000e0ff0 <__ieee754_sqrt>:
   e0ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e0ff4:	4965      	ldr	r1, [pc, #404]	; (e118c <__ieee754_sqrt+0x19c>)
   e0ff6:	ec55 4b10 	vmov	r4, r5, d0
   e0ffa:	460e      	mov	r6, r1
   e0ffc:	4029      	ands	r1, r5
   e0ffe:	42b1      	cmp	r1, r6
   e1000:	f000 8097 	beq.w	e1132 <__ieee754_sqrt+0x142>
   e1004:	2d00      	cmp	r5, #0
   e1006:	462b      	mov	r3, r5
   e1008:	ee10 2a10 	vmov	r2, s0
   e100c:	dd74      	ble.n	e10f8 <__ieee754_sqrt+0x108>
   e100e:	152f      	asrs	r7, r5, #20
   e1010:	d07f      	beq.n	e1112 <__ieee754_sqrt+0x122>
   e1012:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   e1016:	f3c3 0313 	ubfx	r3, r3, #0, #20
   e101a:	07f9      	lsls	r1, r7, #31
   e101c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   e1020:	d465      	bmi.n	e10ee <__ieee754_sqrt+0xfe>
   e1022:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   e1026:	2600      	movs	r6, #0
   e1028:	440b      	add	r3, r1
   e102a:	107f      	asrs	r7, r7, #1
   e102c:	0052      	lsls	r2, r2, #1
   e102e:	46b6      	mov	lr, r6
   e1030:	2016      	movs	r0, #22
   e1032:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   e1036:	eb0e 0401 	add.w	r4, lr, r1
   e103a:	429c      	cmp	r4, r3
   e103c:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   e1040:	ea4f 0242 	mov.w	r2, r2, lsl #1
   e1044:	dc03      	bgt.n	e104e <__ieee754_sqrt+0x5e>
   e1046:	1b1b      	subs	r3, r3, r4
   e1048:	eb04 0e01 	add.w	lr, r4, r1
   e104c:	440e      	add	r6, r1
   e104e:	3801      	subs	r0, #1
   e1050:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   e1054:	ea4f 0151 	mov.w	r1, r1, lsr #1
   e1058:	d1ed      	bne.n	e1036 <__ieee754_sqrt+0x46>
   e105a:	4684      	mov	ip, r0
   e105c:	2420      	movs	r4, #32
   e105e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   e1062:	e009      	b.n	e1078 <__ieee754_sqrt+0x88>
   e1064:	d020      	beq.n	e10a8 <__ieee754_sqrt+0xb8>
   e1066:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   e106a:	3c01      	subs	r4, #1
   e106c:	ea4f 0151 	mov.w	r1, r1, lsr #1
   e1070:	442b      	add	r3, r5
   e1072:	ea4f 0242 	mov.w	r2, r2, lsl #1
   e1076:	d020      	beq.n	e10ba <__ieee754_sqrt+0xca>
   e1078:	459e      	cmp	lr, r3
   e107a:	eb01 050c 	add.w	r5, r1, ip
   e107e:	daf1      	bge.n	e1064 <__ieee754_sqrt+0x74>
   e1080:	2d00      	cmp	r5, #0
   e1082:	eb05 0c01 	add.w	ip, r5, r1
   e1086:	db09      	blt.n	e109c <__ieee754_sqrt+0xac>
   e1088:	46f0      	mov	r8, lr
   e108a:	4295      	cmp	r5, r2
   e108c:	ebce 0303 	rsb	r3, lr, r3
   e1090:	d900      	bls.n	e1094 <__ieee754_sqrt+0xa4>
   e1092:	3b01      	subs	r3, #1
   e1094:	1b52      	subs	r2, r2, r5
   e1096:	4408      	add	r0, r1
   e1098:	46c6      	mov	lr, r8
   e109a:	e7e4      	b.n	e1066 <__ieee754_sqrt+0x76>
   e109c:	f1bc 0f00 	cmp.w	ip, #0
   e10a0:	dbf2      	blt.n	e1088 <__ieee754_sqrt+0x98>
   e10a2:	f10e 0801 	add.w	r8, lr, #1
   e10a6:	e7f0      	b.n	e108a <__ieee754_sqrt+0x9a>
   e10a8:	4295      	cmp	r5, r2
   e10aa:	d81e      	bhi.n	e10ea <__ieee754_sqrt+0xfa>
   e10ac:	2d00      	cmp	r5, #0
   e10ae:	eb05 0c01 	add.w	ip, r5, r1
   e10b2:	db50      	blt.n	e1156 <__ieee754_sqrt+0x166>
   e10b4:	4698      	mov	r8, r3
   e10b6:	2300      	movs	r3, #0
   e10b8:	e7ec      	b.n	e1094 <__ieee754_sqrt+0xa4>
   e10ba:	4313      	orrs	r3, r2
   e10bc:	d004      	beq.n	e10c8 <__ieee754_sqrt+0xd8>
   e10be:	1c42      	adds	r2, r0, #1
   e10c0:	d04d      	beq.n	e115e <__ieee754_sqrt+0x16e>
   e10c2:	f000 0301 	and.w	r3, r0, #1
   e10c6:	4418      	add	r0, r3
   e10c8:	0840      	lsrs	r0, r0, #1
   e10ca:	1071      	asrs	r1, r6, #1
   e10cc:	07f3      	lsls	r3, r6, #31
   e10ce:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   e10d2:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   e10d6:	bf48      	it	mi
   e10d8:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   e10dc:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   e10e0:	4602      	mov	r2, r0
   e10e2:	ec43 2b10 	vmov	d0, r2, r3
   e10e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e10ea:	4673      	mov	r3, lr
   e10ec:	e7bb      	b.n	e1066 <__ieee754_sqrt+0x76>
   e10ee:	005b      	lsls	r3, r3, #1
   e10f0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   e10f4:	0052      	lsls	r2, r2, #1
   e10f6:	e794      	b.n	e1022 <__ieee754_sqrt+0x32>
   e10f8:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   e10fc:	4321      	orrs	r1, r4
   e10fe:	d028      	beq.n	e1152 <__ieee754_sqrt+0x162>
   e1100:	bbad      	cbnz	r5, e116e <__ieee754_sqrt+0x17e>
   e1102:	462f      	mov	r7, r5
   e1104:	0ad3      	lsrs	r3, r2, #11
   e1106:	3f15      	subs	r7, #21
   e1108:	0552      	lsls	r2, r2, #21
   e110a:	2b00      	cmp	r3, #0
   e110c:	d0fa      	beq.n	e1104 <__ieee754_sqrt+0x114>
   e110e:	02dd      	lsls	r5, r3, #11
   e1110:	d428      	bmi.n	e1164 <__ieee754_sqrt+0x174>
   e1112:	2100      	movs	r1, #0
   e1114:	e000      	b.n	e1118 <__ieee754_sqrt+0x128>
   e1116:	4601      	mov	r1, r0
   e1118:	005b      	lsls	r3, r3, #1
   e111a:	02dc      	lsls	r4, r3, #11
   e111c:	f101 0001 	add.w	r0, r1, #1
   e1120:	d5f9      	bpl.n	e1116 <__ieee754_sqrt+0x126>
   e1122:	f1c0 0420 	rsb	r4, r0, #32
   e1126:	fa22 f404 	lsr.w	r4, r2, r4
   e112a:	4323      	orrs	r3, r4
   e112c:	1a7f      	subs	r7, r7, r1
   e112e:	4082      	lsls	r2, r0
   e1130:	e76f      	b.n	e1012 <__ieee754_sqrt+0x22>
   e1132:	ee10 2a10 	vmov	r2, s0
   e1136:	462b      	mov	r3, r5
   e1138:	ee10 0a10 	vmov	r0, s0
   e113c:	4629      	mov	r1, r5
   e113e:	f001 fd7f 	bl	e2c40 <__aeabi_dmul>
   e1142:	4622      	mov	r2, r4
   e1144:	462b      	mov	r3, r5
   e1146:	f001 fbc9 	bl	e28dc <__adddf3>
   e114a:	ec41 0b10 	vmov	d0, r0, r1
   e114e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e1152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e1156:	f1bc 0f00 	cmp.w	ip, #0
   e115a:	daa2      	bge.n	e10a2 <__ieee754_sqrt+0xb2>
   e115c:	e7aa      	b.n	e10b4 <__ieee754_sqrt+0xc4>
   e115e:	3601      	adds	r6, #1
   e1160:	4620      	mov	r0, r4
   e1162:	e7b2      	b.n	e10ca <__ieee754_sqrt+0xda>
   e1164:	2420      	movs	r4, #32
   e1166:	f04f 31ff 	mov.w	r1, #4294967295
   e116a:	2000      	movs	r0, #0
   e116c:	e7db      	b.n	e1126 <__ieee754_sqrt+0x136>
   e116e:	ee10 2a10 	vmov	r2, s0
   e1172:	462b      	mov	r3, r5
   e1174:	4620      	mov	r0, r4
   e1176:	4629      	mov	r1, r5
   e1178:	f001 fbae 	bl	e28d8 <__aeabi_dsub>
   e117c:	4602      	mov	r2, r0
   e117e:	460b      	mov	r3, r1
   e1180:	f001 fe88 	bl	e2e94 <__aeabi_ddiv>
   e1184:	ec41 0b10 	vmov	d0, r0, r1
   e1188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e118c:	7ff00000 	.word	0x7ff00000

000e1190 <__kernel_cos>:
   e1190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e1194:	ec57 6b10 	vmov	r6, r7, d0
   e1198:	ed2d 8b02 	vpush	{d8}
   e119c:	eeb0 8a41 	vmov.f32	s16, s2
   e11a0:	eef0 8a61 	vmov.f32	s17, s3
   e11a4:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   e11a8:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
   e11ac:	b083      	sub	sp, #12
   e11ae:	da72      	bge.n	e1296 <__kernel_cos+0x106>
   e11b0:	ee10 0a10 	vmov	r0, s0
   e11b4:	4639      	mov	r1, r7
   e11b6:	f001 fff3 	bl	e31a0 <__aeabi_d2iz>
   e11ba:	2800      	cmp	r0, #0
   e11bc:	f000 80f6 	beq.w	e13ac <__kernel_cos+0x21c>
   e11c0:	4632      	mov	r2, r6
   e11c2:	463b      	mov	r3, r7
   e11c4:	4630      	mov	r0, r6
   e11c6:	4639      	mov	r1, r7
   e11c8:	f001 fd3a 	bl	e2c40 <__aeabi_dmul>
   e11cc:	a37c      	add	r3, pc, #496	; (adr r3, e13c0 <__kernel_cos+0x230>)
   e11ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   e11d2:	4604      	mov	r4, r0
   e11d4:	460d      	mov	r5, r1
   e11d6:	f001 fd33 	bl	e2c40 <__aeabi_dmul>
   e11da:	a37b      	add	r3, pc, #492	; (adr r3, e13c8 <__kernel_cos+0x238>)
   e11dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   e11e0:	f001 fb7c 	bl	e28dc <__adddf3>
   e11e4:	4622      	mov	r2, r4
   e11e6:	462b      	mov	r3, r5
   e11e8:	f001 fd2a 	bl	e2c40 <__aeabi_dmul>
   e11ec:	a378      	add	r3, pc, #480	; (adr r3, e13d0 <__kernel_cos+0x240>)
   e11ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   e11f2:	f001 fb71 	bl	e28d8 <__aeabi_dsub>
   e11f6:	4622      	mov	r2, r4
   e11f8:	462b      	mov	r3, r5
   e11fa:	f001 fd21 	bl	e2c40 <__aeabi_dmul>
   e11fe:	a376      	add	r3, pc, #472	; (adr r3, e13d8 <__kernel_cos+0x248>)
   e1200:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1204:	f001 fb6a 	bl	e28dc <__adddf3>
   e1208:	4622      	mov	r2, r4
   e120a:	462b      	mov	r3, r5
   e120c:	f001 fd18 	bl	e2c40 <__aeabi_dmul>
   e1210:	a373      	add	r3, pc, #460	; (adr r3, e13e0 <__kernel_cos+0x250>)
   e1212:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1216:	f001 fb5f 	bl	e28d8 <__aeabi_dsub>
   e121a:	4622      	mov	r2, r4
   e121c:	462b      	mov	r3, r5
   e121e:	f001 fd0f 	bl	e2c40 <__aeabi_dmul>
   e1222:	a371      	add	r3, pc, #452	; (adr r3, e13e8 <__kernel_cos+0x258>)
   e1224:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1228:	f001 fb58 	bl	e28dc <__adddf3>
   e122c:	4622      	mov	r2, r4
   e122e:	462b      	mov	r3, r5
   e1230:	f001 fd06 	bl	e2c40 <__aeabi_dmul>
   e1234:	4682      	mov	sl, r0
   e1236:	468b      	mov	fp, r1
   e1238:	2200      	movs	r2, #0
   e123a:	4b71      	ldr	r3, [pc, #452]	; (e1400 <__kernel_cos+0x270>)
   e123c:	4620      	mov	r0, r4
   e123e:	4629      	mov	r1, r5
   e1240:	f001 fcfe 	bl	e2c40 <__aeabi_dmul>
   e1244:	4652      	mov	r2, sl
   e1246:	4680      	mov	r8, r0
   e1248:	4689      	mov	r9, r1
   e124a:	465b      	mov	r3, fp
   e124c:	4620      	mov	r0, r4
   e124e:	4629      	mov	r1, r5
   e1250:	f001 fcf6 	bl	e2c40 <__aeabi_dmul>
   e1254:	ec53 2b18 	vmov	r2, r3, d8
   e1258:	4604      	mov	r4, r0
   e125a:	460d      	mov	r5, r1
   e125c:	4630      	mov	r0, r6
   e125e:	4639      	mov	r1, r7
   e1260:	f001 fcee 	bl	e2c40 <__aeabi_dmul>
   e1264:	4602      	mov	r2, r0
   e1266:	460b      	mov	r3, r1
   e1268:	4620      	mov	r0, r4
   e126a:	4629      	mov	r1, r5
   e126c:	f001 fb34 	bl	e28d8 <__aeabi_dsub>
   e1270:	4602      	mov	r2, r0
   e1272:	460b      	mov	r3, r1
   e1274:	4640      	mov	r0, r8
   e1276:	4649      	mov	r1, r9
   e1278:	f001 fb2e 	bl	e28d8 <__aeabi_dsub>
   e127c:	4602      	mov	r2, r0
   e127e:	460b      	mov	r3, r1
   e1280:	2000      	movs	r0, #0
   e1282:	4960      	ldr	r1, [pc, #384]	; (e1404 <__kernel_cos+0x274>)
   e1284:	f001 fb28 	bl	e28d8 <__aeabi_dsub>
   e1288:	ec41 0b10 	vmov	d0, r0, r1
   e128c:	b003      	add	sp, #12
   e128e:	ecbd 8b02 	vpop	{d8}
   e1292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1296:	ee10 2a10 	vmov	r2, s0
   e129a:	ee10 0a10 	vmov	r0, s0
   e129e:	463b      	mov	r3, r7
   e12a0:	4639      	mov	r1, r7
   e12a2:	f001 fccd 	bl	e2c40 <__aeabi_dmul>
   e12a6:	a346      	add	r3, pc, #280	; (adr r3, e13c0 <__kernel_cos+0x230>)
   e12a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   e12ac:	4604      	mov	r4, r0
   e12ae:	460d      	mov	r5, r1
   e12b0:	f001 fcc6 	bl	e2c40 <__aeabi_dmul>
   e12b4:	a344      	add	r3, pc, #272	; (adr r3, e13c8 <__kernel_cos+0x238>)
   e12b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   e12ba:	f001 fb0f 	bl	e28dc <__adddf3>
   e12be:	4622      	mov	r2, r4
   e12c0:	462b      	mov	r3, r5
   e12c2:	f001 fcbd 	bl	e2c40 <__aeabi_dmul>
   e12c6:	a342      	add	r3, pc, #264	; (adr r3, e13d0 <__kernel_cos+0x240>)
   e12c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   e12cc:	f001 fb04 	bl	e28d8 <__aeabi_dsub>
   e12d0:	4622      	mov	r2, r4
   e12d2:	462b      	mov	r3, r5
   e12d4:	f001 fcb4 	bl	e2c40 <__aeabi_dmul>
   e12d8:	a33f      	add	r3, pc, #252	; (adr r3, e13d8 <__kernel_cos+0x248>)
   e12da:	e9d3 2300 	ldrd	r2, r3, [r3]
   e12de:	f001 fafd 	bl	e28dc <__adddf3>
   e12e2:	4622      	mov	r2, r4
   e12e4:	462b      	mov	r3, r5
   e12e6:	f001 fcab 	bl	e2c40 <__aeabi_dmul>
   e12ea:	a33d      	add	r3, pc, #244	; (adr r3, e13e0 <__kernel_cos+0x250>)
   e12ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   e12f0:	f001 faf2 	bl	e28d8 <__aeabi_dsub>
   e12f4:	4622      	mov	r2, r4
   e12f6:	462b      	mov	r3, r5
   e12f8:	f001 fca2 	bl	e2c40 <__aeabi_dmul>
   e12fc:	a33a      	add	r3, pc, #232	; (adr r3, e13e8 <__kernel_cos+0x258>)
   e12fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1302:	f001 faeb 	bl	e28dc <__adddf3>
   e1306:	462b      	mov	r3, r5
   e1308:	4622      	mov	r2, r4
   e130a:	f001 fc99 	bl	e2c40 <__aeabi_dmul>
   e130e:	4b3e      	ldr	r3, [pc, #248]	; (e1408 <__kernel_cos+0x278>)
   e1310:	4599      	cmp	r9, r3
   e1312:	4682      	mov	sl, r0
   e1314:	468b      	mov	fp, r1
   e1316:	dd8f      	ble.n	e1238 <__kernel_cos+0xa8>
   e1318:	4b3c      	ldr	r3, [pc, #240]	; (e140c <__kernel_cos+0x27c>)
   e131a:	4599      	cmp	r9, r3
   e131c:	dc3d      	bgt.n	e139a <__kernel_cos+0x20a>
   e131e:	2200      	movs	r2, #0
   e1320:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
   e1324:	2000      	movs	r0, #0
   e1326:	4937      	ldr	r1, [pc, #220]	; (e1404 <__kernel_cos+0x274>)
   e1328:	4690      	mov	r8, r2
   e132a:	4699      	mov	r9, r3
   e132c:	f001 fad4 	bl	e28d8 <__aeabi_dsub>
   e1330:	e9cd 0100 	strd	r0, r1, [sp]
   e1334:	2200      	movs	r2, #0
   e1336:	4b32      	ldr	r3, [pc, #200]	; (e1400 <__kernel_cos+0x270>)
   e1338:	4620      	mov	r0, r4
   e133a:	4629      	mov	r1, r5
   e133c:	f001 fc80 	bl	e2c40 <__aeabi_dmul>
   e1340:	4642      	mov	r2, r8
   e1342:	464b      	mov	r3, r9
   e1344:	f001 fac8 	bl	e28d8 <__aeabi_dsub>
   e1348:	4652      	mov	r2, sl
   e134a:	4680      	mov	r8, r0
   e134c:	4689      	mov	r9, r1
   e134e:	465b      	mov	r3, fp
   e1350:	4620      	mov	r0, r4
   e1352:	4629      	mov	r1, r5
   e1354:	f001 fc74 	bl	e2c40 <__aeabi_dmul>
   e1358:	ec53 2b18 	vmov	r2, r3, d8
   e135c:	4604      	mov	r4, r0
   e135e:	460d      	mov	r5, r1
   e1360:	4630      	mov	r0, r6
   e1362:	4639      	mov	r1, r7
   e1364:	f001 fc6c 	bl	e2c40 <__aeabi_dmul>
   e1368:	4602      	mov	r2, r0
   e136a:	460b      	mov	r3, r1
   e136c:	4620      	mov	r0, r4
   e136e:	4629      	mov	r1, r5
   e1370:	f001 fab2 	bl	e28d8 <__aeabi_dsub>
   e1374:	4602      	mov	r2, r0
   e1376:	460b      	mov	r3, r1
   e1378:	4640      	mov	r0, r8
   e137a:	4649      	mov	r1, r9
   e137c:	f001 faac 	bl	e28d8 <__aeabi_dsub>
   e1380:	4602      	mov	r2, r0
   e1382:	460b      	mov	r3, r1
   e1384:	e9dd 0100 	ldrd	r0, r1, [sp]
   e1388:	f001 faa6 	bl	e28d8 <__aeabi_dsub>
   e138c:	ec41 0b10 	vmov	d0, r0, r1
   e1390:	b003      	add	sp, #12
   e1392:	ecbd 8b02 	vpop	{d8}
   e1396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e139a:	ed9f 7b15 	vldr	d7, [pc, #84]	; e13f0 <__kernel_cos+0x260>
   e139e:	f04f 0800 	mov.w	r8, #0
   e13a2:	ed8d 7b00 	vstr	d7, [sp]
   e13a6:	f8df 9068 	ldr.w	r9, [pc, #104]	; e1410 <__kernel_cos+0x280>
   e13aa:	e7c3      	b.n	e1334 <__kernel_cos+0x1a4>
   e13ac:	ed9f 0b12 	vldr	d0, [pc, #72]	; e13f8 <__kernel_cos+0x268>
   e13b0:	b003      	add	sp, #12
   e13b2:	ecbd 8b02 	vpop	{d8}
   e13b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e13ba:	bf00      	nop
   e13bc:	f3af 8000 	nop.w
   e13c0:	be8838d4 	.word	0xbe8838d4
   e13c4:	bda8fae9 	.word	0xbda8fae9
   e13c8:	bdb4b1c4 	.word	0xbdb4b1c4
   e13cc:	3e21ee9e 	.word	0x3e21ee9e
   e13d0:	809c52ad 	.word	0x809c52ad
   e13d4:	3e927e4f 	.word	0x3e927e4f
   e13d8:	19cb1590 	.word	0x19cb1590
   e13dc:	3efa01a0 	.word	0x3efa01a0
   e13e0:	16c15177 	.word	0x16c15177
   e13e4:	3f56c16c 	.word	0x3f56c16c
   e13e8:	5555554c 	.word	0x5555554c
   e13ec:	3fa55555 	.word	0x3fa55555
   e13f0:	00000000 	.word	0x00000000
   e13f4:	3fe70000 	.word	0x3fe70000
   e13f8:	00000000 	.word	0x00000000
   e13fc:	3ff00000 	.word	0x3ff00000
   e1400:	3fe00000 	.word	0x3fe00000
   e1404:	3ff00000 	.word	0x3ff00000
   e1408:	3fd33332 	.word	0x3fd33332
   e140c:	3fe90000 	.word	0x3fe90000
   e1410:	3fd20000 	.word	0x3fd20000
   e1414:	00000000 	.word	0x00000000

000e1418 <__kernel_rem_pio2>:
   e1418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e141c:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
   e1420:	4c81      	ldr	r4, [pc, #516]	; (e1628 <__kernel_rem_pio2+0x210>)
   e1422:	9ea4      	ldr	r6, [sp, #656]	; 0x290
   e1424:	4d81      	ldr	r5, [pc, #516]	; (e162c <__kernel_rem_pio2+0x214>)
   e1426:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
   e142a:	9407      	str	r4, [sp, #28]
   e142c:	4626      	mov	r6, r4
   e142e:	1ed4      	subs	r4, r2, #3
   e1430:	fb85 7504 	smull	r7, r5, r5, r4
   e1434:	17e4      	asrs	r4, r4, #31
   e1436:	ebc4 04a5 	rsb	r4, r4, r5, asr #2
   e143a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   e143e:	461d      	mov	r5, r3
   e1440:	930a      	str	r3, [sp, #40]	; 0x28
   e1442:	1c63      	adds	r3, r4, #1
   e1444:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   e1448:	3d01      	subs	r5, #1
   e144a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   e144e:	9306      	str	r3, [sp, #24]
   e1450:	462b      	mov	r3, r5
   e1452:	940b      	str	r4, [sp, #44]	; 0x2c
   e1454:	9500      	str	r5, [sp, #0]
   e1456:	1b65      	subs	r5, r4, r5
   e1458:	18f4      	adds	r4, r6, r3
   e145a:	9003      	str	r0, [sp, #12]
   e145c:	9108      	str	r1, [sp, #32]
   e145e:	d416      	bmi.n	e148e <__kernel_rem_pio2+0x76>
   e1460:	442c      	add	r4, r5
   e1462:	3401      	adds	r4, #1
   e1464:	ae22      	add	r6, sp, #136	; 0x88
   e1466:	9fa5      	ldr	r7, [sp, #660]	; 0x294
   e1468:	e008      	b.n	e147c <__kernel_rem_pio2+0x64>
   e146a:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   e146e:	f001 fb81 	bl	e2b74 <__aeabi_i2d>
   e1472:	3501      	adds	r5, #1
   e1474:	42a5      	cmp	r5, r4
   e1476:	e8e6 0102 	strd	r0, r1, [r6], #8
   e147a:	d008      	beq.n	e148e <__kernel_rem_pio2+0x76>
   e147c:	2d00      	cmp	r5, #0
   e147e:	daf4      	bge.n	e146a <__kernel_rem_pio2+0x52>
   e1480:	3501      	adds	r5, #1
   e1482:	2000      	movs	r0, #0
   e1484:	2100      	movs	r1, #0
   e1486:	42a5      	cmp	r5, r4
   e1488:	e8e6 0102 	strd	r0, r1, [r6], #8
   e148c:	d1f6      	bne.n	e147c <__kernel_rem_pio2+0x64>
   e148e:	9b07      	ldr	r3, [sp, #28]
   e1490:	2b00      	cmp	r3, #0
   e1492:	f2c0 83c2 	blt.w	e1c1a <__kernel_rem_pio2+0x802>
   e1496:	9b07      	ldr	r3, [sp, #28]
   e1498:	f103 0b01 	add.w	fp, r3, #1
   e149c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e149e:	a922      	add	r1, sp, #136	; 0x88
   e14a0:	00db      	lsls	r3, r3, #3
   e14a2:	461a      	mov	r2, r3
   e14a4:	eb01 0903 	add.w	r9, r1, r3
   e14a8:	9304      	str	r3, [sp, #16]
   e14aa:	9b03      	ldr	r3, [sp, #12]
   e14ac:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
   e14b0:	4619      	mov	r1, r3
   e14b2:	eb0a 0bcb 	add.w	fp, sl, fp, lsl #3
   e14b6:	eb01 0802 	add.w	r8, r1, r2
   e14ba:	9b00      	ldr	r3, [sp, #0]
   e14bc:	2b00      	cmp	r3, #0
   e14be:	f2c0 818f 	blt.w	e17e0 <__kernel_rem_pio2+0x3c8>
   e14c2:	9c03      	ldr	r4, [sp, #12]
   e14c4:	464d      	mov	r5, r9
   e14c6:	2600      	movs	r6, #0
   e14c8:	2700      	movs	r7, #0
   e14ca:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   e14ce:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   e14d2:	f001 fbb5 	bl	e2c40 <__aeabi_dmul>
   e14d6:	4602      	mov	r2, r0
   e14d8:	460b      	mov	r3, r1
   e14da:	4630      	mov	r0, r6
   e14dc:	4639      	mov	r1, r7
   e14de:	f001 f9fd 	bl	e28dc <__adddf3>
   e14e2:	4544      	cmp	r4, r8
   e14e4:	4606      	mov	r6, r0
   e14e6:	460f      	mov	r7, r1
   e14e8:	d1ef      	bne.n	e14ca <__kernel_rem_pio2+0xb2>
   e14ea:	e8ea 6702 	strd	r6, r7, [sl], #8
   e14ee:	45da      	cmp	sl, fp
   e14f0:	f109 0908 	add.w	r9, r9, #8
   e14f4:	d1e1      	bne.n	e14ba <__kernel_rem_pio2+0xa2>
   e14f6:	9907      	ldr	r1, [sp, #28]
   e14f8:	9804      	ldr	r0, [sp, #16]
   e14fa:	9c03      	ldr	r4, [sp, #12]
   e14fc:	9104      	str	r1, [sp, #16]
   e14fe:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
   e1502:	3b02      	subs	r3, #2
   e1504:	009b      	lsls	r3, r3, #2
   e1506:	4420      	add	r0, r4
   e1508:	1d1a      	adds	r2, r3, #4
   e150a:	4683      	mov	fp, r0
   e150c:	a80e      	add	r0, sp, #56	; 0x38
   e150e:	4402      	add	r2, r0
   e1510:	4403      	add	r3, r0
   e1512:	920d      	str	r2, [sp, #52]	; 0x34
   e1514:	930c      	str	r3, [sp, #48]	; 0x30
   e1516:	9a04      	ldr	r2, [sp, #16]
   e1518:	a99a      	add	r1, sp, #616	; 0x268
   e151a:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   e151e:	2a00      	cmp	r2, #0
   e1520:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
   e1524:	dd29      	ble.n	e157a <__kernel_rem_pio2+0x162>
   e1526:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
   e152a:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
   e152e:	f10d 0934 	add.w	r9, sp, #52	; 0x34
   e1532:	2200      	movs	r2, #0
   e1534:	4b3e      	ldr	r3, [pc, #248]	; (e1630 <__kernel_rem_pio2+0x218>)
   e1536:	4620      	mov	r0, r4
   e1538:	4629      	mov	r1, r5
   e153a:	f001 fb81 	bl	e2c40 <__aeabi_dmul>
   e153e:	f001 fe2f 	bl	e31a0 <__aeabi_d2iz>
   e1542:	f001 fb17 	bl	e2b74 <__aeabi_i2d>
   e1546:	2200      	movs	r2, #0
   e1548:	4b3a      	ldr	r3, [pc, #232]	; (e1634 <__kernel_rem_pio2+0x21c>)
   e154a:	4606      	mov	r6, r0
   e154c:	460f      	mov	r7, r1
   e154e:	f001 fb77 	bl	e2c40 <__aeabi_dmul>
   e1552:	4602      	mov	r2, r0
   e1554:	460b      	mov	r3, r1
   e1556:	4620      	mov	r0, r4
   e1558:	4629      	mov	r1, r5
   e155a:	f001 f9bd 	bl	e28d8 <__aeabi_dsub>
   e155e:	f001 fe1f 	bl	e31a0 <__aeabi_d2iz>
   e1562:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
   e1566:	f849 0f04 	str.w	r0, [r9, #4]!
   e156a:	4639      	mov	r1, r7
   e156c:	4630      	mov	r0, r6
   e156e:	f001 f9b5 	bl	e28dc <__adddf3>
   e1572:	45d0      	cmp	r8, sl
   e1574:	4604      	mov	r4, r0
   e1576:	460d      	mov	r5, r1
   e1578:	d1db      	bne.n	e1532 <__kernel_rem_pio2+0x11a>
   e157a:	f8dd 9018 	ldr.w	r9, [sp, #24]
   e157e:	ec45 4b10 	vmov	d0, r4, r5
   e1582:	4648      	mov	r0, r9
   e1584:	f001 f910 	bl	e27a8 <scalbn>
   e1588:	ec55 4b10 	vmov	r4, r5, d0
   e158c:	2200      	movs	r2, #0
   e158e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   e1592:	ee10 0a10 	vmov	r0, s0
   e1596:	4629      	mov	r1, r5
   e1598:	f001 fb52 	bl	e2c40 <__aeabi_dmul>
   e159c:	ec41 0b10 	vmov	d0, r0, r1
   e15a0:	f7fc f94e 	bl	dd840 <floor>
   e15a4:	2200      	movs	r2, #0
   e15a6:	ec51 0b10 	vmov	r0, r1, d0
   e15aa:	4b23      	ldr	r3, [pc, #140]	; (e1638 <__kernel_rem_pio2+0x220>)
   e15ac:	f001 fb48 	bl	e2c40 <__aeabi_dmul>
   e15b0:	4602      	mov	r2, r0
   e15b2:	460b      	mov	r3, r1
   e15b4:	4620      	mov	r0, r4
   e15b6:	4629      	mov	r1, r5
   e15b8:	f001 f98e 	bl	e28d8 <__aeabi_dsub>
   e15bc:	460d      	mov	r5, r1
   e15be:	4604      	mov	r4, r0
   e15c0:	f001 fdee 	bl	e31a0 <__aeabi_d2iz>
   e15c4:	4680      	mov	r8, r0
   e15c6:	f001 fad5 	bl	e2b74 <__aeabi_i2d>
   e15ca:	460b      	mov	r3, r1
   e15cc:	4602      	mov	r2, r0
   e15ce:	4629      	mov	r1, r5
   e15d0:	4620      	mov	r0, r4
   e15d2:	f001 f981 	bl	e28d8 <__aeabi_dsub>
   e15d6:	464b      	mov	r3, r9
   e15d8:	2b00      	cmp	r3, #0
   e15da:	4606      	mov	r6, r0
   e15dc:	460f      	mov	r7, r1
   e15de:	f340 80e5 	ble.w	e17ac <__kernel_rem_pio2+0x394>
   e15e2:	9a04      	ldr	r2, [sp, #16]
   e15e4:	a90e      	add	r1, sp, #56	; 0x38
   e15e6:	3a01      	subs	r2, #1
   e15e8:	f1c9 0318 	rsb	r3, r9, #24
   e15ec:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   e15f0:	fa45 f103 	asr.w	r1, r5, r3
   e15f4:	fa01 f303 	lsl.w	r3, r1, r3
   e15f8:	a80e      	add	r0, sp, #56	; 0x38
   e15fa:	1aeb      	subs	r3, r5, r3
   e15fc:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   e1600:	f1c9 0517 	rsb	r5, r9, #23
   e1604:	4488      	add	r8, r1
   e1606:	fa43 f505 	asr.w	r5, r3, r5
   e160a:	2d00      	cmp	r5, #0
   e160c:	dd41      	ble.n	e1692 <__kernel_rem_pio2+0x27a>
   e160e:	9b04      	ldr	r3, [sp, #16]
   e1610:	2b00      	cmp	r3, #0
   e1612:	f108 0801 	add.w	r8, r8, #1
   e1616:	f340 82c9 	ble.w	e1bac <__kernel_rem_pio2+0x794>
   e161a:	2200      	movs	r2, #0
   e161c:	4614      	mov	r4, r2
   e161e:	a90d      	add	r1, sp, #52	; 0x34
   e1620:	9804      	ldr	r0, [sp, #16]
   e1622:	46ae      	mov	lr, r5
   e1624:	e012      	b.n	e164c <__kernel_rem_pio2+0x234>
   e1626:	bf00      	nop
   e1628:	000e8268 	.word	0x000e8268
   e162c:	2aaaaaab 	.word	0x2aaaaaab
   e1630:	3e700000 	.word	0x3e700000
   e1634:	41700000 	.word	0x41700000
   e1638:	40200000 	.word	0x40200000
   e163c:	f1c3 7580 	rsb	r5, r3, #16777216	; 0x1000000
   e1640:	b10b      	cbz	r3, e1646 <__kernel_rem_pio2+0x22e>
   e1642:	600d      	str	r5, [r1, #0]
   e1644:	2401      	movs	r4, #1
   e1646:	3201      	adds	r2, #1
   e1648:	4290      	cmp	r0, r2
   e164a:	dd0d      	ble.n	e1668 <__kernel_rem_pio2+0x250>
   e164c:	f851 3f04 	ldr.w	r3, [r1, #4]!
   e1650:	2c00      	cmp	r4, #0
   e1652:	d0f3      	beq.n	e163c <__kernel_rem_pio2+0x224>
   e1654:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
   e1658:	3201      	adds	r2, #1
   e165a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   e165e:	4290      	cmp	r0, r2
   e1660:	600b      	str	r3, [r1, #0]
   e1662:	f04f 0401 	mov.w	r4, #1
   e1666:	dcf1      	bgt.n	e164c <__kernel_rem_pio2+0x234>
   e1668:	4675      	mov	r5, lr
   e166a:	9b06      	ldr	r3, [sp, #24]
   e166c:	2b00      	cmp	r3, #0
   e166e:	dd0e      	ble.n	e168e <__kernel_rem_pio2+0x276>
   e1670:	2b01      	cmp	r3, #1
   e1672:	f000 80a3 	beq.w	e17bc <__kernel_rem_pio2+0x3a4>
   e1676:	2b02      	cmp	r3, #2
   e1678:	d109      	bne.n	e168e <__kernel_rem_pio2+0x276>
   e167a:	9b04      	ldr	r3, [sp, #16]
   e167c:	1e5a      	subs	r2, r3, #1
   e167e:	ab0e      	add	r3, sp, #56	; 0x38
   e1680:	a90e      	add	r1, sp, #56	; 0x38
   e1682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   e1686:	f3c3 0315 	ubfx	r3, r3, #0, #22
   e168a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   e168e:	2d02      	cmp	r5, #2
   e1690:	d074      	beq.n	e177c <__kernel_rem_pio2+0x364>
   e1692:	2200      	movs	r2, #0
   e1694:	2300      	movs	r3, #0
   e1696:	4630      	mov	r0, r6
   e1698:	4639      	mov	r1, r7
   e169a:	f001 fd39 	bl	e3110 <__aeabi_dcmpeq>
   e169e:	2800      	cmp	r0, #0
   e16a0:	f000 8249 	beq.w	e1b36 <__kernel_rem_pio2+0x71e>
   e16a4:	9a04      	ldr	r2, [sp, #16]
   e16a6:	9b07      	ldr	r3, [sp, #28]
   e16a8:	1e50      	subs	r0, r2, #1
   e16aa:	4283      	cmp	r3, r0
   e16ac:	dc10      	bgt.n	e16d0 <__kernel_rem_pio2+0x2b8>
   e16ae:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   e16b2:	3b01      	subs	r3, #1
   e16b4:	aa0e      	add	r2, sp, #56	; 0x38
   e16b6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   e16b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   e16bc:	2200      	movs	r2, #0
   e16be:	f853 1904 	ldr.w	r1, [r3], #-4
   e16c2:	42a3      	cmp	r3, r4
   e16c4:	ea42 0201 	orr.w	r2, r2, r1
   e16c8:	d1f9      	bne.n	e16be <__kernel_rem_pio2+0x2a6>
   e16ca:	2a00      	cmp	r2, #0
   e16cc:	f040 80a4 	bne.w	e1818 <__kernel_rem_pio2+0x400>
   e16d0:	9b07      	ldr	r3, [sp, #28]
   e16d2:	aa0e      	add	r2, sp, #56	; 0x38
   e16d4:	3b01      	subs	r3, #1
   e16d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   e16da:	2b00      	cmp	r3, #0
   e16dc:	f040 8264 	bne.w	e1ba8 <__kernel_rem_pio2+0x790>
   e16e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   e16e2:	2301      	movs	r3, #1
   e16e4:	f852 1904 	ldr.w	r1, [r2], #-4
   e16e8:	3301      	adds	r3, #1
   e16ea:	2900      	cmp	r1, #0
   e16ec:	d0fa      	beq.n	e16e4 <__kernel_rem_pio2+0x2cc>
   e16ee:	9a04      	ldr	r2, [sp, #16]
   e16f0:	18d3      	adds	r3, r2, r3
   e16f2:	f102 0a01 	add.w	sl, r2, #1
   e16f6:	459a      	cmp	sl, r3
   e16f8:	9309      	str	r3, [sp, #36]	; 0x24
   e16fa:	dc3c      	bgt.n	e1776 <__kernel_rem_pio2+0x35e>
   e16fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   e16fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   e1700:	9909      	ldr	r1, [sp, #36]	; 0x24
   e1702:	eb0a 0903 	add.w	r9, sl, r3
   e1706:	9b04      	ldr	r3, [sp, #16]
   e1708:	4698      	mov	r8, r3
   e170a:	4490      	add	r8, r2
   e170c:	188b      	adds	r3, r1, r2
   e170e:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
   e1712:	9aa5      	ldr	r2, [sp, #660]	; 0x294
   e1714:	f109 39ff 	add.w	r9, r9, #4294967295
   e1718:	eb02 0989 	add.w	r9, r2, r9, lsl #2
   e171c:	aa22      	add	r2, sp, #136	; 0x88
   e171e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   e1722:	9304      	str	r3, [sp, #16]
   e1724:	ab72      	add	r3, sp, #456	; 0x1c8
   e1726:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
   e172a:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
   e172e:	f859 0f04 	ldr.w	r0, [r9, #4]!
   e1732:	f001 fa1f 	bl	e2b74 <__aeabi_i2d>
   e1736:	9b00      	ldr	r3, [sp, #0]
   e1738:	2b00      	cmp	r3, #0
   e173a:	e8e8 0102 	strd	r0, r1, [r8], #8
   e173e:	f04f 0600 	mov.w	r6, #0
   e1742:	f04f 0700 	mov.w	r7, #0
   e1746:	db11      	blt.n	e176c <__kernel_rem_pio2+0x354>
   e1748:	9c03      	ldr	r4, [sp, #12]
   e174a:	4645      	mov	r5, r8
   e174c:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   e1750:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   e1754:	f001 fa74 	bl	e2c40 <__aeabi_dmul>
   e1758:	4602      	mov	r2, r0
   e175a:	460b      	mov	r3, r1
   e175c:	4630      	mov	r0, r6
   e175e:	4639      	mov	r1, r7
   e1760:	f001 f8bc 	bl	e28dc <__adddf3>
   e1764:	455c      	cmp	r4, fp
   e1766:	4606      	mov	r6, r0
   e1768:	460f      	mov	r7, r1
   e176a:	d1ef      	bne.n	e174c <__kernel_rem_pio2+0x334>
   e176c:	9b04      	ldr	r3, [sp, #16]
   e176e:	4598      	cmp	r8, r3
   e1770:	e8ea 6702 	strd	r6, r7, [sl], #8
   e1774:	d1db      	bne.n	e172e <__kernel_rem_pio2+0x316>
   e1776:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e1778:	9304      	str	r3, [sp, #16]
   e177a:	e6cc      	b.n	e1516 <__kernel_rem_pio2+0xfe>
   e177c:	4632      	mov	r2, r6
   e177e:	463b      	mov	r3, r7
   e1780:	2000      	movs	r0, #0
   e1782:	49b3      	ldr	r1, [pc, #716]	; (e1a50 <__kernel_rem_pio2+0x638>)
   e1784:	f001 f8a8 	bl	e28d8 <__aeabi_dsub>
   e1788:	4606      	mov	r6, r0
   e178a:	460f      	mov	r7, r1
   e178c:	2c00      	cmp	r4, #0
   e178e:	d080      	beq.n	e1692 <__kernel_rem_pio2+0x27a>
   e1790:	9806      	ldr	r0, [sp, #24]
   e1792:	ed9f 0bab 	vldr	d0, [pc, #684]	; e1a40 <__kernel_rem_pio2+0x628>
   e1796:	f001 f807 	bl	e27a8 <scalbn>
   e179a:	4630      	mov	r0, r6
   e179c:	4639      	mov	r1, r7
   e179e:	ec53 2b10 	vmov	r2, r3, d0
   e17a2:	f001 f899 	bl	e28d8 <__aeabi_dsub>
   e17a6:	4606      	mov	r6, r0
   e17a8:	460f      	mov	r7, r1
   e17aa:	e772      	b.n	e1692 <__kernel_rem_pio2+0x27a>
   e17ac:	d111      	bne.n	e17d2 <__kernel_rem_pio2+0x3ba>
   e17ae:	9b04      	ldr	r3, [sp, #16]
   e17b0:	aa0e      	add	r2, sp, #56	; 0x38
   e17b2:	3b01      	subs	r3, #1
   e17b4:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   e17b8:	15ed      	asrs	r5, r5, #23
   e17ba:	e726      	b.n	e160a <__kernel_rem_pio2+0x1f2>
   e17bc:	9b04      	ldr	r3, [sp, #16]
   e17be:	1e5a      	subs	r2, r3, #1
   e17c0:	ab0e      	add	r3, sp, #56	; 0x38
   e17c2:	a90e      	add	r1, sp, #56	; 0x38
   e17c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   e17c8:	f3c3 0316 	ubfx	r3, r3, #0, #23
   e17cc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   e17d0:	e75d      	b.n	e168e <__kernel_rem_pio2+0x276>
   e17d2:	2200      	movs	r2, #0
   e17d4:	4b9f      	ldr	r3, [pc, #636]	; (e1a54 <__kernel_rem_pio2+0x63c>)
   e17d6:	f001 fcb9 	bl	e314c <__aeabi_dcmpge>
   e17da:	b958      	cbnz	r0, e17f4 <__kernel_rem_pio2+0x3dc>
   e17dc:	4605      	mov	r5, r0
   e17de:	e758      	b.n	e1692 <__kernel_rem_pio2+0x27a>
   e17e0:	2600      	movs	r6, #0
   e17e2:	2700      	movs	r7, #0
   e17e4:	e8ea 6702 	strd	r6, r7, [sl], #8
   e17e8:	45da      	cmp	sl, fp
   e17ea:	f109 0908 	add.w	r9, r9, #8
   e17ee:	f47f ae64 	bne.w	e14ba <__kernel_rem_pio2+0xa2>
   e17f2:	e680      	b.n	e14f6 <__kernel_rem_pio2+0xde>
   e17f4:	9b04      	ldr	r3, [sp, #16]
   e17f6:	2b00      	cmp	r3, #0
   e17f8:	f108 0801 	add.w	r8, r8, #1
   e17fc:	bfc8      	it	gt
   e17fe:	2502      	movgt	r5, #2
   e1800:	f73f af0b 	bgt.w	e161a <__kernel_rem_pio2+0x202>
   e1804:	4632      	mov	r2, r6
   e1806:	463b      	mov	r3, r7
   e1808:	2000      	movs	r0, #0
   e180a:	4991      	ldr	r1, [pc, #580]	; (e1a50 <__kernel_rem_pio2+0x638>)
   e180c:	f001 f864 	bl	e28d8 <__aeabi_dsub>
   e1810:	2502      	movs	r5, #2
   e1812:	4606      	mov	r6, r0
   e1814:	460f      	mov	r7, r1
   e1816:	e73c      	b.n	e1692 <__kernel_rem_pio2+0x27a>
   e1818:	a90e      	add	r1, sp, #56	; 0x38
   e181a:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   e181e:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
   e1822:	9906      	ldr	r1, [sp, #24]
   e1824:	9000      	str	r0, [sp, #0]
   e1826:	3918      	subs	r1, #24
   e1828:	4602      	mov	r2, r0
   e182a:	9503      	str	r5, [sp, #12]
   e182c:	9106      	str	r1, [sp, #24]
   e182e:	b96b      	cbnz	r3, e184c <__kernel_rem_pio2+0x434>
   e1830:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   e1834:	3b01      	subs	r3, #1
   e1836:	a80e      	add	r0, sp, #56	; 0x38
   e1838:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   e183c:	f853 0904 	ldr.w	r0, [r3], #-4
   e1840:	3a01      	subs	r2, #1
   e1842:	3918      	subs	r1, #24
   e1844:	2800      	cmp	r0, #0
   e1846:	d0f9      	beq.n	e183c <__kernel_rem_pio2+0x424>
   e1848:	9200      	str	r2, [sp, #0]
   e184a:	9106      	str	r1, [sp, #24]
   e184c:	9806      	ldr	r0, [sp, #24]
   e184e:	ed9f 0b7c 	vldr	d0, [pc, #496]	; e1a40 <__kernel_rem_pio2+0x628>
   e1852:	f000 ffa9 	bl	e27a8 <scalbn>
   e1856:	9b00      	ldr	r3, [sp, #0]
   e1858:	2b00      	cmp	r3, #0
   e185a:	ec55 4b10 	vmov	r4, r5, d0
   e185e:	f2c0 81c1 	blt.w	e1be4 <__kernel_rem_pio2+0x7cc>
   e1862:	00da      	lsls	r2, r3, #3
   e1864:	f50d 78e4 	add.w	r8, sp, #456	; 0x1c8
   e1868:	a90e      	add	r1, sp, #56	; 0x38
   e186a:	eb01 0683 	add.w	r6, r1, r3, lsl #2
   e186e:	eb08 0b02 	add.w	fp, r8, r2
   e1872:	9206      	str	r2, [sp, #24]
   e1874:	3604      	adds	r6, #4
   e1876:	f10b 0708 	add.w	r7, fp, #8
   e187a:	f856 0d04 	ldr.w	r0, [r6, #-4]!
   e187e:	f001 f979 	bl	e2b74 <__aeabi_i2d>
   e1882:	4622      	mov	r2, r4
   e1884:	462b      	mov	r3, r5
   e1886:	f001 f9db 	bl	e2c40 <__aeabi_dmul>
   e188a:	2200      	movs	r2, #0
   e188c:	e967 0102 	strd	r0, r1, [r7, #-8]!
   e1890:	4b71      	ldr	r3, [pc, #452]	; (e1a58 <__kernel_rem_pio2+0x640>)
   e1892:	4620      	mov	r0, r4
   e1894:	4629      	mov	r1, r5
   e1896:	f001 f9d3 	bl	e2c40 <__aeabi_dmul>
   e189a:	4547      	cmp	r7, r8
   e189c:	4604      	mov	r4, r0
   e189e:	460d      	mov	r5, r1
   e18a0:	d1eb      	bne.n	e187a <__kernel_rem_pio2+0x462>
   e18a2:	ac4a      	add	r4, sp, #296	; 0x128
   e18a4:	f8dd 901c 	ldr.w	r9, [sp, #28]
   e18a8:	9404      	str	r4, [sp, #16]
   e18aa:	f04f 0a00 	mov.w	sl, #0
   e18ae:	f1b9 0f00 	cmp.w	r9, #0
   e18b2:	f2c0 812b 	blt.w	e1b0c <__kernel_rem_pio2+0x6f4>
   e18b6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; e1a5c <__kernel_rem_pio2+0x644>
   e18ba:	465d      	mov	r5, fp
   e18bc:	a362      	add	r3, pc, #392	; (adr r3, e1a48 <__kernel_rem_pio2+0x630>)
   e18be:	e9d3 2300 	ldrd	r2, r3, [r3]
   e18c2:	2600      	movs	r6, #0
   e18c4:	2700      	movs	r7, #0
   e18c6:	2400      	movs	r4, #0
   e18c8:	e003      	b.n	e18d2 <__kernel_rem_pio2+0x4ba>
   e18ca:	45a2      	cmp	sl, r4
   e18cc:	db10      	blt.n	e18f0 <__kernel_rem_pio2+0x4d8>
   e18ce:	e8f8 2302 	ldrd	r2, r3, [r8], #8
   e18d2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
   e18d6:	f001 f9b3 	bl	e2c40 <__aeabi_dmul>
   e18da:	4602      	mov	r2, r0
   e18dc:	460b      	mov	r3, r1
   e18de:	4630      	mov	r0, r6
   e18e0:	4639      	mov	r1, r7
   e18e2:	f000 fffb 	bl	e28dc <__adddf3>
   e18e6:	3401      	adds	r4, #1
   e18e8:	45a1      	cmp	r9, r4
   e18ea:	4606      	mov	r6, r0
   e18ec:	460f      	mov	r7, r1
   e18ee:	daec      	bge.n	e18ca <__kernel_rem_pio2+0x4b2>
   e18f0:	9b04      	ldr	r3, [sp, #16]
   e18f2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   e18f6:	f1ab 0b08 	sub.w	fp, fp, #8
   e18fa:	e9c3 6700 	strd	r6, r7, [r3]
   e18fe:	ab70      	add	r3, sp, #448	; 0x1c0
   e1900:	459b      	cmp	fp, r3
   e1902:	f10a 0a01 	add.w	sl, sl, #1
   e1906:	d1d2      	bne.n	e18ae <__kernel_rem_pio2+0x496>
   e1908:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   e190a:	9c04      	ldr	r4, [sp, #16]
   e190c:	2b03      	cmp	r3, #3
   e190e:	f200 808d 	bhi.w	e1a2c <__kernel_rem_pio2+0x614>
   e1912:	e8df f013 	tbh	[pc, r3, lsl #1]
   e1916:	00dd      	.short	0x00dd
   e1918:	00a500a5 	.word	0x00a500a5
   e191c:	0004      	.short	0x0004
   e191e:	9b00      	ldr	r3, [sp, #0]
   e1920:	2b00      	cmp	r3, #0
   e1922:	f340 815c 	ble.w	e1bde <__kernel_rem_pio2+0x7c6>
   e1926:	9b00      	ldr	r3, [sp, #0]
   e1928:	f103 5b00 	add.w	fp, r3, #536870912	; 0x20000000
   e192c:	9b06      	ldr	r3, [sp, #24]
   e192e:	f10b 3bff 	add.w	fp, fp, #4294967295
   e1932:	18e2      	adds	r2, r4, r3
   e1934:	ea4f 03cb 	mov.w	r3, fp, lsl #3
   e1938:	e9d2 8900 	ldrd	r8, r9, [r2]
   e193c:	f103 0208 	add.w	r2, r3, #8
   e1940:	3310      	adds	r3, #16
   e1942:	eb04 0a02 	add.w	sl, r4, r2
   e1946:	18e5      	adds	r5, r4, r3
   e1948:	ed3a 7b02 	vldmdb	sl!, {d7}
   e194c:	4642      	mov	r2, r8
   e194e:	464b      	mov	r3, r9
   e1950:	ec51 0b17 	vmov	r0, r1, d7
   e1954:	ed8d 7b04 	vstr	d7, [sp, #16]
   e1958:	f000 ffc0 	bl	e28dc <__adddf3>
   e195c:	4606      	mov	r6, r0
   e195e:	460f      	mov	r7, r1
   e1960:	4602      	mov	r2, r0
   e1962:	460b      	mov	r3, r1
   e1964:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e1968:	f000 ffb6 	bl	e28d8 <__aeabi_dsub>
   e196c:	464b      	mov	r3, r9
   e196e:	4642      	mov	r2, r8
   e1970:	f000 ffb4 	bl	e28dc <__adddf3>
   e1974:	e965 0102 	strd	r0, r1, [r5, #-8]!
   e1978:	ab4c      	add	r3, sp, #304	; 0x130
   e197a:	429d      	cmp	r5, r3
   e197c:	46b0      	mov	r8, r6
   e197e:	46b9      	mov	r9, r7
   e1980:	e9ca 6700 	strd	r6, r7, [sl]
   e1984:	d1e0      	bne.n	e1948 <__kernel_rem_pio2+0x530>
   e1986:	9b00      	ldr	r3, [sp, #0]
   e1988:	2b01      	cmp	r3, #1
   e198a:	f340 8128 	ble.w	e1bde <__kernel_rem_pio2+0x7c6>
   e198e:	9b06      	ldr	r3, [sp, #24]
   e1990:	4423      	add	r3, r4
   e1992:	ed93 7b00 	vldr	d7, [r3]
   e1996:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   e199a:	f10b 0a10 	add.w	sl, fp, #16
   e199e:	ed8d 7b00 	vstr	d7, [sp]
   e19a2:	44a2      	add	sl, r4
   e19a4:	f10b 0b08 	add.w	fp, fp, #8
   e19a8:	eb04 050b 	add.w	r5, r4, fp
   e19ac:	46d0      	mov	r8, sl
   e19ae:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
   e19b2:	f8cd a010 	str.w	sl, [sp, #16]
   e19b6:	e975 9a02 	ldrd	r9, sl, [r5, #-8]!
   e19ba:	e9dd 0100 	ldrd	r0, r1, [sp]
   e19be:	464a      	mov	r2, r9
   e19c0:	4653      	mov	r3, sl
   e19c2:	f000 ff8b 	bl	e28dc <__adddf3>
   e19c6:	4606      	mov	r6, r0
   e19c8:	460f      	mov	r7, r1
   e19ca:	4602      	mov	r2, r0
   e19cc:	460b      	mov	r3, r1
   e19ce:	4648      	mov	r0, r9
   e19d0:	4651      	mov	r1, sl
   e19d2:	f000 ff81 	bl	e28d8 <__aeabi_dsub>
   e19d6:	e9dd 2300 	ldrd	r2, r3, [sp]
   e19da:	f000 ff7f 	bl	e28dc <__adddf3>
   e19de:	e968 0102 	strd	r0, r1, [r8, #-8]!
   e19e2:	45c3      	cmp	fp, r8
   e19e4:	e9cd 6700 	strd	r6, r7, [sp]
   e19e8:	e9c5 6700 	strd	r6, r7, [r5]
   e19ec:	d1e3      	bne.n	e19b6 <__kernel_rem_pio2+0x59e>
   e19ee:	f8dd a010 	ldr.w	sl, [sp, #16]
   e19f2:	2000      	movs	r0, #0
   e19f4:	2100      	movs	r1, #0
   e19f6:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
   e19fa:	f000 ff6f 	bl	e28dc <__adddf3>
   e19fe:	45d3      	cmp	fp, sl
   e1a00:	d1f9      	bne.n	e19f6 <__kernel_rem_pio2+0x5de>
   e1a02:	9b03      	ldr	r3, [sp, #12]
   e1a04:	2b00      	cmp	r3, #0
   e1a06:	f000 80d3 	beq.w	e1bb0 <__kernel_rem_pio2+0x798>
   e1a0a:	6862      	ldr	r2, [r4, #4]
   e1a0c:	68e3      	ldr	r3, [r4, #12]
   e1a0e:	9f08      	ldr	r7, [sp, #32]
   e1a10:	6825      	ldr	r5, [r4, #0]
   e1a12:	68a4      	ldr	r4, [r4, #8]
   e1a14:	603d      	str	r5, [r7, #0]
   e1a16:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   e1a1a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   e1a1e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   e1a22:	607a      	str	r2, [r7, #4]
   e1a24:	60fb      	str	r3, [r7, #12]
   e1a26:	60bc      	str	r4, [r7, #8]
   e1a28:	6138      	str	r0, [r7, #16]
   e1a2a:	6179      	str	r1, [r7, #20]
   e1a2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e1a2e:	f003 0007 	and.w	r0, r3, #7
   e1a32:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
   e1a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1a3a:	bf00      	nop
   e1a3c:	f3af 8000 	nop.w
   e1a40:	00000000 	.word	0x00000000
   e1a44:	3ff00000 	.word	0x3ff00000
   e1a48:	40000000 	.word	0x40000000
   e1a4c:	3ff921fb 	.word	0x3ff921fb
   e1a50:	3ff00000 	.word	0x3ff00000
   e1a54:	3fe00000 	.word	0x3fe00000
   e1a58:	3e700000 	.word	0x3e700000
   e1a5c:	000e8280 	.word	0x000e8280
   e1a60:	9d06      	ldr	r5, [sp, #24]
   e1a62:	3508      	adds	r5, #8
   e1a64:	4425      	add	r5, r4
   e1a66:	2000      	movs	r0, #0
   e1a68:	2100      	movs	r1, #0
   e1a6a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   e1a6e:	f000 ff35 	bl	e28dc <__adddf3>
   e1a72:	42a5      	cmp	r5, r4
   e1a74:	d1f9      	bne.n	e1a6a <__kernel_rem_pio2+0x652>
   e1a76:	9b03      	ldr	r3, [sp, #12]
   e1a78:	2b00      	cmp	r3, #0
   e1a7a:	d04a      	beq.n	e1b12 <__kernel_rem_pio2+0x6fa>
   e1a7c:	9e08      	ldr	r6, [sp, #32]
   e1a7e:	4602      	mov	r2, r0
   e1a80:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e1a84:	e886 000c 	stmia.w	r6, {r2, r3}
   e1a88:	460b      	mov	r3, r1
   e1a8a:	4602      	mov	r2, r0
   e1a8c:	e9d4 0100 	ldrd	r0, r1, [r4]
   e1a90:	f000 ff22 	bl	e28d8 <__aeabi_dsub>
   e1a94:	9b00      	ldr	r3, [sp, #0]
   e1a96:	2b00      	cmp	r3, #0
   e1a98:	dd0d      	ble.n	e1ab6 <__kernel_rem_pio2+0x69e>
   e1a9a:	ad4c      	add	r5, sp, #304	; 0x130
   e1a9c:	2401      	movs	r4, #1
   e1a9e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
   e1aa2:	f000 ff1b 	bl	e28dc <__adddf3>
   e1aa6:	9b00      	ldr	r3, [sp, #0]
   e1aa8:	3401      	adds	r4, #1
   e1aaa:	42a3      	cmp	r3, r4
   e1aac:	daf7      	bge.n	e1a9e <__kernel_rem_pio2+0x686>
   e1aae:	9b03      	ldr	r3, [sp, #12]
   e1ab0:	2b00      	cmp	r3, #0
   e1ab2:	f000 80a7 	beq.w	e1c04 <__kernel_rem_pio2+0x7ec>
   e1ab6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e1aba:	9908      	ldr	r1, [sp, #32]
   e1abc:	4602      	mov	r2, r0
   e1abe:	e9c1 2302 	strd	r2, r3, [r1, #8]
   e1ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e1ac4:	f003 0007 	and.w	r0, r3, #7
   e1ac8:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
   e1acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1ad0:	9b06      	ldr	r3, [sp, #24]
   e1ad2:	9d00      	ldr	r5, [sp, #0]
   e1ad4:	3308      	adds	r3, #8
   e1ad6:	2000      	movs	r0, #0
   e1ad8:	2100      	movs	r1, #0
   e1ada:	441c      	add	r4, r3
   e1adc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   e1ae0:	3d01      	subs	r5, #1
   e1ae2:	f000 fefb 	bl	e28dc <__adddf3>
   e1ae6:	1c6b      	adds	r3, r5, #1
   e1ae8:	d1f8      	bne.n	e1adc <__kernel_rem_pio2+0x6c4>
   e1aea:	9b03      	ldr	r3, [sp, #12]
   e1aec:	4602      	mov	r2, r0
   e1aee:	2b00      	cmp	r3, #0
   e1af0:	f000 808e 	beq.w	e1c10 <__kernel_rem_pio2+0x7f8>
   e1af4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e1af8:	9908      	ldr	r1, [sp, #32]
   e1afa:	e9c1 2300 	strd	r2, r3, [r1]
   e1afe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e1b00:	f003 0007 	and.w	r0, r3, #7
   e1b04:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
   e1b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1b0c:	2600      	movs	r6, #0
   e1b0e:	2700      	movs	r7, #0
   e1b10:	e6ee      	b.n	e18f0 <__kernel_rem_pio2+0x4d8>
   e1b12:	9b08      	ldr	r3, [sp, #32]
   e1b14:	4602      	mov	r2, r0
   e1b16:	e9c3 0100 	strd	r0, r1, [r3]
   e1b1a:	460b      	mov	r3, r1
   e1b1c:	e9d4 0100 	ldrd	r0, r1, [r4]
   e1b20:	f000 feda 	bl	e28d8 <__aeabi_dsub>
   e1b24:	9c00      	ldr	r4, [sp, #0]
   e1b26:	2c00      	cmp	r4, #0
   e1b28:	4602      	mov	r2, r0
   e1b2a:	460b      	mov	r3, r1
   e1b2c:	dcb5      	bgt.n	e1a9a <__kernel_rem_pio2+0x682>
   e1b2e:	9908      	ldr	r1, [sp, #32]
   e1b30:	e9c1 2302 	strd	r2, r3, [r1, #8]
   e1b34:	e7c5      	b.n	e1ac2 <__kernel_rem_pio2+0x6aa>
   e1b36:	9b06      	ldr	r3, [sp, #24]
   e1b38:	9503      	str	r5, [sp, #12]
   e1b3a:	4258      	negs	r0, r3
   e1b3c:	ec47 6b10 	vmov	d0, r6, r7
   e1b40:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   e1b44:	f000 fe30 	bl	e27a8 <scalbn>
   e1b48:	ec55 4b10 	vmov	r4, r5, d0
   e1b4c:	2200      	movs	r2, #0
   e1b4e:	4b38      	ldr	r3, [pc, #224]	; (e1c30 <__kernel_rem_pio2+0x818>)
   e1b50:	ee10 0a10 	vmov	r0, s0
   e1b54:	4629      	mov	r1, r5
   e1b56:	f001 faf9 	bl	e314c <__aeabi_dcmpge>
   e1b5a:	2800      	cmp	r0, #0
   e1b5c:	d034      	beq.n	e1bc8 <__kernel_rem_pio2+0x7b0>
   e1b5e:	2200      	movs	r2, #0
   e1b60:	4b34      	ldr	r3, [pc, #208]	; (e1c34 <__kernel_rem_pio2+0x81c>)
   e1b62:	4620      	mov	r0, r4
   e1b64:	4629      	mov	r1, r5
   e1b66:	f001 f86b 	bl	e2c40 <__aeabi_dmul>
   e1b6a:	f001 fb19 	bl	e31a0 <__aeabi_d2iz>
   e1b6e:	4606      	mov	r6, r0
   e1b70:	f001 f800 	bl	e2b74 <__aeabi_i2d>
   e1b74:	2200      	movs	r2, #0
   e1b76:	4b2e      	ldr	r3, [pc, #184]	; (e1c30 <__kernel_rem_pio2+0x818>)
   e1b78:	f001 f862 	bl	e2c40 <__aeabi_dmul>
   e1b7c:	4602      	mov	r2, r0
   e1b7e:	460b      	mov	r3, r1
   e1b80:	4620      	mov	r0, r4
   e1b82:	4629      	mov	r1, r5
   e1b84:	f000 fea8 	bl	e28d8 <__aeabi_dsub>
   e1b88:	f001 fb0a 	bl	e31a0 <__aeabi_d2iz>
   e1b8c:	9904      	ldr	r1, [sp, #16]
   e1b8e:	9b06      	ldr	r3, [sp, #24]
   e1b90:	460a      	mov	r2, r1
   e1b92:	3318      	adds	r3, #24
   e1b94:	3201      	adds	r2, #1
   e1b96:	9306      	str	r3, [sp, #24]
   e1b98:	460b      	mov	r3, r1
   e1b9a:	a90e      	add	r1, sp, #56	; 0x38
   e1b9c:	9200      	str	r2, [sp, #0]
   e1b9e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   e1ba2:	f841 6022 	str.w	r6, [r1, r2, lsl #2]
   e1ba6:	e651      	b.n	e184c <__kernel_rem_pio2+0x434>
   e1ba8:	2301      	movs	r3, #1
   e1baa:	e5a0      	b.n	e16ee <__kernel_rem_pio2+0x2d6>
   e1bac:	2400      	movs	r4, #0
   e1bae:	e55c      	b.n	e166a <__kernel_rem_pio2+0x252>
   e1bb0:	e9d4 6700 	ldrd	r6, r7, [r4]
   e1bb4:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   e1bb8:	9d08      	ldr	r5, [sp, #32]
   e1bba:	e9c5 0104 	strd	r0, r1, [r5, #16]
   e1bbe:	e9c5 6700 	strd	r6, r7, [r5]
   e1bc2:	e9c5 2302 	strd	r2, r3, [r5, #8]
   e1bc6:	e731      	b.n	e1a2c <__kernel_rem_pio2+0x614>
   e1bc8:	4629      	mov	r1, r5
   e1bca:	4620      	mov	r0, r4
   e1bcc:	f001 fae8 	bl	e31a0 <__aeabi_d2iz>
   e1bd0:	9a04      	ldr	r2, [sp, #16]
   e1bd2:	9200      	str	r2, [sp, #0]
   e1bd4:	a90e      	add	r1, sp, #56	; 0x38
   e1bd6:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   e1bda:	e637      	b.n	e184c <__kernel_rem_pio2+0x434>
   e1bdc:	ac4a      	add	r4, sp, #296	; 0x128
   e1bde:	2000      	movs	r0, #0
   e1be0:	2100      	movs	r1, #0
   e1be2:	e70e      	b.n	e1a02 <__kernel_rem_pio2+0x5ea>
   e1be4:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   e1be6:	2b03      	cmp	r3, #3
   e1be8:	f63f af20 	bhi.w	e1a2c <__kernel_rem_pio2+0x614>
   e1bec:	a201      	add	r2, pc, #4	; (adr r2, e1bf4 <__kernel_rem_pio2+0x7dc>)
   e1bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   e1bf2:	bf00      	nop
   e1bf4:	000e1c2b 	.word	0x000e1c2b
   e1bf8:	000e1c23 	.word	0x000e1c23
   e1bfc:	000e1c23 	.word	0x000e1c23
   e1c00:	000e1bdd 	.word	0x000e1bdd
   e1c04:	460b      	mov	r3, r1
   e1c06:	9908      	ldr	r1, [sp, #32]
   e1c08:	4602      	mov	r2, r0
   e1c0a:	e9c1 2302 	strd	r2, r3, [r1, #8]
   e1c0e:	e758      	b.n	e1ac2 <__kernel_rem_pio2+0x6aa>
   e1c10:	460b      	mov	r3, r1
   e1c12:	9908      	ldr	r1, [sp, #32]
   e1c14:	e9c1 2300 	strd	r2, r3, [r1]
   e1c18:	e771      	b.n	e1afe <__kernel_rem_pio2+0x6e6>
   e1c1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e1c1c:	00db      	lsls	r3, r3, #3
   e1c1e:	9304      	str	r3, [sp, #16]
   e1c20:	e469      	b.n	e14f6 <__kernel_rem_pio2+0xde>
   e1c22:	2000      	movs	r0, #0
   e1c24:	2100      	movs	r1, #0
   e1c26:	ac4a      	add	r4, sp, #296	; 0x128
   e1c28:	e725      	b.n	e1a76 <__kernel_rem_pio2+0x65e>
   e1c2a:	2000      	movs	r0, #0
   e1c2c:	2100      	movs	r1, #0
   e1c2e:	e75c      	b.n	e1aea <__kernel_rem_pio2+0x6d2>
   e1c30:	41700000 	.word	0x41700000
   e1c34:	3e700000 	.word	0x3e700000

000e1c38 <__kernel_sin>:
   e1c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e1c3c:	ec55 4b10 	vmov	r4, r5, d0
   e1c40:	ed2d 8b02 	vpush	{d8}
   e1c44:	eeb0 8a41 	vmov.f32	s16, s2
   e1c48:	eef0 8a61 	vmov.f32	s17, s3
   e1c4c:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
   e1c50:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
   e1c54:	b083      	sub	sp, #12
   e1c56:	4682      	mov	sl, r0
   e1c58:	da07      	bge.n	e1c6a <__kernel_sin+0x32>
   e1c5a:	ee10 0a10 	vmov	r0, s0
   e1c5e:	4629      	mov	r1, r5
   e1c60:	f001 fa9e 	bl	e31a0 <__aeabi_d2iz>
   e1c64:	2800      	cmp	r0, #0
   e1c66:	f000 808e 	beq.w	e1d86 <__kernel_sin+0x14e>
   e1c6a:	4622      	mov	r2, r4
   e1c6c:	462b      	mov	r3, r5
   e1c6e:	4620      	mov	r0, r4
   e1c70:	4629      	mov	r1, r5
   e1c72:	f000 ffe5 	bl	e2c40 <__aeabi_dmul>
   e1c76:	4606      	mov	r6, r0
   e1c78:	460f      	mov	r7, r1
   e1c7a:	4602      	mov	r2, r0
   e1c7c:	460b      	mov	r3, r1
   e1c7e:	4620      	mov	r0, r4
   e1c80:	4629      	mov	r1, r5
   e1c82:	f000 ffdd 	bl	e2c40 <__aeabi_dmul>
   e1c86:	a347      	add	r3, pc, #284	; (adr r3, e1da4 <__kernel_sin+0x16c>)
   e1c88:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1c8c:	4680      	mov	r8, r0
   e1c8e:	4689      	mov	r9, r1
   e1c90:	4630      	mov	r0, r6
   e1c92:	4639      	mov	r1, r7
   e1c94:	f000 ffd4 	bl	e2c40 <__aeabi_dmul>
   e1c98:	a344      	add	r3, pc, #272	; (adr r3, e1dac <__kernel_sin+0x174>)
   e1c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1c9e:	f000 fe1b 	bl	e28d8 <__aeabi_dsub>
   e1ca2:	4632      	mov	r2, r6
   e1ca4:	463b      	mov	r3, r7
   e1ca6:	f000 ffcb 	bl	e2c40 <__aeabi_dmul>
   e1caa:	a342      	add	r3, pc, #264	; (adr r3, e1db4 <__kernel_sin+0x17c>)
   e1cac:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1cb0:	f000 fe14 	bl	e28dc <__adddf3>
   e1cb4:	4632      	mov	r2, r6
   e1cb6:	463b      	mov	r3, r7
   e1cb8:	f000 ffc2 	bl	e2c40 <__aeabi_dmul>
   e1cbc:	a33f      	add	r3, pc, #252	; (adr r3, e1dbc <__kernel_sin+0x184>)
   e1cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1cc2:	f000 fe09 	bl	e28d8 <__aeabi_dsub>
   e1cc6:	4632      	mov	r2, r6
   e1cc8:	463b      	mov	r3, r7
   e1cca:	f000 ffb9 	bl	e2c40 <__aeabi_dmul>
   e1cce:	a33d      	add	r3, pc, #244	; (adr r3, e1dc4 <__kernel_sin+0x18c>)
   e1cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1cd4:	f000 fe02 	bl	e28dc <__adddf3>
   e1cd8:	e9cd 0100 	strd	r0, r1, [sp]
   e1cdc:	f1ba 0f00 	cmp.w	sl, #0
   e1ce0:	d037      	beq.n	e1d52 <__kernel_sin+0x11a>
   e1ce2:	2200      	movs	r2, #0
   e1ce4:	4b2e      	ldr	r3, [pc, #184]	; (e1da0 <__kernel_sin+0x168>)
   e1ce6:	ec51 0b18 	vmov	r0, r1, d8
   e1cea:	f000 ffa9 	bl	e2c40 <__aeabi_dmul>
   e1cee:	e9dd 2300 	ldrd	r2, r3, [sp]
   e1cf2:	4682      	mov	sl, r0
   e1cf4:	468b      	mov	fp, r1
   e1cf6:	4640      	mov	r0, r8
   e1cf8:	4649      	mov	r1, r9
   e1cfa:	f000 ffa1 	bl	e2c40 <__aeabi_dmul>
   e1cfe:	4602      	mov	r2, r0
   e1d00:	460b      	mov	r3, r1
   e1d02:	4650      	mov	r0, sl
   e1d04:	4659      	mov	r1, fp
   e1d06:	f000 fde7 	bl	e28d8 <__aeabi_dsub>
   e1d0a:	4632      	mov	r2, r6
   e1d0c:	463b      	mov	r3, r7
   e1d0e:	f000 ff97 	bl	e2c40 <__aeabi_dmul>
   e1d12:	ec53 2b18 	vmov	r2, r3, d8
   e1d16:	f000 fddf 	bl	e28d8 <__aeabi_dsub>
   e1d1a:	a31f      	add	r3, pc, #124	; (adr r3, e1d98 <__kernel_sin+0x160>)
   e1d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1d20:	4606      	mov	r6, r0
   e1d22:	460f      	mov	r7, r1
   e1d24:	4640      	mov	r0, r8
   e1d26:	4649      	mov	r1, r9
   e1d28:	f000 ff8a 	bl	e2c40 <__aeabi_dmul>
   e1d2c:	4602      	mov	r2, r0
   e1d2e:	460b      	mov	r3, r1
   e1d30:	4630      	mov	r0, r6
   e1d32:	4639      	mov	r1, r7
   e1d34:	f000 fdd2 	bl	e28dc <__adddf3>
   e1d38:	4602      	mov	r2, r0
   e1d3a:	460b      	mov	r3, r1
   e1d3c:	4620      	mov	r0, r4
   e1d3e:	4629      	mov	r1, r5
   e1d40:	f000 fdca 	bl	e28d8 <__aeabi_dsub>
   e1d44:	ec41 0b10 	vmov	d0, r0, r1
   e1d48:	b003      	add	sp, #12
   e1d4a:	ecbd 8b02 	vpop	{d8}
   e1d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1d52:	4602      	mov	r2, r0
   e1d54:	460b      	mov	r3, r1
   e1d56:	4630      	mov	r0, r6
   e1d58:	4639      	mov	r1, r7
   e1d5a:	f000 ff71 	bl	e2c40 <__aeabi_dmul>
   e1d5e:	a30e      	add	r3, pc, #56	; (adr r3, e1d98 <__kernel_sin+0x160>)
   e1d60:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1d64:	f000 fdb8 	bl	e28d8 <__aeabi_dsub>
   e1d68:	4642      	mov	r2, r8
   e1d6a:	464b      	mov	r3, r9
   e1d6c:	f000 ff68 	bl	e2c40 <__aeabi_dmul>
   e1d70:	4622      	mov	r2, r4
   e1d72:	462b      	mov	r3, r5
   e1d74:	f000 fdb2 	bl	e28dc <__adddf3>
   e1d78:	ec41 0b10 	vmov	d0, r0, r1
   e1d7c:	b003      	add	sp, #12
   e1d7e:	ecbd 8b02 	vpop	{d8}
   e1d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1d86:	ec45 4b10 	vmov	d0, r4, r5
   e1d8a:	b003      	add	sp, #12
   e1d8c:	ecbd 8b02 	vpop	{d8}
   e1d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1d94:	f3af 8000 	nop.w
   e1d98:	55555549 	.word	0x55555549
   e1d9c:	3fc55555 	.word	0x3fc55555
   e1da0:	3fe00000 	.word	0x3fe00000
   e1da4:	5acfd57c 	.word	0x5acfd57c
   e1da8:	3de5d93a 	.word	0x3de5d93a
   e1dac:	8a2b9ceb 	.word	0x8a2b9ceb
   e1db0:	3e5ae5e6 	.word	0x3e5ae5e6
   e1db4:	57b1fe7d 	.word	0x57b1fe7d
   e1db8:	3ec71de3 	.word	0x3ec71de3
   e1dbc:	19c161d5 	.word	0x19c161d5
   e1dc0:	3f2a01a0 	.word	0x3f2a01a0
   e1dc4:	1110f8a6 	.word	0x1110f8a6
   e1dc8:	3f811111 	.word	0x3f811111
   e1dcc:	00000000 	.word	0x00000000

000e1dd0 <__kernel_tan>:
   e1dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e1dd4:	ec59 8b10 	vmov	r8, r9, d0
   e1dd8:	4be1      	ldr	r3, [pc, #900]	; (e2160 <__kernel_tan+0x390>)
   e1dda:	b089      	sub	sp, #36	; 0x24
   e1ddc:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
   e1de0:	429e      	cmp	r6, r3
   e1de2:	f8cd 9014 	str.w	r9, [sp, #20]
   e1de6:	4607      	mov	r7, r0
   e1de8:	ed8d 1b00 	vstr	d1, [sp]
   e1dec:	dc19      	bgt.n	e1e22 <__kernel_tan+0x52>
   e1dee:	ee10 0a10 	vmov	r0, s0
   e1df2:	4649      	mov	r1, r9
   e1df4:	f001 f9d4 	bl	e31a0 <__aeabi_d2iz>
   e1df8:	bba0      	cbnz	r0, e1e64 <__kernel_tan+0x94>
   e1dfa:	4643      	mov	r3, r8
   e1dfc:	431e      	orrs	r6, r3
   e1dfe:	1c7b      	adds	r3, r7, #1
   e1e00:	4333      	orrs	r3, r6
   e1e02:	f000 815e 	beq.w	e20c2 <__kernel_tan+0x2f2>
   e1e06:	2f01      	cmp	r7, #1
   e1e08:	f000 81c2 	beq.w	e2190 <__kernel_tan+0x3c0>
   e1e0c:	4642      	mov	r2, r8
   e1e0e:	464b      	mov	r3, r9
   e1e10:	2000      	movs	r0, #0
   e1e12:	49d4      	ldr	r1, [pc, #848]	; (e2164 <__kernel_tan+0x394>)
   e1e14:	f001 f83e 	bl	e2e94 <__aeabi_ddiv>
   e1e18:	ec41 0b10 	vmov	d0, r0, r1
   e1e1c:	b009      	add	sp, #36	; 0x24
   e1e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1e22:	4bd1      	ldr	r3, [pc, #836]	; (e2168 <__kernel_tan+0x398>)
   e1e24:	429e      	cmp	r6, r3
   e1e26:	dd1d      	ble.n	e1e64 <__kernel_tan+0x94>
   e1e28:	9b05      	ldr	r3, [sp, #20]
   e1e2a:	2b00      	cmp	r3, #0
   e1e2c:	f2c0 81a0 	blt.w	e2170 <__kernel_tan+0x3a0>
   e1e30:	4642      	mov	r2, r8
   e1e32:	464b      	mov	r3, r9
   e1e34:	a1aa      	add	r1, pc, #680	; (adr r1, e20e0 <__kernel_tan+0x310>)
   e1e36:	e9d1 0100 	ldrd	r0, r1, [r1]
   e1e3a:	f000 fd4d 	bl	e28d8 <__aeabi_dsub>
   e1e3e:	e9dd 2300 	ldrd	r2, r3, [sp]
   e1e42:	4604      	mov	r4, r0
   e1e44:	460d      	mov	r5, r1
   e1e46:	a1a8      	add	r1, pc, #672	; (adr r1, e20e8 <__kernel_tan+0x318>)
   e1e48:	e9d1 0100 	ldrd	r0, r1, [r1]
   e1e4c:	f000 fd44 	bl	e28d8 <__aeabi_dsub>
   e1e50:	ed9f 7ba7 	vldr	d7, [pc, #668]	; e20f0 <__kernel_tan+0x320>
   e1e54:	4622      	mov	r2, r4
   e1e56:	462b      	mov	r3, r5
   e1e58:	ed8d 7b00 	vstr	d7, [sp]
   e1e5c:	f000 fd3e 	bl	e28dc <__adddf3>
   e1e60:	4680      	mov	r8, r0
   e1e62:	4689      	mov	r9, r1
   e1e64:	4642      	mov	r2, r8
   e1e66:	464b      	mov	r3, r9
   e1e68:	4640      	mov	r0, r8
   e1e6a:	4649      	mov	r1, r9
   e1e6c:	f000 fee8 	bl	e2c40 <__aeabi_dmul>
   e1e70:	4602      	mov	r2, r0
   e1e72:	460b      	mov	r3, r1
   e1e74:	4682      	mov	sl, r0
   e1e76:	468b      	mov	fp, r1
   e1e78:	f000 fee2 	bl	e2c40 <__aeabi_dmul>
   e1e7c:	4652      	mov	r2, sl
   e1e7e:	4604      	mov	r4, r0
   e1e80:	460d      	mov	r5, r1
   e1e82:	465b      	mov	r3, fp
   e1e84:	4640      	mov	r0, r8
   e1e86:	4649      	mov	r1, r9
   e1e88:	f000 feda 	bl	e2c40 <__aeabi_dmul>
   e1e8c:	a39a      	add	r3, pc, #616	; (adr r3, e20f8 <__kernel_tan+0x328>)
   e1e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1e92:	e9cd 0102 	strd	r0, r1, [sp, #8]
   e1e96:	4620      	mov	r0, r4
   e1e98:	4629      	mov	r1, r5
   e1e9a:	f000 fed1 	bl	e2c40 <__aeabi_dmul>
   e1e9e:	a398      	add	r3, pc, #608	; (adr r3, e2100 <__kernel_tan+0x330>)
   e1ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1ea4:	f000 fd1a 	bl	e28dc <__adddf3>
   e1ea8:	4622      	mov	r2, r4
   e1eaa:	462b      	mov	r3, r5
   e1eac:	f000 fec8 	bl	e2c40 <__aeabi_dmul>
   e1eb0:	a395      	add	r3, pc, #596	; (adr r3, e2108 <__kernel_tan+0x338>)
   e1eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1eb6:	f000 fd11 	bl	e28dc <__adddf3>
   e1eba:	4622      	mov	r2, r4
   e1ebc:	462b      	mov	r3, r5
   e1ebe:	f000 febf 	bl	e2c40 <__aeabi_dmul>
   e1ec2:	a393      	add	r3, pc, #588	; (adr r3, e2110 <__kernel_tan+0x340>)
   e1ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1ec8:	f000 fd08 	bl	e28dc <__adddf3>
   e1ecc:	4622      	mov	r2, r4
   e1ece:	462b      	mov	r3, r5
   e1ed0:	f000 feb6 	bl	e2c40 <__aeabi_dmul>
   e1ed4:	a390      	add	r3, pc, #576	; (adr r3, e2118 <__kernel_tan+0x348>)
   e1ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1eda:	f000 fcff 	bl	e28dc <__adddf3>
   e1ede:	4622      	mov	r2, r4
   e1ee0:	462b      	mov	r3, r5
   e1ee2:	f000 fead 	bl	e2c40 <__aeabi_dmul>
   e1ee6:	a38e      	add	r3, pc, #568	; (adr r3, e2120 <__kernel_tan+0x350>)
   e1ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1eec:	f000 fcf6 	bl	e28dc <__adddf3>
   e1ef0:	4652      	mov	r2, sl
   e1ef2:	465b      	mov	r3, fp
   e1ef4:	f000 fea4 	bl	e2c40 <__aeabi_dmul>
   e1ef8:	a38b      	add	r3, pc, #556	; (adr r3, e2128 <__kernel_tan+0x358>)
   e1efa:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1efe:	e9cd 0106 	strd	r0, r1, [sp, #24]
   e1f02:	4620      	mov	r0, r4
   e1f04:	4629      	mov	r1, r5
   e1f06:	f000 fe9b 	bl	e2c40 <__aeabi_dmul>
   e1f0a:	a389      	add	r3, pc, #548	; (adr r3, e2130 <__kernel_tan+0x360>)
   e1f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1f10:	f000 fce4 	bl	e28dc <__adddf3>
   e1f14:	4622      	mov	r2, r4
   e1f16:	462b      	mov	r3, r5
   e1f18:	f000 fe92 	bl	e2c40 <__aeabi_dmul>
   e1f1c:	a386      	add	r3, pc, #536	; (adr r3, e2138 <__kernel_tan+0x368>)
   e1f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1f22:	f000 fcdb 	bl	e28dc <__adddf3>
   e1f26:	4622      	mov	r2, r4
   e1f28:	462b      	mov	r3, r5
   e1f2a:	f000 fe89 	bl	e2c40 <__aeabi_dmul>
   e1f2e:	a384      	add	r3, pc, #528	; (adr r3, e2140 <__kernel_tan+0x370>)
   e1f30:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1f34:	f000 fcd2 	bl	e28dc <__adddf3>
   e1f38:	4622      	mov	r2, r4
   e1f3a:	462b      	mov	r3, r5
   e1f3c:	f000 fe80 	bl	e2c40 <__aeabi_dmul>
   e1f40:	a381      	add	r3, pc, #516	; (adr r3, e2148 <__kernel_tan+0x378>)
   e1f42:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1f46:	f000 fcc9 	bl	e28dc <__adddf3>
   e1f4a:	4622      	mov	r2, r4
   e1f4c:	462b      	mov	r3, r5
   e1f4e:	f000 fe77 	bl	e2c40 <__aeabi_dmul>
   e1f52:	a37f      	add	r3, pc, #508	; (adr r3, e2150 <__kernel_tan+0x380>)
   e1f54:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1f58:	f000 fcc0 	bl	e28dc <__adddf3>
   e1f5c:	4602      	mov	r2, r0
   e1f5e:	460b      	mov	r3, r1
   e1f60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e1f64:	f000 fcba 	bl	e28dc <__adddf3>
   e1f68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   e1f6c:	f000 fe68 	bl	e2c40 <__aeabi_dmul>
   e1f70:	e9dd 4500 	ldrd	r4, r5, [sp]
   e1f74:	4622      	mov	r2, r4
   e1f76:	462b      	mov	r3, r5
   e1f78:	f000 fcb0 	bl	e28dc <__adddf3>
   e1f7c:	4652      	mov	r2, sl
   e1f7e:	465b      	mov	r3, fp
   e1f80:	f000 fe5e 	bl	e2c40 <__aeabi_dmul>
   e1f84:	4602      	mov	r2, r0
   e1f86:	460b      	mov	r3, r1
   e1f88:	4620      	mov	r0, r4
   e1f8a:	4629      	mov	r1, r5
   e1f8c:	f000 fca6 	bl	e28dc <__adddf3>
   e1f90:	a371      	add	r3, pc, #452	; (adr r3, e2158 <__kernel_tan+0x388>)
   e1f92:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1f96:	4604      	mov	r4, r0
   e1f98:	460d      	mov	r5, r1
   e1f9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   e1f9e:	f000 fe4f 	bl	e2c40 <__aeabi_dmul>
   e1fa2:	4622      	mov	r2, r4
   e1fa4:	462b      	mov	r3, r5
   e1fa6:	f000 fc99 	bl	e28dc <__adddf3>
   e1faa:	460b      	mov	r3, r1
   e1fac:	4602      	mov	r2, r0
   e1fae:	4649      	mov	r1, r9
   e1fb0:	4640      	mov	r0, r8
   e1fb2:	e9cd 2300 	strd	r2, r3, [sp]
   e1fb6:	f000 fc91 	bl	e28dc <__adddf3>
   e1fba:	4b6b      	ldr	r3, [pc, #428]	; (e2168 <__kernel_tan+0x398>)
   e1fbc:	429e      	cmp	r6, r3
   e1fbe:	4604      	mov	r4, r0
   e1fc0:	460d      	mov	r5, r1
   e1fc2:	dc3c      	bgt.n	e203e <__kernel_tan+0x26e>
   e1fc4:	2f01      	cmp	r7, #1
   e1fc6:	f000 80e0 	beq.w	e218a <__kernel_tan+0x3ba>
   e1fca:	4602      	mov	r2, r0
   e1fcc:	460b      	mov	r3, r1
   e1fce:	2000      	movs	r0, #0
   e1fd0:	4964      	ldr	r1, [pc, #400]	; (e2164 <__kernel_tan+0x394>)
   e1fd2:	f000 ff5f 	bl	e2e94 <__aeabi_ddiv>
   e1fd6:	2400      	movs	r4, #0
   e1fd8:	460f      	mov	r7, r1
   e1fda:	464b      	mov	r3, r9
   e1fdc:	4606      	mov	r6, r0
   e1fde:	4629      	mov	r1, r5
   e1fe0:	4620      	mov	r0, r4
   e1fe2:	4642      	mov	r2, r8
   e1fe4:	f000 fc78 	bl	e28d8 <__aeabi_dsub>
   e1fe8:	4602      	mov	r2, r0
   e1fea:	460b      	mov	r3, r1
   e1fec:	e9dd 0100 	ldrd	r0, r1, [sp]
   e1ff0:	f000 fc72 	bl	e28d8 <__aeabi_dsub>
   e1ff4:	4622      	mov	r2, r4
   e1ff6:	463b      	mov	r3, r7
   e1ff8:	f000 fe22 	bl	e2c40 <__aeabi_dmul>
   e1ffc:	46a2      	mov	sl, r4
   e1ffe:	46a9      	mov	r9, r5
   e2000:	4604      	mov	r4, r0
   e2002:	460d      	mov	r5, r1
   e2004:	4652      	mov	r2, sl
   e2006:	463b      	mov	r3, r7
   e2008:	4650      	mov	r0, sl
   e200a:	4649      	mov	r1, r9
   e200c:	f000 fe18 	bl	e2c40 <__aeabi_dmul>
   e2010:	2200      	movs	r2, #0
   e2012:	4b56      	ldr	r3, [pc, #344]	; (e216c <__kernel_tan+0x39c>)
   e2014:	f000 fc62 	bl	e28dc <__adddf3>
   e2018:	4602      	mov	r2, r0
   e201a:	460b      	mov	r3, r1
   e201c:	4620      	mov	r0, r4
   e201e:	4629      	mov	r1, r5
   e2020:	f000 fc5c 	bl	e28dc <__adddf3>
   e2024:	4632      	mov	r2, r6
   e2026:	463b      	mov	r3, r7
   e2028:	f000 fe0a 	bl	e2c40 <__aeabi_dmul>
   e202c:	4652      	mov	r2, sl
   e202e:	463b      	mov	r3, r7
   e2030:	f000 fc54 	bl	e28dc <__adddf3>
   e2034:	ec41 0b10 	vmov	d0, r0, r1
   e2038:	b009      	add	sp, #36	; 0x24
   e203a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e203e:	4638      	mov	r0, r7
   e2040:	f000 fd98 	bl	e2b74 <__aeabi_i2d>
   e2044:	4622      	mov	r2, r4
   e2046:	4606      	mov	r6, r0
   e2048:	460f      	mov	r7, r1
   e204a:	462b      	mov	r3, r5
   e204c:	4620      	mov	r0, r4
   e204e:	4629      	mov	r1, r5
   e2050:	f000 fdf6 	bl	e2c40 <__aeabi_dmul>
   e2054:	4632      	mov	r2, r6
   e2056:	4682      	mov	sl, r0
   e2058:	468b      	mov	fp, r1
   e205a:	463b      	mov	r3, r7
   e205c:	4620      	mov	r0, r4
   e205e:	4629      	mov	r1, r5
   e2060:	f000 fc3c 	bl	e28dc <__adddf3>
   e2064:	4602      	mov	r2, r0
   e2066:	460b      	mov	r3, r1
   e2068:	4650      	mov	r0, sl
   e206a:	4659      	mov	r1, fp
   e206c:	f000 ff12 	bl	e2e94 <__aeabi_ddiv>
   e2070:	e9dd 2300 	ldrd	r2, r3, [sp]
   e2074:	f000 fc30 	bl	e28d8 <__aeabi_dsub>
   e2078:	4602      	mov	r2, r0
   e207a:	460b      	mov	r3, r1
   e207c:	4640      	mov	r0, r8
   e207e:	4649      	mov	r1, r9
   e2080:	f000 fc2a 	bl	e28d8 <__aeabi_dsub>
   e2084:	4602      	mov	r2, r0
   e2086:	460b      	mov	r3, r1
   e2088:	f000 fc28 	bl	e28dc <__adddf3>
   e208c:	4602      	mov	r2, r0
   e208e:	460b      	mov	r3, r1
   e2090:	4630      	mov	r0, r6
   e2092:	4639      	mov	r1, r7
   e2094:	f000 fc20 	bl	e28d8 <__aeabi_dsub>
   e2098:	9b05      	ldr	r3, [sp, #20]
   e209a:	4604      	mov	r4, r0
   e209c:	1798      	asrs	r0, r3, #30
   e209e:	f000 0002 	and.w	r0, r0, #2
   e20a2:	f1c0 0001 	rsb	r0, r0, #1
   e20a6:	460d      	mov	r5, r1
   e20a8:	f000 fd64 	bl	e2b74 <__aeabi_i2d>
   e20ac:	4602      	mov	r2, r0
   e20ae:	460b      	mov	r3, r1
   e20b0:	4620      	mov	r0, r4
   e20b2:	4629      	mov	r1, r5
   e20b4:	f000 fdc4 	bl	e2c40 <__aeabi_dmul>
   e20b8:	ec41 0b10 	vmov	d0, r0, r1
   e20bc:	b009      	add	sp, #36	; 0x24
   e20be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e20c2:	ec49 8b10 	vmov	d0, r8, r9
   e20c6:	f7fb fbb3 	bl	dd830 <fabs>
   e20ca:	2000      	movs	r0, #0
   e20cc:	ec53 2b10 	vmov	r2, r3, d0
   e20d0:	4926      	ldr	r1, [pc, #152]	; (e216c <__kernel_tan+0x39c>)
   e20d2:	f000 fedf 	bl	e2e94 <__aeabi_ddiv>
   e20d6:	ec41 0b10 	vmov	d0, r0, r1
   e20da:	e7ad      	b.n	e2038 <__kernel_tan+0x268>
   e20dc:	f3af 8000 	nop.w
   e20e0:	54442d18 	.word	0x54442d18
   e20e4:	3fe921fb 	.word	0x3fe921fb
   e20e8:	33145c07 	.word	0x33145c07
   e20ec:	3c81a626 	.word	0x3c81a626
	...
   e20f8:	74bf7ad4 	.word	0x74bf7ad4
   e20fc:	3efb2a70 	.word	0x3efb2a70
   e2100:	32f0a7e9 	.word	0x32f0a7e9
   e2104:	3f12b80f 	.word	0x3f12b80f
   e2108:	1a8d1068 	.word	0x1a8d1068
   e210c:	3f3026f7 	.word	0x3f3026f7
   e2110:	fee08315 	.word	0xfee08315
   e2114:	3f57dbc8 	.word	0x3f57dbc8
   e2118:	e96e8493 	.word	0xe96e8493
   e211c:	3f8226e3 	.word	0x3f8226e3
   e2120:	1bb341fe 	.word	0x1bb341fe
   e2124:	3faba1ba 	.word	0x3faba1ba
   e2128:	db605373 	.word	0xdb605373
   e212c:	bef375cb 	.word	0xbef375cb
   e2130:	a03792a6 	.word	0xa03792a6
   e2134:	3f147e88 	.word	0x3f147e88
   e2138:	f2f26501 	.word	0xf2f26501
   e213c:	3f4344d8 	.word	0x3f4344d8
   e2140:	c9560328 	.word	0xc9560328
   e2144:	3f6d6d22 	.word	0x3f6d6d22
   e2148:	8406d637 	.word	0x8406d637
   e214c:	3f9664f4 	.word	0x3f9664f4
   e2150:	1110fe7a 	.word	0x1110fe7a
   e2154:	3fc11111 	.word	0x3fc11111
   e2158:	55555563 	.word	0x55555563
   e215c:	3fd55555 	.word	0x3fd55555
   e2160:	3e2fffff 	.word	0x3e2fffff
   e2164:	bff00000 	.word	0xbff00000
   e2168:	3fe59427 	.word	0x3fe59427
   e216c:	3ff00000 	.word	0x3ff00000
   e2170:	e9dd 4500 	ldrd	r4, r5, [sp]
   e2174:	f109 4100 	add.w	r1, r9, #2147483648	; 0x80000000
   e2178:	4622      	mov	r2, r4
   e217a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
   e217e:	ee10 8a10 	vmov	r8, s0
   e2182:	4689      	mov	r9, r1
   e2184:	e9cd 2300 	strd	r2, r3, [sp]
   e2188:	e652      	b.n	e1e30 <__kernel_tan+0x60>
   e218a:	ec45 4b10 	vmov	d0, r4, r5
   e218e:	e753      	b.n	e2038 <__kernel_tan+0x268>
   e2190:	ec49 8b10 	vmov	d0, r8, r9
   e2194:	e750      	b.n	e2038 <__kernel_tan+0x268>
   e2196:	bf00      	nop

000e2198 <expm1>:
   e2198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e219c:	ec5b ab10 	vmov	sl, fp, d0
   e21a0:	49d7      	ldr	r1, [pc, #860]	; (e2500 <expm1+0x368>)
   e21a2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e21a6:	428b      	cmp	r3, r1
   e21a8:	b085      	sub	sp, #20
   e21aa:	f00b 4400 	and.w	r4, fp, #2147483648	; 0x80000000
   e21ae:	d953      	bls.n	e2258 <expm1+0xc0>
   e21b0:	49d4      	ldr	r1, [pc, #848]	; (e2504 <expm1+0x36c>)
   e21b2:	428b      	cmp	r3, r1
   e21b4:	f200 8105 	bhi.w	e23c2 <expm1+0x22a>
   e21b8:	2c00      	cmp	r4, #0
   e21ba:	f000 81de 	beq.w	e257a <expm1+0x3e2>
   e21be:	a3b6      	add	r3, pc, #728	; (adr r3, e2498 <expm1+0x300>)
   e21c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   e21c4:	4650      	mov	r0, sl
   e21c6:	4659      	mov	r1, fp
   e21c8:	f000 fb88 	bl	e28dc <__adddf3>
   e21cc:	2200      	movs	r2, #0
   e21ce:	2300      	movs	r3, #0
   e21d0:	f000 ffa8 	bl	e3124 <__aeabi_dcmplt>
   e21d4:	2800      	cmp	r0, #0
   e21d6:	f040 80ff 	bne.w	e23d8 <expm1+0x240>
   e21da:	a3b1      	add	r3, pc, #708	; (adr r3, e24a0 <expm1+0x308>)
   e21dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   e21e0:	4650      	mov	r0, sl
   e21e2:	4659      	mov	r1, fp
   e21e4:	f000 fd2c 	bl	e2c40 <__aeabi_dmul>
   e21e8:	4602      	mov	r2, r0
   e21ea:	460b      	mov	r3, r1
   e21ec:	2000      	movs	r0, #0
   e21ee:	49c6      	ldr	r1, [pc, #792]	; (e2508 <expm1+0x370>)
   e21f0:	f000 fb74 	bl	e28dc <__adddf3>
   e21f4:	f000 ffd4 	bl	e31a0 <__aeabi_d2iz>
   e21f8:	9001      	str	r0, [sp, #4]
   e21fa:	f000 fcbb 	bl	e2b74 <__aeabi_i2d>
   e21fe:	a3aa      	add	r3, pc, #680	; (adr r3, e24a8 <expm1+0x310>)
   e2200:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2204:	4606      	mov	r6, r0
   e2206:	460f      	mov	r7, r1
   e2208:	f000 fd1a 	bl	e2c40 <__aeabi_dmul>
   e220c:	4602      	mov	r2, r0
   e220e:	460b      	mov	r3, r1
   e2210:	4650      	mov	r0, sl
   e2212:	4659      	mov	r1, fp
   e2214:	f000 fb60 	bl	e28d8 <__aeabi_dsub>
   e2218:	a3a5      	add	r3, pc, #660	; (adr r3, e24b0 <expm1+0x318>)
   e221a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e221e:	4680      	mov	r8, r0
   e2220:	4689      	mov	r9, r1
   e2222:	4630      	mov	r0, r6
   e2224:	4639      	mov	r1, r7
   e2226:	f000 fd0b 	bl	e2c40 <__aeabi_dmul>
   e222a:	4606      	mov	r6, r0
   e222c:	460f      	mov	r7, r1
   e222e:	4632      	mov	r2, r6
   e2230:	463b      	mov	r3, r7
   e2232:	4640      	mov	r0, r8
   e2234:	4649      	mov	r1, r9
   e2236:	f000 fb4f 	bl	e28d8 <__aeabi_dsub>
   e223a:	4602      	mov	r2, r0
   e223c:	460b      	mov	r3, r1
   e223e:	4682      	mov	sl, r0
   e2240:	468b      	mov	fp, r1
   e2242:	4640      	mov	r0, r8
   e2244:	4649      	mov	r1, r9
   e2246:	f000 fb47 	bl	e28d8 <__aeabi_dsub>
   e224a:	4632      	mov	r2, r6
   e224c:	463b      	mov	r3, r7
   e224e:	f000 fb43 	bl	e28d8 <__aeabi_dsub>
   e2252:	e9cd 0102 	strd	r0, r1, [sp, #8]
   e2256:	e009      	b.n	e226c <expm1+0xd4>
   e2258:	4aac      	ldr	r2, [pc, #688]	; (e250c <expm1+0x374>)
   e225a:	4293      	cmp	r3, r2
   e225c:	f200 80e7 	bhi.w	e242e <expm1+0x296>
   e2260:	4aab      	ldr	r2, [pc, #684]	; (e2510 <expm1+0x378>)
   e2262:	4293      	cmp	r3, r2
   e2264:	f240 8162 	bls.w	e252c <expm1+0x394>
   e2268:	2300      	movs	r3, #0
   e226a:	9301      	str	r3, [sp, #4]
   e226c:	2200      	movs	r2, #0
   e226e:	4ba9      	ldr	r3, [pc, #676]	; (e2514 <expm1+0x37c>)
   e2270:	4650      	mov	r0, sl
   e2272:	4659      	mov	r1, fp
   e2274:	f000 fce4 	bl	e2c40 <__aeabi_dmul>
   e2278:	4606      	mov	r6, r0
   e227a:	460f      	mov	r7, r1
   e227c:	4602      	mov	r2, r0
   e227e:	460b      	mov	r3, r1
   e2280:	4650      	mov	r0, sl
   e2282:	4659      	mov	r1, fp
   e2284:	f000 fcdc 	bl	e2c40 <__aeabi_dmul>
   e2288:	a38b      	add	r3, pc, #556	; (adr r3, e24b8 <expm1+0x320>)
   e228a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e228e:	4604      	mov	r4, r0
   e2290:	460d      	mov	r5, r1
   e2292:	f000 fcd5 	bl	e2c40 <__aeabi_dmul>
   e2296:	a38a      	add	r3, pc, #552	; (adr r3, e24c0 <expm1+0x328>)
   e2298:	e9d3 2300 	ldrd	r2, r3, [r3]
   e229c:	f000 fb1e 	bl	e28dc <__adddf3>
   e22a0:	4622      	mov	r2, r4
   e22a2:	462b      	mov	r3, r5
   e22a4:	f000 fccc 	bl	e2c40 <__aeabi_dmul>
   e22a8:	a387      	add	r3, pc, #540	; (adr r3, e24c8 <expm1+0x330>)
   e22aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   e22ae:	f000 fb13 	bl	e28d8 <__aeabi_dsub>
   e22b2:	4622      	mov	r2, r4
   e22b4:	462b      	mov	r3, r5
   e22b6:	f000 fcc3 	bl	e2c40 <__aeabi_dmul>
   e22ba:	a385      	add	r3, pc, #532	; (adr r3, e24d0 <expm1+0x338>)
   e22bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   e22c0:	f000 fb0c 	bl	e28dc <__adddf3>
   e22c4:	4622      	mov	r2, r4
   e22c6:	462b      	mov	r3, r5
   e22c8:	f000 fcba 	bl	e2c40 <__aeabi_dmul>
   e22cc:	a382      	add	r3, pc, #520	; (adr r3, e24d8 <expm1+0x340>)
   e22ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   e22d2:	f000 fb01 	bl	e28d8 <__aeabi_dsub>
   e22d6:	4622      	mov	r2, r4
   e22d8:	462b      	mov	r3, r5
   e22da:	f000 fcb1 	bl	e2c40 <__aeabi_dmul>
   e22de:	2200      	movs	r2, #0
   e22e0:	4b8d      	ldr	r3, [pc, #564]	; (e2518 <expm1+0x380>)
   e22e2:	f000 fafb 	bl	e28dc <__adddf3>
   e22e6:	4680      	mov	r8, r0
   e22e8:	4689      	mov	r9, r1
   e22ea:	4602      	mov	r2, r0
   e22ec:	460b      	mov	r3, r1
   e22ee:	4630      	mov	r0, r6
   e22f0:	4639      	mov	r1, r7
   e22f2:	f000 fca5 	bl	e2c40 <__aeabi_dmul>
   e22f6:	4602      	mov	r2, r0
   e22f8:	460b      	mov	r3, r1
   e22fa:	2000      	movs	r0, #0
   e22fc:	4987      	ldr	r1, [pc, #540]	; (e251c <expm1+0x384>)
   e22fe:	f000 faeb 	bl	e28d8 <__aeabi_dsub>
   e2302:	4606      	mov	r6, r0
   e2304:	4602      	mov	r2, r0
   e2306:	460b      	mov	r3, r1
   e2308:	460f      	mov	r7, r1
   e230a:	4640      	mov	r0, r8
   e230c:	4649      	mov	r1, r9
   e230e:	f000 fae3 	bl	e28d8 <__aeabi_dsub>
   e2312:	4632      	mov	r2, r6
   e2314:	4680      	mov	r8, r0
   e2316:	4689      	mov	r9, r1
   e2318:	463b      	mov	r3, r7
   e231a:	4650      	mov	r0, sl
   e231c:	4659      	mov	r1, fp
   e231e:	f000 fc8f 	bl	e2c40 <__aeabi_dmul>
   e2322:	4602      	mov	r2, r0
   e2324:	460b      	mov	r3, r1
   e2326:	2000      	movs	r0, #0
   e2328:	497d      	ldr	r1, [pc, #500]	; (e2520 <expm1+0x388>)
   e232a:	f000 fad5 	bl	e28d8 <__aeabi_dsub>
   e232e:	4602      	mov	r2, r0
   e2330:	460b      	mov	r3, r1
   e2332:	4640      	mov	r0, r8
   e2334:	4649      	mov	r1, r9
   e2336:	f000 fdad 	bl	e2e94 <__aeabi_ddiv>
   e233a:	4622      	mov	r2, r4
   e233c:	462b      	mov	r3, r5
   e233e:	f000 fc7f 	bl	e2c40 <__aeabi_dmul>
   e2342:	9e01      	ldr	r6, [sp, #4]
   e2344:	4602      	mov	r2, r0
   e2346:	460b      	mov	r3, r1
   e2348:	2e00      	cmp	r6, #0
   e234a:	d048      	beq.n	e23de <expm1+0x246>
   e234c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   e2350:	4632      	mov	r2, r6
   e2352:	463b      	mov	r3, r7
   e2354:	f000 fac0 	bl	e28d8 <__aeabi_dsub>
   e2358:	4652      	mov	r2, sl
   e235a:	465b      	mov	r3, fp
   e235c:	f000 fc70 	bl	e2c40 <__aeabi_dmul>
   e2360:	4632      	mov	r2, r6
   e2362:	463b      	mov	r3, r7
   e2364:	f000 fab8 	bl	e28d8 <__aeabi_dsub>
   e2368:	462b      	mov	r3, r5
   e236a:	4622      	mov	r2, r4
   e236c:	f000 fab4 	bl	e28d8 <__aeabi_dsub>
   e2370:	9b01      	ldr	r3, [sp, #4]
   e2372:	3301      	adds	r3, #1
   e2374:	4606      	mov	r6, r0
   e2376:	460f      	mov	r7, r1
   e2378:	f000 810b 	beq.w	e2592 <expm1+0x3fa>
   e237c:	9b01      	ldr	r3, [sp, #4]
   e237e:	2b01      	cmp	r3, #1
   e2380:	f000 80df 	beq.w	e2542 <expm1+0x3aa>
   e2384:	9b01      	ldr	r3, [sp, #4]
   e2386:	3301      	adds	r3, #1
   e2388:	2b39      	cmp	r3, #57	; 0x39
   e238a:	d866      	bhi.n	e245a <expm1+0x2c2>
   e238c:	9b01      	ldr	r3, [sp, #4]
   e238e:	2b13      	cmp	r3, #19
   e2390:	f340 8110 	ble.w	e25b4 <expm1+0x41c>
   e2394:	9c01      	ldr	r4, [sp, #4]
   e2396:	f5c4 757f 	rsb	r5, r4, #1020	; 0x3fc
   e239a:	3503      	adds	r5, #3
   e239c:	2200      	movs	r2, #0
   e239e:	052b      	lsls	r3, r5, #20
   e23a0:	f000 fa9c 	bl	e28dc <__adddf3>
   e23a4:	4602      	mov	r2, r0
   e23a6:	460b      	mov	r3, r1
   e23a8:	4650      	mov	r0, sl
   e23aa:	4659      	mov	r1, fp
   e23ac:	f000 fa94 	bl	e28d8 <__aeabi_dsub>
   e23b0:	2200      	movs	r2, #0
   e23b2:	4b59      	ldr	r3, [pc, #356]	; (e2518 <expm1+0x380>)
   e23b4:	f000 fa92 	bl	e28dc <__adddf3>
   e23b8:	eb01 5104 	add.w	r1, r1, r4, lsl #20
   e23bc:	ec41 0b10 	vmov	d0, r0, r1
   e23c0:	e01d      	b.n	e23fe <expm1+0x266>
   e23c2:	4958      	ldr	r1, [pc, #352]	; (e2524 <expm1+0x38c>)
   e23c4:	428b      	cmp	r3, r1
   e23c6:	d91d      	bls.n	e2404 <expm1+0x26c>
   e23c8:	ee10 3a10 	vmov	r3, s0
   e23cc:	f3cb 0213 	ubfx	r2, fp, #0, #20
   e23d0:	4313      	orrs	r3, r2
   e23d2:	f040 8128 	bne.w	e2626 <expm1+0x48e>
   e23d6:	b194      	cbz	r4, e23fe <expm1+0x266>
   e23d8:	ed9f 0b41 	vldr	d0, [pc, #260]	; e24e0 <expm1+0x348>
   e23dc:	e00f      	b.n	e23fe <expm1+0x266>
   e23de:	4650      	mov	r0, sl
   e23e0:	4659      	mov	r1, fp
   e23e2:	f000 fc2d 	bl	e2c40 <__aeabi_dmul>
   e23e6:	4622      	mov	r2, r4
   e23e8:	462b      	mov	r3, r5
   e23ea:	f000 fa75 	bl	e28d8 <__aeabi_dsub>
   e23ee:	4602      	mov	r2, r0
   e23f0:	460b      	mov	r3, r1
   e23f2:	4650      	mov	r0, sl
   e23f4:	4659      	mov	r1, fp
   e23f6:	f000 fa6f 	bl	e28d8 <__aeabi_dsub>
   e23fa:	ec41 0b10 	vmov	d0, r0, r1
   e23fe:	b005      	add	sp, #20
   e2400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e2404:	a338      	add	r3, pc, #224	; (adr r3, e24e8 <expm1+0x350>)
   e2406:	e9d3 2300 	ldrd	r2, r3, [r3]
   e240a:	ee10 0a10 	vmov	r0, s0
   e240e:	4659      	mov	r1, fp
   e2410:	f000 fea6 	bl	e3160 <__aeabi_dcmpgt>
   e2414:	2800      	cmp	r0, #0
   e2416:	f43f aecf 	beq.w	e21b8 <expm1+0x20>
   e241a:	a335      	add	r3, pc, #212	; (adr r3, e24f0 <expm1+0x358>)
   e241c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2420:	4610      	mov	r0, r2
   e2422:	4619      	mov	r1, r3
   e2424:	f000 fc0c 	bl	e2c40 <__aeabi_dmul>
   e2428:	ec41 0b10 	vmov	d0, r0, r1
   e242c:	e7e7      	b.n	e23fe <expm1+0x266>
   e242e:	4a3e      	ldr	r2, [pc, #248]	; (e2528 <expm1+0x390>)
   e2430:	4293      	cmp	r3, r2
   e2432:	f200 80d7 	bhi.w	e25e4 <expm1+0x44c>
   e2436:	ee10 0a10 	vmov	r0, s0
   e243a:	4659      	mov	r1, fp
   e243c:	a31a      	add	r3, pc, #104	; (adr r3, e24a8 <expm1+0x310>)
   e243e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2442:	b1f4      	cbz	r4, e2482 <expm1+0x2ea>
   e2444:	f000 fa4a 	bl	e28dc <__adddf3>
   e2448:	f04f 33ff 	mov.w	r3, #4294967295
   e244c:	4680      	mov	r8, r0
   e244e:	4689      	mov	r9, r1
   e2450:	9301      	str	r3, [sp, #4]
   e2452:	a729      	add	r7, pc, #164	; (adr r7, e24f8 <expm1+0x360>)
   e2454:	e9d7 6700 	ldrd	r6, r7, [r7]
   e2458:	e6e9      	b.n	e222e <expm1+0x96>
   e245a:	4652      	mov	r2, sl
   e245c:	465b      	mov	r3, fp
   e245e:	f000 fa3b 	bl	e28d8 <__aeabi_dsub>
   e2462:	4602      	mov	r2, r0
   e2464:	460b      	mov	r3, r1
   e2466:	2000      	movs	r0, #0
   e2468:	492b      	ldr	r1, [pc, #172]	; (e2518 <expm1+0x380>)
   e246a:	f000 fa35 	bl	e28d8 <__aeabi_dsub>
   e246e:	9a01      	ldr	r2, [sp, #4]
   e2470:	4b29      	ldr	r3, [pc, #164]	; (e2518 <expm1+0x380>)
   e2472:	eb01 5102 	add.w	r1, r1, r2, lsl #20
   e2476:	2200      	movs	r2, #0
   e2478:	f000 fa2e 	bl	e28d8 <__aeabi_dsub>
   e247c:	ec41 0b10 	vmov	d0, r0, r1
   e2480:	e7bd      	b.n	e23fe <expm1+0x266>
   e2482:	f000 fa29 	bl	e28d8 <__aeabi_dsub>
   e2486:	2301      	movs	r3, #1
   e2488:	4680      	mov	r8, r0
   e248a:	4689      	mov	r9, r1
   e248c:	9301      	str	r3, [sp, #4]
   e248e:	a708      	add	r7, pc, #32	; (adr r7, e24b0 <expm1+0x318>)
   e2490:	e9d7 6700 	ldrd	r6, r7, [r7]
   e2494:	e6cb      	b.n	e222e <expm1+0x96>
   e2496:	bf00      	nop
   e2498:	c2f8f359 	.word	0xc2f8f359
   e249c:	01a56e1f 	.word	0x01a56e1f
   e24a0:	652b82fe 	.word	0x652b82fe
   e24a4:	3ff71547 	.word	0x3ff71547
   e24a8:	fee00000 	.word	0xfee00000
   e24ac:	3fe62e42 	.word	0x3fe62e42
   e24b0:	35793c76 	.word	0x35793c76
   e24b4:	3dea39ef 	.word	0x3dea39ef
   e24b8:	6e09c32d 	.word	0x6e09c32d
   e24bc:	be8afdb7 	.word	0xbe8afdb7
   e24c0:	86e65239 	.word	0x86e65239
   e24c4:	3ed0cfca 	.word	0x3ed0cfca
   e24c8:	9eaadbb7 	.word	0x9eaadbb7
   e24cc:	3f14ce19 	.word	0x3f14ce19
   e24d0:	19fe5585 	.word	0x19fe5585
   e24d4:	3f5a01a0 	.word	0x3f5a01a0
   e24d8:	111110f4 	.word	0x111110f4
   e24dc:	3fa11111 	.word	0x3fa11111
   e24e0:	00000000 	.word	0x00000000
   e24e4:	bff00000 	.word	0xbff00000
   e24e8:	fefa39ef 	.word	0xfefa39ef
   e24ec:	40862e42 	.word	0x40862e42
   e24f0:	8800759c 	.word	0x8800759c
   e24f4:	7e37e43c 	.word	0x7e37e43c
   e24f8:	35793c76 	.word	0x35793c76
   e24fc:	bdea39ef 	.word	0xbdea39ef
   e2500:	40436879 	.word	0x40436879
   e2504:	40862e41 	.word	0x40862e41
   e2508:	bfe00000 	.word	0xbfe00000
   e250c:	3fd62e42 	.word	0x3fd62e42
   e2510:	3c8fffff 	.word	0x3c8fffff
   e2514:	3fe00000 	.word	0x3fe00000
   e2518:	3ff00000 	.word	0x3ff00000
   e251c:	40080000 	.word	0x40080000
   e2520:	40180000 	.word	0x40180000
   e2524:	7fefffff 	.word	0x7fefffff
   e2528:	3ff0a2b1 	.word	0x3ff0a2b1
   e252c:	a349      	add	r3, pc, #292	; (adr r3, e2654 <expm1+0x4bc>)
   e252e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2532:	ee10 0a10 	vmov	r0, s0
   e2536:	4659      	mov	r1, fp
   e2538:	f000 f9d0 	bl	e28dc <__adddf3>
   e253c:	4602      	mov	r2, r0
   e253e:	460b      	mov	r3, r1
   e2540:	e753      	b.n	e23ea <expm1+0x252>
   e2542:	2200      	movs	r2, #0
   e2544:	4b40      	ldr	r3, [pc, #256]	; (e2648 <expm1+0x4b0>)
   e2546:	4650      	mov	r0, sl
   e2548:	4659      	mov	r1, fp
   e254a:	f000 fdeb 	bl	e3124 <__aeabi_dcmplt>
   e254e:	2800      	cmp	r0, #0
   e2550:	d058      	beq.n	e2604 <expm1+0x46c>
   e2552:	2200      	movs	r2, #0
   e2554:	4b3d      	ldr	r3, [pc, #244]	; (e264c <expm1+0x4b4>)
   e2556:	4650      	mov	r0, sl
   e2558:	4659      	mov	r1, fp
   e255a:	f000 f9bf 	bl	e28dc <__adddf3>
   e255e:	4602      	mov	r2, r0
   e2560:	460b      	mov	r3, r1
   e2562:	4630      	mov	r0, r6
   e2564:	4639      	mov	r1, r7
   e2566:	f000 f9b7 	bl	e28d8 <__aeabi_dsub>
   e256a:	2200      	movs	r2, #0
   e256c:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
   e2570:	f000 fb66 	bl	e2c40 <__aeabi_dmul>
   e2574:	ec41 0b10 	vmov	d0, r0, r1
   e2578:	e741      	b.n	e23fe <expm1+0x266>
   e257a:	a331      	add	r3, pc, #196	; (adr r3, e2640 <expm1+0x4a8>)
   e257c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2580:	4650      	mov	r0, sl
   e2582:	4659      	mov	r1, fp
   e2584:	f000 fb5c 	bl	e2c40 <__aeabi_dmul>
   e2588:	4602      	mov	r2, r0
   e258a:	460b      	mov	r3, r1
   e258c:	2000      	movs	r0, #0
   e258e:	492f      	ldr	r1, [pc, #188]	; (e264c <expm1+0x4b4>)
   e2590:	e62e      	b.n	e21f0 <expm1+0x58>
   e2592:	4602      	mov	r2, r0
   e2594:	460b      	mov	r3, r1
   e2596:	4650      	mov	r0, sl
   e2598:	4659      	mov	r1, fp
   e259a:	f000 f99d 	bl	e28d8 <__aeabi_dsub>
   e259e:	2200      	movs	r2, #0
   e25a0:	4b2a      	ldr	r3, [pc, #168]	; (e264c <expm1+0x4b4>)
   e25a2:	f000 fb4d 	bl	e2c40 <__aeabi_dmul>
   e25a6:	2200      	movs	r2, #0
   e25a8:	4b28      	ldr	r3, [pc, #160]	; (e264c <expm1+0x4b4>)
   e25aa:	f000 f995 	bl	e28d8 <__aeabi_dsub>
   e25ae:	ec41 0b10 	vmov	d0, r0, r1
   e25b2:	e724      	b.n	e23fe <expm1+0x266>
   e25b4:	9c01      	ldr	r4, [sp, #4]
   e25b6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   e25ba:	4123      	asrs	r3, r4
   e25bc:	f1c3 577f 	rsb	r7, r3, #1069547520	; 0x3fc00000
   e25c0:	4652      	mov	r2, sl
   e25c2:	465b      	mov	r3, fp
   e25c4:	f000 f988 	bl	e28d8 <__aeabi_dsub>
   e25c8:	2600      	movs	r6, #0
   e25ca:	f507 1740 	add.w	r7, r7, #3145728	; 0x300000
   e25ce:	4602      	mov	r2, r0
   e25d0:	460b      	mov	r3, r1
   e25d2:	4630      	mov	r0, r6
   e25d4:	4639      	mov	r1, r7
   e25d6:	f000 f97f 	bl	e28d8 <__aeabi_dsub>
   e25da:	eb01 5104 	add.w	r1, r1, r4, lsl #20
   e25de:	ec41 0b10 	vmov	d0, r0, r1
   e25e2:	e70c      	b.n	e23fe <expm1+0x266>
   e25e4:	a316      	add	r3, pc, #88	; (adr r3, e2640 <expm1+0x4a8>)
   e25e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   e25ea:	ee10 0a10 	vmov	r0, s0
   e25ee:	4659      	mov	r1, fp
   e25f0:	f000 fb26 	bl	e2c40 <__aeabi_dmul>
   e25f4:	4602      	mov	r2, r0
   e25f6:	460b      	mov	r3, r1
   e25f8:	2000      	movs	r0, #0
   e25fa:	2c00      	cmp	r4, #0
   e25fc:	f47f adf7 	bne.w	e21ee <expm1+0x56>
   e2600:	4912      	ldr	r1, [pc, #72]	; (e264c <expm1+0x4b4>)
   e2602:	e5f5      	b.n	e21f0 <expm1+0x58>
   e2604:	4632      	mov	r2, r6
   e2606:	463b      	mov	r3, r7
   e2608:	4650      	mov	r0, sl
   e260a:	4659      	mov	r1, fp
   e260c:	f000 f964 	bl	e28d8 <__aeabi_dsub>
   e2610:	4602      	mov	r2, r0
   e2612:	460b      	mov	r3, r1
   e2614:	f000 f962 	bl	e28dc <__adddf3>
   e2618:	2200      	movs	r2, #0
   e261a:	4b0d      	ldr	r3, [pc, #52]	; (e2650 <expm1+0x4b8>)
   e261c:	f000 f95e 	bl	e28dc <__adddf3>
   e2620:	ec41 0b10 	vmov	d0, r0, r1
   e2624:	e6eb      	b.n	e23fe <expm1+0x266>
   e2626:	ee10 2a10 	vmov	r2, s0
   e262a:	ee10 0a10 	vmov	r0, s0
   e262e:	465b      	mov	r3, fp
   e2630:	4659      	mov	r1, fp
   e2632:	f000 f953 	bl	e28dc <__adddf3>
   e2636:	ec41 0b10 	vmov	d0, r0, r1
   e263a:	e6e0      	b.n	e23fe <expm1+0x266>
   e263c:	f3af 8000 	nop.w
   e2640:	652b82fe 	.word	0x652b82fe
   e2644:	3ff71547 	.word	0x3ff71547
   e2648:	bfd00000 	.word	0xbfd00000
   e264c:	3fe00000 	.word	0x3fe00000
   e2650:	3ff00000 	.word	0x3ff00000
   e2654:	8800759c 	.word	0x8800759c
   e2658:	7e37e43c 	.word	0x7e37e43c

000e265c <finite>:
   e265c:	ee10 3a90 	vmov	r3, s1
   e2660:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
   e2664:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   e2668:	0fc0      	lsrs	r0, r0, #31
   e266a:	4770      	bx	lr

000e266c <matherr>:
   e266c:	2000      	movs	r0, #0
   e266e:	4770      	bx	lr

000e2670 <nan>:
   e2670:	ed9f 0b01 	vldr	d0, [pc, #4]	; e2678 <nan+0x8>
   e2674:	4770      	bx	lr
   e2676:	bf00      	nop
   e2678:	00000000 	.word	0x00000000
   e267c:	7ff80000 	.word	0x7ff80000

000e2680 <rint>:
   e2680:	b5f0      	push	{r4, r5, r6, r7, lr}
   e2682:	ec53 2b10 	vmov	r2, r3, d0
   e2686:	f3c3 560a 	ubfx	r6, r3, #20, #11
   e268a:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   e268e:	2813      	cmp	r0, #19
   e2690:	b083      	sub	sp, #12
   e2692:	4619      	mov	r1, r3
   e2694:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   e2698:	ee10 5a10 	vmov	r5, s0
   e269c:	dc2f      	bgt.n	e26fe <rint+0x7e>
   e269e:	2800      	cmp	r0, #0
   e26a0:	db49      	blt.n	e2736 <rint+0xb6>
   e26a2:	4e3f      	ldr	r6, [pc, #252]	; (e27a0 <rint+0x120>)
   e26a4:	4106      	asrs	r6, r0
   e26a6:	ea03 0706 	and.w	r7, r3, r6
   e26aa:	4317      	orrs	r7, r2
   e26ac:	d02c      	beq.n	e2708 <rint+0x88>
   e26ae:	0876      	lsrs	r6, r6, #1
   e26b0:	4033      	ands	r3, r6
   e26b2:	431d      	orrs	r5, r3
   e26b4:	d00c      	beq.n	e26d0 <rint+0x50>
   e26b6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   e26ba:	2813      	cmp	r0, #19
   e26bc:	ea21 0606 	bic.w	r6, r1, r6
   e26c0:	fa43 f100 	asr.w	r1, r3, r0
   e26c4:	ea41 0106 	orr.w	r1, r1, r6
   e26c8:	bf0c      	ite	eq
   e26ca:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   e26ce:	2500      	movne	r5, #0
   e26d0:	4834      	ldr	r0, [pc, #208]	; (e27a4 <rint+0x124>)
   e26d2:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   e26d6:	462a      	mov	r2, r5
   e26d8:	e9d4 4500 	ldrd	r4, r5, [r4]
   e26dc:	4610      	mov	r0, r2
   e26de:	462b      	mov	r3, r5
   e26e0:	4622      	mov	r2, r4
   e26e2:	f000 f8fb 	bl	e28dc <__adddf3>
   e26e6:	e9cd 0100 	strd	r0, r1, [sp]
   e26ea:	4622      	mov	r2, r4
   e26ec:	462b      	mov	r3, r5
   e26ee:	e9dd 0100 	ldrd	r0, r1, [sp]
   e26f2:	f000 f8f1 	bl	e28d8 <__aeabi_dsub>
   e26f6:	ec41 0b10 	vmov	d0, r0, r1
   e26fa:	b003      	add	sp, #12
   e26fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e26fe:	2833      	cmp	r0, #51	; 0x33
   e2700:	dd06      	ble.n	e2710 <rint+0x90>
   e2702:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   e2706:	d042      	beq.n	e278e <rint+0x10e>
   e2708:	ec43 2b10 	vmov	d0, r2, r3
   e270c:	b003      	add	sp, #12
   e270e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e2710:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   e2714:	f04f 30ff 	mov.w	r0, #4294967295
   e2718:	40f0      	lsrs	r0, r6
   e271a:	4202      	tst	r2, r0
   e271c:	d0f4      	beq.n	e2708 <rint+0x88>
   e271e:	0840      	lsrs	r0, r0, #1
   e2720:	4202      	tst	r2, r0
   e2722:	d0d5      	beq.n	e26d0 <rint+0x50>
   e2724:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   e2728:	ea25 0000 	bic.w	r0, r5, r0
   e272c:	fa43 f606 	asr.w	r6, r3, r6
   e2730:	ea46 0500 	orr.w	r5, r6, r0
   e2734:	e7cc      	b.n	e26d0 <rint+0x50>
   e2736:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   e273a:	4310      	orrs	r0, r2
   e273c:	ee10 7a10 	vmov	r7, s0
   e2740:	d0e2      	beq.n	e2708 <rint+0x88>
   e2742:	f3c3 0013 	ubfx	r0, r3, #0, #20
   e2746:	4307      	orrs	r7, r0
   e2748:	4278      	negs	r0, r7
   e274a:	4307      	orrs	r7, r0
   e274c:	4815      	ldr	r0, [pc, #84]	; (e27a4 <rint+0x124>)
   e274e:	0c59      	lsrs	r1, r3, #17
   e2750:	0b3f      	lsrs	r7, r7, #12
   e2752:	0449      	lsls	r1, r1, #17
   e2754:	f407 2700 	and.w	r7, r7, #524288	; 0x80000
   e2758:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   e275c:	ea47 0301 	orr.w	r3, r7, r1
   e2760:	e9d0 6700 	ldrd	r6, r7, [r0]
   e2764:	4619      	mov	r1, r3
   e2766:	4610      	mov	r0, r2
   e2768:	463b      	mov	r3, r7
   e276a:	4632      	mov	r2, r6
   e276c:	f000 f8b6 	bl	e28dc <__adddf3>
   e2770:	e9cd 0100 	strd	r0, r1, [sp]
   e2774:	463b      	mov	r3, r7
   e2776:	4632      	mov	r2, r6
   e2778:	e9dd 0100 	ldrd	r0, r1, [sp]
   e277c:	f000 f8ac 	bl	e28d8 <__aeabi_dsub>
   e2780:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   e2784:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   e2788:	ec41 0b10 	vmov	d0, r0, r1
   e278c:	e7be      	b.n	e270c <rint+0x8c>
   e278e:	ee10 0a10 	vmov	r0, s0
   e2792:	4619      	mov	r1, r3
   e2794:	f000 f8a2 	bl	e28dc <__adddf3>
   e2798:	ec41 0b10 	vmov	d0, r0, r1
   e279c:	e7b6      	b.n	e270c <rint+0x8c>
   e279e:	bf00      	nop
   e27a0:	000fffff 	.word	0x000fffff
   e27a4:	000e82b8 	.word	0x000e82b8

000e27a8 <scalbn>:
   e27a8:	ec53 2b10 	vmov	r2, r3, d0
   e27ac:	b570      	push	{r4, r5, r6, lr}
   e27ae:	f3c3 540a 	ubfx	r4, r3, #20, #11
   e27b2:	4619      	mov	r1, r3
   e27b4:	4605      	mov	r5, r0
   e27b6:	bb14      	cbnz	r4, e27fe <scalbn+0x56>
   e27b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   e27bc:	4311      	orrs	r1, r2
   e27be:	d02a      	beq.n	e2816 <scalbn+0x6e>
   e27c0:	4619      	mov	r1, r3
   e27c2:	2200      	movs	r2, #0
   e27c4:	4b38      	ldr	r3, [pc, #224]	; (e28a8 <scalbn+0x100>)
   e27c6:	4e39      	ldr	r6, [pc, #228]	; (e28ac <scalbn+0x104>)
   e27c8:	ee10 0a10 	vmov	r0, s0
   e27cc:	f000 fa38 	bl	e2c40 <__aeabi_dmul>
   e27d0:	42b5      	cmp	r5, r6
   e27d2:	4602      	mov	r2, r0
   e27d4:	460b      	mov	r3, r1
   e27d6:	db1f      	blt.n	e2818 <scalbn+0x70>
   e27d8:	f3c1 540a 	ubfx	r4, r1, #20, #11
   e27dc:	3c36      	subs	r4, #54	; 0x36
   e27de:	442c      	add	r4, r5
   e27e0:	f240 70fe 	movw	r0, #2046	; 0x7fe
   e27e4:	4284      	cmp	r4, r0
   e27e6:	dc1f      	bgt.n	e2828 <scalbn+0x80>
   e27e8:	2c00      	cmp	r4, #0
   e27ea:	dd2d      	ble.n	e2848 <scalbn+0xa0>
   e27ec:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   e27f0:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   e27f4:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   e27f8:	ec43 2b10 	vmov	d0, r2, r3
   e27fc:	bd70      	pop	{r4, r5, r6, pc}
   e27fe:	f240 70ff 	movw	r0, #2047	; 0x7ff
   e2802:	4284      	cmp	r4, r0
   e2804:	d1eb      	bne.n	e27de <scalbn+0x36>
   e2806:	ee10 0a10 	vmov	r0, s0
   e280a:	4619      	mov	r1, r3
   e280c:	f000 f866 	bl	e28dc <__adddf3>
   e2810:	ec41 0b10 	vmov	d0, r0, r1
   e2814:	bd70      	pop	{r4, r5, r6, pc}
   e2816:	bd70      	pop	{r4, r5, r6, pc}
   e2818:	a31f      	add	r3, pc, #124	; (adr r3, e2898 <scalbn+0xf0>)
   e281a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e281e:	f000 fa0f 	bl	e2c40 <__aeabi_dmul>
   e2822:	ec41 0b10 	vmov	d0, r0, r1
   e2826:	bd70      	pop	{r4, r5, r6, pc}
   e2828:	ec43 2b11 	vmov	d1, r2, r3
   e282c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; e28a0 <scalbn+0xf8>
   e2830:	f000 f840 	bl	e28b4 <copysign>
   e2834:	a31a      	add	r3, pc, #104	; (adr r3, e28a0 <scalbn+0xf8>)
   e2836:	e9d3 2300 	ldrd	r2, r3, [r3]
   e283a:	ec51 0b10 	vmov	r0, r1, d0
   e283e:	f000 f9ff 	bl	e2c40 <__aeabi_dmul>
   e2842:	ec41 0b10 	vmov	d0, r0, r1
   e2846:	bd70      	pop	{r4, r5, r6, pc}
   e2848:	f114 0f35 	cmn.w	r4, #53	; 0x35
   e284c:	da13      	bge.n	e2876 <scalbn+0xce>
   e284e:	f24c 3150 	movw	r1, #50000	; 0xc350
   e2852:	428d      	cmp	r5, r1
   e2854:	ec43 2b11 	vmov	d1, r2, r3
   e2858:	dce8      	bgt.n	e282c <scalbn+0x84>
   e285a:	ed9f 0b0f 	vldr	d0, [pc, #60]	; e2898 <scalbn+0xf0>
   e285e:	f000 f829 	bl	e28b4 <copysign>
   e2862:	a30d      	add	r3, pc, #52	; (adr r3, e2898 <scalbn+0xf0>)
   e2864:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2868:	ec51 0b10 	vmov	r0, r1, d0
   e286c:	f000 f9e8 	bl	e2c40 <__aeabi_dmul>
   e2870:	ec41 0b10 	vmov	d0, r0, r1
   e2874:	bd70      	pop	{r4, r5, r6, pc}
   e2876:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   e287a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   e287e:	3436      	adds	r4, #54	; 0x36
   e2880:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   e2884:	4610      	mov	r0, r2
   e2886:	4619      	mov	r1, r3
   e2888:	2200      	movs	r2, #0
   e288a:	4b09      	ldr	r3, [pc, #36]	; (e28b0 <scalbn+0x108>)
   e288c:	f000 f9d8 	bl	e2c40 <__aeabi_dmul>
   e2890:	ec41 0b10 	vmov	d0, r0, r1
   e2894:	bd70      	pop	{r4, r5, r6, pc}
   e2896:	bf00      	nop
   e2898:	c2f8f359 	.word	0xc2f8f359
   e289c:	01a56e1f 	.word	0x01a56e1f
   e28a0:	8800759c 	.word	0x8800759c
   e28a4:	7e37e43c 	.word	0x7e37e43c
   e28a8:	43500000 	.word	0x43500000
   e28ac:	ffff3cb0 	.word	0xffff3cb0
   e28b0:	3c900000 	.word	0x3c900000

000e28b4 <copysign>:
   e28b4:	ec53 2b10 	vmov	r2, r3, d0
   e28b8:	ee11 0a90 	vmov	r0, s3
   e28bc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   e28c0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   e28c4:	ea41 0300 	orr.w	r3, r1, r0
   e28c8:	ec43 2b10 	vmov	d0, r2, r3
   e28cc:	4770      	bx	lr
   e28ce:	bf00      	nop

000e28d0 <__aeabi_drsub>:
   e28d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   e28d4:	e002      	b.n	e28dc <__adddf3>
   e28d6:	bf00      	nop

000e28d8 <__aeabi_dsub>:
   e28d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000e28dc <__adddf3>:
   e28dc:	b530      	push	{r4, r5, lr}
   e28de:	ea4f 0441 	mov.w	r4, r1, lsl #1
   e28e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   e28e6:	ea94 0f05 	teq	r4, r5
   e28ea:	bf08      	it	eq
   e28ec:	ea90 0f02 	teqeq	r0, r2
   e28f0:	bf1f      	itttt	ne
   e28f2:	ea54 0c00 	orrsne.w	ip, r4, r0
   e28f6:	ea55 0c02 	orrsne.w	ip, r5, r2
   e28fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   e28fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   e2902:	f000 80e2 	beq.w	e2aca <__adddf3+0x1ee>
   e2906:	ea4f 5454 	mov.w	r4, r4, lsr #21
   e290a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   e290e:	bfb8      	it	lt
   e2910:	426d      	neglt	r5, r5
   e2912:	dd0c      	ble.n	e292e <__adddf3+0x52>
   e2914:	442c      	add	r4, r5
   e2916:	ea80 0202 	eor.w	r2, r0, r2
   e291a:	ea81 0303 	eor.w	r3, r1, r3
   e291e:	ea82 0000 	eor.w	r0, r2, r0
   e2922:	ea83 0101 	eor.w	r1, r3, r1
   e2926:	ea80 0202 	eor.w	r2, r0, r2
   e292a:	ea81 0303 	eor.w	r3, r1, r3
   e292e:	2d36      	cmp	r5, #54	; 0x36
   e2930:	bf88      	it	hi
   e2932:	bd30      	pophi	{r4, r5, pc}
   e2934:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   e2938:	ea4f 3101 	mov.w	r1, r1, lsl #12
   e293c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   e2940:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   e2944:	d002      	beq.n	e294c <__adddf3+0x70>
   e2946:	4240      	negs	r0, r0
   e2948:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   e294c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   e2950:	ea4f 3303 	mov.w	r3, r3, lsl #12
   e2954:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   e2958:	d002      	beq.n	e2960 <__adddf3+0x84>
   e295a:	4252      	negs	r2, r2
   e295c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   e2960:	ea94 0f05 	teq	r4, r5
   e2964:	f000 80a7 	beq.w	e2ab6 <__adddf3+0x1da>
   e2968:	f1a4 0401 	sub.w	r4, r4, #1
   e296c:	f1d5 0e20 	rsbs	lr, r5, #32
   e2970:	db0d      	blt.n	e298e <__adddf3+0xb2>
   e2972:	fa02 fc0e 	lsl.w	ip, r2, lr
   e2976:	fa22 f205 	lsr.w	r2, r2, r5
   e297a:	1880      	adds	r0, r0, r2
   e297c:	f141 0100 	adc.w	r1, r1, #0
   e2980:	fa03 f20e 	lsl.w	r2, r3, lr
   e2984:	1880      	adds	r0, r0, r2
   e2986:	fa43 f305 	asr.w	r3, r3, r5
   e298a:	4159      	adcs	r1, r3
   e298c:	e00e      	b.n	e29ac <__adddf3+0xd0>
   e298e:	f1a5 0520 	sub.w	r5, r5, #32
   e2992:	f10e 0e20 	add.w	lr, lr, #32
   e2996:	2a01      	cmp	r2, #1
   e2998:	fa03 fc0e 	lsl.w	ip, r3, lr
   e299c:	bf28      	it	cs
   e299e:	f04c 0c02 	orrcs.w	ip, ip, #2
   e29a2:	fa43 f305 	asr.w	r3, r3, r5
   e29a6:	18c0      	adds	r0, r0, r3
   e29a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   e29ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e29b0:	d507      	bpl.n	e29c2 <__adddf3+0xe6>
   e29b2:	f04f 0e00 	mov.w	lr, #0
   e29b6:	f1dc 0c00 	rsbs	ip, ip, #0
   e29ba:	eb7e 0000 	sbcs.w	r0, lr, r0
   e29be:	eb6e 0101 	sbc.w	r1, lr, r1
   e29c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   e29c6:	d31b      	bcc.n	e2a00 <__adddf3+0x124>
   e29c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   e29cc:	d30c      	bcc.n	e29e8 <__adddf3+0x10c>
   e29ce:	0849      	lsrs	r1, r1, #1
   e29d0:	ea5f 0030 	movs.w	r0, r0, rrx
   e29d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   e29d8:	f104 0401 	add.w	r4, r4, #1
   e29dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   e29e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   e29e4:	f080 809a 	bcs.w	e2b1c <__adddf3+0x240>
   e29e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   e29ec:	bf08      	it	eq
   e29ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   e29f2:	f150 0000 	adcs.w	r0, r0, #0
   e29f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e29fa:	ea41 0105 	orr.w	r1, r1, r5
   e29fe:	bd30      	pop	{r4, r5, pc}
   e2a00:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   e2a04:	4140      	adcs	r0, r0
   e2a06:	eb41 0101 	adc.w	r1, r1, r1
   e2a0a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e2a0e:	f1a4 0401 	sub.w	r4, r4, #1
   e2a12:	d1e9      	bne.n	e29e8 <__adddf3+0x10c>
   e2a14:	f091 0f00 	teq	r1, #0
   e2a18:	bf04      	itt	eq
   e2a1a:	4601      	moveq	r1, r0
   e2a1c:	2000      	moveq	r0, #0
   e2a1e:	fab1 f381 	clz	r3, r1
   e2a22:	bf08      	it	eq
   e2a24:	3320      	addeq	r3, #32
   e2a26:	f1a3 030b 	sub.w	r3, r3, #11
   e2a2a:	f1b3 0220 	subs.w	r2, r3, #32
   e2a2e:	da0c      	bge.n	e2a4a <__adddf3+0x16e>
   e2a30:	320c      	adds	r2, #12
   e2a32:	dd08      	ble.n	e2a46 <__adddf3+0x16a>
   e2a34:	f102 0c14 	add.w	ip, r2, #20
   e2a38:	f1c2 020c 	rsb	r2, r2, #12
   e2a3c:	fa01 f00c 	lsl.w	r0, r1, ip
   e2a40:	fa21 f102 	lsr.w	r1, r1, r2
   e2a44:	e00c      	b.n	e2a60 <__adddf3+0x184>
   e2a46:	f102 0214 	add.w	r2, r2, #20
   e2a4a:	bfd8      	it	le
   e2a4c:	f1c2 0c20 	rsble	ip, r2, #32
   e2a50:	fa01 f102 	lsl.w	r1, r1, r2
   e2a54:	fa20 fc0c 	lsr.w	ip, r0, ip
   e2a58:	bfdc      	itt	le
   e2a5a:	ea41 010c 	orrle.w	r1, r1, ip
   e2a5e:	4090      	lslle	r0, r2
   e2a60:	1ae4      	subs	r4, r4, r3
   e2a62:	bfa2      	ittt	ge
   e2a64:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   e2a68:	4329      	orrge	r1, r5
   e2a6a:	bd30      	popge	{r4, r5, pc}
   e2a6c:	ea6f 0404 	mvn.w	r4, r4
   e2a70:	3c1f      	subs	r4, #31
   e2a72:	da1c      	bge.n	e2aae <__adddf3+0x1d2>
   e2a74:	340c      	adds	r4, #12
   e2a76:	dc0e      	bgt.n	e2a96 <__adddf3+0x1ba>
   e2a78:	f104 0414 	add.w	r4, r4, #20
   e2a7c:	f1c4 0220 	rsb	r2, r4, #32
   e2a80:	fa20 f004 	lsr.w	r0, r0, r4
   e2a84:	fa01 f302 	lsl.w	r3, r1, r2
   e2a88:	ea40 0003 	orr.w	r0, r0, r3
   e2a8c:	fa21 f304 	lsr.w	r3, r1, r4
   e2a90:	ea45 0103 	orr.w	r1, r5, r3
   e2a94:	bd30      	pop	{r4, r5, pc}
   e2a96:	f1c4 040c 	rsb	r4, r4, #12
   e2a9a:	f1c4 0220 	rsb	r2, r4, #32
   e2a9e:	fa20 f002 	lsr.w	r0, r0, r2
   e2aa2:	fa01 f304 	lsl.w	r3, r1, r4
   e2aa6:	ea40 0003 	orr.w	r0, r0, r3
   e2aaa:	4629      	mov	r1, r5
   e2aac:	bd30      	pop	{r4, r5, pc}
   e2aae:	fa21 f004 	lsr.w	r0, r1, r4
   e2ab2:	4629      	mov	r1, r5
   e2ab4:	bd30      	pop	{r4, r5, pc}
   e2ab6:	f094 0f00 	teq	r4, #0
   e2aba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   e2abe:	bf06      	itte	eq
   e2ac0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   e2ac4:	3401      	addeq	r4, #1
   e2ac6:	3d01      	subne	r5, #1
   e2ac8:	e74e      	b.n	e2968 <__adddf3+0x8c>
   e2aca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   e2ace:	bf18      	it	ne
   e2ad0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   e2ad4:	d029      	beq.n	e2b2a <__adddf3+0x24e>
   e2ad6:	ea94 0f05 	teq	r4, r5
   e2ada:	bf08      	it	eq
   e2adc:	ea90 0f02 	teqeq	r0, r2
   e2ae0:	d005      	beq.n	e2aee <__adddf3+0x212>
   e2ae2:	ea54 0c00 	orrs.w	ip, r4, r0
   e2ae6:	bf04      	itt	eq
   e2ae8:	4619      	moveq	r1, r3
   e2aea:	4610      	moveq	r0, r2
   e2aec:	bd30      	pop	{r4, r5, pc}
   e2aee:	ea91 0f03 	teq	r1, r3
   e2af2:	bf1e      	ittt	ne
   e2af4:	2100      	movne	r1, #0
   e2af6:	2000      	movne	r0, #0
   e2af8:	bd30      	popne	{r4, r5, pc}
   e2afa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   e2afe:	d105      	bne.n	e2b0c <__adddf3+0x230>
   e2b00:	0040      	lsls	r0, r0, #1
   e2b02:	4149      	adcs	r1, r1
   e2b04:	bf28      	it	cs
   e2b06:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   e2b0a:	bd30      	pop	{r4, r5, pc}
   e2b0c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   e2b10:	bf3c      	itt	cc
   e2b12:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   e2b16:	bd30      	popcc	{r4, r5, pc}
   e2b18:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e2b1c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   e2b20:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   e2b24:	f04f 0000 	mov.w	r0, #0
   e2b28:	bd30      	pop	{r4, r5, pc}
   e2b2a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   e2b2e:	bf1a      	itte	ne
   e2b30:	4619      	movne	r1, r3
   e2b32:	4610      	movne	r0, r2
   e2b34:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   e2b38:	bf1c      	itt	ne
   e2b3a:	460b      	movne	r3, r1
   e2b3c:	4602      	movne	r2, r0
   e2b3e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   e2b42:	bf06      	itte	eq
   e2b44:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   e2b48:	ea91 0f03 	teqeq	r1, r3
   e2b4c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   e2b50:	bd30      	pop	{r4, r5, pc}
   e2b52:	bf00      	nop

000e2b54 <__aeabi_ui2d>:
   e2b54:	f090 0f00 	teq	r0, #0
   e2b58:	bf04      	itt	eq
   e2b5a:	2100      	moveq	r1, #0
   e2b5c:	4770      	bxeq	lr
   e2b5e:	b530      	push	{r4, r5, lr}
   e2b60:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e2b64:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e2b68:	f04f 0500 	mov.w	r5, #0
   e2b6c:	f04f 0100 	mov.w	r1, #0
   e2b70:	e750      	b.n	e2a14 <__adddf3+0x138>
   e2b72:	bf00      	nop

000e2b74 <__aeabi_i2d>:
   e2b74:	f090 0f00 	teq	r0, #0
   e2b78:	bf04      	itt	eq
   e2b7a:	2100      	moveq	r1, #0
   e2b7c:	4770      	bxeq	lr
   e2b7e:	b530      	push	{r4, r5, lr}
   e2b80:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e2b84:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e2b88:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   e2b8c:	bf48      	it	mi
   e2b8e:	4240      	negmi	r0, r0
   e2b90:	f04f 0100 	mov.w	r1, #0
   e2b94:	e73e      	b.n	e2a14 <__adddf3+0x138>
   e2b96:	bf00      	nop

000e2b98 <__aeabi_f2d>:
   e2b98:	0042      	lsls	r2, r0, #1
   e2b9a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   e2b9e:	ea4f 0131 	mov.w	r1, r1, rrx
   e2ba2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   e2ba6:	bf1f      	itttt	ne
   e2ba8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   e2bac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   e2bb0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   e2bb4:	4770      	bxne	lr
   e2bb6:	f092 0f00 	teq	r2, #0
   e2bba:	bf14      	ite	ne
   e2bbc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   e2bc0:	4770      	bxeq	lr
   e2bc2:	b530      	push	{r4, r5, lr}
   e2bc4:	f44f 7460 	mov.w	r4, #896	; 0x380
   e2bc8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e2bcc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   e2bd0:	e720      	b.n	e2a14 <__adddf3+0x138>
   e2bd2:	bf00      	nop

000e2bd4 <__aeabi_ul2d>:
   e2bd4:	ea50 0201 	orrs.w	r2, r0, r1
   e2bd8:	bf08      	it	eq
   e2bda:	4770      	bxeq	lr
   e2bdc:	b530      	push	{r4, r5, lr}
   e2bde:	f04f 0500 	mov.w	r5, #0
   e2be2:	e00a      	b.n	e2bfa <__aeabi_l2d+0x16>

000e2be4 <__aeabi_l2d>:
   e2be4:	ea50 0201 	orrs.w	r2, r0, r1
   e2be8:	bf08      	it	eq
   e2bea:	4770      	bxeq	lr
   e2bec:	b530      	push	{r4, r5, lr}
   e2bee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   e2bf2:	d502      	bpl.n	e2bfa <__aeabi_l2d+0x16>
   e2bf4:	4240      	negs	r0, r0
   e2bf6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   e2bfa:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e2bfe:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e2c02:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   e2c06:	f43f aedc 	beq.w	e29c2 <__adddf3+0xe6>
   e2c0a:	f04f 0203 	mov.w	r2, #3
   e2c0e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   e2c12:	bf18      	it	ne
   e2c14:	3203      	addne	r2, #3
   e2c16:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   e2c1a:	bf18      	it	ne
   e2c1c:	3203      	addne	r2, #3
   e2c1e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   e2c22:	f1c2 0320 	rsb	r3, r2, #32
   e2c26:	fa00 fc03 	lsl.w	ip, r0, r3
   e2c2a:	fa20 f002 	lsr.w	r0, r0, r2
   e2c2e:	fa01 fe03 	lsl.w	lr, r1, r3
   e2c32:	ea40 000e 	orr.w	r0, r0, lr
   e2c36:	fa21 f102 	lsr.w	r1, r1, r2
   e2c3a:	4414      	add	r4, r2
   e2c3c:	e6c1      	b.n	e29c2 <__adddf3+0xe6>
   e2c3e:	bf00      	nop

000e2c40 <__aeabi_dmul>:
   e2c40:	b570      	push	{r4, r5, r6, lr}
   e2c42:	f04f 0cff 	mov.w	ip, #255	; 0xff
   e2c46:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   e2c4a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   e2c4e:	bf1d      	ittte	ne
   e2c50:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   e2c54:	ea94 0f0c 	teqne	r4, ip
   e2c58:	ea95 0f0c 	teqne	r5, ip
   e2c5c:	f000 f8de 	bleq	e2e1c <__aeabi_dmul+0x1dc>
   e2c60:	442c      	add	r4, r5
   e2c62:	ea81 0603 	eor.w	r6, r1, r3
   e2c66:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   e2c6a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   e2c6e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   e2c72:	bf18      	it	ne
   e2c74:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   e2c78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e2c7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   e2c80:	d038      	beq.n	e2cf4 <__aeabi_dmul+0xb4>
   e2c82:	fba0 ce02 	umull	ip, lr, r0, r2
   e2c86:	f04f 0500 	mov.w	r5, #0
   e2c8a:	fbe1 e502 	umlal	lr, r5, r1, r2
   e2c8e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   e2c92:	fbe0 e503 	umlal	lr, r5, r0, r3
   e2c96:	f04f 0600 	mov.w	r6, #0
   e2c9a:	fbe1 5603 	umlal	r5, r6, r1, r3
   e2c9e:	f09c 0f00 	teq	ip, #0
   e2ca2:	bf18      	it	ne
   e2ca4:	f04e 0e01 	orrne.w	lr, lr, #1
   e2ca8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   e2cac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   e2cb0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   e2cb4:	d204      	bcs.n	e2cc0 <__aeabi_dmul+0x80>
   e2cb6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   e2cba:	416d      	adcs	r5, r5
   e2cbc:	eb46 0606 	adc.w	r6, r6, r6
   e2cc0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   e2cc4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   e2cc8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   e2ccc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   e2cd0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   e2cd4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   e2cd8:	bf88      	it	hi
   e2cda:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   e2cde:	d81e      	bhi.n	e2d1e <__aeabi_dmul+0xde>
   e2ce0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   e2ce4:	bf08      	it	eq
   e2ce6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   e2cea:	f150 0000 	adcs.w	r0, r0, #0
   e2cee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e2cf2:	bd70      	pop	{r4, r5, r6, pc}
   e2cf4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   e2cf8:	ea46 0101 	orr.w	r1, r6, r1
   e2cfc:	ea40 0002 	orr.w	r0, r0, r2
   e2d00:	ea81 0103 	eor.w	r1, r1, r3
   e2d04:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   e2d08:	bfc2      	ittt	gt
   e2d0a:	ebd4 050c 	rsbsgt	r5, r4, ip
   e2d0e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   e2d12:	bd70      	popgt	{r4, r5, r6, pc}
   e2d14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e2d18:	f04f 0e00 	mov.w	lr, #0
   e2d1c:	3c01      	subs	r4, #1
   e2d1e:	f300 80ab 	bgt.w	e2e78 <__aeabi_dmul+0x238>
   e2d22:	f114 0f36 	cmn.w	r4, #54	; 0x36
   e2d26:	bfde      	ittt	le
   e2d28:	2000      	movle	r0, #0
   e2d2a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   e2d2e:	bd70      	pople	{r4, r5, r6, pc}
   e2d30:	f1c4 0400 	rsb	r4, r4, #0
   e2d34:	3c20      	subs	r4, #32
   e2d36:	da35      	bge.n	e2da4 <__aeabi_dmul+0x164>
   e2d38:	340c      	adds	r4, #12
   e2d3a:	dc1b      	bgt.n	e2d74 <__aeabi_dmul+0x134>
   e2d3c:	f104 0414 	add.w	r4, r4, #20
   e2d40:	f1c4 0520 	rsb	r5, r4, #32
   e2d44:	fa00 f305 	lsl.w	r3, r0, r5
   e2d48:	fa20 f004 	lsr.w	r0, r0, r4
   e2d4c:	fa01 f205 	lsl.w	r2, r1, r5
   e2d50:	ea40 0002 	orr.w	r0, r0, r2
   e2d54:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   e2d58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   e2d5c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   e2d60:	fa21 f604 	lsr.w	r6, r1, r4
   e2d64:	eb42 0106 	adc.w	r1, r2, r6
   e2d68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e2d6c:	bf08      	it	eq
   e2d6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e2d72:	bd70      	pop	{r4, r5, r6, pc}
   e2d74:	f1c4 040c 	rsb	r4, r4, #12
   e2d78:	f1c4 0520 	rsb	r5, r4, #32
   e2d7c:	fa00 f304 	lsl.w	r3, r0, r4
   e2d80:	fa20 f005 	lsr.w	r0, r0, r5
   e2d84:	fa01 f204 	lsl.w	r2, r1, r4
   e2d88:	ea40 0002 	orr.w	r0, r0, r2
   e2d8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e2d90:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   e2d94:	f141 0100 	adc.w	r1, r1, #0
   e2d98:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e2d9c:	bf08      	it	eq
   e2d9e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e2da2:	bd70      	pop	{r4, r5, r6, pc}
   e2da4:	f1c4 0520 	rsb	r5, r4, #32
   e2da8:	fa00 f205 	lsl.w	r2, r0, r5
   e2dac:	ea4e 0e02 	orr.w	lr, lr, r2
   e2db0:	fa20 f304 	lsr.w	r3, r0, r4
   e2db4:	fa01 f205 	lsl.w	r2, r1, r5
   e2db8:	ea43 0302 	orr.w	r3, r3, r2
   e2dbc:	fa21 f004 	lsr.w	r0, r1, r4
   e2dc0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e2dc4:	fa21 f204 	lsr.w	r2, r1, r4
   e2dc8:	ea20 0002 	bic.w	r0, r0, r2
   e2dcc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   e2dd0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e2dd4:	bf08      	it	eq
   e2dd6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e2dda:	bd70      	pop	{r4, r5, r6, pc}
   e2ddc:	f094 0f00 	teq	r4, #0
   e2de0:	d10f      	bne.n	e2e02 <__aeabi_dmul+0x1c2>
   e2de2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   e2de6:	0040      	lsls	r0, r0, #1
   e2de8:	eb41 0101 	adc.w	r1, r1, r1
   e2dec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e2df0:	bf08      	it	eq
   e2df2:	3c01      	subeq	r4, #1
   e2df4:	d0f7      	beq.n	e2de6 <__aeabi_dmul+0x1a6>
   e2df6:	ea41 0106 	orr.w	r1, r1, r6
   e2dfa:	f095 0f00 	teq	r5, #0
   e2dfe:	bf18      	it	ne
   e2e00:	4770      	bxne	lr
   e2e02:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   e2e06:	0052      	lsls	r2, r2, #1
   e2e08:	eb43 0303 	adc.w	r3, r3, r3
   e2e0c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   e2e10:	bf08      	it	eq
   e2e12:	3d01      	subeq	r5, #1
   e2e14:	d0f7      	beq.n	e2e06 <__aeabi_dmul+0x1c6>
   e2e16:	ea43 0306 	orr.w	r3, r3, r6
   e2e1a:	4770      	bx	lr
   e2e1c:	ea94 0f0c 	teq	r4, ip
   e2e20:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   e2e24:	bf18      	it	ne
   e2e26:	ea95 0f0c 	teqne	r5, ip
   e2e2a:	d00c      	beq.n	e2e46 <__aeabi_dmul+0x206>
   e2e2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e2e30:	bf18      	it	ne
   e2e32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e2e36:	d1d1      	bne.n	e2ddc <__aeabi_dmul+0x19c>
   e2e38:	ea81 0103 	eor.w	r1, r1, r3
   e2e3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e2e40:	f04f 0000 	mov.w	r0, #0
   e2e44:	bd70      	pop	{r4, r5, r6, pc}
   e2e46:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e2e4a:	bf06      	itte	eq
   e2e4c:	4610      	moveq	r0, r2
   e2e4e:	4619      	moveq	r1, r3
   e2e50:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e2e54:	d019      	beq.n	e2e8a <__aeabi_dmul+0x24a>
   e2e56:	ea94 0f0c 	teq	r4, ip
   e2e5a:	d102      	bne.n	e2e62 <__aeabi_dmul+0x222>
   e2e5c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   e2e60:	d113      	bne.n	e2e8a <__aeabi_dmul+0x24a>
   e2e62:	ea95 0f0c 	teq	r5, ip
   e2e66:	d105      	bne.n	e2e74 <__aeabi_dmul+0x234>
   e2e68:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   e2e6c:	bf1c      	itt	ne
   e2e6e:	4610      	movne	r0, r2
   e2e70:	4619      	movne	r1, r3
   e2e72:	d10a      	bne.n	e2e8a <__aeabi_dmul+0x24a>
   e2e74:	ea81 0103 	eor.w	r1, r1, r3
   e2e78:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e2e7c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   e2e80:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   e2e84:	f04f 0000 	mov.w	r0, #0
   e2e88:	bd70      	pop	{r4, r5, r6, pc}
   e2e8a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   e2e8e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   e2e92:	bd70      	pop	{r4, r5, r6, pc}

000e2e94 <__aeabi_ddiv>:
   e2e94:	b570      	push	{r4, r5, r6, lr}
   e2e96:	f04f 0cff 	mov.w	ip, #255	; 0xff
   e2e9a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   e2e9e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   e2ea2:	bf1d      	ittte	ne
   e2ea4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   e2ea8:	ea94 0f0c 	teqne	r4, ip
   e2eac:	ea95 0f0c 	teqne	r5, ip
   e2eb0:	f000 f8a7 	bleq	e3002 <__aeabi_ddiv+0x16e>
   e2eb4:	eba4 0405 	sub.w	r4, r4, r5
   e2eb8:	ea81 0e03 	eor.w	lr, r1, r3
   e2ebc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   e2ec0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   e2ec4:	f000 8088 	beq.w	e2fd8 <__aeabi_ddiv+0x144>
   e2ec8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   e2ecc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   e2ed0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   e2ed4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   e2ed8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   e2edc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   e2ee0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   e2ee4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   e2ee8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   e2eec:	429d      	cmp	r5, r3
   e2eee:	bf08      	it	eq
   e2ef0:	4296      	cmpeq	r6, r2
   e2ef2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   e2ef6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   e2efa:	d202      	bcs.n	e2f02 <__aeabi_ddiv+0x6e>
   e2efc:	085b      	lsrs	r3, r3, #1
   e2efe:	ea4f 0232 	mov.w	r2, r2, rrx
   e2f02:	1ab6      	subs	r6, r6, r2
   e2f04:	eb65 0503 	sbc.w	r5, r5, r3
   e2f08:	085b      	lsrs	r3, r3, #1
   e2f0a:	ea4f 0232 	mov.w	r2, r2, rrx
   e2f0e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   e2f12:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   e2f16:	ebb6 0e02 	subs.w	lr, r6, r2
   e2f1a:	eb75 0e03 	sbcs.w	lr, r5, r3
   e2f1e:	bf22      	ittt	cs
   e2f20:	1ab6      	subcs	r6, r6, r2
   e2f22:	4675      	movcs	r5, lr
   e2f24:	ea40 000c 	orrcs.w	r0, r0, ip
   e2f28:	085b      	lsrs	r3, r3, #1
   e2f2a:	ea4f 0232 	mov.w	r2, r2, rrx
   e2f2e:	ebb6 0e02 	subs.w	lr, r6, r2
   e2f32:	eb75 0e03 	sbcs.w	lr, r5, r3
   e2f36:	bf22      	ittt	cs
   e2f38:	1ab6      	subcs	r6, r6, r2
   e2f3a:	4675      	movcs	r5, lr
   e2f3c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   e2f40:	085b      	lsrs	r3, r3, #1
   e2f42:	ea4f 0232 	mov.w	r2, r2, rrx
   e2f46:	ebb6 0e02 	subs.w	lr, r6, r2
   e2f4a:	eb75 0e03 	sbcs.w	lr, r5, r3
   e2f4e:	bf22      	ittt	cs
   e2f50:	1ab6      	subcs	r6, r6, r2
   e2f52:	4675      	movcs	r5, lr
   e2f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   e2f58:	085b      	lsrs	r3, r3, #1
   e2f5a:	ea4f 0232 	mov.w	r2, r2, rrx
   e2f5e:	ebb6 0e02 	subs.w	lr, r6, r2
   e2f62:	eb75 0e03 	sbcs.w	lr, r5, r3
   e2f66:	bf22      	ittt	cs
   e2f68:	1ab6      	subcs	r6, r6, r2
   e2f6a:	4675      	movcs	r5, lr
   e2f6c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   e2f70:	ea55 0e06 	orrs.w	lr, r5, r6
   e2f74:	d018      	beq.n	e2fa8 <__aeabi_ddiv+0x114>
   e2f76:	ea4f 1505 	mov.w	r5, r5, lsl #4
   e2f7a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   e2f7e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   e2f82:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   e2f86:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   e2f8a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   e2f8e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   e2f92:	d1c0      	bne.n	e2f16 <__aeabi_ddiv+0x82>
   e2f94:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e2f98:	d10b      	bne.n	e2fb2 <__aeabi_ddiv+0x11e>
   e2f9a:	ea41 0100 	orr.w	r1, r1, r0
   e2f9e:	f04f 0000 	mov.w	r0, #0
   e2fa2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   e2fa6:	e7b6      	b.n	e2f16 <__aeabi_ddiv+0x82>
   e2fa8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e2fac:	bf04      	itt	eq
   e2fae:	4301      	orreq	r1, r0
   e2fb0:	2000      	moveq	r0, #0
   e2fb2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   e2fb6:	bf88      	it	hi
   e2fb8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   e2fbc:	f63f aeaf 	bhi.w	e2d1e <__aeabi_dmul+0xde>
   e2fc0:	ebb5 0c03 	subs.w	ip, r5, r3
   e2fc4:	bf04      	itt	eq
   e2fc6:	ebb6 0c02 	subseq.w	ip, r6, r2
   e2fca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   e2fce:	f150 0000 	adcs.w	r0, r0, #0
   e2fd2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e2fd6:	bd70      	pop	{r4, r5, r6, pc}
   e2fd8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   e2fdc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   e2fe0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   e2fe4:	bfc2      	ittt	gt
   e2fe6:	ebd4 050c 	rsbsgt	r5, r4, ip
   e2fea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   e2fee:	bd70      	popgt	{r4, r5, r6, pc}
   e2ff0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e2ff4:	f04f 0e00 	mov.w	lr, #0
   e2ff8:	3c01      	subs	r4, #1
   e2ffa:	e690      	b.n	e2d1e <__aeabi_dmul+0xde>
   e2ffc:	ea45 0e06 	orr.w	lr, r5, r6
   e3000:	e68d      	b.n	e2d1e <__aeabi_dmul+0xde>
   e3002:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   e3006:	ea94 0f0c 	teq	r4, ip
   e300a:	bf08      	it	eq
   e300c:	ea95 0f0c 	teqeq	r5, ip
   e3010:	f43f af3b 	beq.w	e2e8a <__aeabi_dmul+0x24a>
   e3014:	ea94 0f0c 	teq	r4, ip
   e3018:	d10a      	bne.n	e3030 <__aeabi_ddiv+0x19c>
   e301a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   e301e:	f47f af34 	bne.w	e2e8a <__aeabi_dmul+0x24a>
   e3022:	ea95 0f0c 	teq	r5, ip
   e3026:	f47f af25 	bne.w	e2e74 <__aeabi_dmul+0x234>
   e302a:	4610      	mov	r0, r2
   e302c:	4619      	mov	r1, r3
   e302e:	e72c      	b.n	e2e8a <__aeabi_dmul+0x24a>
   e3030:	ea95 0f0c 	teq	r5, ip
   e3034:	d106      	bne.n	e3044 <__aeabi_ddiv+0x1b0>
   e3036:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   e303a:	f43f aefd 	beq.w	e2e38 <__aeabi_dmul+0x1f8>
   e303e:	4610      	mov	r0, r2
   e3040:	4619      	mov	r1, r3
   e3042:	e722      	b.n	e2e8a <__aeabi_dmul+0x24a>
   e3044:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e3048:	bf18      	it	ne
   e304a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e304e:	f47f aec5 	bne.w	e2ddc <__aeabi_dmul+0x19c>
   e3052:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   e3056:	f47f af0d 	bne.w	e2e74 <__aeabi_dmul+0x234>
   e305a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   e305e:	f47f aeeb 	bne.w	e2e38 <__aeabi_dmul+0x1f8>
   e3062:	e712      	b.n	e2e8a <__aeabi_dmul+0x24a>

000e3064 <__gedf2>:
   e3064:	f04f 3cff 	mov.w	ip, #4294967295
   e3068:	e006      	b.n	e3078 <__cmpdf2+0x4>
   e306a:	bf00      	nop

000e306c <__ledf2>:
   e306c:	f04f 0c01 	mov.w	ip, #1
   e3070:	e002      	b.n	e3078 <__cmpdf2+0x4>
   e3072:	bf00      	nop

000e3074 <__cmpdf2>:
   e3074:	f04f 0c01 	mov.w	ip, #1
   e3078:	f84d cd04 	str.w	ip, [sp, #-4]!
   e307c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e3080:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e3084:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e3088:	bf18      	it	ne
   e308a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   e308e:	d01b      	beq.n	e30c8 <__cmpdf2+0x54>
   e3090:	b001      	add	sp, #4
   e3092:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   e3096:	bf0c      	ite	eq
   e3098:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   e309c:	ea91 0f03 	teqne	r1, r3
   e30a0:	bf02      	ittt	eq
   e30a2:	ea90 0f02 	teqeq	r0, r2
   e30a6:	2000      	moveq	r0, #0
   e30a8:	4770      	bxeq	lr
   e30aa:	f110 0f00 	cmn.w	r0, #0
   e30ae:	ea91 0f03 	teq	r1, r3
   e30b2:	bf58      	it	pl
   e30b4:	4299      	cmppl	r1, r3
   e30b6:	bf08      	it	eq
   e30b8:	4290      	cmpeq	r0, r2
   e30ba:	bf2c      	ite	cs
   e30bc:	17d8      	asrcs	r0, r3, #31
   e30be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   e30c2:	f040 0001 	orr.w	r0, r0, #1
   e30c6:	4770      	bx	lr
   e30c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e30cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e30d0:	d102      	bne.n	e30d8 <__cmpdf2+0x64>
   e30d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   e30d6:	d107      	bne.n	e30e8 <__cmpdf2+0x74>
   e30d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e30dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e30e0:	d1d6      	bne.n	e3090 <__cmpdf2+0x1c>
   e30e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   e30e6:	d0d3      	beq.n	e3090 <__cmpdf2+0x1c>
   e30e8:	f85d 0b04 	ldr.w	r0, [sp], #4
   e30ec:	4770      	bx	lr
   e30ee:	bf00      	nop

000e30f0 <__aeabi_cdrcmple>:
   e30f0:	4684      	mov	ip, r0
   e30f2:	4610      	mov	r0, r2
   e30f4:	4662      	mov	r2, ip
   e30f6:	468c      	mov	ip, r1
   e30f8:	4619      	mov	r1, r3
   e30fa:	4663      	mov	r3, ip
   e30fc:	e000      	b.n	e3100 <__aeabi_cdcmpeq>
   e30fe:	bf00      	nop

000e3100 <__aeabi_cdcmpeq>:
   e3100:	b501      	push	{r0, lr}
   e3102:	f7ff ffb7 	bl	e3074 <__cmpdf2>
   e3106:	2800      	cmp	r0, #0
   e3108:	bf48      	it	mi
   e310a:	f110 0f00 	cmnmi.w	r0, #0
   e310e:	bd01      	pop	{r0, pc}

000e3110 <__aeabi_dcmpeq>:
   e3110:	f84d ed08 	str.w	lr, [sp, #-8]!
   e3114:	f7ff fff4 	bl	e3100 <__aeabi_cdcmpeq>
   e3118:	bf0c      	ite	eq
   e311a:	2001      	moveq	r0, #1
   e311c:	2000      	movne	r0, #0
   e311e:	f85d fb08 	ldr.w	pc, [sp], #8
   e3122:	bf00      	nop

000e3124 <__aeabi_dcmplt>:
   e3124:	f84d ed08 	str.w	lr, [sp, #-8]!
   e3128:	f7ff ffea 	bl	e3100 <__aeabi_cdcmpeq>
   e312c:	bf34      	ite	cc
   e312e:	2001      	movcc	r0, #1
   e3130:	2000      	movcs	r0, #0
   e3132:	f85d fb08 	ldr.w	pc, [sp], #8
   e3136:	bf00      	nop

000e3138 <__aeabi_dcmple>:
   e3138:	f84d ed08 	str.w	lr, [sp, #-8]!
   e313c:	f7ff ffe0 	bl	e3100 <__aeabi_cdcmpeq>
   e3140:	bf94      	ite	ls
   e3142:	2001      	movls	r0, #1
   e3144:	2000      	movhi	r0, #0
   e3146:	f85d fb08 	ldr.w	pc, [sp], #8
   e314a:	bf00      	nop

000e314c <__aeabi_dcmpge>:
   e314c:	f84d ed08 	str.w	lr, [sp, #-8]!
   e3150:	f7ff ffce 	bl	e30f0 <__aeabi_cdrcmple>
   e3154:	bf94      	ite	ls
   e3156:	2001      	movls	r0, #1
   e3158:	2000      	movhi	r0, #0
   e315a:	f85d fb08 	ldr.w	pc, [sp], #8
   e315e:	bf00      	nop

000e3160 <__aeabi_dcmpgt>:
   e3160:	f84d ed08 	str.w	lr, [sp, #-8]!
   e3164:	f7ff ffc4 	bl	e30f0 <__aeabi_cdrcmple>
   e3168:	bf34      	ite	cc
   e316a:	2001      	movcc	r0, #1
   e316c:	2000      	movcs	r0, #0
   e316e:	f85d fb08 	ldr.w	pc, [sp], #8
   e3172:	bf00      	nop

000e3174 <__aeabi_dcmpun>:
   e3174:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e3178:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e317c:	d102      	bne.n	e3184 <__aeabi_dcmpun+0x10>
   e317e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   e3182:	d10a      	bne.n	e319a <__aeabi_dcmpun+0x26>
   e3184:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e3188:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e318c:	d102      	bne.n	e3194 <__aeabi_dcmpun+0x20>
   e318e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   e3192:	d102      	bne.n	e319a <__aeabi_dcmpun+0x26>
   e3194:	f04f 0000 	mov.w	r0, #0
   e3198:	4770      	bx	lr
   e319a:	f04f 0001 	mov.w	r0, #1
   e319e:	4770      	bx	lr

000e31a0 <__aeabi_d2iz>:
   e31a0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   e31a4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   e31a8:	d215      	bcs.n	e31d6 <__aeabi_d2iz+0x36>
   e31aa:	d511      	bpl.n	e31d0 <__aeabi_d2iz+0x30>
   e31ac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   e31b0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   e31b4:	d912      	bls.n	e31dc <__aeabi_d2iz+0x3c>
   e31b6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e31ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   e31be:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   e31c2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   e31c6:	fa23 f002 	lsr.w	r0, r3, r2
   e31ca:	bf18      	it	ne
   e31cc:	4240      	negne	r0, r0
   e31ce:	4770      	bx	lr
   e31d0:	f04f 0000 	mov.w	r0, #0
   e31d4:	4770      	bx	lr
   e31d6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   e31da:	d105      	bne.n	e31e8 <__aeabi_d2iz+0x48>
   e31dc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   e31e0:	bf08      	it	eq
   e31e2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   e31e6:	4770      	bx	lr
   e31e8:	f04f 0000 	mov.w	r0, #0
   e31ec:	4770      	bx	lr
   e31ee:	bf00      	nop

000e31f0 <__aeabi_d2uiz>:
   e31f0:	004a      	lsls	r2, r1, #1
   e31f2:	d211      	bcs.n	e3218 <__aeabi_d2uiz+0x28>
   e31f4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   e31f8:	d211      	bcs.n	e321e <__aeabi_d2uiz+0x2e>
   e31fa:	d50d      	bpl.n	e3218 <__aeabi_d2uiz+0x28>
   e31fc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   e3200:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   e3204:	d40e      	bmi.n	e3224 <__aeabi_d2uiz+0x34>
   e3206:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e320a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   e320e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   e3212:	fa23 f002 	lsr.w	r0, r3, r2
   e3216:	4770      	bx	lr
   e3218:	f04f 0000 	mov.w	r0, #0
   e321c:	4770      	bx	lr
   e321e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   e3222:	d102      	bne.n	e322a <__aeabi_d2uiz+0x3a>
   e3224:	f04f 30ff 	mov.w	r0, #4294967295
   e3228:	4770      	bx	lr
   e322a:	f04f 0000 	mov.w	r0, #0
   e322e:	4770      	bx	lr

000e3230 <__aeabi_d2f>:
   e3230:	ea4f 0241 	mov.w	r2, r1, lsl #1
   e3234:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   e3238:	bf24      	itt	cs
   e323a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   e323e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   e3242:	d90d      	bls.n	e3260 <__aeabi_d2f+0x30>
   e3244:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   e3248:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   e324c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   e3250:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   e3254:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   e3258:	bf08      	it	eq
   e325a:	f020 0001 	biceq.w	r0, r0, #1
   e325e:	4770      	bx	lr
   e3260:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   e3264:	d121      	bne.n	e32aa <__aeabi_d2f+0x7a>
   e3266:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   e326a:	bfbc      	itt	lt
   e326c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   e3270:	4770      	bxlt	lr
   e3272:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e3276:	ea4f 5252 	mov.w	r2, r2, lsr #21
   e327a:	f1c2 0218 	rsb	r2, r2, #24
   e327e:	f1c2 0c20 	rsb	ip, r2, #32
   e3282:	fa10 f30c 	lsls.w	r3, r0, ip
   e3286:	fa20 f002 	lsr.w	r0, r0, r2
   e328a:	bf18      	it	ne
   e328c:	f040 0001 	orrne.w	r0, r0, #1
   e3290:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e3294:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   e3298:	fa03 fc0c 	lsl.w	ip, r3, ip
   e329c:	ea40 000c 	orr.w	r0, r0, ip
   e32a0:	fa23 f302 	lsr.w	r3, r3, r2
   e32a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   e32a8:	e7cc      	b.n	e3244 <__aeabi_d2f+0x14>
   e32aa:	ea7f 5362 	mvns.w	r3, r2, asr #21
   e32ae:	d107      	bne.n	e32c0 <__aeabi_d2f+0x90>
   e32b0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   e32b4:	bf1e      	ittt	ne
   e32b6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   e32ba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   e32be:	4770      	bxne	lr
   e32c0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   e32c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   e32c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   e32cc:	4770      	bx	lr
   e32ce:	bf00      	nop

000e32d0 <asctime>:
   e32d0:	4b09      	ldr	r3, [pc, #36]	; (e32f8 <asctime+0x28>)
   e32d2:	b570      	push	{r4, r5, r6, lr}
   e32d4:	681c      	ldr	r4, [r3, #0]
   e32d6:	6c25      	ldr	r5, [r4, #64]	; 0x40
   e32d8:	4606      	mov	r6, r0
   e32da:	b93d      	cbnz	r5, e32ec <asctime+0x1c>
   e32dc:	201a      	movs	r0, #26
   e32de:	f7f7 fc0d 	bl	daafc <malloc>
   e32e2:	221a      	movs	r2, #26
   e32e4:	6420      	str	r0, [r4, #64]	; 0x40
   e32e6:	4629      	mov	r1, r5
   e32e8:	f000 f94f 	bl	e358a <memset>
   e32ec:	6c21      	ldr	r1, [r4, #64]	; 0x40
   e32ee:	4630      	mov	r0, r6
   e32f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   e32f4:	f000 b802 	b.w	e32fc <asctime_r>
   e32f8:	2003d624 	.word	0x2003d624

000e32fc <asctime_r>:
   e32fc:	b510      	push	{r4, lr}
   e32fe:	460c      	mov	r4, r1
   e3300:	6941      	ldr	r1, [r0, #20]
   e3302:	6903      	ldr	r3, [r0, #16]
   e3304:	6982      	ldr	r2, [r0, #24]
   e3306:	b086      	sub	sp, #24
   e3308:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   e330c:	9104      	str	r1, [sp, #16]
   e330e:	6801      	ldr	r1, [r0, #0]
   e3310:	9103      	str	r1, [sp, #12]
   e3312:	6841      	ldr	r1, [r0, #4]
   e3314:	9102      	str	r1, [sp, #8]
   e3316:	6881      	ldr	r1, [r0, #8]
   e3318:	9101      	str	r1, [sp, #4]
   e331a:	68c1      	ldr	r1, [r0, #12]
   e331c:	9100      	str	r1, [sp, #0]
   e331e:	4907      	ldr	r1, [pc, #28]	; (e333c <asctime_r+0x40>)
   e3320:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   e3324:	440b      	add	r3, r1
   e3326:	4906      	ldr	r1, [pc, #24]	; (e3340 <asctime_r+0x44>)
   e3328:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   e332c:	440a      	add	r2, r1
   e332e:	4620      	mov	r0, r4
   e3330:	4904      	ldr	r1, [pc, #16]	; (e3344 <asctime_r+0x48>)
   e3332:	f7f7 fbfb 	bl	dab2c <siprintf>
   e3336:	4620      	mov	r0, r4
   e3338:	b006      	add	sp, #24
   e333a:	bd10      	pop	{r4, pc}
   e333c:	000e82dd 	.word	0x000e82dd
   e3340:	000e82c8 	.word	0x000e82c8
   e3344:	000e8301 	.word	0x000e8301

000e3348 <atof>:
   e3348:	2100      	movs	r1, #0
   e334a:	f001 bf2d 	b.w	e51a8 <strtod>

000e334e <atoi>:
   e334e:	220a      	movs	r2, #10
   e3350:	2100      	movs	r1, #0
   e3352:	f001 bfb7 	b.w	e52c4 <strtol>

000e3356 <atol>:
   e3356:	220a      	movs	r2, #10
   e3358:	2100      	movs	r1, #0
   e335a:	f001 bfb3 	b.w	e52c4 <strtol>
	...

000e3360 <__cxa_atexit>:
   e3360:	b510      	push	{r4, lr}
   e3362:	4c05      	ldr	r4, [pc, #20]	; (e3378 <__cxa_atexit+0x18>)
   e3364:	4613      	mov	r3, r2
   e3366:	b12c      	cbz	r4, e3374 <__cxa_atexit+0x14>
   e3368:	460a      	mov	r2, r1
   e336a:	4601      	mov	r1, r0
   e336c:	2002      	movs	r0, #2
   e336e:	f3af 8000 	nop.w
   e3372:	bd10      	pop	{r4, pc}
   e3374:	4620      	mov	r0, r4
   e3376:	bd10      	pop	{r4, pc}
   e3378:	00000000 	.word	0x00000000

000e337c <localtime>:
   e337c:	b538      	push	{r3, r4, r5, lr}
   e337e:	4b07      	ldr	r3, [pc, #28]	; (e339c <localtime+0x20>)
   e3380:	681c      	ldr	r4, [r3, #0]
   e3382:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   e3384:	4605      	mov	r5, r0
   e3386:	b91b      	cbnz	r3, e3390 <localtime+0x14>
   e3388:	2024      	movs	r0, #36	; 0x24
   e338a:	f7f7 fbb7 	bl	daafc <malloc>
   e338e:	63e0      	str	r0, [r4, #60]	; 0x3c
   e3390:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   e3392:	4628      	mov	r0, r5
   e3394:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   e3398:	f000 b802 	b.w	e33a0 <localtime_r>
   e339c:	2003d624 	.word	0x2003d624

000e33a0 <localtime_r>:
   e33a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e33a4:	460c      	mov	r4, r1
   e33a6:	4680      	mov	r8, r0
   e33a8:	f002 fde4 	bl	e5f74 <__gettzinfo>
   e33ac:	4621      	mov	r1, r4
   e33ae:	4607      	mov	r7, r0
   e33b0:	4640      	mov	r0, r8
   e33b2:	f002 fde3 	bl	e5f7c <gmtime_r>
   e33b6:	6946      	ldr	r6, [r0, #20]
   e33b8:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   e33bc:	07b3      	lsls	r3, r6, #30
   e33be:	4604      	mov	r4, r0
   e33c0:	d105      	bne.n	e33ce <localtime_r+0x2e>
   e33c2:	2264      	movs	r2, #100	; 0x64
   e33c4:	fb96 f3f2 	sdiv	r3, r6, r2
   e33c8:	fb02 6313 	mls	r3, r2, r3, r6
   e33cc:	b94b      	cbnz	r3, e33e2 <localtime_r+0x42>
   e33ce:	f44f 75c8 	mov.w	r5, #400	; 0x190
   e33d2:	fb96 f3f5 	sdiv	r3, r6, r5
   e33d6:	fb05 6513 	mls	r5, r5, r3, r6
   e33da:	fab5 f385 	clz	r3, r5
   e33de:	095b      	lsrs	r3, r3, #5
   e33e0:	e000      	b.n	e33e4 <localtime_r+0x44>
   e33e2:	2301      	movs	r3, #1
   e33e4:	4a5f      	ldr	r2, [pc, #380]	; (e3564 <localtime_r+0x1c4>)
   e33e6:	2530      	movs	r5, #48	; 0x30
   e33e8:	fb05 2503 	mla	r5, r5, r3, r2
   e33ec:	f002 f8c0 	bl	e5570 <__tz_lock>
   e33f0:	f002 f8c0 	bl	e5574 <_tzset_unlocked>
   e33f4:	4b5c      	ldr	r3, [pc, #368]	; (e3568 <localtime_r+0x1c8>)
   e33f6:	681b      	ldr	r3, [r3, #0]
   e33f8:	b1f3      	cbz	r3, e3438 <localtime_r+0x98>
   e33fa:	687b      	ldr	r3, [r7, #4]
   e33fc:	429e      	cmp	r6, r3
   e33fe:	d105      	bne.n	e340c <localtime_r+0x6c>
   e3400:	6839      	ldr	r1, [r7, #0]
   e3402:	f8d8 3000 	ldr.w	r3, [r8]
   e3406:	69fa      	ldr	r2, [r7, #28]
   e3408:	b941      	cbnz	r1, e341c <localtime_r+0x7c>
   e340a:	e00a      	b.n	e3422 <localtime_r+0x82>
   e340c:	4630      	mov	r0, r6
   e340e:	f002 f807 	bl	e5420 <__tzcalc_limits>
   e3412:	2800      	cmp	r0, #0
   e3414:	d1f4      	bne.n	e3400 <localtime_r+0x60>
   e3416:	f04f 33ff 	mov.w	r3, #4294967295
   e341a:	e00d      	b.n	e3438 <localtime_r+0x98>
   e341c:	4293      	cmp	r3, r2
   e341e:	db08      	blt.n	e3432 <localtime_r+0x92>
   e3420:	e001      	b.n	e3426 <localtime_r+0x86>
   e3422:	4293      	cmp	r3, r2
   e3424:	da07      	bge.n	e3436 <localtime_r+0x96>
   e3426:	6bba      	ldr	r2, [r7, #56]	; 0x38
   e3428:	4293      	cmp	r3, r2
   e342a:	bfac      	ite	ge
   e342c:	2300      	movge	r3, #0
   e342e:	2301      	movlt	r3, #1
   e3430:	e002      	b.n	e3438 <localtime_r+0x98>
   e3432:	2300      	movs	r3, #0
   e3434:	e000      	b.n	e3438 <localtime_r+0x98>
   e3436:	2301      	movs	r3, #1
   e3438:	6223      	str	r3, [r4, #32]
   e343a:	6a23      	ldr	r3, [r4, #32]
   e343c:	2b01      	cmp	r3, #1
   e343e:	bf0c      	ite	eq
   e3440:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   e3442:	6a39      	ldrne	r1, [r7, #32]
   e3444:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   e3448:	203c      	movs	r0, #60	; 0x3c
   e344a:	fb91 f6f3 	sdiv	r6, r1, r3
   e344e:	fb03 1316 	mls	r3, r3, r6, r1
   e3452:	6861      	ldr	r1, [r4, #4]
   e3454:	fb93 f2f0 	sdiv	r2, r3, r0
   e3458:	fb00 3012 	mls	r0, r0, r2, r3
   e345c:	6823      	ldr	r3, [r4, #0]
   e345e:	1a89      	subs	r1, r1, r2
   e3460:	68a2      	ldr	r2, [r4, #8]
   e3462:	6061      	str	r1, [r4, #4]
   e3464:	1a1b      	subs	r3, r3, r0
   e3466:	1b92      	subs	r2, r2, r6
   e3468:	2b3b      	cmp	r3, #59	; 0x3b
   e346a:	6023      	str	r3, [r4, #0]
   e346c:	60a2      	str	r2, [r4, #8]
   e346e:	dd03      	ble.n	e3478 <localtime_r+0xd8>
   e3470:	3101      	adds	r1, #1
   e3472:	6061      	str	r1, [r4, #4]
   e3474:	3b3c      	subs	r3, #60	; 0x3c
   e3476:	e004      	b.n	e3482 <localtime_r+0xe2>
   e3478:	2b00      	cmp	r3, #0
   e347a:	da03      	bge.n	e3484 <localtime_r+0xe4>
   e347c:	3901      	subs	r1, #1
   e347e:	6061      	str	r1, [r4, #4]
   e3480:	333c      	adds	r3, #60	; 0x3c
   e3482:	6023      	str	r3, [r4, #0]
   e3484:	6863      	ldr	r3, [r4, #4]
   e3486:	2b3b      	cmp	r3, #59	; 0x3b
   e3488:	dd03      	ble.n	e3492 <localtime_r+0xf2>
   e348a:	3201      	adds	r2, #1
   e348c:	60a2      	str	r2, [r4, #8]
   e348e:	3b3c      	subs	r3, #60	; 0x3c
   e3490:	e004      	b.n	e349c <localtime_r+0xfc>
   e3492:	2b00      	cmp	r3, #0
   e3494:	da03      	bge.n	e349e <localtime_r+0xfe>
   e3496:	3a01      	subs	r2, #1
   e3498:	60a2      	str	r2, [r4, #8]
   e349a:	333c      	adds	r3, #60	; 0x3c
   e349c:	6063      	str	r3, [r4, #4]
   e349e:	68a3      	ldr	r3, [r4, #8]
   e34a0:	2b17      	cmp	r3, #23
   e34a2:	dd22      	ble.n	e34ea <localtime_r+0x14a>
   e34a4:	69e2      	ldr	r2, [r4, #28]
   e34a6:	3201      	adds	r2, #1
   e34a8:	61e2      	str	r2, [r4, #28]
   e34aa:	69a2      	ldr	r2, [r4, #24]
   e34ac:	3201      	adds	r2, #1
   e34ae:	2a06      	cmp	r2, #6
   e34b0:	bfc8      	it	gt
   e34b2:	2200      	movgt	r2, #0
   e34b4:	61a2      	str	r2, [r4, #24]
   e34b6:	68e2      	ldr	r2, [r4, #12]
   e34b8:	3b18      	subs	r3, #24
   e34ba:	3201      	adds	r2, #1
   e34bc:	60a3      	str	r3, [r4, #8]
   e34be:	6923      	ldr	r3, [r4, #16]
   e34c0:	60e2      	str	r2, [r4, #12]
   e34c2:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   e34c6:	428a      	cmp	r2, r1
   e34c8:	dd46      	ble.n	e3558 <localtime_r+0x1b8>
   e34ca:	3301      	adds	r3, #1
   e34cc:	2b0c      	cmp	r3, #12
   e34ce:	bf0c      	ite	eq
   e34d0:	6963      	ldreq	r3, [r4, #20]
   e34d2:	6123      	strne	r3, [r4, #16]
   e34d4:	eba2 0201 	sub.w	r2, r2, r1
   e34d8:	60e2      	str	r2, [r4, #12]
   e34da:	bf01      	itttt	eq
   e34dc:	3301      	addeq	r3, #1
   e34de:	2200      	moveq	r2, #0
   e34e0:	6122      	streq	r2, [r4, #16]
   e34e2:	6163      	streq	r3, [r4, #20]
   e34e4:	bf08      	it	eq
   e34e6:	61e2      	streq	r2, [r4, #28]
   e34e8:	e036      	b.n	e3558 <localtime_r+0x1b8>
   e34ea:	2b00      	cmp	r3, #0
   e34ec:	da34      	bge.n	e3558 <localtime_r+0x1b8>
   e34ee:	69e2      	ldr	r2, [r4, #28]
   e34f0:	3a01      	subs	r2, #1
   e34f2:	61e2      	str	r2, [r4, #28]
   e34f4:	69a2      	ldr	r2, [r4, #24]
   e34f6:	3a01      	subs	r2, #1
   e34f8:	bf48      	it	mi
   e34fa:	2206      	movmi	r2, #6
   e34fc:	61a2      	str	r2, [r4, #24]
   e34fe:	68e2      	ldr	r2, [r4, #12]
   e3500:	3318      	adds	r3, #24
   e3502:	3a01      	subs	r2, #1
   e3504:	60e2      	str	r2, [r4, #12]
   e3506:	60a3      	str	r3, [r4, #8]
   e3508:	bb32      	cbnz	r2, e3558 <localtime_r+0x1b8>
   e350a:	6923      	ldr	r3, [r4, #16]
   e350c:	3b01      	subs	r3, #1
   e350e:	d401      	bmi.n	e3514 <localtime_r+0x174>
   e3510:	6123      	str	r3, [r4, #16]
   e3512:	e01d      	b.n	e3550 <localtime_r+0x1b0>
   e3514:	230b      	movs	r3, #11
   e3516:	6123      	str	r3, [r4, #16]
   e3518:	6963      	ldr	r3, [r4, #20]
   e351a:	1e5a      	subs	r2, r3, #1
   e351c:	f012 0f03 	tst.w	r2, #3
   e3520:	6162      	str	r2, [r4, #20]
   e3522:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   e3526:	d105      	bne.n	e3534 <localtime_r+0x194>
   e3528:	2164      	movs	r1, #100	; 0x64
   e352a:	fb93 f2f1 	sdiv	r2, r3, r1
   e352e:	fb01 3212 	mls	r2, r1, r2, r3
   e3532:	b94a      	cbnz	r2, e3548 <localtime_r+0x1a8>
   e3534:	f44f 71c8 	mov.w	r1, #400	; 0x190
   e3538:	fb93 f2f1 	sdiv	r2, r3, r1
   e353c:	fb01 3312 	mls	r3, r1, r2, r3
   e3540:	fab3 f383 	clz	r3, r3
   e3544:	095b      	lsrs	r3, r3, #5
   e3546:	e000      	b.n	e354a <localtime_r+0x1aa>
   e3548:	2301      	movs	r3, #1
   e354a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   e354e:	61e3      	str	r3, [r4, #28]
   e3550:	6923      	ldr	r3, [r4, #16]
   e3552:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   e3556:	60e3      	str	r3, [r4, #12]
   e3558:	f002 f80b 	bl	e5572 <__tz_unlock>
   e355c:	4620      	mov	r0, r4
   e355e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e3562:	bf00      	nop
   e3564:	000e84ec 	.word	0x000e84ec
   e3568:	2003e7e8 	.word	0x2003e7e8

000e356c <_localeconv_r>:
   e356c:	4800      	ldr	r0, [pc, #0]	; (e3570 <_localeconv_r+0x4>)
   e356e:	4770      	bx	lr
   e3570:	2003d628 	.word	0x2003d628

000e3574 <memcpy>:
   e3574:	b510      	push	{r4, lr}
   e3576:	1e43      	subs	r3, r0, #1
   e3578:	440a      	add	r2, r1
   e357a:	4291      	cmp	r1, r2
   e357c:	d004      	beq.n	e3588 <memcpy+0x14>
   e357e:	f811 4b01 	ldrb.w	r4, [r1], #1
   e3582:	f803 4f01 	strb.w	r4, [r3, #1]!
   e3586:	e7f8      	b.n	e357a <memcpy+0x6>
   e3588:	bd10      	pop	{r4, pc}

000e358a <memset>:
   e358a:	4402      	add	r2, r0
   e358c:	4603      	mov	r3, r0
   e358e:	4293      	cmp	r3, r2
   e3590:	d002      	beq.n	e3598 <memset+0xe>
   e3592:	f803 1b01 	strb.w	r1, [r3], #1
   e3596:	e7fa      	b.n	e358e <memset+0x4>
   e3598:	4770      	bx	lr
	...

000e359c <validate_structure>:
   e359c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   e359e:	6801      	ldr	r1, [r0, #0]
   e35a0:	293b      	cmp	r1, #59	; 0x3b
   e35a2:	4604      	mov	r4, r0
   e35a4:	d911      	bls.n	e35ca <validate_structure+0x2e>
   e35a6:	223c      	movs	r2, #60	; 0x3c
   e35a8:	4668      	mov	r0, sp
   e35aa:	f002 f96d 	bl	e5888 <div>
   e35ae:	9a01      	ldr	r2, [sp, #4]
   e35b0:	6863      	ldr	r3, [r4, #4]
   e35b2:	9900      	ldr	r1, [sp, #0]
   e35b4:	2a00      	cmp	r2, #0
   e35b6:	440b      	add	r3, r1
   e35b8:	6063      	str	r3, [r4, #4]
   e35ba:	bfbb      	ittet	lt
   e35bc:	323c      	addlt	r2, #60	; 0x3c
   e35be:	f103 33ff 	addlt.w	r3, r3, #4294967295
   e35c2:	6022      	strge	r2, [r4, #0]
   e35c4:	6022      	strlt	r2, [r4, #0]
   e35c6:	bfb8      	it	lt
   e35c8:	6063      	strlt	r3, [r4, #4]
   e35ca:	6861      	ldr	r1, [r4, #4]
   e35cc:	293b      	cmp	r1, #59	; 0x3b
   e35ce:	d911      	bls.n	e35f4 <validate_structure+0x58>
   e35d0:	223c      	movs	r2, #60	; 0x3c
   e35d2:	4668      	mov	r0, sp
   e35d4:	f002 f958 	bl	e5888 <div>
   e35d8:	9a01      	ldr	r2, [sp, #4]
   e35da:	68a1      	ldr	r1, [r4, #8]
   e35dc:	9b00      	ldr	r3, [sp, #0]
   e35de:	2a00      	cmp	r2, #0
   e35e0:	440b      	add	r3, r1
   e35e2:	60a3      	str	r3, [r4, #8]
   e35e4:	bfbb      	ittet	lt
   e35e6:	323c      	addlt	r2, #60	; 0x3c
   e35e8:	f103 33ff 	addlt.w	r3, r3, #4294967295
   e35ec:	6062      	strge	r2, [r4, #4]
   e35ee:	6062      	strlt	r2, [r4, #4]
   e35f0:	bfb8      	it	lt
   e35f2:	60a3      	strlt	r3, [r4, #8]
   e35f4:	68a1      	ldr	r1, [r4, #8]
   e35f6:	2917      	cmp	r1, #23
   e35f8:	d911      	bls.n	e361e <validate_structure+0x82>
   e35fa:	2218      	movs	r2, #24
   e35fc:	4668      	mov	r0, sp
   e35fe:	f002 f943 	bl	e5888 <div>
   e3602:	9a01      	ldr	r2, [sp, #4]
   e3604:	68e1      	ldr	r1, [r4, #12]
   e3606:	9b00      	ldr	r3, [sp, #0]
   e3608:	2a00      	cmp	r2, #0
   e360a:	440b      	add	r3, r1
   e360c:	60e3      	str	r3, [r4, #12]
   e360e:	bfbb      	ittet	lt
   e3610:	3218      	addlt	r2, #24
   e3612:	f103 33ff 	addlt.w	r3, r3, #4294967295
   e3616:	60a2      	strge	r2, [r4, #8]
   e3618:	60a2      	strlt	r2, [r4, #8]
   e361a:	bfb8      	it	lt
   e361c:	60e3      	strlt	r3, [r4, #12]
   e361e:	6921      	ldr	r1, [r4, #16]
   e3620:	290b      	cmp	r1, #11
   e3622:	d911      	bls.n	e3648 <validate_structure+0xac>
   e3624:	220c      	movs	r2, #12
   e3626:	4668      	mov	r0, sp
   e3628:	f002 f92e 	bl	e5888 <div>
   e362c:	9a01      	ldr	r2, [sp, #4]
   e362e:	6961      	ldr	r1, [r4, #20]
   e3630:	9b00      	ldr	r3, [sp, #0]
   e3632:	2a00      	cmp	r2, #0
   e3634:	440b      	add	r3, r1
   e3636:	6163      	str	r3, [r4, #20]
   e3638:	bfbb      	ittet	lt
   e363a:	320c      	addlt	r2, #12
   e363c:	f103 33ff 	addlt.w	r3, r3, #4294967295
   e3640:	6122      	strge	r2, [r4, #16]
   e3642:	6122      	strlt	r2, [r4, #16]
   e3644:	bfb8      	it	lt
   e3646:	6163      	strlt	r3, [r4, #20]
   e3648:	6963      	ldr	r3, [r4, #20]
   e364a:	0799      	lsls	r1, r3, #30
   e364c:	d112      	bne.n	e3674 <validate_structure+0xd8>
   e364e:	2164      	movs	r1, #100	; 0x64
   e3650:	fb93 f2f1 	sdiv	r2, r3, r1
   e3654:	fb01 3212 	mls	r2, r1, r2, r3
   e3658:	b972      	cbnz	r2, e3678 <validate_structure+0xdc>
   e365a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   e365e:	f44f 71c8 	mov.w	r1, #400	; 0x190
   e3662:	fb93 f2f1 	sdiv	r2, r3, r1
   e3666:	fb01 3312 	mls	r3, r1, r2, r3
   e366a:	2b00      	cmp	r3, #0
   e366c:	bf14      	ite	ne
   e366e:	231c      	movne	r3, #28
   e3670:	231d      	moveq	r3, #29
   e3672:	e002      	b.n	e367a <validate_structure+0xde>
   e3674:	231c      	movs	r3, #28
   e3676:	e000      	b.n	e367a <validate_structure+0xde>
   e3678:	231d      	movs	r3, #29
   e367a:	68e2      	ldr	r2, [r4, #12]
   e367c:	2a00      	cmp	r2, #0
   e367e:	dd06      	ble.n	e368e <validate_structure+0xf2>
   e3680:	4f33      	ldr	r7, [pc, #204]	; (e3750 <validate_structure+0x1b4>)
   e3682:	f04f 0e00 	mov.w	lr, #0
   e3686:	2564      	movs	r5, #100	; 0x64
   e3688:	f44f 76c8 	mov.w	r6, #400	; 0x190
   e368c:	e039      	b.n	e3702 <validate_structure+0x166>
   e368e:	4f30      	ldr	r7, [pc, #192]	; (e3750 <validate_structure+0x1b4>)
   e3690:	260b      	movs	r6, #11
   e3692:	2064      	movs	r0, #100	; 0x64
   e3694:	f44f 75c8 	mov.w	r5, #400	; 0x190
   e3698:	f8d4 e00c 	ldr.w	lr, [r4, #12]
   e369c:	f1be 0f00 	cmp.w	lr, #0
   e36a0:	dc53      	bgt.n	e374a <validate_structure+0x1ae>
   e36a2:	6921      	ldr	r1, [r4, #16]
   e36a4:	3901      	subs	r1, #1
   e36a6:	6121      	str	r1, [r4, #16]
   e36a8:	3101      	adds	r1, #1
   e36aa:	d118      	bne.n	e36de <validate_structure+0x142>
   e36ac:	6963      	ldr	r3, [r4, #20]
   e36ae:	6126      	str	r6, [r4, #16]
   e36b0:	1e59      	subs	r1, r3, #1
   e36b2:	078a      	lsls	r2, r1, #30
   e36b4:	6161      	str	r1, [r4, #20]
   e36b6:	d10f      	bne.n	e36d8 <validate_structure+0x13c>
   e36b8:	fb91 f2f0 	sdiv	r2, r1, r0
   e36bc:	fb00 1112 	mls	r1, r0, r2, r1
   e36c0:	b961      	cbnz	r1, e36dc <validate_structure+0x140>
   e36c2:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   e36c6:	fb93 f2f5 	sdiv	r2, r3, r5
   e36ca:	fb05 3312 	mls	r3, r5, r2, r3
   e36ce:	2b00      	cmp	r3, #0
   e36d0:	bf14      	ite	ne
   e36d2:	231c      	movne	r3, #28
   e36d4:	231d      	moveq	r3, #29
   e36d6:	e002      	b.n	e36de <validate_structure+0x142>
   e36d8:	231c      	movs	r3, #28
   e36da:	e000      	b.n	e36de <validate_structure+0x142>
   e36dc:	231d      	movs	r3, #29
   e36de:	6922      	ldr	r2, [r4, #16]
   e36e0:	2a01      	cmp	r2, #1
   e36e2:	bf14      	ite	ne
   e36e4:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
   e36e8:	461a      	moveq	r2, r3
   e36ea:	4472      	add	r2, lr
   e36ec:	60e2      	str	r2, [r4, #12]
   e36ee:	e7d3      	b.n	e3698 <validate_structure+0xfc>
   e36f0:	428b      	cmp	r3, r1
   e36f2:	da2a      	bge.n	e374a <validate_structure+0x1ae>
   e36f4:	4618      	mov	r0, r3
   e36f6:	3201      	adds	r2, #1
   e36f8:	1a09      	subs	r1, r1, r0
   e36fa:	2a0c      	cmp	r2, #12
   e36fc:	60e1      	str	r1, [r4, #12]
   e36fe:	6122      	str	r2, [r4, #16]
   e3700:	d008      	beq.n	e3714 <validate_structure+0x178>
   e3702:	6922      	ldr	r2, [r4, #16]
   e3704:	68e1      	ldr	r1, [r4, #12]
   e3706:	2a01      	cmp	r2, #1
   e3708:	d0f2      	beq.n	e36f0 <validate_structure+0x154>
   e370a:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
   e370e:	4281      	cmp	r1, r0
   e3710:	dcf1      	bgt.n	e36f6 <validate_structure+0x15a>
   e3712:	e01a      	b.n	e374a <validate_structure+0x1ae>
   e3714:	6963      	ldr	r3, [r4, #20]
   e3716:	f8c4 e010 	str.w	lr, [r4, #16]
   e371a:	1c5a      	adds	r2, r3, #1
   e371c:	0791      	lsls	r1, r2, #30
   e371e:	6162      	str	r2, [r4, #20]
   e3720:	d10f      	bne.n	e3742 <validate_structure+0x1a6>
   e3722:	fb92 f1f5 	sdiv	r1, r2, r5
   e3726:	fb05 2211 	mls	r2, r5, r1, r2
   e372a:	b962      	cbnz	r2, e3746 <validate_structure+0x1aa>
   e372c:	f203 736d 	addw	r3, r3, #1901	; 0x76d
   e3730:	fb93 f2f6 	sdiv	r2, r3, r6
   e3734:	fb06 3312 	mls	r3, r6, r2, r3
   e3738:	2b00      	cmp	r3, #0
   e373a:	bf14      	ite	ne
   e373c:	231c      	movne	r3, #28
   e373e:	231d      	moveq	r3, #29
   e3740:	e7df      	b.n	e3702 <validate_structure+0x166>
   e3742:	231c      	movs	r3, #28
   e3744:	e7dd      	b.n	e3702 <validate_structure+0x166>
   e3746:	231d      	movs	r3, #29
   e3748:	e7db      	b.n	e3702 <validate_structure+0x166>
   e374a:	b003      	add	sp, #12
   e374c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e374e:	bf00      	nop
   e3750:	000e84bc 	.word	0x000e84bc

000e3754 <mktime>:
   e3754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e3758:	4605      	mov	r5, r0
   e375a:	f002 fc0b 	bl	e5f74 <__gettzinfo>
   e375e:	4681      	mov	r9, r0
   e3760:	4628      	mov	r0, r5
   e3762:	f7ff ff1b 	bl	e359c <validate_structure>
   e3766:	e895 000c 	ldmia.w	r5, {r2, r3}
   e376a:	213c      	movs	r1, #60	; 0x3c
   e376c:	fb01 2303 	mla	r3, r1, r3, r2
   e3770:	68aa      	ldr	r2, [r5, #8]
   e3772:	68ec      	ldr	r4, [r5, #12]
   e3774:	f44f 6861 	mov.w	r8, #3600	; 0xe10
   e3778:	fb08 3102 	mla	r1, r8, r2, r3
   e377c:	692b      	ldr	r3, [r5, #16]
   e377e:	4aab      	ldr	r2, [pc, #684]	; (e3a2c <mktime+0x2d8>)
   e3780:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   e3784:	3c01      	subs	r4, #1
   e3786:	2b01      	cmp	r3, #1
   e3788:	4414      	add	r4, r2
   e378a:	696b      	ldr	r3, [r5, #20]
   e378c:	dd11      	ble.n	e37b2 <mktime+0x5e>
   e378e:	079e      	lsls	r6, r3, #30
   e3790:	d10f      	bne.n	e37b2 <mktime+0x5e>
   e3792:	2064      	movs	r0, #100	; 0x64
   e3794:	fb93 f2f0 	sdiv	r2, r3, r0
   e3798:	fb00 3212 	mls	r2, r0, r2, r3
   e379c:	b942      	cbnz	r2, e37b0 <mktime+0x5c>
   e379e:	f203 766c 	addw	r6, r3, #1900	; 0x76c
   e37a2:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e37a6:	fb96 f0f2 	sdiv	r0, r6, r2
   e37aa:	fb02 6210 	mls	r2, r2, r0, r6
   e37ae:	b902      	cbnz	r2, e37b2 <mktime+0x5e>
   e37b0:	3401      	adds	r4, #1
   e37b2:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
   e37b6:	3210      	adds	r2, #16
   e37b8:	f644 6020 	movw	r0, #20000	; 0x4e20
   e37bc:	4282      	cmp	r2, r0
   e37be:	61ec      	str	r4, [r5, #28]
   e37c0:	461f      	mov	r7, r3
   e37c2:	f200 812e 	bhi.w	e3a22 <mktime+0x2ce>
   e37c6:	2b46      	cmp	r3, #70	; 0x46
   e37c8:	dd22      	ble.n	e3810 <mktime+0xbc>
   e37ca:	2246      	movs	r2, #70	; 0x46
   e37cc:	f240 1c6d 	movw	ip, #365	; 0x16d
   e37d0:	2664      	movs	r6, #100	; 0x64
   e37d2:	f44f 7ec8 	mov.w	lr, #400	; 0x190
   e37d6:	0790      	lsls	r0, r2, #30
   e37d8:	d110      	bne.n	e37fc <mktime+0xa8>
   e37da:	fb92 f0f6 	sdiv	r0, r2, r6
   e37de:	fb06 2010 	mls	r0, r6, r0, r2
   e37e2:	b970      	cbnz	r0, e3802 <mktime+0xae>
   e37e4:	f202 786c 	addw	r8, r2, #1900	; 0x76c
   e37e8:	fb98 f0fe 	sdiv	r0, r8, lr
   e37ec:	fb0e 8010 	mls	r0, lr, r0, r8
   e37f0:	2800      	cmp	r0, #0
   e37f2:	bf14      	ite	ne
   e37f4:	4660      	movne	r0, ip
   e37f6:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
   e37fa:	e004      	b.n	e3806 <mktime+0xb2>
   e37fc:	f240 106d 	movw	r0, #365	; 0x16d
   e3800:	e001      	b.n	e3806 <mktime+0xb2>
   e3802:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   e3806:	3201      	adds	r2, #1
   e3808:	4293      	cmp	r3, r2
   e380a:	4404      	add	r4, r0
   e380c:	d1e3      	bne.n	e37d6 <mktime+0x82>
   e380e:	e044      	b.n	e389a <mktime+0x146>
   e3810:	d043      	beq.n	e389a <mktime+0x146>
   e3812:	2245      	movs	r2, #69	; 0x45
   e3814:	f240 1e6d 	movw	lr, #365	; 0x16d
   e3818:	2664      	movs	r6, #100	; 0x64
   e381a:	f44f 77c8 	mov.w	r7, #400	; 0x190
   e381e:	429a      	cmp	r2, r3
   e3820:	dd1a      	ble.n	e3858 <mktime+0x104>
   e3822:	0790      	lsls	r0, r2, #30
   e3824:	d110      	bne.n	e3848 <mktime+0xf4>
   e3826:	fb92 f0f6 	sdiv	r0, r2, r6
   e382a:	fb06 2010 	mls	r0, r6, r0, r2
   e382e:	b970      	cbnz	r0, e384e <mktime+0xfa>
   e3830:	f202 7c6c 	addw	ip, r2, #1900	; 0x76c
   e3834:	fb9c f0f7 	sdiv	r0, ip, r7
   e3838:	fb07 c010 	mls	r0, r7, r0, ip
   e383c:	2800      	cmp	r0, #0
   e383e:	bf14      	ite	ne
   e3840:	4670      	movne	r0, lr
   e3842:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
   e3846:	e004      	b.n	e3852 <mktime+0xfe>
   e3848:	f240 106d 	movw	r0, #365	; 0x16d
   e384c:	e001      	b.n	e3852 <mktime+0xfe>
   e384e:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   e3852:	1a24      	subs	r4, r4, r0
   e3854:	3a01      	subs	r2, #1
   e3856:	e7e2      	b.n	e381e <mktime+0xca>
   e3858:	2b45      	cmp	r3, #69	; 0x45
   e385a:	bfa8      	it	ge
   e385c:	2345      	movge	r3, #69	; 0x45
   e385e:	079e      	lsls	r6, r3, #30
   e3860:	461f      	mov	r7, r3
   e3862:	d114      	bne.n	e388e <mktime+0x13a>
   e3864:	2264      	movs	r2, #100	; 0x64
   e3866:	fb93 f3f2 	sdiv	r3, r3, r2
   e386a:	fb02 7313 	mls	r3, r2, r3, r7
   e386e:	b98b      	cbnz	r3, e3894 <mktime+0x140>
   e3870:	f207 706c 	addw	r0, r7, #1900	; 0x76c
   e3874:	f44f 73c8 	mov.w	r3, #400	; 0x190
   e3878:	fb90 f2f3 	sdiv	r2, r0, r3
   e387c:	fb03 0312 	mls	r3, r3, r2, r0
   e3880:	2b00      	cmp	r3, #0
   e3882:	f240 136d 	movw	r3, #365	; 0x16d
   e3886:	bf08      	it	eq
   e3888:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
   e388c:	e004      	b.n	e3898 <mktime+0x144>
   e388e:	f240 136d 	movw	r3, #365	; 0x16d
   e3892:	e001      	b.n	e3898 <mktime+0x144>
   e3894:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   e3898:	1ae4      	subs	r4, r4, r3
   e389a:	4865      	ldr	r0, [pc, #404]	; (e3a30 <mktime+0x2dc>)
   e389c:	fb00 1804 	mla	r8, r0, r4, r1
   e38a0:	f001 fe66 	bl	e5570 <__tz_lock>
   e38a4:	f001 fe66 	bl	e5574 <_tzset_unlocked>
   e38a8:	4b62      	ldr	r3, [pc, #392]	; (e3a34 <mktime+0x2e0>)
   e38aa:	681e      	ldr	r6, [r3, #0]
   e38ac:	2e00      	cmp	r6, #0
   e38ae:	f000 80a4 	beq.w	e39fa <mktime+0x2a6>
   e38b2:	6a2b      	ldr	r3, [r5, #32]
   e38b4:	6968      	ldr	r0, [r5, #20]
   e38b6:	2b01      	cmp	r3, #1
   e38b8:	bfa8      	it	ge
   e38ba:	2301      	movge	r3, #1
   e38bc:	469a      	mov	sl, r3
   e38be:	f8d9 3004 	ldr.w	r3, [r9, #4]
   e38c2:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   e38c6:	4298      	cmp	r0, r3
   e38c8:	d10d      	bne.n	e38e6 <mktime+0x192>
   e38ca:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
   e38ce:	f8d9 3020 	ldr.w	r3, [r9, #32]
   e38d2:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
   e38d6:	f8d9 101c 	ldr.w	r1, [r9, #28]
   e38da:	1ad6      	subs	r6, r2, r3
   e38dc:	45b0      	cmp	r8, r6
   e38de:	eba1 0100 	sub.w	r1, r1, r0
   e38e2:	da05      	bge.n	e38f0 <mktime+0x19c>
   e38e4:	e007      	b.n	e38f6 <mktime+0x1a2>
   e38e6:	f001 fd9b 	bl	e5420 <__tzcalc_limits>
   e38ea:	2800      	cmp	r0, #0
   e38ec:	d1ed      	bne.n	e38ca <mktime+0x176>
   e38ee:	e076      	b.n	e39de <mktime+0x28a>
   e38f0:	1a12      	subs	r2, r2, r0
   e38f2:	4590      	cmp	r8, r2
   e38f4:	db73      	blt.n	e39de <mktime+0x28a>
   e38f6:	f8d9 2000 	ldr.w	r2, [r9]
   e38fa:	b112      	cbz	r2, e3902 <mktime+0x1ae>
   e38fc:	4588      	cmp	r8, r1
   e38fe:	db77      	blt.n	e39f0 <mktime+0x29c>
   e3900:	e001      	b.n	e3906 <mktime+0x1b2>
   e3902:	4588      	cmp	r8, r1
   e3904:	da07      	bge.n	e3916 <mktime+0x1c2>
   e3906:	45b0      	cmp	r8, r6
   e3908:	bfac      	ite	ge
   e390a:	2600      	movge	r6, #0
   e390c:	2601      	movlt	r6, #1
   e390e:	f1ba 0f00 	cmp.w	sl, #0
   e3912:	da04      	bge.n	e391e <mktime+0x1ca>
   e3914:	e064      	b.n	e39e0 <mktime+0x28c>
   e3916:	f1ba 0f00 	cmp.w	sl, #0
   e391a:	db63      	blt.n	e39e4 <mktime+0x290>
   e391c:	2601      	movs	r6, #1
   e391e:	ea8a 0a06 	eor.w	sl, sl, r6
   e3922:	f1ba 0f01 	cmp.w	sl, #1
   e3926:	d15b      	bne.n	e39e0 <mktime+0x28c>
   e3928:	1a1b      	subs	r3, r3, r0
   e392a:	b906      	cbnz	r6, e392e <mktime+0x1da>
   e392c:	425b      	negs	r3, r3
   e392e:	682a      	ldr	r2, [r5, #0]
   e3930:	f8d5 a00c 	ldr.w	sl, [r5, #12]
   e3934:	441a      	add	r2, r3
   e3936:	602a      	str	r2, [r5, #0]
   e3938:	4628      	mov	r0, r5
   e393a:	4498      	add	r8, r3
   e393c:	f7ff fe2e 	bl	e359c <validate_structure>
   e3940:	68eb      	ldr	r3, [r5, #12]
   e3942:	ebb3 030a 	subs.w	r3, r3, sl
   e3946:	d04b      	beq.n	e39e0 <mktime+0x28c>
   e3948:	2b01      	cmp	r3, #1
   e394a:	dc03      	bgt.n	e3954 <mktime+0x200>
   e394c:	1c98      	adds	r0, r3, #2
   e394e:	bfd8      	it	le
   e3950:	2301      	movle	r3, #1
   e3952:	e001      	b.n	e3958 <mktime+0x204>
   e3954:	f04f 33ff 	mov.w	r3, #4294967295
   e3958:	69ea      	ldr	r2, [r5, #28]
   e395a:	441c      	add	r4, r3
   e395c:	189b      	adds	r3, r3, r2
   e395e:	d51d      	bpl.n	e399c <mktime+0x248>
   e3960:	1e7b      	subs	r3, r7, #1
   e3962:	0799      	lsls	r1, r3, #30
   e3964:	d114      	bne.n	e3990 <mktime+0x23c>
   e3966:	2164      	movs	r1, #100	; 0x64
   e3968:	fb93 f2f1 	sdiv	r2, r3, r1
   e396c:	fb01 3312 	mls	r3, r1, r2, r3
   e3970:	b98b      	cbnz	r3, e3996 <mktime+0x242>
   e3972:	f207 776b 	addw	r7, r7, #1899	; 0x76b
   e3976:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e397a:	fb97 f3f2 	sdiv	r3, r7, r2
   e397e:	fb02 7713 	mls	r7, r2, r3, r7
   e3982:	2f00      	cmp	r7, #0
   e3984:	f240 136d 	movw	r3, #365	; 0x16d
   e3988:	bf18      	it	ne
   e398a:	f44f 73b6 	movne.w	r3, #364	; 0x16c
   e398e:	e024      	b.n	e39da <mktime+0x286>
   e3990:	f44f 73b6 	mov.w	r3, #364	; 0x16c
   e3994:	e021      	b.n	e39da <mktime+0x286>
   e3996:	f240 136d 	movw	r3, #365	; 0x16d
   e399a:	e01e      	b.n	e39da <mktime+0x286>
   e399c:	07ba      	lsls	r2, r7, #30
   e399e:	d114      	bne.n	e39ca <mktime+0x276>
   e39a0:	2164      	movs	r1, #100	; 0x64
   e39a2:	fb97 f2f1 	sdiv	r2, r7, r1
   e39a6:	fb01 7212 	mls	r2, r1, r2, r7
   e39aa:	b98a      	cbnz	r2, e39d0 <mktime+0x27c>
   e39ac:	f207 776c 	addw	r7, r7, #1900	; 0x76c
   e39b0:	f44f 71c8 	mov.w	r1, #400	; 0x190
   e39b4:	fb97 f2f1 	sdiv	r2, r7, r1
   e39b8:	fb01 7712 	mls	r7, r1, r2, r7
   e39bc:	2f00      	cmp	r7, #0
   e39be:	f240 126d 	movw	r2, #365	; 0x16d
   e39c2:	bf08      	it	eq
   e39c4:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   e39c8:	e004      	b.n	e39d4 <mktime+0x280>
   e39ca:	f240 126d 	movw	r2, #365	; 0x16d
   e39ce:	e001      	b.n	e39d4 <mktime+0x280>
   e39d0:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   e39d4:	429a      	cmp	r2, r3
   e39d6:	bfd8      	it	le
   e39d8:	1a9b      	suble	r3, r3, r2
   e39da:	61eb      	str	r3, [r5, #28]
   e39dc:	e000      	b.n	e39e0 <mktime+0x28c>
   e39de:	4656      	mov	r6, sl
   e39e0:	2e01      	cmp	r6, #1
   e39e2:	d10a      	bne.n	e39fa <mktime+0x2a6>
   e39e4:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
   e39e8:	2601      	movs	r6, #1
   e39ea:	eb08 0700 	add.w	r7, r8, r0
   e39ee:	e008      	b.n	e3a02 <mktime+0x2ae>
   e39f0:	f1ba 0f00 	cmp.w	sl, #0
   e39f4:	f04f 0600 	mov.w	r6, #0
   e39f8:	da91      	bge.n	e391e <mktime+0x1ca>
   e39fa:	f8d9 0020 	ldr.w	r0, [r9, #32]
   e39fe:	eb08 0700 	add.w	r7, r8, r0
   e3a02:	f001 fdb6 	bl	e5572 <__tz_unlock>
   e3a06:	3404      	adds	r4, #4
   e3a08:	2307      	movs	r3, #7
   e3a0a:	fb94 f3f3 	sdiv	r3, r4, r3
   e3a0e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   e3a12:	1ae4      	subs	r4, r4, r3
   e3a14:	bf48      	it	mi
   e3a16:	3407      	addmi	r4, #7
   e3a18:	622e      	str	r6, [r5, #32]
   e3a1a:	61ac      	str	r4, [r5, #24]
   e3a1c:	4638      	mov	r0, r7
   e3a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e3a22:	f04f 30ff 	mov.w	r0, #4294967295
   e3a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e3a2a:	bf00      	nop
   e3a2c:	000e848c 	.word	0x000e848c
   e3a30:	00015180 	.word	0x00015180
   e3a34:	2003e7e8 	.word	0x2003e7e8

000e3a38 <srand>:
   e3a38:	b538      	push	{r3, r4, r5, lr}
   e3a3a:	4b12      	ldr	r3, [pc, #72]	; (e3a84 <srand+0x4c>)
   e3a3c:	681c      	ldr	r4, [r3, #0]
   e3a3e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   e3a40:	4605      	mov	r5, r0
   e3a42:	b9d3      	cbnz	r3, e3a7a <srand+0x42>
   e3a44:	2018      	movs	r0, #24
   e3a46:	f7f7 f859 	bl	daafc <malloc>
   e3a4a:	f243 330e 	movw	r3, #13070	; 0x330e
   e3a4e:	63a0      	str	r0, [r4, #56]	; 0x38
   e3a50:	8003      	strh	r3, [r0, #0]
   e3a52:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   e3a56:	8043      	strh	r3, [r0, #2]
   e3a58:	f241 2334 	movw	r3, #4660	; 0x1234
   e3a5c:	8083      	strh	r3, [r0, #4]
   e3a5e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   e3a62:	80c3      	strh	r3, [r0, #6]
   e3a64:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   e3a68:	8103      	strh	r3, [r0, #8]
   e3a6a:	2305      	movs	r3, #5
   e3a6c:	8143      	strh	r3, [r0, #10]
   e3a6e:	230b      	movs	r3, #11
   e3a70:	8183      	strh	r3, [r0, #12]
   e3a72:	2201      	movs	r2, #1
   e3a74:	2300      	movs	r3, #0
   e3a76:	e9c0 2304 	strd	r2, r3, [r0, #16]
   e3a7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   e3a7c:	2200      	movs	r2, #0
   e3a7e:	611d      	str	r5, [r3, #16]
   e3a80:	615a      	str	r2, [r3, #20]
   e3a82:	bd38      	pop	{r3, r4, r5, pc}
   e3a84:	2003d624 	.word	0x2003d624

000e3a88 <strcmp>:
   e3a88:	f810 2b01 	ldrb.w	r2, [r0], #1
   e3a8c:	f811 3b01 	ldrb.w	r3, [r1], #1
   e3a90:	2a01      	cmp	r2, #1
   e3a92:	bf28      	it	cs
   e3a94:	429a      	cmpcs	r2, r3
   e3a96:	d0f7      	beq.n	e3a88 <strcmp>
   e3a98:	1ad0      	subs	r0, r2, r3
   e3a9a:	4770      	bx	lr

000e3a9c <strcpy>:
   e3a9c:	4603      	mov	r3, r0
   e3a9e:	f811 2b01 	ldrb.w	r2, [r1], #1
   e3aa2:	f803 2b01 	strb.w	r2, [r3], #1
   e3aa6:	2a00      	cmp	r2, #0
   e3aa8:	d1f9      	bne.n	e3a9e <strcpy+0x2>
   e3aaa:	4770      	bx	lr

000e3aac <strdup>:
   e3aac:	4b02      	ldr	r3, [pc, #8]	; (e3ab8 <strdup+0xc>)
   e3aae:	4601      	mov	r1, r0
   e3ab0:	6818      	ldr	r0, [r3, #0]
   e3ab2:	f000 b803 	b.w	e3abc <_strdup_r>
   e3ab6:	bf00      	nop
   e3ab8:	2003d624 	.word	0x2003d624

000e3abc <_strdup_r>:
   e3abc:	b570      	push	{r4, r5, r6, lr}
   e3abe:	4606      	mov	r6, r0
   e3ac0:	4608      	mov	r0, r1
   e3ac2:	460c      	mov	r4, r1
   e3ac4:	f000 fd22 	bl	e450c <strlen>
   e3ac8:	1c45      	adds	r5, r0, #1
   e3aca:	4629      	mov	r1, r5
   e3acc:	4630      	mov	r0, r6
   e3ace:	f7f7 f85d 	bl	dab8c <_malloc_r>
   e3ad2:	4606      	mov	r6, r0
   e3ad4:	b118      	cbz	r0, e3ade <_strdup_r+0x22>
   e3ad6:	462a      	mov	r2, r5
   e3ad8:	4621      	mov	r1, r4
   e3ada:	f7ff fd4b 	bl	e3574 <memcpy>
   e3ade:	4630      	mov	r0, r6
   e3ae0:	bd70      	pop	{r4, r5, r6, pc}

000e3ae2 <iso_year_adjust>:
   e3ae2:	6941      	ldr	r1, [r0, #20]
   e3ae4:	078b      	lsls	r3, r1, #30
   e3ae6:	b510      	push	{r4, lr}
   e3ae8:	d10c      	bne.n	e3b04 <iso_year_adjust+0x22>
   e3aea:	2900      	cmp	r1, #0
   e3aec:	f240 736c 	movw	r3, #1900	; 0x76c
   e3af0:	bfa8      	it	ge
   e3af2:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   e3af6:	440b      	add	r3, r1
   e3af8:	2464      	movs	r4, #100	; 0x64
   e3afa:	fb93 f2f4 	sdiv	r2, r3, r4
   e3afe:	fb04 3312 	mls	r3, r4, r2, r3
   e3b02:	b983      	cbnz	r3, e3b26 <iso_year_adjust+0x44>
   e3b04:	2900      	cmp	r1, #0
   e3b06:	f240 736c 	movw	r3, #1900	; 0x76c
   e3b0a:	bfa8      	it	ge
   e3b0c:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   e3b10:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e3b14:	440b      	add	r3, r1
   e3b16:	fb93 f1f2 	sdiv	r1, r3, r2
   e3b1a:	fb02 3311 	mls	r3, r2, r1, r3
   e3b1e:	fab3 f283 	clz	r2, r3
   e3b22:	0952      	lsrs	r2, r2, #5
   e3b24:	e000      	b.n	e3b28 <iso_year_adjust+0x46>
   e3b26:	2201      	movs	r2, #1
   e3b28:	6983      	ldr	r3, [r0, #24]
   e3b2a:	69c1      	ldr	r1, [r0, #28]
   e3b2c:	005b      	lsls	r3, r3, #1
   e3b2e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   e3b32:	4413      	add	r3, r2
   e3b34:	2b21      	cmp	r3, #33	; 0x21
   e3b36:	dc0e      	bgt.n	e3b56 <iso_year_adjust+0x74>
   e3b38:	2b20      	cmp	r3, #32
   e3b3a:	da2f      	bge.n	e3b9c <iso_year_adjust+0xba>
   e3b3c:	2b0d      	cmp	r3, #13
   e3b3e:	dc02      	bgt.n	e3b46 <iso_year_adjust+0x64>
   e3b40:	2b0a      	cmp	r3, #10
   e3b42:	db05      	blt.n	e3b50 <iso_year_adjust+0x6e>
   e3b44:	e02a      	b.n	e3b9c <iso_year_adjust+0xba>
   e3b46:	2b10      	cmp	r3, #16
   e3b48:	db26      	blt.n	e3b98 <iso_year_adjust+0xb6>
   e3b4a:	2b11      	cmp	r3, #17
   e3b4c:	dd26      	ble.n	e3b9c <iso_year_adjust+0xba>
   e3b4e:	3b1c      	subs	r3, #28
   e3b50:	2b01      	cmp	r3, #1
   e3b52:	d923      	bls.n	e3b9c <iso_year_adjust+0xba>
   e3b54:	e020      	b.n	e3b98 <iso_year_adjust+0xb6>
   e3b56:	f241 62c6 	movw	r2, #5830	; 0x16c6
   e3b5a:	4293      	cmp	r3, r2
   e3b5c:	dc0e      	bgt.n	e3b7c <iso_year_adjust+0x9a>
   e3b5e:	f241 62c2 	movw	r2, #5826	; 0x16c2
   e3b62:	4293      	cmp	r3, r2
   e3b64:	da16      	bge.n	e3b94 <iso_year_adjust+0xb2>
   e3b66:	f241 62a2 	movw	r2, #5794	; 0x16a2
   e3b6a:	4293      	cmp	r3, r2
   e3b6c:	d012      	beq.n	e3b94 <iso_year_adjust+0xb2>
   e3b6e:	db13      	blt.n	e3b98 <iso_year_adjust+0xb6>
   e3b70:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
   e3b74:	3b12      	subs	r3, #18
   e3b76:	2b02      	cmp	r3, #2
   e3b78:	d90c      	bls.n	e3b94 <iso_year_adjust+0xb2>
   e3b7a:	e00d      	b.n	e3b98 <iso_year_adjust+0xb6>
   e3b7c:	f241 62d5 	movw	r2, #5845	; 0x16d5
   e3b80:	4293      	cmp	r3, r2
   e3b82:	d007      	beq.n	e3b94 <iso_year_adjust+0xb2>
   e3b84:	f241 62d7 	movw	r2, #5847	; 0x16d7
   e3b88:	4293      	cmp	r3, r2
   e3b8a:	d003      	beq.n	e3b94 <iso_year_adjust+0xb2>
   e3b8c:	f241 62d3 	movw	r2, #5843	; 0x16d3
   e3b90:	4293      	cmp	r3, r2
   e3b92:	d101      	bne.n	e3b98 <iso_year_adjust+0xb6>
   e3b94:	2001      	movs	r0, #1
   e3b96:	bd10      	pop	{r4, pc}
   e3b98:	2000      	movs	r0, #0
   e3b9a:	bd10      	pop	{r4, pc}
   e3b9c:	f04f 30ff 	mov.w	r0, #4294967295
   e3ba0:	bd10      	pop	{r4, pc}
	...

000e3ba4 <strftime>:
   e3ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e3ba8:	b093      	sub	sp, #76	; 0x4c
   e3baa:	460e      	mov	r6, r1
   e3bac:	461d      	mov	r5, r3
   e3bae:	4607      	mov	r7, r0
   e3bb0:	4691      	mov	r9, r2
   e3bb2:	f001 fc19 	bl	e53e8 <__get_current_time_locale>
   e3bb6:	2300      	movs	r3, #0
   e3bb8:	9306      	str	r3, [sp, #24]
   e3bba:	461c      	mov	r4, r3
   e3bbc:	1e73      	subs	r3, r6, #1
   e3bbe:	9003      	str	r0, [sp, #12]
   e3bc0:	9302      	str	r3, [sp, #8]
   e3bc2:	f899 3000 	ldrb.w	r3, [r9]
   e3bc6:	2b00      	cmp	r3, #0
   e3bc8:	f000 8492 	beq.w	e44f0 <strftime+0x94c>
   e3bcc:	2b25      	cmp	r3, #37	; 0x25
   e3bce:	d008      	beq.n	e3be2 <strftime+0x3e>
   e3bd0:	9a02      	ldr	r2, [sp, #8]
   e3bd2:	4294      	cmp	r4, r2
   e3bd4:	f080 8490 	bcs.w	e44f8 <strftime+0x954>
   e3bd8:	553b      	strb	r3, [r7, r4]
   e3bda:	f109 0901 	add.w	r9, r9, #1
   e3bde:	3401      	adds	r4, #1
   e3be0:	e7ef      	b.n	e3bc2 <strftime+0x1e>
   e3be2:	f899 a001 	ldrb.w	sl, [r9, #1]
   e3be6:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
   e3bea:	d007      	beq.n	e3bfc <strftime+0x58>
   e3bec:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   e3bf0:	d004      	beq.n	e3bfc <strftime+0x58>
   e3bf2:	f109 0901 	add.w	r9, r9, #1
   e3bf6:	f04f 0a00 	mov.w	sl, #0
   e3bfa:	e001      	b.n	e3c00 <strftime+0x5c>
   e3bfc:	f109 0902 	add.w	r9, r9, #2
   e3c00:	f899 3000 	ldrb.w	r3, [r9]
   e3c04:	3b31      	subs	r3, #49	; 0x31
   e3c06:	2b08      	cmp	r3, #8
   e3c08:	d808      	bhi.n	e3c1c <strftime+0x78>
   e3c0a:	4648      	mov	r0, r9
   e3c0c:	220a      	movs	r2, #10
   e3c0e:	a90a      	add	r1, sp, #40	; 0x28
   e3c10:	f001 fbe0 	bl	e53d4 <strtoul>
   e3c14:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   e3c18:	4680      	mov	r8, r0
   e3c1a:	e001      	b.n	e3c20 <strftime+0x7c>
   e3c1c:	f04f 0800 	mov.w	r8, #0
   e3c20:	f899 3000 	ldrb.w	r3, [r9]
   e3c24:	2b45      	cmp	r3, #69	; 0x45
   e3c26:	d001      	beq.n	e3c2c <strftime+0x88>
   e3c28:	2b4f      	cmp	r3, #79	; 0x4f
   e3c2a:	d101      	bne.n	e3c30 <strftime+0x8c>
   e3c2c:	f109 0901 	add.w	r9, r9, #1
   e3c30:	f899 0000 	ldrb.w	r0, [r9]
   e3c34:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
   e3c38:	2b55      	cmp	r3, #85	; 0x55
   e3c3a:	f200 845d 	bhi.w	e44f8 <strftime+0x954>
   e3c3e:	e8df f013 	tbh	[pc, r3, lsl #1]
   e3c42:	044a      	.short	0x044a
   e3c44:	045b045b 	.word	0x045b045b
   e3c48:	045b045b 	.word	0x045b045b
   e3c4c:	045b045b 	.word	0x045b045b
   e3c50:	045b045b 	.word	0x045b045b
   e3c54:	045b045b 	.word	0x045b045b
   e3c58:	045b045b 	.word	0x045b045b
   e3c5c:	045b045b 	.word	0x045b045b
   e3c60:	045b045b 	.word	0x045b045b
   e3c64:	045b045b 	.word	0x045b045b
   e3c68:	045b045b 	.word	0x045b045b
   e3c6c:	045b045b 	.word	0x045b045b
   e3c70:	045b045b 	.word	0x045b045b
   e3c74:	045b045b 	.word	0x045b045b
   e3c78:	006f045b 	.word	0x006f045b
   e3c7c:	00d400a1 	.word	0x00d400a1
   e3c80:	045b011a 	.word	0x045b011a
   e3c84:	01a0013f 	.word	0x01a0013f
   e3c88:	022d0226 	.word	0x022d0226
   e3c8c:	045b045b 	.word	0x045b045b
   e3c90:	0260045b 	.word	0x0260045b
   e3c94:	045b045b 	.word	0x045b045b
   e3c98:	045b0268 	.word	0x045b0268
   e3c9c:	031d0297 	.word	0x031d0297
   e3ca0:	033b0325 	.word	0x033b0325
   e3ca4:	03860343 	.word	0x03860343
   e3ca8:	03a000c6 	.word	0x03a000c6
   e3cac:	045b041f 	.word	0x045b041f
   e3cb0:	045b045b 	.word	0x045b045b
   e3cb4:	045b045b 	.word	0x045b045b
   e3cb8:	0056045b 	.word	0x0056045b
   e3cbc:	00ba0089 	.word	0x00ba0089
   e3cc0:	010c010c 	.word	0x010c010c
   e3cc4:	0171045b 	.word	0x0171045b
   e3cc8:	045b0089 	.word	0x045b0089
   e3ccc:	0226023d 	.word	0x0226023d
   e3cd0:	025d022d 	.word	0x025d022d
   e3cd4:	045b0262 	.word	0x045b0262
   e3cd8:	045b0268 	.word	0x045b0268
   e3cdc:	029c00be 	.word	0x029c00be
   e3ce0:	032e031f 	.word	0x032e031f
   e3ce4:	037f045b 	.word	0x037f045b
   e3ce8:	039200c2 	.word	0x039200c2
   e3cec:	03e7      	.short	0x03e7
   e3cee:	69ab      	ldr	r3, [r5, #24]
   e3cf0:	9a03      	ldr	r2, [sp, #12]
   e3cf2:	3318      	adds	r3, #24
   e3cf4:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   e3cf8:	4640      	mov	r0, r8
   e3cfa:	f000 fc07 	bl	e450c <strlen>
   e3cfe:	f108 38ff 	add.w	r8, r8, #4294967295
   e3d02:	193b      	adds	r3, r7, r4
   e3d04:	4420      	add	r0, r4
   e3d06:	4284      	cmp	r4, r0
   e3d08:	f000 83eb 	beq.w	e44e2 <strftime+0x93e>
   e3d0c:	9a02      	ldr	r2, [sp, #8]
   e3d0e:	4294      	cmp	r4, r2
   e3d10:	f080 83f2 	bcs.w	e44f8 <strftime+0x954>
   e3d14:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   e3d18:	f803 2b01 	strb.w	r2, [r3], #1
   e3d1c:	3401      	adds	r4, #1
   e3d1e:	e7f2      	b.n	e3d06 <strftime+0x162>
   e3d20:	69ab      	ldr	r3, [r5, #24]
   e3d22:	9a03      	ldr	r2, [sp, #12]
   e3d24:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   e3d28:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
   e3d2c:	4640      	mov	r0, r8
   e3d2e:	f000 fbed 	bl	e450c <strlen>
   e3d32:	f108 38ff 	add.w	r8, r8, #4294967295
   e3d36:	193b      	adds	r3, r7, r4
   e3d38:	4420      	add	r0, r4
   e3d3a:	4284      	cmp	r4, r0
   e3d3c:	f000 83d1 	beq.w	e44e2 <strftime+0x93e>
   e3d40:	9a02      	ldr	r2, [sp, #8]
   e3d42:	4294      	cmp	r4, r2
   e3d44:	f080 83d8 	bcs.w	e44f8 <strftime+0x954>
   e3d48:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   e3d4c:	f803 2b01 	strb.w	r2, [r3], #1
   e3d50:	3401      	adds	r4, #1
   e3d52:	e7f2      	b.n	e3d3a <strftime+0x196>
   e3d54:	692b      	ldr	r3, [r5, #16]
   e3d56:	9a03      	ldr	r2, [sp, #12]
   e3d58:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   e3d5c:	4640      	mov	r0, r8
   e3d5e:	f000 fbd5 	bl	e450c <strlen>
   e3d62:	f108 38ff 	add.w	r8, r8, #4294967295
   e3d66:	193b      	adds	r3, r7, r4
   e3d68:	4420      	add	r0, r4
   e3d6a:	4284      	cmp	r4, r0
   e3d6c:	f000 83b9 	beq.w	e44e2 <strftime+0x93e>
   e3d70:	9a02      	ldr	r2, [sp, #8]
   e3d72:	4294      	cmp	r4, r2
   e3d74:	f080 83c0 	bcs.w	e44f8 <strftime+0x954>
   e3d78:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   e3d7c:	f803 2b01 	strb.w	r2, [r3], #1
   e3d80:	3401      	adds	r4, #1
   e3d82:	e7f2      	b.n	e3d6a <strftime+0x1c6>
   e3d84:	692b      	ldr	r3, [r5, #16]
   e3d86:	9a03      	ldr	r2, [sp, #12]
   e3d88:	330c      	adds	r3, #12
   e3d8a:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   e3d8e:	4640      	mov	r0, r8
   e3d90:	f000 fbbc 	bl	e450c <strlen>
   e3d94:	f108 38ff 	add.w	r8, r8, #4294967295
   e3d98:	193b      	adds	r3, r7, r4
   e3d9a:	4420      	add	r0, r4
   e3d9c:	4284      	cmp	r4, r0
   e3d9e:	f000 83a0 	beq.w	e44e2 <strftime+0x93e>
   e3da2:	9a02      	ldr	r2, [sp, #8]
   e3da4:	4294      	cmp	r4, r2
   e3da6:	f080 83a7 	bcs.w	e44f8 <strftime+0x954>
   e3daa:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   e3dae:	f803 2b01 	strb.w	r2, [r3], #1
   e3db2:	3401      	adds	r4, #1
   e3db4:	e7f2      	b.n	e3d9c <strftime+0x1f8>
   e3db6:	9b03      	ldr	r3, [sp, #12]
   e3db8:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
   e3dbc:	e00a      	b.n	e3dd4 <strftime+0x230>
   e3dbe:	9b03      	ldr	r3, [sp, #12]
   e3dc0:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
   e3dc4:	e006      	b.n	e3dd4 <strftime+0x230>
   e3dc6:	9b03      	ldr	r3, [sp, #12]
   e3dc8:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
   e3dcc:	e002      	b.n	e3dd4 <strftime+0x230>
   e3dce:	9b03      	ldr	r3, [sp, #12]
   e3dd0:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
   e3dd4:	4640      	mov	r0, r8
   e3dd6:	f000 fb99 	bl	e450c <strlen>
   e3dda:	f898 3000 	ldrb.w	r3, [r8]
   e3dde:	2b00      	cmp	r3, #0
   e3de0:	f000 837f 	beq.w	e44e2 <strftime+0x93e>
   e3de4:	462b      	mov	r3, r5
   e3de6:	4642      	mov	r2, r8
   e3de8:	e093      	b.n	e3f12 <strftime+0x36e>
   e3dea:	49b6      	ldr	r1, [pc, #728]	; (e40c4 <strftime+0x520>)
   e3dec:	f8d5 b014 	ldr.w	fp, [r5, #20]
   e3df0:	458b      	cmp	fp, r1
   e3df2:	bfac      	ite	ge
   e3df4:	2100      	movge	r1, #0
   e3df6:	2101      	movlt	r1, #1
   e3df8:	f1bb 0f00 	cmp.w	fp, #0
   e3dfc:	db04      	blt.n	e3e08 <strftime+0x264>
   e3dfe:	2064      	movs	r0, #100	; 0x64
   e3e00:	fb9b f0f0 	sdiv	r0, fp, r0
   e3e04:	3013      	adds	r0, #19
   e3e06:	e008      	b.n	e3e1a <strftime+0x276>
   e3e08:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
   e3e0c:	9107      	str	r1, [sp, #28]
   e3e0e:	f001 fd37 	bl	e5880 <abs>
   e3e12:	9907      	ldr	r1, [sp, #28]
   e3e14:	2364      	movs	r3, #100	; 0x64
   e3e16:	fb90 f0f3 	sdiv	r0, r0, r3
   e3e1a:	f1ba 0f00 	cmp.w	sl, #0
   e3e1e:	d008      	beq.n	e3e32 <strftime+0x28e>
   e3e20:	2863      	cmp	r0, #99	; 0x63
   e3e22:	dd09      	ble.n	e3e38 <strftime+0x294>
   e3e24:	4ba8      	ldr	r3, [pc, #672]	; (e40c8 <strftime+0x524>)
   e3e26:	4aa9      	ldr	r2, [pc, #676]	; (e40cc <strftime+0x528>)
   e3e28:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   e3e2c:	bf18      	it	ne
   e3e2e:	4613      	movne	r3, r2
   e3e30:	e003      	b.n	e3e3a <strftime+0x296>
   e3e32:	4ba6      	ldr	r3, [pc, #664]	; (e40cc <strftime+0x528>)
   e3e34:	4aa6      	ldr	r2, [pc, #664]	; (e40d0 <strftime+0x52c>)
   e3e36:	e001      	b.n	e3e3c <strftime+0x298>
   e3e38:	4ba4      	ldr	r3, [pc, #656]	; (e40cc <strftime+0x528>)
   e3e3a:	4aa6      	ldr	r2, [pc, #664]	; (e40d4 <strftime+0x530>)
   e3e3c:	9001      	str	r0, [sp, #4]
   e3e3e:	f1b8 0f01 	cmp.w	r8, #1
   e3e42:	bf98      	it	ls
   e3e44:	f04f 0802 	movls.w	r8, #2
   e3e48:	ebc1 0108 	rsb	r1, r1, r8
   e3e4c:	9100      	str	r1, [sp, #0]
   e3e4e:	489d      	ldr	r0, [pc, #628]	; (e40c4 <strftime+0x520>)
   e3e50:	49a1      	ldr	r1, [pc, #644]	; (e40d8 <strftime+0x534>)
   e3e52:	4583      	cmp	fp, r0
   e3e54:	bfb8      	it	lt
   e3e56:	460b      	movlt	r3, r1
   e3e58:	e21e      	b.n	e4298 <strftime+0x6f4>
   e3e5a:	4aa0      	ldr	r2, [pc, #640]	; (e40dc <strftime+0x538>)
   e3e5c:	49a0      	ldr	r1, [pc, #640]	; (e40e0 <strftime+0x53c>)
   e3e5e:	68eb      	ldr	r3, [r5, #12]
   e3e60:	2864      	cmp	r0, #100	; 0x64
   e3e62:	bf08      	it	eq
   e3e64:	460a      	moveq	r2, r1
   e3e66:	1b31      	subs	r1, r6, r4
   e3e68:	1938      	adds	r0, r7, r4
   e3e6a:	f7f6 fe77 	bl	dab5c <sniprintf>
   e3e6e:	2800      	cmp	r0, #0
   e3e70:	f280 8302 	bge.w	e4478 <strftime+0x8d4>
   e3e74:	e340      	b.n	e44f8 <strftime+0x954>
   e3e76:	6968      	ldr	r0, [r5, #20]
   e3e78:	692b      	ldr	r3, [r5, #16]
   e3e7a:	2800      	cmp	r0, #0
   e3e7c:	f103 0b01 	add.w	fp, r3, #1
   e3e80:	eb07 0804 	add.w	r8, r7, r4
   e3e84:	ebc4 0a06 	rsb	sl, r4, r6
   e3e88:	68eb      	ldr	r3, [r5, #12]
   e3e8a:	db05      	blt.n	e3e98 <strftime+0x2f4>
   e3e8c:	2264      	movs	r2, #100	; 0x64
   e3e8e:	fb90 f1f2 	sdiv	r1, r0, r2
   e3e92:	fb02 0011 	mls	r0, r2, r1, r0
   e3e96:	e00a      	b.n	e3eae <strftime+0x30a>
   e3e98:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   e3e9c:	9307      	str	r3, [sp, #28]
   e3e9e:	f001 fcef 	bl	e5880 <abs>
   e3ea2:	2264      	movs	r2, #100	; 0x64
   e3ea4:	9b07      	ldr	r3, [sp, #28]
   e3ea6:	fb90 f1f2 	sdiv	r1, r0, r2
   e3eaa:	fb01 0012 	mls	r0, r1, r2, r0
   e3eae:	4a8d      	ldr	r2, [pc, #564]	; (e40e4 <strftime+0x540>)
   e3eb0:	9001      	str	r0, [sp, #4]
   e3eb2:	9300      	str	r3, [sp, #0]
   e3eb4:	4651      	mov	r1, sl
   e3eb6:	465b      	mov	r3, fp
   e3eb8:	4640      	mov	r0, r8
   e3eba:	f7f6 fe4f 	bl	dab5c <sniprintf>
   e3ebe:	e7d6      	b.n	e3e6e <strftime+0x2ca>
   e3ec0:	2325      	movs	r3, #37	; 0x25
   e3ec2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   e3ec6:	f1ba 0f00 	cmp.w	sl, #0
   e3eca:	d007      	beq.n	e3edc <strftime+0x338>
   e3ecc:	f1b8 0f05 	cmp.w	r8, #5
   e3ed0:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
   e3ed4:	bf98      	it	ls
   e3ed6:	f04f 0806 	movls.w	r8, #6
   e3eda:	e004      	b.n	e3ee6 <strftime+0x342>
   e3edc:	232b      	movs	r3, #43	; 0x2b
   e3ede:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   e3ee2:	f04f 080a 	mov.w	r8, #10
   e3ee6:	f1b8 0306 	subs.w	r3, r8, #6
   e3eea:	d102      	bne.n	e3ef2 <strftime+0x34e>
   e3eec:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   e3ef0:	e00a      	b.n	e3f08 <strftime+0x364>
   e3ef2:	4a7d      	ldr	r2, [pc, #500]	; (e40e8 <strftime+0x544>)
   e3ef4:	211e      	movs	r1, #30
   e3ef6:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   e3efa:	f7f6 fe2f 	bl	dab5c <sniprintf>
   e3efe:	2800      	cmp	r0, #0
   e3f00:	ddf4      	ble.n	e3eec <strftime+0x348>
   e3f02:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
   e3f06:	4418      	add	r0, r3
   e3f08:	4978      	ldr	r1, [pc, #480]	; (e40ec <strftime+0x548>)
   e3f0a:	f7ff fdc7 	bl	e3a9c <strcpy>
   e3f0e:	462b      	mov	r3, r5
   e3f10:	aa0a      	add	r2, sp, #40	; 0x28
   e3f12:	1b31      	subs	r1, r6, r4
   e3f14:	1938      	adds	r0, r7, r4
   e3f16:	f7ff fe45 	bl	e3ba4 <strftime>
   e3f1a:	2800      	cmp	r0, #0
   e3f1c:	f340 82ec 	ble.w	e44f8 <strftime+0x954>
   e3f20:	4404      	add	r4, r0
   e3f22:	e2de      	b.n	e44e2 <strftime+0x93e>
   e3f24:	4628      	mov	r0, r5
   e3f26:	f7ff fddc 	bl	e3ae2 <iso_year_adjust>
   e3f2a:	4680      	mov	r8, r0
   e3f2c:	6968      	ldr	r0, [r5, #20]
   e3f2e:	2800      	cmp	r0, #0
   e3f30:	db05      	blt.n	e3f3e <strftime+0x39a>
   e3f32:	2264      	movs	r2, #100	; 0x64
   e3f34:	fb90 f1f2 	sdiv	r1, r0, r2
   e3f38:	fb02 0011 	mls	r0, r2, r1, r0
   e3f3c:	e008      	b.n	e3f50 <strftime+0x3ac>
   e3f3e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   e3f42:	f001 fc9d 	bl	e5880 <abs>
   e3f46:	2264      	movs	r2, #100	; 0x64
   e3f48:	fb90 f3f2 	sdiv	r3, r0, r2
   e3f4c:	fb03 0012 	mls	r0, r3, r2, r0
   e3f50:	f1b8 0f00 	cmp.w	r8, #0
   e3f54:	da06      	bge.n	e3f64 <strftime+0x3c0>
   e3f56:	696a      	ldr	r2, [r5, #20]
   e3f58:	4b65      	ldr	r3, [pc, #404]	; (e40f0 <strftime+0x54c>)
   e3f5a:	429a      	cmp	r2, r3
   e3f5c:	bfb8      	it	lt
   e3f5e:	f04f 0801 	movlt.w	r8, #1
   e3f62:	e006      	b.n	e3f72 <strftime+0x3ce>
   e3f64:	d005      	beq.n	e3f72 <strftime+0x3ce>
   e3f66:	696a      	ldr	r2, [r5, #20]
   e3f68:	4b56      	ldr	r3, [pc, #344]	; (e40c4 <strftime+0x520>)
   e3f6a:	429a      	cmp	r2, r3
   e3f6c:	bfb8      	it	lt
   e3f6e:	f04f 38ff 	movlt.w	r8, #4294967295
   e3f72:	2364      	movs	r3, #100	; 0x64
   e3f74:	4440      	add	r0, r8
   e3f76:	fb90 f2f3 	sdiv	r2, r0, r3
   e3f7a:	fb03 0012 	mls	r0, r3, r2, r0
   e3f7e:	4418      	add	r0, r3
   e3f80:	e1f9      	b.n	e4376 <strftime+0x7d2>
   e3f82:	4b50      	ldr	r3, [pc, #320]	; (e40c4 <strftime+0x520>)
   e3f84:	6969      	ldr	r1, [r5, #20]
   e3f86:	9108      	str	r1, [sp, #32]
   e3f88:	4299      	cmp	r1, r3
   e3f8a:	bfac      	ite	ge
   e3f8c:	2300      	movge	r3, #0
   e3f8e:	2301      	movlt	r3, #1
   e3f90:	4628      	mov	r0, r5
   e3f92:	9307      	str	r3, [sp, #28]
   e3f94:	f7ff fda5 	bl	e3ae2 <iso_year_adjust>
   e3f98:	9908      	ldr	r1, [sp, #32]
   e3f9a:	2900      	cmp	r1, #0
   e3f9c:	4683      	mov	fp, r0
   e3f9e:	db04      	blt.n	e3faa <strftime+0x406>
   e3fa0:	2364      	movs	r3, #100	; 0x64
   e3fa2:	fb91 f3f3 	sdiv	r3, r1, r3
   e3fa6:	3313      	adds	r3, #19
   e3fa8:	e008      	b.n	e3fbc <strftime+0x418>
   e3faa:	f201 706c 	addw	r0, r1, #1900	; 0x76c
   e3fae:	9108      	str	r1, [sp, #32]
   e3fb0:	f001 fc66 	bl	e5880 <abs>
   e3fb4:	9908      	ldr	r1, [sp, #32]
   e3fb6:	2364      	movs	r3, #100	; 0x64
   e3fb8:	fb90 f3f3 	sdiv	r3, r0, r3
   e3fbc:	6968      	ldr	r0, [r5, #20]
   e3fbe:	2800      	cmp	r0, #0
   e3fc0:	db06      	blt.n	e3fd0 <strftime+0x42c>
   e3fc2:	f04f 0e64 	mov.w	lr, #100	; 0x64
   e3fc6:	fb90 fcfe 	sdiv	ip, r0, lr
   e3fca:	fb0e 001c 	mls	r0, lr, ip, r0
   e3fce:	e00d      	b.n	e3fec <strftime+0x448>
   e3fd0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   e3fd4:	9109      	str	r1, [sp, #36]	; 0x24
   e3fd6:	9308      	str	r3, [sp, #32]
   e3fd8:	f001 fc52 	bl	e5880 <abs>
   e3fdc:	f04f 0e64 	mov.w	lr, #100	; 0x64
   e3fe0:	9909      	ldr	r1, [sp, #36]	; 0x24
   e3fe2:	9b08      	ldr	r3, [sp, #32]
   e3fe4:	fb90 fcfe 	sdiv	ip, r0, lr
   e3fe8:	fb0c 001e 	mls	r0, ip, lr, r0
   e3fec:	f1bb 0f00 	cmp.w	fp, #0
   e3ff0:	da08      	bge.n	e4004 <strftime+0x460>
   e3ff2:	6969      	ldr	r1, [r5, #20]
   e3ff4:	4a3e      	ldr	r2, [pc, #248]	; (e40f0 <strftime+0x54c>)
   e3ff6:	4291      	cmp	r1, r2
   e3ff8:	da0a      	bge.n	e4010 <strftime+0x46c>
   e3ffa:	f04f 0b01 	mov.w	fp, #1
   e3ffe:	f8cd b01c 	str.w	fp, [sp, #28]
   e4002:	e005      	b.n	e4010 <strftime+0x46c>
   e4004:	d004      	beq.n	e4010 <strftime+0x46c>
   e4006:	4a2f      	ldr	r2, [pc, #188]	; (e40c4 <strftime+0x520>)
   e4008:	4291      	cmp	r1, r2
   e400a:	bfb8      	it	lt
   e400c:	f04f 3bff 	movlt.w	fp, #4294967295
   e4010:	eb0b 0200 	add.w	r2, fp, r0
   e4014:	1c50      	adds	r0, r2, #1
   e4016:	d102      	bne.n	e401e <strftime+0x47a>
   e4018:	3b01      	subs	r3, #1
   e401a:	2263      	movs	r2, #99	; 0x63
   e401c:	e003      	b.n	e4026 <strftime+0x482>
   e401e:	2a64      	cmp	r2, #100	; 0x64
   e4020:	bf04      	itt	eq
   e4022:	3301      	addeq	r3, #1
   e4024:	2200      	moveq	r2, #0
   e4026:	2064      	movs	r0, #100	; 0x64
   e4028:	fb00 2303 	mla	r3, r0, r3, r2
   e402c:	9a07      	ldr	r2, [sp, #28]
   e402e:	b142      	cbz	r2, e4042 <strftime+0x49e>
   e4030:	222d      	movs	r2, #45	; 0x2d
   e4032:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   e4036:	f1b8 0f00 	cmp.w	r8, #0
   e403a:	d013      	beq.n	e4064 <strftime+0x4c0>
   e403c:	f108 38ff 	add.w	r8, r8, #4294967295
   e4040:	e010      	b.n	e4064 <strftime+0x4c0>
   e4042:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   e4046:	d110      	bne.n	e406a <strftime+0x4c6>
   e4048:	f242 720f 	movw	r2, #9999	; 0x270f
   e404c:	4293      	cmp	r3, r2
   e404e:	d90c      	bls.n	e406a <strftime+0x4c6>
   e4050:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   e4054:	f1b8 0f00 	cmp.w	r8, #0
   e4058:	d1f0      	bne.n	e403c <strftime+0x498>
   e405a:	aa12      	add	r2, sp, #72	; 0x48
   e405c:	2125      	movs	r1, #37	; 0x25
   e405e:	f802 1d1f 	strb.w	r1, [r2, #-31]!
   e4062:	e00a      	b.n	e407a <strftime+0x4d6>
   e4064:	f10d 0229 	add.w	r2, sp, #41	; 0x29
   e4068:	e000      	b.n	e406c <strftime+0x4c8>
   e406a:	aa0a      	add	r2, sp, #40	; 0x28
   e406c:	2125      	movs	r1, #37	; 0x25
   e406e:	7011      	strb	r1, [r2, #0]
   e4070:	f1ba 0f00 	cmp.w	sl, #0
   e4074:	d101      	bne.n	e407a <strftime+0x4d6>
   e4076:	1c50      	adds	r0, r2, #1
   e4078:	e002      	b.n	e4080 <strftime+0x4dc>
   e407a:	2130      	movs	r1, #48	; 0x30
   e407c:	1c90      	adds	r0, r2, #2
   e407e:	7051      	strb	r1, [r2, #1]
   e4080:	491c      	ldr	r1, [pc, #112]	; (e40f4 <strftime+0x550>)
   e4082:	9307      	str	r3, [sp, #28]
   e4084:	f7ff fd0a 	bl	e3a9c <strcpy>
   e4088:	9b07      	ldr	r3, [sp, #28]
   e408a:	9300      	str	r3, [sp, #0]
   e408c:	e1ad      	b.n	e43ea <strftime+0x846>
   e408e:	4a14      	ldr	r2, [pc, #80]	; (e40e0 <strftime+0x53c>)
   e4090:	4912      	ldr	r1, [pc, #72]	; (e40dc <strftime+0x538>)
   e4092:	68ab      	ldr	r3, [r5, #8]
   e4094:	286b      	cmp	r0, #107	; 0x6b
   e4096:	bf08      	it	eq
   e4098:	460a      	moveq	r2, r1
   e409a:	e6e4      	b.n	e3e66 <strftime+0x2c2>
   e409c:	68a9      	ldr	r1, [r5, #8]
   e409e:	230c      	movs	r3, #12
   e40a0:	b131      	cbz	r1, e40b0 <strftime+0x50c>
   e40a2:	4299      	cmp	r1, r3
   e40a4:	bf0e      	itee	eq
   e40a6:	460b      	moveq	r3, r1
   e40a8:	fb91 f2f3 	sdivne	r2, r1, r3
   e40ac:	fb03 1312 	mlsne	r3, r3, r2, r1
   e40b0:	4a0a      	ldr	r2, [pc, #40]	; (e40dc <strftime+0x538>)
   e40b2:	490b      	ldr	r1, [pc, #44]	; (e40e0 <strftime+0x53c>)
   e40b4:	2849      	cmp	r0, #73	; 0x49
   e40b6:	bf08      	it	eq
   e40b8:	460a      	moveq	r2, r1
   e40ba:	e6d4      	b.n	e3e66 <strftime+0x2c2>
   e40bc:	69eb      	ldr	r3, [r5, #28]
   e40be:	4a0e      	ldr	r2, [pc, #56]	; (e40f8 <strftime+0x554>)
   e40c0:	3301      	adds	r3, #1
   e40c2:	e6d0      	b.n	e3e66 <strftime+0x2c2>
   e40c4:	fffff894 	.word	0xfffff894
   e40c8:	000e855b 	.word	0x000e855b
   e40cc:	000e6bf1 	.word	0x000e6bf1
   e40d0:	000e854c 	.word	0x000e854c
   e40d4:	000e8553 	.word	0x000e8553
   e40d8:	000e73e8 	.word	0x000e73e8
   e40dc:	000e855d 	.word	0x000e855d
   e40e0:	000e856b 	.word	0x000e856b
   e40e4:	000e8561 	.word	0x000e8561
   e40e8:	000e8570 	.word	0x000e8570
   e40ec:	000e8574 	.word	0x000e8574
   e40f0:	fffff895 	.word	0xfffff895
   e40f4:	000e857c 	.word	0x000e857c
   e40f8:	000e8580 	.word	0x000e8580
   e40fc:	692b      	ldr	r3, [r5, #16]
   e40fe:	3301      	adds	r3, #1
   e4100:	e13d      	b.n	e437e <strftime+0x7da>
   e4102:	686b      	ldr	r3, [r5, #4]
   e4104:	e13b      	b.n	e437e <strftime+0x7da>
   e4106:	9b02      	ldr	r3, [sp, #8]
   e4108:	429c      	cmp	r4, r3
   e410a:	f080 81f5 	bcs.w	e44f8 <strftime+0x954>
   e410e:	230a      	movs	r3, #10
   e4110:	e1e5      	b.n	e44de <strftime+0x93a>
   e4112:	68ab      	ldr	r3, [r5, #8]
   e4114:	9a03      	ldr	r2, [sp, #12]
   e4116:	2b0b      	cmp	r3, #11
   e4118:	bfcc      	ite	gt
   e411a:	23a4      	movgt	r3, #164	; 0xa4
   e411c:	23a0      	movle	r3, #160	; 0xa0
   e411e:	4413      	add	r3, r2
   e4120:	f8d3 8004 	ldr.w	r8, [r3, #4]
   e4124:	4640      	mov	r0, r8
   e4126:	f000 f9f1 	bl	e450c <strlen>
   e412a:	4bb2      	ldr	r3, [pc, #712]	; (e43f4 <strftime+0x850>)
   e412c:	f8d3 e000 	ldr.w	lr, [r3]
   e4130:	1939      	adds	r1, r7, r4
   e4132:	4642      	mov	r2, r8
   e4134:	4420      	add	r0, r4
   e4136:	4284      	cmp	r4, r0
   e4138:	f000 81d3 	beq.w	e44e2 <strftime+0x93e>
   e413c:	9b02      	ldr	r3, [sp, #8]
   e413e:	429c      	cmp	r4, r3
   e4140:	f080 81da 	bcs.w	e44f8 <strftime+0x954>
   e4144:	f899 3000 	ldrb.w	r3, [r9]
   e4148:	2b50      	cmp	r3, #80	; 0x50
   e414a:	f104 0401 	add.w	r4, r4, #1
   e414e:	7813      	ldrb	r3, [r2, #0]
   e4150:	d10a      	bne.n	e4168 <strftime+0x5c4>
   e4152:	eb0e 0c03 	add.w	ip, lr, r3
   e4156:	f89c c001 	ldrb.w	ip, [ip, #1]
   e415a:	f00c 0c03 	and.w	ip, ip, #3
   e415e:	f1bc 0f01 	cmp.w	ip, #1
   e4162:	bf08      	it	eq
   e4164:	3320      	addeq	r3, #32
   e4166:	b2db      	uxtb	r3, r3
   e4168:	f801 3b01 	strb.w	r3, [r1], #1
   e416c:	3201      	adds	r2, #1
   e416e:	e7e2      	b.n	e4136 <strftime+0x592>
   e4170:	686b      	ldr	r3, [r5, #4]
   e4172:	9300      	str	r3, [sp, #0]
   e4174:	4aa0      	ldr	r2, [pc, #640]	; (e43f8 <strftime+0x854>)
   e4176:	68ab      	ldr	r3, [r5, #8]
   e4178:	e139      	b.n	e43ee <strftime+0x84a>
   e417a:	6a2b      	ldr	r3, [r5, #32]
   e417c:	2b00      	cmp	r3, #0
   e417e:	db17      	blt.n	e41b0 <strftime+0x60c>
   e4180:	f001 f9f6 	bl	e5570 <__tz_lock>
   e4184:	9b06      	ldr	r3, [sp, #24]
   e4186:	b91b      	cbnz	r3, e4190 <strftime+0x5ec>
   e4188:	f001 f9f4 	bl	e5574 <_tzset_unlocked>
   e418c:	2301      	movs	r3, #1
   e418e:	9306      	str	r3, [sp, #24]
   e4190:	f001 fef0 	bl	e5f74 <__gettzinfo>
   e4194:	6a2b      	ldr	r3, [r5, #32]
   e4196:	2b00      	cmp	r3, #0
   e4198:	bfd4      	ite	le
   e419a:	2300      	movle	r3, #0
   e419c:	2301      	movgt	r3, #1
   e419e:	221c      	movs	r2, #28
   e41a0:	fb02 0003 	mla	r0, r2, r3, r0
   e41a4:	6a03      	ldr	r3, [r0, #32]
   e41a6:	f1c3 0800 	rsb	r8, r3, #0
   e41aa:	f001 f9e2 	bl	e5572 <__tz_unlock>
   e41ae:	e001      	b.n	e41b4 <strftime+0x610>
   e41b0:	f04f 0800 	mov.w	r8, #0
   e41b4:	f8d5 e014 	ldr.w	lr, [r5, #20]
   e41b8:	4670      	mov	r0, lr
   e41ba:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
   e41be:	ea4f 71e0 	mov.w	r1, r0, asr #31
   e41c2:	f141 33ff 	adc.w	r3, r1, #4294967295
   e41c6:	2a00      	cmp	r2, #0
   e41c8:	f173 0b00 	sbcs.w	fp, r3, #0
   e41cc:	ebc4 0c06 	rsb	ip, r4, r6
   e41d0:	eb07 0a04 	add.w	sl, r7, r4
   e41d4:	da03      	bge.n	e41de <strftime+0x63a>
   e41d6:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
   e41da:	f141 33ff 	adc.w	r3, r1, #4294967295
   e41de:	0891      	lsrs	r1, r2, #2
   e41e0:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
   e41e4:	109b      	asrs	r3, r3, #2
   e41e6:	9104      	str	r1, [sp, #16]
   e41e8:	9305      	str	r3, [sp, #20]
   e41ea:	f10e 31ff 	add.w	r1, lr, #4294967295
   e41ee:	2364      	movs	r3, #100	; 0x64
   e41f0:	fb91 f1f3 	sdiv	r1, r1, r3
   e41f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   e41f8:	1a52      	subs	r2, r2, r1
   e41fa:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   e41fe:	f20e 102b 	addw	r0, lr, #299	; 0x12b
   e4202:	f44f 71c8 	mov.w	r1, #400	; 0x190
   e4206:	fb90 f1f1 	sdiv	r1, r0, r1
   e420a:	1852      	adds	r2, r2, r1
   e420c:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   e4210:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
   e4214:	f240 116d 	movw	r1, #365	; 0x16d
   e4218:	fb01 fe0e 	mul.w	lr, r1, lr
   e421c:	69e9      	ldr	r1, [r5, #28]
   e421e:	eb12 020e 	adds.w	r2, r2, lr
   e4222:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
   e4226:	1852      	adds	r2, r2, r1
   e4228:	f04f 0e18 	mov.w	lr, #24
   e422c:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   e4230:	fba2 010e 	umull	r0, r1, r2, lr
   e4234:	fb0e 1103 	mla	r1, lr, r3, r1
   e4238:	68ab      	ldr	r3, [r5, #8]
   e423a:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
   e423e:	18c0      	adds	r0, r0, r3
   e4240:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   e4244:	fba0 230e 	umull	r2, r3, r0, lr
   e4248:	fb0e 3301 	mla	r3, lr, r1, r3
   e424c:	6869      	ldr	r1, [r5, #4]
   e424e:	1852      	adds	r2, r2, r1
   e4250:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   e4254:	fba2 010e 	umull	r0, r1, r2, lr
   e4258:	fb0e 1103 	mla	r1, lr, r3, r1
   e425c:	682b      	ldr	r3, [r5, #0]
   e425e:	4a67      	ldr	r2, [pc, #412]	; (e43fc <strftime+0x858>)
   e4260:	18c0      	adds	r0, r0, r3
   e4262:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   e4266:	ebb0 0008 	subs.w	r0, r0, r8
   e426a:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
   e426e:	e9cd 0100 	strd	r0, r1, [sp]
   e4272:	4661      	mov	r1, ip
   e4274:	4650      	mov	r0, sl
   e4276:	f7f6 fc71 	bl	dab5c <sniprintf>
   e427a:	e5f8      	b.n	e3e6e <strftime+0x2ca>
   e427c:	682b      	ldr	r3, [r5, #0]
   e427e:	e07e      	b.n	e437e <strftime+0x7da>
   e4280:	9b02      	ldr	r3, [sp, #8]
   e4282:	429c      	cmp	r4, r3
   e4284:	f080 8138 	bcs.w	e44f8 <strftime+0x954>
   e4288:	2309      	movs	r3, #9
   e428a:	e128      	b.n	e44de <strftime+0x93a>
   e428c:	682b      	ldr	r3, [r5, #0]
   e428e:	9301      	str	r3, [sp, #4]
   e4290:	686b      	ldr	r3, [r5, #4]
   e4292:	9300      	str	r3, [sp, #0]
   e4294:	4a5a      	ldr	r2, [pc, #360]	; (e4400 <strftime+0x85c>)
   e4296:	68ab      	ldr	r3, [r5, #8]
   e4298:	1b31      	subs	r1, r6, r4
   e429a:	1938      	adds	r0, r7, r4
   e429c:	e60d      	b.n	e3eba <strftime+0x316>
   e429e:	9b02      	ldr	r3, [sp, #8]
   e42a0:	429c      	cmp	r4, r3
   e42a2:	f080 8129 	bcs.w	e44f8 <strftime+0x954>
   e42a6:	69ab      	ldr	r3, [r5, #24]
   e42a8:	1c62      	adds	r2, r4, #1
   e42aa:	b90b      	cbnz	r3, e42b0 <strftime+0x70c>
   e42ac:	2337      	movs	r3, #55	; 0x37
   e42ae:	e000      	b.n	e42b2 <strftime+0x70e>
   e42b0:	3330      	adds	r3, #48	; 0x30
   e42b2:	553b      	strb	r3, [r7, r4]
   e42b4:	4614      	mov	r4, r2
   e42b6:	e114      	b.n	e44e2 <strftime+0x93e>
   e42b8:	69eb      	ldr	r3, [r5, #28]
   e42ba:	69aa      	ldr	r2, [r5, #24]
   e42bc:	3307      	adds	r3, #7
   e42be:	1a9b      	subs	r3, r3, r2
   e42c0:	2207      	movs	r2, #7
   e42c2:	fb93 f3f2 	sdiv	r3, r3, r2
   e42c6:	e05a      	b.n	e437e <strftime+0x7da>
   e42c8:	4628      	mov	r0, r5
   e42ca:	f7ff fc0a 	bl	e3ae2 <iso_year_adjust>
   e42ce:	69aa      	ldr	r2, [r5, #24]
   e42d0:	b10a      	cbz	r2, e42d6 <strftime+0x732>
   e42d2:	1e53      	subs	r3, r2, #1
   e42d4:	e000      	b.n	e42d8 <strftime+0x734>
   e42d6:	2306      	movs	r3, #6
   e42d8:	2800      	cmp	r0, #0
   e42da:	dc2f      	bgt.n	e433c <strftime+0x798>
   e42dc:	69ea      	ldr	r2, [r5, #28]
   e42de:	d101      	bne.n	e42e4 <strftime+0x740>
   e42e0:	320a      	adds	r2, #10
   e42e2:	e03b      	b.n	e435c <strftime+0x7b8>
   e42e4:	1a9a      	subs	r2, r3, r2
   e42e6:	696b      	ldr	r3, [r5, #20]
   e42e8:	f240 716b 	movw	r1, #1899	; 0x76b
   e42ec:	2b00      	cmp	r3, #0
   e42ee:	bfb4      	ite	lt
   e42f0:	4608      	movlt	r0, r1
   e42f2:	f06f 0064 	mvnge.w	r0, #100	; 0x64
   e42f6:	4418      	add	r0, r3
   e42f8:	0781      	lsls	r1, r0, #30
   e42fa:	d107      	bne.n	e430c <strftime+0x768>
   e42fc:	4601      	mov	r1, r0
   e42fe:	f04f 0e64 	mov.w	lr, #100	; 0x64
   e4302:	fb90 f0fe 	sdiv	r0, r0, lr
   e4306:	fb0e 1110 	mls	r1, lr, r0, r1
   e430a:	b981      	cbnz	r1, e432e <strftime+0x78a>
   e430c:	2b00      	cmp	r3, #0
   e430e:	f240 716b 	movw	r1, #1899	; 0x76b
   e4312:	bfa8      	it	ge
   e4314:	f06f 0164 	mvnge.w	r1, #100	; 0x64
   e4318:	4419      	add	r1, r3
   e431a:	f44f 73c8 	mov.w	r3, #400	; 0x190
   e431e:	fb91 f0f3 	sdiv	r0, r1, r3
   e4322:	fb03 1110 	mls	r1, r3, r0, r1
   e4326:	fab1 f181 	clz	r1, r1
   e432a:	0949      	lsrs	r1, r1, #5
   e432c:	e000      	b.n	e4330 <strftime+0x78c>
   e432e:	2101      	movs	r1, #1
   e4330:	1a52      	subs	r2, r2, r1
   e4332:	2a05      	cmp	r2, #5
   e4334:	bfb4      	ite	lt
   e4336:	2335      	movlt	r3, #53	; 0x35
   e4338:	2334      	movge	r3, #52	; 0x34
   e433a:	e020      	b.n	e437e <strftime+0x7da>
   e433c:	2301      	movs	r3, #1
   e433e:	e01e      	b.n	e437e <strftime+0x7da>
   e4340:	9b02      	ldr	r3, [sp, #8]
   e4342:	429c      	cmp	r4, r3
   e4344:	f080 80d8 	bcs.w	e44f8 <strftime+0x954>
   e4348:	69ab      	ldr	r3, [r5, #24]
   e434a:	3330      	adds	r3, #48	; 0x30
   e434c:	e0c7      	b.n	e44de <strftime+0x93a>
   e434e:	69aa      	ldr	r2, [r5, #24]
   e4350:	b10a      	cbz	r2, e4356 <strftime+0x7b2>
   e4352:	1e53      	subs	r3, r2, #1
   e4354:	e000      	b.n	e4358 <strftime+0x7b4>
   e4356:	2306      	movs	r3, #6
   e4358:	69ea      	ldr	r2, [r5, #28]
   e435a:	3207      	adds	r2, #7
   e435c:	1ad2      	subs	r2, r2, r3
   e435e:	2307      	movs	r3, #7
   e4360:	fb92 f3f3 	sdiv	r3, r2, r3
   e4364:	e00b      	b.n	e437e <strftime+0x7da>
   e4366:	6968      	ldr	r0, [r5, #20]
   e4368:	2800      	cmp	r0, #0
   e436a:	da03      	bge.n	e4374 <strftime+0x7d0>
   e436c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   e4370:	f001 fa86 	bl	e5880 <abs>
   e4374:	2364      	movs	r3, #100	; 0x64
   e4376:	fb90 f2f3 	sdiv	r2, r0, r3
   e437a:	fb02 0313 	mls	r3, r2, r3, r0
   e437e:	4a21      	ldr	r2, [pc, #132]	; (e4404 <strftime+0x860>)
   e4380:	e571      	b.n	e3e66 <strftime+0x2c2>
   e4382:	696b      	ldr	r3, [r5, #20]
   e4384:	4a20      	ldr	r2, [pc, #128]	; (e4408 <strftime+0x864>)
   e4386:	4293      	cmp	r3, r2
   e4388:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
   e438c:	da05      	bge.n	e439a <strftime+0x7f6>
   e438e:	232d      	movs	r3, #45	; 0x2d
   e4390:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   e4394:	f1cb 0b00 	rsb	fp, fp, #0
   e4398:	e008      	b.n	e43ac <strftime+0x808>
   e439a:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   e439e:	d10d      	bne.n	e43bc <strftime+0x818>
   e43a0:	f242 730f 	movw	r3, #9999	; 0x270f
   e43a4:	459b      	cmp	fp, r3
   e43a6:	d911      	bls.n	e43cc <strftime+0x828>
   e43a8:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   e43ac:	f1b8 0f00 	cmp.w	r8, #0
   e43b0:	d001      	beq.n	e43b6 <strftime+0x812>
   e43b2:	f108 38ff 	add.w	r8, r8, #4294967295
   e43b6:	f10d 0329 	add.w	r3, sp, #41	; 0x29
   e43ba:	e000      	b.n	e43be <strftime+0x81a>
   e43bc:	ab0a      	add	r3, sp, #40	; 0x28
   e43be:	2225      	movs	r2, #37	; 0x25
   e43c0:	701a      	strb	r2, [r3, #0]
   e43c2:	f1ba 0f00 	cmp.w	sl, #0
   e43c6:	d108      	bne.n	e43da <strftime+0x836>
   e43c8:	1c58      	adds	r0, r3, #1
   e43ca:	e009      	b.n	e43e0 <strftime+0x83c>
   e43cc:	f1b8 0f00 	cmp.w	r8, #0
   e43d0:	d1f4      	bne.n	e43bc <strftime+0x818>
   e43d2:	2325      	movs	r3, #37	; 0x25
   e43d4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   e43d8:	ab0a      	add	r3, sp, #40	; 0x28
   e43da:	2230      	movs	r2, #48	; 0x30
   e43dc:	1c98      	adds	r0, r3, #2
   e43de:	705a      	strb	r2, [r3, #1]
   e43e0:	490a      	ldr	r1, [pc, #40]	; (e440c <strftime+0x868>)
   e43e2:	f7ff fb5b 	bl	e3a9c <strcpy>
   e43e6:	f8cd b000 	str.w	fp, [sp]
   e43ea:	4643      	mov	r3, r8
   e43ec:	aa0a      	add	r2, sp, #40	; 0x28
   e43ee:	1b31      	subs	r1, r6, r4
   e43f0:	1938      	adds	r0, r7, r4
   e43f2:	e03e      	b.n	e4472 <strftime+0x8ce>
   e43f4:	2003d5c0 	.word	0x2003d5c0
   e43f8:	000e858f 	.word	0x000e858f
   e43fc:	000e8585 	.word	0x000e8585
   e4400:	000e858a 	.word	0x000e858a
   e4404:	000e856b 	.word	0x000e856b
   e4408:	fffff894 	.word	0xfffff894
   e440c:	000e857c 	.word	0x000e857c
   e4410:	6a2b      	ldr	r3, [r5, #32]
   e4412:	2b00      	cmp	r3, #0
   e4414:	db65      	blt.n	e44e2 <strftime+0x93e>
   e4416:	f001 f8ab 	bl	e5570 <__tz_lock>
   e441a:	9b06      	ldr	r3, [sp, #24]
   e441c:	b91b      	cbnz	r3, e4426 <strftime+0x882>
   e441e:	f001 f8a9 	bl	e5574 <_tzset_unlocked>
   e4422:	2301      	movs	r3, #1
   e4424:	9306      	str	r3, [sp, #24]
   e4426:	f001 fda5 	bl	e5f74 <__gettzinfo>
   e442a:	6a2b      	ldr	r3, [r5, #32]
   e442c:	2b00      	cmp	r3, #0
   e442e:	bfd4      	ite	le
   e4430:	2300      	movle	r3, #0
   e4432:	2301      	movgt	r3, #1
   e4434:	221c      	movs	r2, #28
   e4436:	fb02 0003 	mla	r0, r2, r3, r0
   e443a:	eb07 0a04 	add.w	sl, r7, r4
   e443e:	6a03      	ldr	r3, [r0, #32]
   e4440:	f1c3 0800 	rsb	r8, r3, #0
   e4444:	f001 f895 	bl	e5572 <__tz_unlock>
   e4448:	233c      	movs	r3, #60	; 0x3c
   e444a:	fb98 f0f3 	sdiv	r0, r8, r3
   e444e:	9307      	str	r3, [sp, #28]
   e4450:	f001 fe2c 	bl	e60ac <labs>
   e4454:	9b07      	ldr	r3, [sp, #28]
   e4456:	fb90 f2f3 	sdiv	r2, r0, r3
   e445a:	ebc4 0b06 	rsb	fp, r4, r6
   e445e:	fb02 0013 	mls	r0, r2, r3, r0
   e4462:	4a28      	ldr	r2, [pc, #160]	; (e4504 <strftime+0x960>)
   e4464:	9000      	str	r0, [sp, #0]
   e4466:	4659      	mov	r1, fp
   e4468:	4650      	mov	r0, sl
   e446a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   e446e:	fb98 f3f3 	sdiv	r3, r8, r3
   e4472:	f7f6 fb73 	bl	dab5c <sniprintf>
   e4476:	e4fa      	b.n	e3e6e <strftime+0x2ca>
   e4478:	4404      	add	r4, r0
   e447a:	42a6      	cmp	r6, r4
   e447c:	d831      	bhi.n	e44e2 <strftime+0x93e>
   e447e:	e03b      	b.n	e44f8 <strftime+0x954>
   e4480:	6a2b      	ldr	r3, [r5, #32]
   e4482:	2b00      	cmp	r3, #0
   e4484:	db2d      	blt.n	e44e2 <strftime+0x93e>
   e4486:	f001 f873 	bl	e5570 <__tz_lock>
   e448a:	9b06      	ldr	r3, [sp, #24]
   e448c:	b91b      	cbnz	r3, e4496 <strftime+0x8f2>
   e448e:	f001 f871 	bl	e5574 <_tzset_unlocked>
   e4492:	2301      	movs	r3, #1
   e4494:	9306      	str	r3, [sp, #24]
   e4496:	6a2b      	ldr	r3, [r5, #32]
   e4498:	4a1b      	ldr	r2, [pc, #108]	; (e4508 <strftime+0x964>)
   e449a:	2b00      	cmp	r3, #0
   e449c:	bfd4      	ite	le
   e449e:	2300      	movle	r3, #0
   e44a0:	2301      	movgt	r3, #1
   e44a2:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   e44a6:	4640      	mov	r0, r8
   e44a8:	f000 f830 	bl	e450c <strlen>
   e44ac:	f108 38ff 	add.w	r8, r8, #4294967295
   e44b0:	193b      	adds	r3, r7, r4
   e44b2:	4420      	add	r0, r4
   e44b4:	4284      	cmp	r4, r0
   e44b6:	d00b      	beq.n	e44d0 <strftime+0x92c>
   e44b8:	9a02      	ldr	r2, [sp, #8]
   e44ba:	4294      	cmp	r4, r2
   e44bc:	d205      	bcs.n	e44ca <strftime+0x926>
   e44be:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   e44c2:	f803 2b01 	strb.w	r2, [r3], #1
   e44c6:	3401      	adds	r4, #1
   e44c8:	e7f4      	b.n	e44b4 <strftime+0x910>
   e44ca:	f001 f852 	bl	e5572 <__tz_unlock>
   e44ce:	e013      	b.n	e44f8 <strftime+0x954>
   e44d0:	f001 f84f 	bl	e5572 <__tz_unlock>
   e44d4:	e005      	b.n	e44e2 <strftime+0x93e>
   e44d6:	9b02      	ldr	r3, [sp, #8]
   e44d8:	429c      	cmp	r4, r3
   e44da:	d20d      	bcs.n	e44f8 <strftime+0x954>
   e44dc:	2325      	movs	r3, #37	; 0x25
   e44de:	553b      	strb	r3, [r7, r4]
   e44e0:	3401      	adds	r4, #1
   e44e2:	f899 3000 	ldrb.w	r3, [r9]
   e44e6:	b11b      	cbz	r3, e44f0 <strftime+0x94c>
   e44e8:	f109 0901 	add.w	r9, r9, #1
   e44ec:	f7ff bb69 	b.w	e3bc2 <strftime+0x1e>
   e44f0:	b126      	cbz	r6, e44fc <strftime+0x958>
   e44f2:	2300      	movs	r3, #0
   e44f4:	553b      	strb	r3, [r7, r4]
   e44f6:	e001      	b.n	e44fc <strftime+0x958>
   e44f8:	2000      	movs	r0, #0
   e44fa:	e000      	b.n	e44fe <strftime+0x95a>
   e44fc:	4620      	mov	r0, r4
   e44fe:	b013      	add	sp, #76	; 0x4c
   e4500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e4504:	000e8599 	.word	0x000e8599
   e4508:	2003d660 	.word	0x2003d660

000e450c <strlen>:
   e450c:	4603      	mov	r3, r0
   e450e:	f813 2b01 	ldrb.w	r2, [r3], #1
   e4512:	2a00      	cmp	r2, #0
   e4514:	d1fb      	bne.n	e450e <strlen+0x2>
   e4516:	1a18      	subs	r0, r3, r0
   e4518:	3801      	subs	r0, #1
   e451a:	4770      	bx	lr

000e451c <strncmp>:
   e451c:	b530      	push	{r4, r5, lr}
   e451e:	b182      	cbz	r2, e4542 <strncmp+0x26>
   e4520:	1e45      	subs	r5, r0, #1
   e4522:	3901      	subs	r1, #1
   e4524:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   e4528:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   e452c:	42a3      	cmp	r3, r4
   e452e:	d106      	bne.n	e453e <strncmp+0x22>
   e4530:	43ec      	mvns	r4, r5
   e4532:	4414      	add	r4, r2
   e4534:	42e0      	cmn	r0, r4
   e4536:	d001      	beq.n	e453c <strncmp+0x20>
   e4538:	2b00      	cmp	r3, #0
   e453a:	d1f3      	bne.n	e4524 <strncmp+0x8>
   e453c:	461c      	mov	r4, r3
   e453e:	1b18      	subs	r0, r3, r4
   e4540:	bd30      	pop	{r4, r5, pc}
   e4542:	4610      	mov	r0, r2
   e4544:	bd30      	pop	{r4, r5, pc}

000e4546 <strncpy>:
   e4546:	b510      	push	{r4, lr}
   e4548:	4603      	mov	r3, r0
   e454a:	b142      	cbz	r2, e455e <strncpy+0x18>
   e454c:	f811 4b01 	ldrb.w	r4, [r1], #1
   e4550:	f803 4b01 	strb.w	r4, [r3], #1
   e4554:	3a01      	subs	r2, #1
   e4556:	2c00      	cmp	r4, #0
   e4558:	d1f7      	bne.n	e454a <strncpy+0x4>
   e455a:	441a      	add	r2, r3
   e455c:	e000      	b.n	e4560 <strncpy+0x1a>
   e455e:	bd10      	pop	{r4, pc}
   e4560:	4293      	cmp	r3, r2
   e4562:	d002      	beq.n	e456a <strncpy+0x24>
   e4564:	f803 4b01 	strb.w	r4, [r3], #1
   e4568:	e7fa      	b.n	e4560 <strncpy+0x1a>
   e456a:	bd10      	pop	{r4, pc}

000e456c <sulp>:
   e456c:	b570      	push	{r4, r5, r6, lr}
   e456e:	4604      	mov	r4, r0
   e4570:	460d      	mov	r5, r1
   e4572:	ec45 4b10 	vmov	d0, r4, r5
   e4576:	4616      	mov	r6, r2
   e4578:	f002 f862 	bl	e6640 <__ulp>
   e457c:	ec51 0b10 	vmov	r0, r1, d0
   e4580:	b17e      	cbz	r6, e45a2 <sulp+0x36>
   e4582:	f3c5 530a 	ubfx	r3, r5, #20, #11
   e4586:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e458a:	2b00      	cmp	r3, #0
   e458c:	dd09      	ble.n	e45a2 <sulp+0x36>
   e458e:	051b      	lsls	r3, r3, #20
   e4590:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   e4594:	2400      	movs	r4, #0
   e4596:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   e459a:	4622      	mov	r2, r4
   e459c:	462b      	mov	r3, r5
   e459e:	f7fe fb4f 	bl	e2c40 <__aeabi_dmul>
   e45a2:	bd70      	pop	{r4, r5, r6, pc}
   e45a4:	0000      	movs	r0, r0
	...

000e45a8 <_strtod_r>:
   e45a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e45ac:	b09d      	sub	sp, #116	; 0x74
   e45ae:	2300      	movs	r3, #0
   e45b0:	9002      	str	r0, [sp, #8]
   e45b2:	460c      	mov	r4, r1
   e45b4:	9213      	str	r2, [sp, #76]	; 0x4c
   e45b6:	9318      	str	r3, [sp, #96]	; 0x60
   e45b8:	f04f 0a00 	mov.w	sl, #0
   e45bc:	f04f 0b00 	mov.w	fp, #0
   e45c0:	9117      	str	r1, [sp, #92]	; 0x5c
   e45c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e45c4:	781a      	ldrb	r2, [r3, #0]
   e45c6:	2a0d      	cmp	r2, #13
   e45c8:	d805      	bhi.n	e45d6 <_strtod_r+0x2e>
   e45ca:	2a09      	cmp	r2, #9
   e45cc:	d213      	bcs.n	e45f6 <_strtod_r+0x4e>
   e45ce:	2a00      	cmp	r2, #0
   e45d0:	f000 81ac 	beq.w	e492c <_strtod_r+0x384>
   e45d4:	e012      	b.n	e45fc <_strtod_r+0x54>
   e45d6:	2a2b      	cmp	r2, #43	; 0x2b
   e45d8:	d004      	beq.n	e45e4 <_strtod_r+0x3c>
   e45da:	2a2d      	cmp	r2, #45	; 0x2d
   e45dc:	d004      	beq.n	e45e8 <_strtod_r+0x40>
   e45de:	2a20      	cmp	r2, #32
   e45e0:	d10c      	bne.n	e45fc <_strtod_r+0x54>
   e45e2:	e008      	b.n	e45f6 <_strtod_r+0x4e>
   e45e4:	2200      	movs	r2, #0
   e45e6:	e000      	b.n	e45ea <_strtod_r+0x42>
   e45e8:	2201      	movs	r2, #1
   e45ea:	920c      	str	r2, [sp, #48]	; 0x30
   e45ec:	1c5a      	adds	r2, r3, #1
   e45ee:	9217      	str	r2, [sp, #92]	; 0x5c
   e45f0:	785b      	ldrb	r3, [r3, #1]
   e45f2:	b92b      	cbnz	r3, e4600 <_strtod_r+0x58>
   e45f4:	e19a      	b.n	e492c <_strtod_r+0x384>
   e45f6:	3301      	adds	r3, #1
   e45f8:	9317      	str	r3, [sp, #92]	; 0x5c
   e45fa:	e7e2      	b.n	e45c2 <_strtod_r+0x1a>
   e45fc:	2300      	movs	r3, #0
   e45fe:	930c      	str	r3, [sp, #48]	; 0x30
   e4600:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   e4602:	782b      	ldrb	r3, [r5, #0]
   e4604:	2b30      	cmp	r3, #48	; 0x30
   e4606:	d15c      	bne.n	e46c2 <_strtod_r+0x11a>
   e4608:	786b      	ldrb	r3, [r5, #1]
   e460a:	2b58      	cmp	r3, #88	; 0x58
   e460c:	d001      	beq.n	e4612 <_strtod_r+0x6a>
   e460e:	2b78      	cmp	r3, #120	; 0x78
   e4610:	d14c      	bne.n	e46ac <_strtod_r+0x104>
   e4612:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e4614:	9301      	str	r3, [sp, #4]
   e4616:	ab18      	add	r3, sp, #96	; 0x60
   e4618:	9300      	str	r3, [sp, #0]
   e461a:	4aa9      	ldr	r2, [pc, #676]	; (e48c0 <_strtod_r+0x318>)
   e461c:	9802      	ldr	r0, [sp, #8]
   e461e:	ab19      	add	r3, sp, #100	; 0x64
   e4620:	a917      	add	r1, sp, #92	; 0x5c
   e4622:	f001 f990 	bl	e5946 <__gethex>
   e4626:	f010 0607 	ands.w	r6, r0, #7
   e462a:	4604      	mov	r4, r0
   e462c:	f000 8587 	beq.w	e513e <_strtod_r+0xb96>
   e4630:	2e06      	cmp	r6, #6
   e4632:	d105      	bne.n	e4640 <_strtod_r+0x98>
   e4634:	3501      	adds	r5, #1
   e4636:	2300      	movs	r3, #0
   e4638:	9517      	str	r5, [sp, #92]	; 0x5c
   e463a:	930c      	str	r3, [sp, #48]	; 0x30
   e463c:	f000 bd7f 	b.w	e513e <_strtod_r+0xb96>
   e4640:	9a18      	ldr	r2, [sp, #96]	; 0x60
   e4642:	b13a      	cbz	r2, e4654 <_strtod_r+0xac>
   e4644:	2135      	movs	r1, #53	; 0x35
   e4646:	a81a      	add	r0, sp, #104	; 0x68
   e4648:	f002 f8e7 	bl	e681a <__copybits>
   e464c:	9918      	ldr	r1, [sp, #96]	; 0x60
   e464e:	9802      	ldr	r0, [sp, #8]
   e4650:	f001 fd65 	bl	e611e <_Bfree>
   e4654:	2e06      	cmp	r6, #6
   e4656:	d822      	bhi.n	e469e <_strtod_r+0xf6>
   e4658:	e8df f006 	tbb	[pc, r6]
   e465c:	18080d04 	.word	0x18080d04
   e4660:	0d1d      	.short	0x0d1d
   e4662:	04          	.byte	0x04
   e4663:	00          	.byte	0x00
   e4664:	f04f 0b00 	mov.w	fp, #0
   e4668:	46da      	mov	sl, fp
   e466a:	e018      	b.n	e469e <_strtod_r+0xf6>
   e466c:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   e4670:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   e4674:	e013      	b.n	e469e <_strtod_r+0xf6>
   e4676:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   e4678:	9a19      	ldr	r2, [sp, #100]	; 0x64
   e467a:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   e467e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   e4682:	f202 4233 	addw	r2, r2, #1075	; 0x433
   e4686:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   e468a:	e008      	b.n	e469e <_strtod_r+0xf6>
   e468c:	f8df b234 	ldr.w	fp, [pc, #564]	; e48c4 <_strtod_r+0x31c>
   e4690:	f04f 0a00 	mov.w	sl, #0
   e4694:	e003      	b.n	e469e <_strtod_r+0xf6>
   e4696:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   e469a:	f04f 3aff 	mov.w	sl, #4294967295
   e469e:	0721      	lsls	r1, r4, #28
   e46a0:	f140 854d 	bpl.w	e513e <_strtod_r+0xb96>
   e46a4:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   e46a8:	f000 bd49 	b.w	e513e <_strtod_r+0xb96>
   e46ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e46ae:	1c5a      	adds	r2, r3, #1
   e46b0:	9217      	str	r2, [sp, #92]	; 0x5c
   e46b2:	785b      	ldrb	r3, [r3, #1]
   e46b4:	2b30      	cmp	r3, #48	; 0x30
   e46b6:	d0f9      	beq.n	e46ac <_strtod_r+0x104>
   e46b8:	2b00      	cmp	r3, #0
   e46ba:	f000 8540 	beq.w	e513e <_strtod_r+0xb96>
   e46be:	2301      	movs	r3, #1
   e46c0:	e000      	b.n	e46c4 <_strtod_r+0x11c>
   e46c2:	2300      	movs	r3, #0
   e46c4:	f04f 0800 	mov.w	r8, #0
   e46c8:	9306      	str	r3, [sp, #24]
   e46ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e46cc:	9307      	str	r3, [sp, #28]
   e46ce:	f8cd 8014 	str.w	r8, [sp, #20]
   e46d2:	f8cd 8010 	str.w	r8, [sp, #16]
   e46d6:	220a      	movs	r2, #10
   e46d8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   e46da:	782e      	ldrb	r6, [r5, #0]
   e46dc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   e46e0:	b2d9      	uxtb	r1, r3
   e46e2:	2909      	cmp	r1, #9
   e46e4:	d80e      	bhi.n	e4704 <_strtod_r+0x15c>
   e46e6:	9904      	ldr	r1, [sp, #16]
   e46e8:	2908      	cmp	r1, #8
   e46ea:	bfdd      	ittte	le
   e46ec:	9905      	ldrle	r1, [sp, #20]
   e46ee:	fb02 3301 	mlale	r3, r2, r1, r3
   e46f2:	9305      	strle	r3, [sp, #20]
   e46f4:	fb02 3808 	mlagt	r8, r2, r8, r3
   e46f8:	9b04      	ldr	r3, [sp, #16]
   e46fa:	3501      	adds	r5, #1
   e46fc:	3301      	adds	r3, #1
   e46fe:	9304      	str	r3, [sp, #16]
   e4700:	9517      	str	r5, [sp, #92]	; 0x5c
   e4702:	e7e9      	b.n	e46d8 <_strtod_r+0x130>
   e4704:	9802      	ldr	r0, [sp, #8]
   e4706:	f7fe ff31 	bl	e356c <_localeconv_r>
   e470a:	6807      	ldr	r7, [r0, #0]
   e470c:	9802      	ldr	r0, [sp, #8]
   e470e:	f7fe ff2d 	bl	e356c <_localeconv_r>
   e4712:	6800      	ldr	r0, [r0, #0]
   e4714:	f7ff fefa 	bl	e450c <strlen>
   e4718:	4639      	mov	r1, r7
   e471a:	4602      	mov	r2, r0
   e471c:	4628      	mov	r0, r5
   e471e:	f7ff fefd 	bl	e451c <strncmp>
   e4722:	4607      	mov	r7, r0
   e4724:	b128      	cbz	r0, e4732 <_strtod_r+0x18a>
   e4726:	2000      	movs	r0, #0
   e4728:	4633      	mov	r3, r6
   e472a:	9d04      	ldr	r5, [sp, #16]
   e472c:	4602      	mov	r2, r0
   e472e:	4601      	mov	r1, r0
   e4730:	e057      	b.n	e47e2 <_strtod_r+0x23a>
   e4732:	9802      	ldr	r0, [sp, #8]
   e4734:	f7fe ff1a 	bl	e356c <_localeconv_r>
   e4738:	6800      	ldr	r0, [r0, #0]
   e473a:	f7ff fee7 	bl	e450c <strlen>
   e473e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e4740:	181a      	adds	r2, r3, r0
   e4742:	9217      	str	r2, [sp, #92]	; 0x5c
   e4744:	9a04      	ldr	r2, [sp, #16]
   e4746:	5c1b      	ldrb	r3, [r3, r0]
   e4748:	2a00      	cmp	r2, #0
   e474a:	d142      	bne.n	e47d2 <_strtod_r+0x22a>
   e474c:	4610      	mov	r0, r2
   e474e:	2b30      	cmp	r3, #48	; 0x30
   e4750:	d105      	bne.n	e475e <_strtod_r+0x1b6>
   e4752:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e4754:	1c5a      	adds	r2, r3, #1
   e4756:	9217      	str	r2, [sp, #92]	; 0x5c
   e4758:	3001      	adds	r0, #1
   e475a:	785b      	ldrb	r3, [r3, #1]
   e475c:	e7f7      	b.n	e474e <_strtod_r+0x1a6>
   e475e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   e4762:	2a08      	cmp	r2, #8
   e4764:	d843      	bhi.n	e47ee <_strtod_r+0x246>
   e4766:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   e4768:	9207      	str	r2, [sp, #28]
   e476a:	4602      	mov	r2, r0
   e476c:	2000      	movs	r0, #0
   e476e:	4605      	mov	r5, r0
   e4770:	3b30      	subs	r3, #48	; 0x30
   e4772:	f100 0101 	add.w	r1, r0, #1
   e4776:	d026      	beq.n	e47c6 <_strtod_r+0x21e>
   e4778:	440a      	add	r2, r1
   e477a:	eb05 0c00 	add.w	ip, r5, r0
   e477e:	4629      	mov	r1, r5
   e4780:	260a      	movs	r6, #10
   e4782:	4561      	cmp	r1, ip
   e4784:	d00e      	beq.n	e47a4 <_strtod_r+0x1fc>
   e4786:	3101      	adds	r1, #1
   e4788:	f101 3eff 	add.w	lr, r1, #4294967295
   e478c:	f1be 0f08 	cmp.w	lr, #8
   e4790:	dc03      	bgt.n	e479a <_strtod_r+0x1f2>
   e4792:	9f05      	ldr	r7, [sp, #20]
   e4794:	4377      	muls	r7, r6
   e4796:	9705      	str	r7, [sp, #20]
   e4798:	e7f3      	b.n	e4782 <_strtod_r+0x1da>
   e479a:	2910      	cmp	r1, #16
   e479c:	bfd8      	it	le
   e479e:	fb06 f808 	mulle.w	r8, r6, r8
   e47a2:	e7ee      	b.n	e4782 <_strtod_r+0x1da>
   e47a4:	4428      	add	r0, r5
   e47a6:	2808      	cmp	r0, #8
   e47a8:	f100 0501 	add.w	r5, r0, #1
   e47ac:	dc05      	bgt.n	e47ba <_strtod_r+0x212>
   e47ae:	9805      	ldr	r0, [sp, #20]
   e47b0:	210a      	movs	r1, #10
   e47b2:	fb01 3300 	mla	r3, r1, r0, r3
   e47b6:	9305      	str	r3, [sp, #20]
   e47b8:	e004      	b.n	e47c4 <_strtod_r+0x21c>
   e47ba:	2d10      	cmp	r5, #16
   e47bc:	bfdc      	itt	le
   e47be:	210a      	movle	r1, #10
   e47c0:	fb01 3808 	mlale	r8, r1, r8, r3
   e47c4:	2100      	movs	r1, #0
   e47c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e47c8:	1c58      	adds	r0, r3, #1
   e47ca:	9017      	str	r0, [sp, #92]	; 0x5c
   e47cc:	785b      	ldrb	r3, [r3, #1]
   e47ce:	4608      	mov	r0, r1
   e47d0:	e002      	b.n	e47d8 <_strtod_r+0x230>
   e47d2:	9d04      	ldr	r5, [sp, #16]
   e47d4:	4638      	mov	r0, r7
   e47d6:	463a      	mov	r2, r7
   e47d8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   e47dc:	2909      	cmp	r1, #9
   e47de:	d9c7      	bls.n	e4770 <_strtod_r+0x1c8>
   e47e0:	2101      	movs	r1, #1
   e47e2:	2b65      	cmp	r3, #101	; 0x65
   e47e4:	d001      	beq.n	e47ea <_strtod_r+0x242>
   e47e6:	2b45      	cmp	r3, #69	; 0x45
   e47e8:	d151      	bne.n	e488e <_strtod_r+0x2e6>
   e47ea:	b96d      	cbnz	r5, e4808 <_strtod_r+0x260>
   e47ec:	e004      	b.n	e47f8 <_strtod_r+0x250>
   e47ee:	2b65      	cmp	r3, #101	; 0x65
   e47f0:	f040 84b3 	bne.w	e515a <_strtod_r+0xbb2>
   e47f4:	2200      	movs	r2, #0
   e47f6:	2101      	movs	r1, #1
   e47f8:	b928      	cbnz	r0, e4806 <_strtod_r+0x25e>
   e47fa:	9b06      	ldr	r3, [sp, #24]
   e47fc:	2b00      	cmp	r3, #0
   e47fe:	f000 8095 	beq.w	e492c <_strtod_r+0x384>
   e4802:	4605      	mov	r5, r0
   e4804:	e000      	b.n	e4808 <_strtod_r+0x260>
   e4806:	2500      	movs	r5, #0
   e4808:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   e480a:	1c63      	adds	r3, r4, #1
   e480c:	9317      	str	r3, [sp, #92]	; 0x5c
   e480e:	7863      	ldrb	r3, [r4, #1]
   e4810:	2b2b      	cmp	r3, #43	; 0x2b
   e4812:	d006      	beq.n	e4822 <_strtod_r+0x27a>
   e4814:	2b2d      	cmp	r3, #45	; 0x2d
   e4816:	d002      	beq.n	e481e <_strtod_r+0x276>
   e4818:	2600      	movs	r6, #0
   e481a:	9603      	str	r6, [sp, #12]
   e481c:	e006      	b.n	e482c <_strtod_r+0x284>
   e481e:	2301      	movs	r3, #1
   e4820:	e000      	b.n	e4824 <_strtod_r+0x27c>
   e4822:	2300      	movs	r3, #0
   e4824:	9303      	str	r3, [sp, #12]
   e4826:	1ca3      	adds	r3, r4, #2
   e4828:	9317      	str	r3, [sp, #92]	; 0x5c
   e482a:	78a3      	ldrb	r3, [r4, #2]
   e482c:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   e4830:	2e09      	cmp	r6, #9
   e4832:	d82b      	bhi.n	e488c <_strtod_r+0x2e4>
   e4834:	2b30      	cmp	r3, #48	; 0x30
   e4836:	d104      	bne.n	e4842 <_strtod_r+0x29a>
   e4838:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e483a:	1c5e      	adds	r6, r3, #1
   e483c:	9617      	str	r6, [sp, #92]	; 0x5c
   e483e:	785b      	ldrb	r3, [r3, #1]
   e4840:	e7f8      	b.n	e4834 <_strtod_r+0x28c>
   e4842:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   e4846:	2e08      	cmp	r6, #8
   e4848:	d821      	bhi.n	e488e <_strtod_r+0x2e6>
   e484a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   e484e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e4850:	f04f 0c0a 	mov.w	ip, #10
   e4854:	461f      	mov	r7, r3
   e4856:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e4858:	1c5e      	adds	r6, r3, #1
   e485a:	9617      	str	r6, [sp, #92]	; 0x5c
   e485c:	785b      	ldrb	r3, [r3, #1]
   e485e:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   e4862:	f1b9 0f09 	cmp.w	r9, #9
   e4866:	d804      	bhi.n	e4872 <_strtod_r+0x2ca>
   e4868:	fb0c 3e0e 	mla	lr, ip, lr, r3
   e486c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   e4870:	e7f1      	b.n	e4856 <_strtod_r+0x2ae>
   e4872:	1bf6      	subs	r6, r6, r7
   e4874:	2e08      	cmp	r6, #8
   e4876:	f644 691f 	movw	r9, #19999	; 0x4e1f
   e487a:	dc02      	bgt.n	e4882 <_strtod_r+0x2da>
   e487c:	45f1      	cmp	r9, lr
   e487e:	bfa8      	it	ge
   e4880:	46f1      	movge	r9, lr
   e4882:	9e03      	ldr	r6, [sp, #12]
   e4884:	b12e      	cbz	r6, e4892 <_strtod_r+0x2ea>
   e4886:	f1c9 0900 	rsb	r9, r9, #0
   e488a:	e002      	b.n	e4892 <_strtod_r+0x2ea>
   e488c:	9417      	str	r4, [sp, #92]	; 0x5c
   e488e:	f04f 0900 	mov.w	r9, #0
   e4892:	2d00      	cmp	r5, #0
   e4894:	d153      	bne.n	e493e <_strtod_r+0x396>
   e4896:	2800      	cmp	r0, #0
   e4898:	f040 8451 	bne.w	e513e <_strtod_r+0xb96>
   e489c:	9a06      	ldr	r2, [sp, #24]
   e489e:	2a00      	cmp	r2, #0
   e48a0:	f040 844d 	bne.w	e513e <_strtod_r+0xb96>
   e48a4:	2900      	cmp	r1, #0
   e48a6:	d141      	bne.n	e492c <_strtod_r+0x384>
   e48a8:	2b4e      	cmp	r3, #78	; 0x4e
   e48aa:	d020      	beq.n	e48ee <_strtod_r+0x346>
   e48ac:	dc02      	bgt.n	e48b4 <_strtod_r+0x30c>
   e48ae:	2b49      	cmp	r3, #73	; 0x49
   e48b0:	d00a      	beq.n	e48c8 <_strtod_r+0x320>
   e48b2:	e03b      	b.n	e492c <_strtod_r+0x384>
   e48b4:	2b69      	cmp	r3, #105	; 0x69
   e48b6:	d007      	beq.n	e48c8 <_strtod_r+0x320>
   e48b8:	2b6e      	cmp	r3, #110	; 0x6e
   e48ba:	d018      	beq.n	e48ee <_strtod_r+0x346>
   e48bc:	e036      	b.n	e492c <_strtod_r+0x384>
   e48be:	bf00      	nop
   e48c0:	000e85a8 	.word	0x000e85a8
   e48c4:	7ff00000 	.word	0x7ff00000
   e48c8:	49a8      	ldr	r1, [pc, #672]	; (e4b6c <_strtod_r+0x5c4>)
   e48ca:	a817      	add	r0, sp, #92	; 0x5c
   e48cc:	f001 fa6c 	bl	e5da8 <__match>
   e48d0:	b360      	cbz	r0, e492c <_strtod_r+0x384>
   e48d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e48d4:	49a6      	ldr	r1, [pc, #664]	; (e4b70 <_strtod_r+0x5c8>)
   e48d6:	3b01      	subs	r3, #1
   e48d8:	a817      	add	r0, sp, #92	; 0x5c
   e48da:	9317      	str	r3, [sp, #92]	; 0x5c
   e48dc:	f001 fa64 	bl	e5da8 <__match>
   e48e0:	b910      	cbnz	r0, e48e8 <_strtod_r+0x340>
   e48e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e48e4:	3301      	adds	r3, #1
   e48e6:	9317      	str	r3, [sp, #92]	; 0x5c
   e48e8:	f8df b2a0 	ldr.w	fp, [pc, #672]	; e4b8c <_strtod_r+0x5e4>
   e48ec:	e01a      	b.n	e4924 <_strtod_r+0x37c>
   e48ee:	49a1      	ldr	r1, [pc, #644]	; (e4b74 <_strtod_r+0x5cc>)
   e48f0:	a817      	add	r0, sp, #92	; 0x5c
   e48f2:	f001 fa59 	bl	e5da8 <__match>
   e48f6:	b1c8      	cbz	r0, e492c <_strtod_r+0x384>
   e48f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e48fa:	781b      	ldrb	r3, [r3, #0]
   e48fc:	2b28      	cmp	r3, #40	; 0x28
   e48fe:	d10f      	bne.n	e4920 <_strtod_r+0x378>
   e4900:	aa1a      	add	r2, sp, #104	; 0x68
   e4902:	499d      	ldr	r1, [pc, #628]	; (e4b78 <_strtod_r+0x5d0>)
   e4904:	a817      	add	r0, sp, #92	; 0x5c
   e4906:	f001 fa62 	bl	e5dce <__hexnan>
   e490a:	2805      	cmp	r0, #5
   e490c:	d108      	bne.n	e4920 <_strtod_r+0x378>
   e490e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   e4910:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   e4914:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   e4918:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   e491c:	f000 bc0f 	b.w	e513e <_strtod_r+0xb96>
   e4920:	f8df b26c 	ldr.w	fp, [pc, #620]	; e4b90 <_strtod_r+0x5e8>
   e4924:	f04f 0a00 	mov.w	sl, #0
   e4928:	f000 bc09 	b.w	e513e <_strtod_r+0xb96>
   e492c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   e492e:	9417      	str	r4, [sp, #92]	; 0x5c
   e4930:	2b00      	cmp	r3, #0
   e4932:	f000 840f 	beq.w	e5154 <_strtod_r+0xbac>
   e4936:	2300      	movs	r3, #0
   e4938:	930c      	str	r3, [sp, #48]	; 0x30
   e493a:	f000 bc02 	b.w	e5142 <_strtod_r+0xb9a>
   e493e:	9b04      	ldr	r3, [sp, #16]
   e4940:	9805      	ldr	r0, [sp, #20]
   e4942:	2b00      	cmp	r3, #0
   e4944:	bf08      	it	eq
   e4946:	462b      	moveq	r3, r5
   e4948:	2d10      	cmp	r5, #16
   e494a:	462c      	mov	r4, r5
   e494c:	ebc2 0909 	rsb	r9, r2, r9
   e4950:	bfa8      	it	ge
   e4952:	2410      	movge	r4, #16
   e4954:	9304      	str	r3, [sp, #16]
   e4956:	f7fe f8fd 	bl	e2b54 <__aeabi_ui2d>
   e495a:	2c09      	cmp	r4, #9
   e495c:	4682      	mov	sl, r0
   e495e:	468b      	mov	fp, r1
   e4960:	dd13      	ble.n	e498a <_strtod_r+0x3e2>
   e4962:	4b86      	ldr	r3, [pc, #536]	; (e4b7c <_strtod_r+0x5d4>)
   e4964:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   e4968:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   e496c:	f7fe f968 	bl	e2c40 <__aeabi_dmul>
   e4970:	4606      	mov	r6, r0
   e4972:	4640      	mov	r0, r8
   e4974:	460f      	mov	r7, r1
   e4976:	f7fe f8ed 	bl	e2b54 <__aeabi_ui2d>
   e497a:	4602      	mov	r2, r0
   e497c:	460b      	mov	r3, r1
   e497e:	4630      	mov	r0, r6
   e4980:	4639      	mov	r1, r7
   e4982:	f7fd ffab 	bl	e28dc <__adddf3>
   e4986:	4682      	mov	sl, r0
   e4988:	468b      	mov	fp, r1
   e498a:	2d0f      	cmp	r5, #15
   e498c:	dc36      	bgt.n	e49fc <_strtod_r+0x454>
   e498e:	f1b9 0f00 	cmp.w	r9, #0
   e4992:	f000 83d4 	beq.w	e513e <_strtod_r+0xb96>
   e4996:	dd24      	ble.n	e49e2 <_strtod_r+0x43a>
   e4998:	f1b9 0f16 	cmp.w	r9, #22
   e499c:	dc07      	bgt.n	e49ae <_strtod_r+0x406>
   e499e:	4d77      	ldr	r5, [pc, #476]	; (e4b7c <_strtod_r+0x5d4>)
   e49a0:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   e49a4:	4652      	mov	r2, sl
   e49a6:	465b      	mov	r3, fp
   e49a8:	e9d9 0100 	ldrd	r0, r1, [r9]
   e49ac:	e014      	b.n	e49d8 <_strtod_r+0x430>
   e49ae:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   e49b2:	4599      	cmp	r9, r3
   e49b4:	dc22      	bgt.n	e49fc <_strtod_r+0x454>
   e49b6:	4c71      	ldr	r4, [pc, #452]	; (e4b7c <_strtod_r+0x5d4>)
   e49b8:	f1c5 050f 	rsb	r5, r5, #15
   e49bc:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   e49c0:	ebc5 0509 	rsb	r5, r5, r9
   e49c4:	4652      	mov	r2, sl
   e49c6:	465b      	mov	r3, fp
   e49c8:	e9d1 0100 	ldrd	r0, r1, [r1]
   e49cc:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   e49d0:	f7fe f936 	bl	e2c40 <__aeabi_dmul>
   e49d4:	e9d4 2300 	ldrd	r2, r3, [r4]
   e49d8:	f7fe f932 	bl	e2c40 <__aeabi_dmul>
   e49dc:	4682      	mov	sl, r0
   e49de:	468b      	mov	fp, r1
   e49e0:	e3ad      	b.n	e513e <_strtod_r+0xb96>
   e49e2:	f119 0f16 	cmn.w	r9, #22
   e49e6:	db09      	blt.n	e49fc <_strtod_r+0x454>
   e49e8:	4d64      	ldr	r5, [pc, #400]	; (e4b7c <_strtod_r+0x5d4>)
   e49ea:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   e49ee:	e9d9 2300 	ldrd	r2, r3, [r9]
   e49f2:	4650      	mov	r0, sl
   e49f4:	4659      	mov	r1, fp
   e49f6:	f7fe fa4d 	bl	e2e94 <__aeabi_ddiv>
   e49fa:	e7ef      	b.n	e49dc <_strtod_r+0x434>
   e49fc:	1b2c      	subs	r4, r5, r4
   e49fe:	444c      	add	r4, r9
   e4a00:	2c00      	cmp	r4, #0
   e4a02:	dd57      	ble.n	e4ab4 <_strtod_r+0x50c>
   e4a04:	f014 010f 	ands.w	r1, r4, #15
   e4a08:	d00a      	beq.n	e4a20 <_strtod_r+0x478>
   e4a0a:	4b5c      	ldr	r3, [pc, #368]	; (e4b7c <_strtod_r+0x5d4>)
   e4a0c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   e4a10:	4652      	mov	r2, sl
   e4a12:	465b      	mov	r3, fp
   e4a14:	e9d1 0100 	ldrd	r0, r1, [r1]
   e4a18:	f7fe f912 	bl	e2c40 <__aeabi_dmul>
   e4a1c:	4682      	mov	sl, r0
   e4a1e:	468b      	mov	fp, r1
   e4a20:	f034 040f 	bics.w	r4, r4, #15
   e4a24:	f000 80b8 	beq.w	e4b98 <_strtod_r+0x5f0>
   e4a28:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   e4a2c:	dd0b      	ble.n	e4a46 <_strtod_r+0x49e>
   e4a2e:	2400      	movs	r4, #0
   e4a30:	4625      	mov	r5, r4
   e4a32:	9405      	str	r4, [sp, #20]
   e4a34:	9404      	str	r4, [sp, #16]
   e4a36:	9a02      	ldr	r2, [sp, #8]
   e4a38:	f8df b150 	ldr.w	fp, [pc, #336]	; e4b8c <_strtod_r+0x5e4>
   e4a3c:	2322      	movs	r3, #34	; 0x22
   e4a3e:	6013      	str	r3, [r2, #0]
   e4a40:	f04f 0a00 	mov.w	sl, #0
   e4a44:	e187      	b.n	e4d56 <_strtod_r+0x7ae>
   e4a46:	4e4e      	ldr	r6, [pc, #312]	; (e4b80 <_strtod_r+0x5d8>)
   e4a48:	2300      	movs	r3, #0
   e4a4a:	1124      	asrs	r4, r4, #4
   e4a4c:	4650      	mov	r0, sl
   e4a4e:	4659      	mov	r1, fp
   e4a50:	4698      	mov	r8, r3
   e4a52:	4637      	mov	r7, r6
   e4a54:	2c01      	cmp	r4, #1
   e4a56:	dd0b      	ble.n	e4a70 <_strtod_r+0x4c8>
   e4a58:	07e2      	lsls	r2, r4, #31
   e4a5a:	d504      	bpl.n	e4a66 <_strtod_r+0x4be>
   e4a5c:	e9d6 2300 	ldrd	r2, r3, [r6]
   e4a60:	f7fe f8ee 	bl	e2c40 <__aeabi_dmul>
   e4a64:	2301      	movs	r3, #1
   e4a66:	f108 0801 	add.w	r8, r8, #1
   e4a6a:	1064      	asrs	r4, r4, #1
   e4a6c:	3608      	adds	r6, #8
   e4a6e:	e7f1      	b.n	e4a54 <_strtod_r+0x4ac>
   e4a70:	b10b      	cbz	r3, e4a76 <_strtod_r+0x4ce>
   e4a72:	4682      	mov	sl, r0
   e4a74:	468b      	mov	fp, r1
   e4a76:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   e4a7a:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   e4a7e:	4652      	mov	r2, sl
   e4a80:	465b      	mov	r3, fp
   e4a82:	e9d7 0100 	ldrd	r0, r1, [r7]
   e4a86:	f7fe f8db 	bl	e2c40 <__aeabi_dmul>
   e4a8a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   e4a8e:	468b      	mov	fp, r1
   e4a90:	460a      	mov	r2, r1
   e4a92:	0d1b      	lsrs	r3, r3, #20
   e4a94:	493b      	ldr	r1, [pc, #236]	; (e4b84 <_strtod_r+0x5dc>)
   e4a96:	051b      	lsls	r3, r3, #20
   e4a98:	428b      	cmp	r3, r1
   e4a9a:	4682      	mov	sl, r0
   e4a9c:	d8c7      	bhi.n	e4a2e <_strtod_r+0x486>
   e4a9e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   e4aa2:	428b      	cmp	r3, r1
   e4aa4:	bf86      	itte	hi
   e4aa6:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; e4b94 <_strtod_r+0x5ec>
   e4aaa:	f04f 3aff 	movhi.w	sl, #4294967295
   e4aae:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   e4ab2:	e071      	b.n	e4b98 <_strtod_r+0x5f0>
   e4ab4:	d070      	beq.n	e4b98 <_strtod_r+0x5f0>
   e4ab6:	4264      	negs	r4, r4
   e4ab8:	f014 020f 	ands.w	r2, r4, #15
   e4abc:	d00a      	beq.n	e4ad4 <_strtod_r+0x52c>
   e4abe:	4b2f      	ldr	r3, [pc, #188]	; (e4b7c <_strtod_r+0x5d4>)
   e4ac0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   e4ac4:	4650      	mov	r0, sl
   e4ac6:	4659      	mov	r1, fp
   e4ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
   e4acc:	f7fe f9e2 	bl	e2e94 <__aeabi_ddiv>
   e4ad0:	4682      	mov	sl, r0
   e4ad2:	468b      	mov	fp, r1
   e4ad4:	1124      	asrs	r4, r4, #4
   e4ad6:	d05f      	beq.n	e4b98 <_strtod_r+0x5f0>
   e4ad8:	2c1f      	cmp	r4, #31
   e4ada:	dd04      	ble.n	e4ae6 <_strtod_r+0x53e>
   e4adc:	2400      	movs	r4, #0
   e4ade:	4625      	mov	r5, r4
   e4ae0:	9405      	str	r4, [sp, #20]
   e4ae2:	9404      	str	r4, [sp, #16]
   e4ae4:	e130      	b.n	e4d48 <_strtod_r+0x7a0>
   e4ae6:	f014 0f10 	tst.w	r4, #16
   e4aea:	bf0c      	ite	eq
   e4aec:	2300      	moveq	r3, #0
   e4aee:	236a      	movne	r3, #106	; 0x6a
   e4af0:	4e25      	ldr	r6, [pc, #148]	; (e4b88 <_strtod_r+0x5e0>)
   e4af2:	9303      	str	r3, [sp, #12]
   e4af4:	4650      	mov	r0, sl
   e4af6:	4659      	mov	r1, fp
   e4af8:	2300      	movs	r3, #0
   e4afa:	2c00      	cmp	r4, #0
   e4afc:	dd09      	ble.n	e4b12 <_strtod_r+0x56a>
   e4afe:	07e2      	lsls	r2, r4, #31
   e4b00:	d504      	bpl.n	e4b0c <_strtod_r+0x564>
   e4b02:	e9d6 2300 	ldrd	r2, r3, [r6]
   e4b06:	f7fe f89b 	bl	e2c40 <__aeabi_dmul>
   e4b0a:	2301      	movs	r3, #1
   e4b0c:	1064      	asrs	r4, r4, #1
   e4b0e:	3608      	adds	r6, #8
   e4b10:	e7f3      	b.n	e4afa <_strtod_r+0x552>
   e4b12:	b10b      	cbz	r3, e4b18 <_strtod_r+0x570>
   e4b14:	4682      	mov	sl, r0
   e4b16:	468b      	mov	fp, r1
   e4b18:	9b03      	ldr	r3, [sp, #12]
   e4b1a:	b1eb      	cbz	r3, e4b58 <_strtod_r+0x5b0>
   e4b1c:	f3cb 530a 	ubfx	r3, fp, #20, #11
   e4b20:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e4b24:	2b00      	cmp	r3, #0
   e4b26:	4659      	mov	r1, fp
   e4b28:	dd16      	ble.n	e4b58 <_strtod_r+0x5b0>
   e4b2a:	2b1f      	cmp	r3, #31
   e4b2c:	dd0e      	ble.n	e4b4c <_strtod_r+0x5a4>
   e4b2e:	2b34      	cmp	r3, #52	; 0x34
   e4b30:	bfde      	ittt	le
   e4b32:	3b20      	suble	r3, #32
   e4b34:	f04f 32ff 	movle.w	r2, #4294967295
   e4b38:	fa02 f303 	lslle.w	r3, r2, r3
   e4b3c:	f04f 0a00 	mov.w	sl, #0
   e4b40:	bfcc      	ite	gt
   e4b42:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   e4b46:	ea03 0b01 	andle.w	fp, r3, r1
   e4b4a:	e005      	b.n	e4b58 <_strtod_r+0x5b0>
   e4b4c:	f04f 32ff 	mov.w	r2, #4294967295
   e4b50:	fa02 f303 	lsl.w	r3, r2, r3
   e4b54:	ea03 0a0a 	and.w	sl, r3, sl
   e4b58:	2200      	movs	r2, #0
   e4b5a:	2300      	movs	r3, #0
   e4b5c:	4650      	mov	r0, sl
   e4b5e:	4659      	mov	r1, fp
   e4b60:	f7fe fad6 	bl	e3110 <__aeabi_dcmpeq>
   e4b64:	2800      	cmp	r0, #0
   e4b66:	d1b9      	bne.n	e4adc <_strtod_r+0x534>
   e4b68:	e018      	b.n	e4b9c <_strtod_r+0x5f4>
   e4b6a:	bf00      	nop
   e4b6c:	000e7d29 	.word	0x000e7d29
   e4b70:	000e85d0 	.word	0x000e85d0
   e4b74:	000e8609 	.word	0x000e8609
   e4b78:	000e85bc 	.word	0x000e85bc
   e4b7c:	000e8868 	.word	0x000e8868
   e4b80:	000e8930 	.word	0x000e8930
   e4b84:	7ca00000 	.word	0x7ca00000
   e4b88:	000e85d8 	.word	0x000e85d8
   e4b8c:	7ff00000 	.word	0x7ff00000
   e4b90:	fff80000 	.word	0xfff80000
   e4b94:	7fefffff 	.word	0x7fefffff
   e4b98:	2300      	movs	r3, #0
   e4b9a:	9303      	str	r3, [sp, #12]
   e4b9c:	9b05      	ldr	r3, [sp, #20]
   e4b9e:	9300      	str	r3, [sp, #0]
   e4ba0:	9a04      	ldr	r2, [sp, #16]
   e4ba2:	9907      	ldr	r1, [sp, #28]
   e4ba4:	9802      	ldr	r0, [sp, #8]
   e4ba6:	462b      	mov	r3, r5
   e4ba8:	f001 fb0b 	bl	e61c2 <__s2b>
   e4bac:	9005      	str	r0, [sp, #20]
   e4bae:	2800      	cmp	r0, #0
   e4bb0:	f43f af3d 	beq.w	e4a2e <_strtod_r+0x486>
   e4bb4:	f1b9 0f00 	cmp.w	r9, #0
   e4bb8:	f1c9 0300 	rsb	r3, r9, #0
   e4bbc:	bfa8      	it	ge
   e4bbe:	2300      	movge	r3, #0
   e4bc0:	930d      	str	r3, [sp, #52]	; 0x34
   e4bc2:	2400      	movs	r4, #0
   e4bc4:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   e4bc8:	9312      	str	r3, [sp, #72]	; 0x48
   e4bca:	4625      	mov	r5, r4
   e4bcc:	9b05      	ldr	r3, [sp, #20]
   e4bce:	9802      	ldr	r0, [sp, #8]
   e4bd0:	6859      	ldr	r1, [r3, #4]
   e4bd2:	f001 fa6f 	bl	e60b4 <_Balloc>
   e4bd6:	9004      	str	r0, [sp, #16]
   e4bd8:	2800      	cmp	r0, #0
   e4bda:	f43f af2c 	beq.w	e4a36 <_strtod_r+0x48e>
   e4bde:	9b05      	ldr	r3, [sp, #20]
   e4be0:	691a      	ldr	r2, [r3, #16]
   e4be2:	3202      	adds	r2, #2
   e4be4:	f103 010c 	add.w	r1, r3, #12
   e4be8:	0092      	lsls	r2, r2, #2
   e4bea:	300c      	adds	r0, #12
   e4bec:	f7fe fcc2 	bl	e3574 <memcpy>
   e4bf0:	aa1a      	add	r2, sp, #104	; 0x68
   e4bf2:	a919      	add	r1, sp, #100	; 0x64
   e4bf4:	ec4b ab10 	vmov	d0, sl, fp
   e4bf8:	9802      	ldr	r0, [sp, #8]
   e4bfa:	e9cd ab08 	strd	sl, fp, [sp, #32]
   e4bfe:	f001 fd94 	bl	e672a <__d2b>
   e4c02:	9018      	str	r0, [sp, #96]	; 0x60
   e4c04:	2800      	cmp	r0, #0
   e4c06:	f43f af16 	beq.w	e4a36 <_strtod_r+0x48e>
   e4c0a:	2101      	movs	r1, #1
   e4c0c:	9802      	ldr	r0, [sp, #8]
   e4c0e:	f001 fb63 	bl	e62d8 <__i2b>
   e4c12:	4605      	mov	r5, r0
   e4c14:	2800      	cmp	r0, #0
   e4c16:	f43f af0e 	beq.w	e4a36 <_strtod_r+0x48e>
   e4c1a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   e4c1c:	9903      	ldr	r1, [sp, #12]
   e4c1e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   e4c20:	2b00      	cmp	r3, #0
   e4c22:	bfad      	iteet	ge
   e4c24:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   e4c26:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   e4c28:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   e4c2c:	eb02 0803 	addge.w	r8, r2, r3
   e4c30:	bfb8      	it	lt
   e4c32:	1ad2      	sublt	r2, r2, r3
   e4c34:	eba3 0301 	sub.w	r3, r3, r1
   e4c38:	4433      	add	r3, r6
   e4c3a:	49b5      	ldr	r1, [pc, #724]	; (e4f10 <_strtod_r+0x968>)
   e4c3c:	bfa8      	it	ge
   e4c3e:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   e4c40:	3b01      	subs	r3, #1
   e4c42:	428b      	cmp	r3, r1
   e4c44:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   e4c48:	f280 808a 	bge.w	e4d60 <_strtod_r+0x7b8>
   e4c4c:	1ac9      	subs	r1, r1, r3
   e4c4e:	291f      	cmp	r1, #31
   e4c50:	bfc8      	it	gt
   e4c52:	4fb0      	ldrgt	r7, [pc, #704]	; (e4f14 <_strtod_r+0x96c>)
   e4c54:	f04f 0901 	mov.w	r9, #1
   e4c58:	bfd4      	ite	le
   e4c5a:	fa09 f301 	lslle.w	r3, r9, r1
   e4c5e:	1aff      	subgt	r7, r7, r3
   e4c60:	eba6 0601 	sub.w	r6, r6, r1
   e4c64:	bfd9      	ittee	le
   e4c66:	9306      	strle	r3, [sp, #24]
   e4c68:	2700      	movle	r7, #0
   e4c6a:	fa09 f707 	lslgt.w	r7, r9, r7
   e4c6e:	f8cd 9018 	strgt.w	r9, [sp, #24]
   e4c72:	eb08 0906 	add.w	r9, r8, r6
   e4c76:	9b03      	ldr	r3, [sp, #12]
   e4c78:	45c8      	cmp	r8, r9
   e4c7a:	4416      	add	r6, r2
   e4c7c:	441e      	add	r6, r3
   e4c7e:	4643      	mov	r3, r8
   e4c80:	bfa8      	it	ge
   e4c82:	464b      	movge	r3, r9
   e4c84:	42b3      	cmp	r3, r6
   e4c86:	bfa8      	it	ge
   e4c88:	4633      	movge	r3, r6
   e4c8a:	2b00      	cmp	r3, #0
   e4c8c:	bfc2      	ittt	gt
   e4c8e:	ebc3 0909 	rsbgt	r9, r3, r9
   e4c92:	1af6      	subgt	r6, r6, r3
   e4c94:	ebc3 0808 	rsbgt	r8, r3, r8
   e4c98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e4c9a:	2b00      	cmp	r3, #0
   e4c9c:	d164      	bne.n	e4d68 <_strtod_r+0x7c0>
   e4c9e:	f1b9 0f00 	cmp.w	r9, #0
   e4ca2:	dc7a      	bgt.n	e4d9a <_strtod_r+0x7f2>
   e4ca4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   e4ca6:	2b00      	cmp	r3, #0
   e4ca8:	f040 8081 	bne.w	e4dae <_strtod_r+0x806>
   e4cac:	2e00      	cmp	r6, #0
   e4cae:	f300 8088 	bgt.w	e4dc2 <_strtod_r+0x81a>
   e4cb2:	f1b8 0f00 	cmp.w	r8, #0
   e4cb6:	f300 808e 	bgt.w	e4dd6 <_strtod_r+0x82e>
   e4cba:	9a04      	ldr	r2, [sp, #16]
   e4cbc:	9918      	ldr	r1, [sp, #96]	; 0x60
   e4cbe:	9802      	ldr	r0, [sp, #8]
   e4cc0:	f001 fc5f 	bl	e6582 <__mdiff>
   e4cc4:	4604      	mov	r4, r0
   e4cc6:	2800      	cmp	r0, #0
   e4cc8:	f43f aeb5 	beq.w	e4a36 <_strtod_r+0x48e>
   e4ccc:	68c3      	ldr	r3, [r0, #12]
   e4cce:	9307      	str	r3, [sp, #28]
   e4cd0:	2300      	movs	r3, #0
   e4cd2:	60c3      	str	r3, [r0, #12]
   e4cd4:	4629      	mov	r1, r5
   e4cd6:	f001 fc38 	bl	e654a <__mcmp>
   e4cda:	2800      	cmp	r0, #0
   e4cdc:	f280 8089 	bge.w	e4df2 <_strtod_r+0x84a>
   e4ce0:	9b07      	ldr	r3, [sp, #28]
   e4ce2:	2b00      	cmp	r3, #0
   e4ce4:	f040 8204 	bne.w	e50f0 <_strtod_r+0xb48>
   e4ce8:	f1ba 0f00 	cmp.w	sl, #0
   e4cec:	f040 8200 	bne.w	e50f0 <_strtod_r+0xb48>
   e4cf0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e4cf4:	2b00      	cmp	r3, #0
   e4cf6:	f040 81fb 	bne.w	e50f0 <_strtod_r+0xb48>
   e4cfa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e4cfe:	0d1b      	lsrs	r3, r3, #20
   e4d00:	051b      	lsls	r3, r3, #20
   e4d02:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   e4d06:	f240 81f3 	bls.w	e50f0 <_strtod_r+0xb48>
   e4d0a:	6963      	ldr	r3, [r4, #20]
   e4d0c:	2b00      	cmp	r3, #0
   e4d0e:	d06c      	beq.n	e4dea <_strtod_r+0x842>
   e4d10:	4621      	mov	r1, r4
   e4d12:	2201      	movs	r2, #1
   e4d14:	9802      	ldr	r0, [sp, #8]
   e4d16:	f001 fbc7 	bl	e64a8 <__lshift>
   e4d1a:	4629      	mov	r1, r5
   e4d1c:	4604      	mov	r4, r0
   e4d1e:	f001 fc14 	bl	e654a <__mcmp>
   e4d22:	2800      	cmp	r0, #0
   e4d24:	f340 81e4 	ble.w	e50f0 <_strtod_r+0xb48>
   e4d28:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e4d2c:	9a03      	ldr	r2, [sp, #12]
   e4d2e:	0d1b      	lsrs	r3, r3, #20
   e4d30:	051b      	lsls	r3, r3, #20
   e4d32:	2a00      	cmp	r2, #0
   e4d34:	f000 808c 	beq.w	e4e50 <_strtod_r+0x8a8>
   e4d38:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   e4d3c:	f300 8088 	bgt.w	e4e50 <_strtod_r+0x8a8>
   e4d40:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   e4d44:	f300 81d6 	bgt.w	e50f4 <_strtod_r+0xb4c>
   e4d48:	9a02      	ldr	r2, [sp, #8]
   e4d4a:	2322      	movs	r3, #34	; 0x22
   e4d4c:	f04f 0a00 	mov.w	sl, #0
   e4d50:	f04f 0b00 	mov.w	fp, #0
   e4d54:	6013      	str	r3, [r2, #0]
   e4d56:	9b05      	ldr	r3, [sp, #20]
   e4d58:	2b00      	cmp	r3, #0
   e4d5a:	f040 81dc 	bne.w	e5116 <_strtod_r+0xb6e>
   e4d5e:	e1ee      	b.n	e513e <_strtod_r+0xb96>
   e4d60:	2301      	movs	r3, #1
   e4d62:	2700      	movs	r7, #0
   e4d64:	9306      	str	r3, [sp, #24]
   e4d66:	e784      	b.n	e4c72 <_strtod_r+0x6ca>
   e4d68:	4629      	mov	r1, r5
   e4d6a:	461a      	mov	r2, r3
   e4d6c:	9802      	ldr	r0, [sp, #8]
   e4d6e:	f001 fb4d 	bl	e640c <__pow5mult>
   e4d72:	4605      	mov	r5, r0
   e4d74:	2800      	cmp	r0, #0
   e4d76:	f43f ae5e 	beq.w	e4a36 <_strtod_r+0x48e>
   e4d7a:	4601      	mov	r1, r0
   e4d7c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   e4d7e:	9802      	ldr	r0, [sp, #8]
   e4d80:	f001 fab3 	bl	e62ea <__multiply>
   e4d84:	9007      	str	r0, [sp, #28]
   e4d86:	2800      	cmp	r0, #0
   e4d88:	f43f ae55 	beq.w	e4a36 <_strtod_r+0x48e>
   e4d8c:	9918      	ldr	r1, [sp, #96]	; 0x60
   e4d8e:	9802      	ldr	r0, [sp, #8]
   e4d90:	f001 f9c5 	bl	e611e <_Bfree>
   e4d94:	9b07      	ldr	r3, [sp, #28]
   e4d96:	9318      	str	r3, [sp, #96]	; 0x60
   e4d98:	e781      	b.n	e4c9e <_strtod_r+0x6f6>
   e4d9a:	464a      	mov	r2, r9
   e4d9c:	9918      	ldr	r1, [sp, #96]	; 0x60
   e4d9e:	9802      	ldr	r0, [sp, #8]
   e4da0:	f001 fb82 	bl	e64a8 <__lshift>
   e4da4:	9018      	str	r0, [sp, #96]	; 0x60
   e4da6:	2800      	cmp	r0, #0
   e4da8:	f47f af7c 	bne.w	e4ca4 <_strtod_r+0x6fc>
   e4dac:	e643      	b.n	e4a36 <_strtod_r+0x48e>
   e4dae:	9a12      	ldr	r2, [sp, #72]	; 0x48
   e4db0:	9904      	ldr	r1, [sp, #16]
   e4db2:	9802      	ldr	r0, [sp, #8]
   e4db4:	f001 fb2a 	bl	e640c <__pow5mult>
   e4db8:	9004      	str	r0, [sp, #16]
   e4dba:	2800      	cmp	r0, #0
   e4dbc:	f47f af76 	bne.w	e4cac <_strtod_r+0x704>
   e4dc0:	e639      	b.n	e4a36 <_strtod_r+0x48e>
   e4dc2:	4632      	mov	r2, r6
   e4dc4:	9904      	ldr	r1, [sp, #16]
   e4dc6:	9802      	ldr	r0, [sp, #8]
   e4dc8:	f001 fb6e 	bl	e64a8 <__lshift>
   e4dcc:	9004      	str	r0, [sp, #16]
   e4dce:	2800      	cmp	r0, #0
   e4dd0:	f47f af6f 	bne.w	e4cb2 <_strtod_r+0x70a>
   e4dd4:	e62f      	b.n	e4a36 <_strtod_r+0x48e>
   e4dd6:	4629      	mov	r1, r5
   e4dd8:	4642      	mov	r2, r8
   e4dda:	9802      	ldr	r0, [sp, #8]
   e4ddc:	f001 fb64 	bl	e64a8 <__lshift>
   e4de0:	4605      	mov	r5, r0
   e4de2:	2800      	cmp	r0, #0
   e4de4:	f47f af69 	bne.w	e4cba <_strtod_r+0x712>
   e4de8:	e625      	b.n	e4a36 <_strtod_r+0x48e>
   e4dea:	6923      	ldr	r3, [r4, #16]
   e4dec:	2b01      	cmp	r3, #1
   e4dee:	dc8f      	bgt.n	e4d10 <_strtod_r+0x768>
   e4df0:	e17e      	b.n	e50f0 <_strtod_r+0xb48>
   e4df2:	d161      	bne.n	e4eb8 <_strtod_r+0x910>
   e4df4:	9a07      	ldr	r2, [sp, #28]
   e4df6:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e4dfa:	b322      	cbz	r2, e4e46 <_strtod_r+0x89e>
   e4dfc:	4946      	ldr	r1, [pc, #280]	; (e4f18 <_strtod_r+0x970>)
   e4dfe:	428b      	cmp	r3, r1
   e4e00:	465a      	mov	r2, fp
   e4e02:	d12e      	bne.n	e4e62 <_strtod_r+0x8ba>
   e4e04:	9b03      	ldr	r3, [sp, #12]
   e4e06:	4651      	mov	r1, sl
   e4e08:	b163      	cbz	r3, e4e24 <_strtod_r+0x87c>
   e4e0a:	4b44      	ldr	r3, [pc, #272]	; (e4f1c <_strtod_r+0x974>)
   e4e0c:	4013      	ands	r3, r2
   e4e0e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   e4e12:	d807      	bhi.n	e4e24 <_strtod_r+0x87c>
   e4e14:	0d1b      	lsrs	r3, r3, #20
   e4e16:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e4e1a:	f04f 30ff 	mov.w	r0, #4294967295
   e4e1e:	fa00 f303 	lsl.w	r3, r0, r3
   e4e22:	e001      	b.n	e4e28 <_strtod_r+0x880>
   e4e24:	f04f 33ff 	mov.w	r3, #4294967295
   e4e28:	428b      	cmp	r3, r1
   e4e2a:	d11a      	bne.n	e4e62 <_strtod_r+0x8ba>
   e4e2c:	493c      	ldr	r1, [pc, #240]	; (e4f20 <_strtod_r+0x978>)
   e4e2e:	428a      	cmp	r2, r1
   e4e30:	d102      	bne.n	e4e38 <_strtod_r+0x890>
   e4e32:	3301      	adds	r3, #1
   e4e34:	f43f adff 	beq.w	e4a36 <_strtod_r+0x48e>
   e4e38:	4b38      	ldr	r3, [pc, #224]	; (e4f1c <_strtod_r+0x974>)
   e4e3a:	4013      	ands	r3, r2
   e4e3c:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   e4e40:	f04f 0a00 	mov.w	sl, #0
   e4e44:	e154      	b.n	e50f0 <_strtod_r+0xb48>
   e4e46:	b963      	cbnz	r3, e4e62 <_strtod_r+0x8ba>
   e4e48:	f1ba 0f00 	cmp.w	sl, #0
   e4e4c:	d109      	bne.n	e4e62 <_strtod_r+0x8ba>
   e4e4e:	e76b      	b.n	e4d28 <_strtod_r+0x780>
   e4e50:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   e4e54:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   e4e58:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   e4e5c:	f04f 3aff 	mov.w	sl, #4294967295
   e4e60:	e146      	b.n	e50f0 <_strtod_r+0xb48>
   e4e62:	b117      	cbz	r7, e4e6a <_strtod_r+0x8c2>
   e4e64:	ea17 0f0b 	tst.w	r7, fp
   e4e68:	e002      	b.n	e4e70 <_strtod_r+0x8c8>
   e4e6a:	9b06      	ldr	r3, [sp, #24]
   e4e6c:	ea13 0f0a 	tst.w	r3, sl
   e4e70:	f000 813e 	beq.w	e50f0 <_strtod_r+0xb48>
   e4e74:	9b07      	ldr	r3, [sp, #28]
   e4e76:	9a03      	ldr	r2, [sp, #12]
   e4e78:	4650      	mov	r0, sl
   e4e7a:	4659      	mov	r1, fp
   e4e7c:	b153      	cbz	r3, e4e94 <_strtod_r+0x8ec>
   e4e7e:	f7ff fb75 	bl	e456c <sulp>
   e4e82:	4602      	mov	r2, r0
   e4e84:	460b      	mov	r3, r1
   e4e86:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   e4e8a:	f7fd fd27 	bl	e28dc <__adddf3>
   e4e8e:	4682      	mov	sl, r0
   e4e90:	468b      	mov	fp, r1
   e4e92:	e12d      	b.n	e50f0 <_strtod_r+0xb48>
   e4e94:	f7ff fb6a 	bl	e456c <sulp>
   e4e98:	4602      	mov	r2, r0
   e4e9a:	460b      	mov	r3, r1
   e4e9c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   e4ea0:	f7fd fd1a 	bl	e28d8 <__aeabi_dsub>
   e4ea4:	2200      	movs	r2, #0
   e4ea6:	2300      	movs	r3, #0
   e4ea8:	4682      	mov	sl, r0
   e4eaa:	468b      	mov	fp, r1
   e4eac:	f7fe f930 	bl	e3110 <__aeabi_dcmpeq>
   e4eb0:	2800      	cmp	r0, #0
   e4eb2:	f47f af49 	bne.w	e4d48 <_strtod_r+0x7a0>
   e4eb6:	e11b      	b.n	e50f0 <_strtod_r+0xb48>
   e4eb8:	4629      	mov	r1, r5
   e4eba:	4620      	mov	r0, r4
   e4ebc:	f001 fc83 	bl	e67c6 <__ratio>
   e4ec0:	ec57 6b10 	vmov	r6, r7, d0
   e4ec4:	2200      	movs	r2, #0
   e4ec6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   e4eca:	ee10 0a10 	vmov	r0, s0
   e4ece:	4639      	mov	r1, r7
   e4ed0:	f7fe f932 	bl	e3138 <__aeabi_dcmple>
   e4ed4:	2800      	cmp	r0, #0
   e4ed6:	d042      	beq.n	e4f5e <_strtod_r+0x9b6>
   e4ed8:	9b07      	ldr	r3, [sp, #28]
   e4eda:	b123      	cbz	r3, e4ee6 <_strtod_r+0x93e>
   e4edc:	f04f 0800 	mov.w	r8, #0
   e4ee0:	f8df 9040 	ldr.w	r9, [pc, #64]	; e4f24 <_strtod_r+0x97c>
   e4ee4:	e011      	b.n	e4f0a <_strtod_r+0x962>
   e4ee6:	f1ba 0f00 	cmp.w	sl, #0
   e4eea:	d103      	bne.n	e4ef4 <_strtod_r+0x94c>
   e4eec:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e4ef0:	b93b      	cbnz	r3, e4f02 <_strtod_r+0x95a>
   e4ef2:	e01b      	b.n	e4f2c <_strtod_r+0x984>
   e4ef4:	f1ba 0f01 	cmp.w	sl, #1
   e4ef8:	d103      	bne.n	e4f02 <_strtod_r+0x95a>
   e4efa:	f1bb 0f00 	cmp.w	fp, #0
   e4efe:	f43f af23 	beq.w	e4d48 <_strtod_r+0x7a0>
   e4f02:	f8df 9024 	ldr.w	r9, [pc, #36]	; e4f28 <_strtod_r+0x980>
   e4f06:	f04f 0800 	mov.w	r8, #0
   e4f0a:	2600      	movs	r6, #0
   e4f0c:	4f05      	ldr	r7, [pc, #20]	; (e4f24 <_strtod_r+0x97c>)
   e4f0e:	e039      	b.n	e4f84 <_strtod_r+0x9dc>
   e4f10:	fffffc02 	.word	0xfffffc02
   e4f14:	fffffbe2 	.word	0xfffffbe2
   e4f18:	000fffff 	.word	0x000fffff
   e4f1c:	7ff00000 	.word	0x7ff00000
   e4f20:	7fefffff 	.word	0x7fefffff
   e4f24:	3ff00000 	.word	0x3ff00000
   e4f28:	bff00000 	.word	0xbff00000
   e4f2c:	2200      	movs	r2, #0
   e4f2e:	4b98      	ldr	r3, [pc, #608]	; (e5190 <_strtod_r+0xbe8>)
   e4f30:	4630      	mov	r0, r6
   e4f32:	4639      	mov	r1, r7
   e4f34:	f7fe f8f6 	bl	e3124 <__aeabi_dcmplt>
   e4f38:	b940      	cbnz	r0, e4f4c <_strtod_r+0x9a4>
   e4f3a:	4630      	mov	r0, r6
   e4f3c:	4639      	mov	r1, r7
   e4f3e:	2200      	movs	r2, #0
   e4f40:	4b94      	ldr	r3, [pc, #592]	; (e5194 <_strtod_r+0xbec>)
   e4f42:	f7fd fe7d 	bl	e2c40 <__aeabi_dmul>
   e4f46:	4606      	mov	r6, r0
   e4f48:	460f      	mov	r7, r1
   e4f4a:	e001      	b.n	e4f50 <_strtod_r+0x9a8>
   e4f4c:	4f91      	ldr	r7, [pc, #580]	; (e5194 <_strtod_r+0xbec>)
   e4f4e:	2600      	movs	r6, #0
   e4f50:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   e4f54:	9614      	str	r6, [sp, #80]	; 0x50
   e4f56:	9315      	str	r3, [sp, #84]	; 0x54
   e4f58:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   e4f5c:	e012      	b.n	e4f84 <_strtod_r+0x9dc>
   e4f5e:	4b8d      	ldr	r3, [pc, #564]	; (e5194 <_strtod_r+0xbec>)
   e4f60:	4630      	mov	r0, r6
   e4f62:	4639      	mov	r1, r7
   e4f64:	2200      	movs	r2, #0
   e4f66:	f7fd fe6b 	bl	e2c40 <__aeabi_dmul>
   e4f6a:	9b07      	ldr	r3, [sp, #28]
   e4f6c:	4606      	mov	r6, r0
   e4f6e:	460f      	mov	r7, r1
   e4f70:	b923      	cbnz	r3, e4f7c <_strtod_r+0x9d4>
   e4f72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e4f76:	900e      	str	r0, [sp, #56]	; 0x38
   e4f78:	930f      	str	r3, [sp, #60]	; 0x3c
   e4f7a:	e001      	b.n	e4f80 <_strtod_r+0x9d8>
   e4f7c:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   e4f80:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   e4f84:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e4f88:	0d1b      	lsrs	r3, r3, #20
   e4f8a:	051b      	lsls	r3, r3, #20
   e4f8c:	9306      	str	r3, [sp, #24]
   e4f8e:	9a06      	ldr	r2, [sp, #24]
   e4f90:	4b81      	ldr	r3, [pc, #516]	; (e5198 <_strtod_r+0xbf0>)
   e4f92:	429a      	cmp	r2, r3
   e4f94:	d12b      	bne.n	e4fee <_strtod_r+0xa46>
   e4f96:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   e4f9a:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   e4f9e:	ec4b ab10 	vmov	d0, sl, fp
   e4fa2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   e4fa6:	f001 fb4b 	bl	e6640 <__ulp>
   e4faa:	4640      	mov	r0, r8
   e4fac:	ec53 2b10 	vmov	r2, r3, d0
   e4fb0:	4649      	mov	r1, r9
   e4fb2:	f7fd fe45 	bl	e2c40 <__aeabi_dmul>
   e4fb6:	4652      	mov	r2, sl
   e4fb8:	465b      	mov	r3, fp
   e4fba:	f7fd fc8f 	bl	e28dc <__adddf3>
   e4fbe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   e4fc2:	0d1b      	lsrs	r3, r3, #20
   e4fc4:	4a75      	ldr	r2, [pc, #468]	; (e519c <_strtod_r+0xbf4>)
   e4fc6:	051b      	lsls	r3, r3, #20
   e4fc8:	4293      	cmp	r3, r2
   e4fca:	4682      	mov	sl, r0
   e4fcc:	d90c      	bls.n	e4fe8 <_strtod_r+0xa40>
   e4fce:	4b74      	ldr	r3, [pc, #464]	; (e51a0 <_strtod_r+0xbf8>)
   e4fd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   e4fd2:	429a      	cmp	r2, r3
   e4fd4:	d103      	bne.n	e4fde <_strtod_r+0xa36>
   e4fd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e4fd8:	3301      	adds	r3, #1
   e4fda:	f43f ad2c 	beq.w	e4a36 <_strtod_r+0x48e>
   e4fde:	f8df b1c0 	ldr.w	fp, [pc, #448]	; e51a0 <_strtod_r+0xbf8>
   e4fe2:	f04f 3aff 	mov.w	sl, #4294967295
   e4fe6:	e072      	b.n	e50ce <_strtod_r+0xb26>
   e4fe8:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   e4fec:	e038      	b.n	e5060 <_strtod_r+0xab8>
   e4fee:	9b03      	ldr	r3, [sp, #12]
   e4ff0:	b333      	cbz	r3, e5040 <_strtod_r+0xa98>
   e4ff2:	9b06      	ldr	r3, [sp, #24]
   e4ff4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   e4ff8:	d822      	bhi.n	e5040 <_strtod_r+0xa98>
   e4ffa:	a35d      	add	r3, pc, #372	; (adr r3, e5170 <_strtod_r+0xbc8>)
   e4ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
   e5000:	4630      	mov	r0, r6
   e5002:	4639      	mov	r1, r7
   e5004:	f7fe f898 	bl	e3138 <__aeabi_dcmple>
   e5008:	b1a8      	cbz	r0, e5036 <_strtod_r+0xa8e>
   e500a:	4639      	mov	r1, r7
   e500c:	4630      	mov	r0, r6
   e500e:	f7fe f8ef 	bl	e31f0 <__aeabi_d2uiz>
   e5012:	2800      	cmp	r0, #0
   e5014:	bf08      	it	eq
   e5016:	2001      	moveq	r0, #1
   e5018:	f7fd fd9c 	bl	e2b54 <__aeabi_ui2d>
   e501c:	9b07      	ldr	r3, [sp, #28]
   e501e:	4606      	mov	r6, r0
   e5020:	460f      	mov	r7, r1
   e5022:	b923      	cbnz	r3, e502e <_strtod_r+0xa86>
   e5024:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e5028:	9010      	str	r0, [sp, #64]	; 0x40
   e502a:	9311      	str	r3, [sp, #68]	; 0x44
   e502c:	e001      	b.n	e5032 <_strtod_r+0xa8a>
   e502e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   e5032:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   e5036:	9a06      	ldr	r2, [sp, #24]
   e5038:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   e503c:	ebc2 0903 	rsb	r9, r2, r3
   e5040:	ed9d 0b08 	vldr	d0, [sp, #32]
   e5044:	f001 fafc 	bl	e6640 <__ulp>
   e5048:	4640      	mov	r0, r8
   e504a:	ec53 2b10 	vmov	r2, r3, d0
   e504e:	4649      	mov	r1, r9
   e5050:	f7fd fdf6 	bl	e2c40 <__aeabi_dmul>
   e5054:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   e5058:	f7fd fc40 	bl	e28dc <__adddf3>
   e505c:	4682      	mov	sl, r0
   e505e:	468b      	mov	fp, r1
   e5060:	9b03      	ldr	r3, [sp, #12]
   e5062:	bba3      	cbnz	r3, e50ce <_strtod_r+0xb26>
   e5064:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e5068:	0d1b      	lsrs	r3, r3, #20
   e506a:	9a06      	ldr	r2, [sp, #24]
   e506c:	051b      	lsls	r3, r3, #20
   e506e:	429a      	cmp	r2, r3
   e5070:	46d8      	mov	r8, fp
   e5072:	d12c      	bne.n	e50ce <_strtod_r+0xb26>
   e5074:	4639      	mov	r1, r7
   e5076:	4630      	mov	r0, r6
   e5078:	f7fe f892 	bl	e31a0 <__aeabi_d2iz>
   e507c:	f7fd fd7a 	bl	e2b74 <__aeabi_i2d>
   e5080:	460b      	mov	r3, r1
   e5082:	4602      	mov	r2, r0
   e5084:	4639      	mov	r1, r7
   e5086:	4630      	mov	r0, r6
   e5088:	f7fd fc26 	bl	e28d8 <__aeabi_dsub>
   e508c:	9b07      	ldr	r3, [sp, #28]
   e508e:	4606      	mov	r6, r0
   e5090:	460f      	mov	r7, r1
   e5092:	b92b      	cbnz	r3, e50a0 <_strtod_r+0xaf8>
   e5094:	f1ba 0f00 	cmp.w	sl, #0
   e5098:	d102      	bne.n	e50a0 <_strtod_r+0xaf8>
   e509a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e509e:	b183      	cbz	r3, e50c2 <_strtod_r+0xb1a>
   e50a0:	a335      	add	r3, pc, #212	; (adr r3, e5178 <_strtod_r+0xbd0>)
   e50a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   e50a6:	4630      	mov	r0, r6
   e50a8:	4639      	mov	r1, r7
   e50aa:	f7fe f83b 	bl	e3124 <__aeabi_dcmplt>
   e50ae:	2800      	cmp	r0, #0
   e50b0:	d131      	bne.n	e5116 <_strtod_r+0xb6e>
   e50b2:	a333      	add	r3, pc, #204	; (adr r3, e5180 <_strtod_r+0xbd8>)
   e50b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   e50b8:	4630      	mov	r0, r6
   e50ba:	4639      	mov	r1, r7
   e50bc:	f7fe f850 	bl	e3160 <__aeabi_dcmpgt>
   e50c0:	e004      	b.n	e50cc <_strtod_r+0xb24>
   e50c2:	a331      	add	r3, pc, #196	; (adr r3, e5188 <_strtod_r+0xbe0>)
   e50c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   e50c8:	f7fe f82c 	bl	e3124 <__aeabi_dcmplt>
   e50cc:	bb18      	cbnz	r0, e5116 <_strtod_r+0xb6e>
   e50ce:	9918      	ldr	r1, [sp, #96]	; 0x60
   e50d0:	9802      	ldr	r0, [sp, #8]
   e50d2:	f001 f824 	bl	e611e <_Bfree>
   e50d6:	9904      	ldr	r1, [sp, #16]
   e50d8:	9802      	ldr	r0, [sp, #8]
   e50da:	f001 f820 	bl	e611e <_Bfree>
   e50de:	4629      	mov	r1, r5
   e50e0:	9802      	ldr	r0, [sp, #8]
   e50e2:	f001 f81c 	bl	e611e <_Bfree>
   e50e6:	4621      	mov	r1, r4
   e50e8:	9802      	ldr	r0, [sp, #8]
   e50ea:	f001 f818 	bl	e611e <_Bfree>
   e50ee:	e56d      	b.n	e4bcc <_strtod_r+0x624>
   e50f0:	9b03      	ldr	r3, [sp, #12]
   e50f2:	b183      	cbz	r3, e5116 <_strtod_r+0xb6e>
   e50f4:	4b2b      	ldr	r3, [pc, #172]	; (e51a4 <_strtod_r+0xbfc>)
   e50f6:	930b      	str	r3, [sp, #44]	; 0x2c
   e50f8:	2300      	movs	r3, #0
   e50fa:	930a      	str	r3, [sp, #40]	; 0x28
   e50fc:	4650      	mov	r0, sl
   e50fe:	4659      	mov	r1, fp
   e5100:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   e5104:	f7fd fd9c 	bl	e2c40 <__aeabi_dmul>
   e5108:	4682      	mov	sl, r0
   e510a:	468b      	mov	fp, r1
   e510c:	b919      	cbnz	r1, e5116 <_strtod_r+0xb6e>
   e510e:	b910      	cbnz	r0, e5116 <_strtod_r+0xb6e>
   e5110:	9a02      	ldr	r2, [sp, #8]
   e5112:	2322      	movs	r3, #34	; 0x22
   e5114:	6013      	str	r3, [r2, #0]
   e5116:	9918      	ldr	r1, [sp, #96]	; 0x60
   e5118:	9802      	ldr	r0, [sp, #8]
   e511a:	f001 f800 	bl	e611e <_Bfree>
   e511e:	9904      	ldr	r1, [sp, #16]
   e5120:	9802      	ldr	r0, [sp, #8]
   e5122:	f000 fffc 	bl	e611e <_Bfree>
   e5126:	4629      	mov	r1, r5
   e5128:	9802      	ldr	r0, [sp, #8]
   e512a:	f000 fff8 	bl	e611e <_Bfree>
   e512e:	9905      	ldr	r1, [sp, #20]
   e5130:	9802      	ldr	r0, [sp, #8]
   e5132:	f000 fff4 	bl	e611e <_Bfree>
   e5136:	4621      	mov	r1, r4
   e5138:	9802      	ldr	r0, [sp, #8]
   e513a:	f000 fff0 	bl	e611e <_Bfree>
   e513e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   e5140:	b113      	cbz	r3, e5148 <_strtod_r+0xba0>
   e5142:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   e5144:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e5146:	6013      	str	r3, [r2, #0]
   e5148:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e514a:	b11b      	cbz	r3, e5154 <_strtod_r+0xbac>
   e514c:	4652      	mov	r2, sl
   e514e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   e5152:	e007      	b.n	e5164 <_strtod_r+0xbbc>
   e5154:	4652      	mov	r2, sl
   e5156:	465b      	mov	r3, fp
   e5158:	e004      	b.n	e5164 <_strtod_r+0xbbc>
   e515a:	2500      	movs	r5, #0
   e515c:	462a      	mov	r2, r5
   e515e:	2101      	movs	r1, #1
   e5160:	f7ff bb41 	b.w	e47e6 <_strtod_r+0x23e>
   e5164:	ec43 2b10 	vmov	d0, r2, r3
   e5168:	b01d      	add	sp, #116	; 0x74
   e516a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e516e:	bf00      	nop
   e5170:	ffc00000 	.word	0xffc00000
   e5174:	41dfffff 	.word	0x41dfffff
   e5178:	94a03595 	.word	0x94a03595
   e517c:	3fdfffff 	.word	0x3fdfffff
   e5180:	35afe535 	.word	0x35afe535
   e5184:	3fe00000 	.word	0x3fe00000
   e5188:	94a03595 	.word	0x94a03595
   e518c:	3fcfffff 	.word	0x3fcfffff
   e5190:	3ff00000 	.word	0x3ff00000
   e5194:	3fe00000 	.word	0x3fe00000
   e5198:	7fe00000 	.word	0x7fe00000
   e519c:	7c9fffff 	.word	0x7c9fffff
   e51a0:	7fefffff 	.word	0x7fefffff
   e51a4:	39500000 	.word	0x39500000

000e51a8 <strtod>:
   e51a8:	4b02      	ldr	r3, [pc, #8]	; (e51b4 <strtod+0xc>)
   e51aa:	460a      	mov	r2, r1
   e51ac:	4601      	mov	r1, r0
   e51ae:	6818      	ldr	r0, [r3, #0]
   e51b0:	f7ff b9fa 	b.w	e45a8 <_strtod_r>
   e51b4:	2003d624 	.word	0x2003d624

000e51b8 <_strtol_r>:
   e51b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e51bc:	4680      	mov	r8, r0
   e51be:	4840      	ldr	r0, [pc, #256]	; (e52c0 <_strtol_r+0x108>)
   e51c0:	f8d0 9000 	ldr.w	r9, [r0]
   e51c4:	460f      	mov	r7, r1
   e51c6:	463d      	mov	r5, r7
   e51c8:	f815 4b01 	ldrb.w	r4, [r5], #1
   e51cc:	eb09 0004 	add.w	r0, r9, r4
   e51d0:	7840      	ldrb	r0, [r0, #1]
   e51d2:	f000 0008 	and.w	r0, r0, #8
   e51d6:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   e51da:	b108      	cbz	r0, e51e0 <_strtol_r+0x28>
   e51dc:	462f      	mov	r7, r5
   e51de:	e7f2      	b.n	e51c6 <_strtol_r+0xe>
   e51e0:	2c2d      	cmp	r4, #45	; 0x2d
   e51e2:	d103      	bne.n	e51ec <_strtol_r+0x34>
   e51e4:	1cbd      	adds	r5, r7, #2
   e51e6:	787c      	ldrb	r4, [r7, #1]
   e51e8:	2601      	movs	r6, #1
   e51ea:	e003      	b.n	e51f4 <_strtol_r+0x3c>
   e51ec:	2c2b      	cmp	r4, #43	; 0x2b
   e51ee:	bf04      	itt	eq
   e51f0:	787c      	ldrbeq	r4, [r7, #1]
   e51f2:	1cbd      	addeq	r5, r7, #2
   e51f4:	b113      	cbz	r3, e51fc <_strtol_r+0x44>
   e51f6:	2b10      	cmp	r3, #16
   e51f8:	d10a      	bne.n	e5210 <_strtol_r+0x58>
   e51fa:	e05b      	b.n	e52b4 <_strtol_r+0xfc>
   e51fc:	2c30      	cmp	r4, #48	; 0x30
   e51fe:	d157      	bne.n	e52b0 <_strtol_r+0xf8>
   e5200:	7828      	ldrb	r0, [r5, #0]
   e5202:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   e5206:	2858      	cmp	r0, #88	; 0x58
   e5208:	d14d      	bne.n	e52a6 <_strtol_r+0xee>
   e520a:	786c      	ldrb	r4, [r5, #1]
   e520c:	2310      	movs	r3, #16
   e520e:	3502      	adds	r5, #2
   e5210:	2e00      	cmp	r6, #0
   e5212:	bf14      	ite	ne
   e5214:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   e5218:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   e521c:	2700      	movs	r7, #0
   e521e:	fbbc faf3 	udiv	sl, ip, r3
   e5222:	4638      	mov	r0, r7
   e5224:	fb03 cc1a 	mls	ip, r3, sl, ip
   e5228:	eb09 0e04 	add.w	lr, r9, r4
   e522c:	f89e e001 	ldrb.w	lr, [lr, #1]
   e5230:	f01e 0f04 	tst.w	lr, #4
   e5234:	d001      	beq.n	e523a <_strtol_r+0x82>
   e5236:	3c30      	subs	r4, #48	; 0x30
   e5238:	e00b      	b.n	e5252 <_strtol_r+0x9a>
   e523a:	f01e 0e03 	ands.w	lr, lr, #3
   e523e:	d01b      	beq.n	e5278 <_strtol_r+0xc0>
   e5240:	f1be 0f01 	cmp.w	lr, #1
   e5244:	bf0c      	ite	eq
   e5246:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   e524a:	f04f 0e57 	movne.w	lr, #87	; 0x57
   e524e:	ebce 0404 	rsb	r4, lr, r4
   e5252:	42a3      	cmp	r3, r4
   e5254:	dd10      	ble.n	e5278 <_strtol_r+0xc0>
   e5256:	f1b7 3fff 	cmp.w	r7, #4294967295
   e525a:	d00a      	beq.n	e5272 <_strtol_r+0xba>
   e525c:	4550      	cmp	r0, sl
   e525e:	d806      	bhi.n	e526e <_strtol_r+0xb6>
   e5260:	d101      	bne.n	e5266 <_strtol_r+0xae>
   e5262:	4564      	cmp	r4, ip
   e5264:	dc03      	bgt.n	e526e <_strtol_r+0xb6>
   e5266:	fb03 4000 	mla	r0, r3, r0, r4
   e526a:	2701      	movs	r7, #1
   e526c:	e001      	b.n	e5272 <_strtol_r+0xba>
   e526e:	f04f 37ff 	mov.w	r7, #4294967295
   e5272:	f815 4b01 	ldrb.w	r4, [r5], #1
   e5276:	e7d7      	b.n	e5228 <_strtol_r+0x70>
   e5278:	1c7b      	adds	r3, r7, #1
   e527a:	d10c      	bne.n	e5296 <_strtol_r+0xde>
   e527c:	2e00      	cmp	r6, #0
   e527e:	f04f 0322 	mov.w	r3, #34	; 0x22
   e5282:	bf14      	ite	ne
   e5284:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   e5288:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   e528c:	f8c8 3000 	str.w	r3, [r8]
   e5290:	b92a      	cbnz	r2, e529e <_strtol_r+0xe6>
   e5292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e5296:	b106      	cbz	r6, e529a <_strtol_r+0xe2>
   e5298:	4240      	negs	r0, r0
   e529a:	b172      	cbz	r2, e52ba <_strtol_r+0x102>
   e529c:	b107      	cbz	r7, e52a0 <_strtol_r+0xe8>
   e529e:	1e69      	subs	r1, r5, #1
   e52a0:	6011      	str	r1, [r2, #0]
   e52a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e52a6:	2430      	movs	r4, #48	; 0x30
   e52a8:	2b00      	cmp	r3, #0
   e52aa:	d1b1      	bne.n	e5210 <_strtol_r+0x58>
   e52ac:	2308      	movs	r3, #8
   e52ae:	e7af      	b.n	e5210 <_strtol_r+0x58>
   e52b0:	230a      	movs	r3, #10
   e52b2:	e7ad      	b.n	e5210 <_strtol_r+0x58>
   e52b4:	2c30      	cmp	r4, #48	; 0x30
   e52b6:	d0a3      	beq.n	e5200 <_strtol_r+0x48>
   e52b8:	e7aa      	b.n	e5210 <_strtol_r+0x58>
   e52ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e52be:	bf00      	nop
   e52c0:	2003d5c0 	.word	0x2003d5c0

000e52c4 <strtol>:
   e52c4:	4613      	mov	r3, r2
   e52c6:	460a      	mov	r2, r1
   e52c8:	4601      	mov	r1, r0
   e52ca:	4802      	ldr	r0, [pc, #8]	; (e52d4 <strtol+0x10>)
   e52cc:	6800      	ldr	r0, [r0, #0]
   e52ce:	f7ff bf73 	b.w	e51b8 <_strtol_r>
   e52d2:	bf00      	nop
   e52d4:	2003d624 	.word	0x2003d624

000e52d8 <_strtoul_r>:
   e52d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e52dc:	4680      	mov	r8, r0
   e52de:	483c      	ldr	r0, [pc, #240]	; (e53d0 <_strtoul_r+0xf8>)
   e52e0:	f8d0 9000 	ldr.w	r9, [r0]
   e52e4:	460e      	mov	r6, r1
   e52e6:	4635      	mov	r5, r6
   e52e8:	f815 4b01 	ldrb.w	r4, [r5], #1
   e52ec:	eb09 0004 	add.w	r0, r9, r4
   e52f0:	7840      	ldrb	r0, [r0, #1]
   e52f2:	f000 0008 	and.w	r0, r0, #8
   e52f6:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   e52fa:	b108      	cbz	r0, e5300 <_strtoul_r+0x28>
   e52fc:	462e      	mov	r6, r5
   e52fe:	e7f2      	b.n	e52e6 <_strtoul_r+0xe>
   e5300:	2c2d      	cmp	r4, #45	; 0x2d
   e5302:	d103      	bne.n	e530c <_strtoul_r+0x34>
   e5304:	1cb5      	adds	r5, r6, #2
   e5306:	7874      	ldrb	r4, [r6, #1]
   e5308:	2701      	movs	r7, #1
   e530a:	e003      	b.n	e5314 <_strtoul_r+0x3c>
   e530c:	2c2b      	cmp	r4, #43	; 0x2b
   e530e:	bf04      	itt	eq
   e5310:	7874      	ldrbeq	r4, [r6, #1]
   e5312:	1cb5      	addeq	r5, r6, #2
   e5314:	b113      	cbz	r3, e531c <_strtoul_r+0x44>
   e5316:	2b10      	cmp	r3, #16
   e5318:	d10a      	bne.n	e5330 <_strtoul_r+0x58>
   e531a:	e053      	b.n	e53c4 <_strtoul_r+0xec>
   e531c:	2c30      	cmp	r4, #48	; 0x30
   e531e:	d14f      	bne.n	e53c0 <_strtoul_r+0xe8>
   e5320:	7828      	ldrb	r0, [r5, #0]
   e5322:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   e5326:	2858      	cmp	r0, #88	; 0x58
   e5328:	d145      	bne.n	e53b6 <_strtoul_r+0xde>
   e532a:	786c      	ldrb	r4, [r5, #1]
   e532c:	2310      	movs	r3, #16
   e532e:	3502      	adds	r5, #2
   e5330:	f04f 3cff 	mov.w	ip, #4294967295
   e5334:	2600      	movs	r6, #0
   e5336:	fbbc fcf3 	udiv	ip, ip, r3
   e533a:	fb03 fa0c 	mul.w	sl, r3, ip
   e533e:	ea6f 0a0a 	mvn.w	sl, sl
   e5342:	4630      	mov	r0, r6
   e5344:	eb09 0e04 	add.w	lr, r9, r4
   e5348:	f89e e001 	ldrb.w	lr, [lr, #1]
   e534c:	f01e 0f04 	tst.w	lr, #4
   e5350:	d001      	beq.n	e5356 <_strtoul_r+0x7e>
   e5352:	3c30      	subs	r4, #48	; 0x30
   e5354:	e00b      	b.n	e536e <_strtoul_r+0x96>
   e5356:	f01e 0e03 	ands.w	lr, lr, #3
   e535a:	d01a      	beq.n	e5392 <_strtoul_r+0xba>
   e535c:	f1be 0f01 	cmp.w	lr, #1
   e5360:	bf0c      	ite	eq
   e5362:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   e5366:	f04f 0e57 	movne.w	lr, #87	; 0x57
   e536a:	ebce 0404 	rsb	r4, lr, r4
   e536e:	42a3      	cmp	r3, r4
   e5370:	dd0f      	ble.n	e5392 <_strtoul_r+0xba>
   e5372:	2e00      	cmp	r6, #0
   e5374:	db08      	blt.n	e5388 <_strtoul_r+0xb0>
   e5376:	4560      	cmp	r0, ip
   e5378:	d806      	bhi.n	e5388 <_strtoul_r+0xb0>
   e537a:	d101      	bne.n	e5380 <_strtoul_r+0xa8>
   e537c:	4554      	cmp	r4, sl
   e537e:	dc03      	bgt.n	e5388 <_strtoul_r+0xb0>
   e5380:	fb03 4000 	mla	r0, r3, r0, r4
   e5384:	2601      	movs	r6, #1
   e5386:	e001      	b.n	e538c <_strtoul_r+0xb4>
   e5388:	f04f 36ff 	mov.w	r6, #4294967295
   e538c:	f815 4b01 	ldrb.w	r4, [r5], #1
   e5390:	e7d8      	b.n	e5344 <_strtoul_r+0x6c>
   e5392:	2e00      	cmp	r6, #0
   e5394:	da07      	bge.n	e53a6 <_strtoul_r+0xce>
   e5396:	2322      	movs	r3, #34	; 0x22
   e5398:	f8c8 3000 	str.w	r3, [r8]
   e539c:	f04f 30ff 	mov.w	r0, #4294967295
   e53a0:	b92a      	cbnz	r2, e53ae <_strtoul_r+0xd6>
   e53a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e53a6:	b107      	cbz	r7, e53aa <_strtoul_r+0xd2>
   e53a8:	4240      	negs	r0, r0
   e53aa:	b172      	cbz	r2, e53ca <_strtoul_r+0xf2>
   e53ac:	b106      	cbz	r6, e53b0 <_strtoul_r+0xd8>
   e53ae:	1e69      	subs	r1, r5, #1
   e53b0:	6011      	str	r1, [r2, #0]
   e53b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e53b6:	2430      	movs	r4, #48	; 0x30
   e53b8:	2b00      	cmp	r3, #0
   e53ba:	d1b9      	bne.n	e5330 <_strtoul_r+0x58>
   e53bc:	2308      	movs	r3, #8
   e53be:	e7b7      	b.n	e5330 <_strtoul_r+0x58>
   e53c0:	230a      	movs	r3, #10
   e53c2:	e7b5      	b.n	e5330 <_strtoul_r+0x58>
   e53c4:	2c30      	cmp	r4, #48	; 0x30
   e53c6:	d0ab      	beq.n	e5320 <_strtoul_r+0x48>
   e53c8:	e7b2      	b.n	e5330 <_strtoul_r+0x58>
   e53ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e53ce:	bf00      	nop
   e53d0:	2003d5c0 	.word	0x2003d5c0

000e53d4 <strtoul>:
   e53d4:	4613      	mov	r3, r2
   e53d6:	460a      	mov	r2, r1
   e53d8:	4601      	mov	r1, r0
   e53da:	4802      	ldr	r0, [pc, #8]	; (e53e4 <strtoul+0x10>)
   e53dc:	6800      	ldr	r0, [r0, #0]
   e53de:	f7ff bf7b 	b.w	e52d8 <_strtoul_r>
   e53e2:	bf00      	nop
   e53e4:	2003d624 	.word	0x2003d624

000e53e8 <__get_current_time_locale>:
   e53e8:	4b04      	ldr	r3, [pc, #16]	; (e53fc <__get_current_time_locale+0x14>)
   e53ea:	4a05      	ldr	r2, [pc, #20]	; (e5400 <__get_current_time_locale+0x18>)
   e53ec:	6818      	ldr	r0, [r3, #0]
   e53ee:	4b05      	ldr	r3, [pc, #20]	; (e5404 <__get_current_time_locale+0x1c>)
   e53f0:	2800      	cmp	r0, #0
   e53f2:	bf14      	ite	ne
   e53f4:	4610      	movne	r0, r2
   e53f6:	4618      	moveq	r0, r3
   e53f8:	4770      	bx	lr
   e53fa:	bf00      	nop
   e53fc:	2003e6cc 	.word	0x2003e6cc
   e5400:	2003e6d0 	.word	0x2003e6d0
   e5404:	000e8730 	.word	0x000e8730

000e5408 <tolower>:
   e5408:	4b04      	ldr	r3, [pc, #16]	; (e541c <tolower+0x14>)
   e540a:	681b      	ldr	r3, [r3, #0]
   e540c:	4403      	add	r3, r0
   e540e:	785b      	ldrb	r3, [r3, #1]
   e5410:	f003 0303 	and.w	r3, r3, #3
   e5414:	2b01      	cmp	r3, #1
   e5416:	bf08      	it	eq
   e5418:	3020      	addeq	r0, #32
   e541a:	4770      	bx	lr
   e541c:	2003d5c0 	.word	0x2003d5c0

000e5420 <__tzcalc_limits>:
   e5420:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e5424:	4604      	mov	r4, r0
   e5426:	f000 fda5 	bl	e5f74 <__gettzinfo>
   e542a:	f240 73b1 	movw	r3, #1969	; 0x7b1
   e542e:	429c      	cmp	r4, r3
   e5430:	f340 8096 	ble.w	e5560 <__tzcalc_limits+0x140>
   e5434:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   e5438:	18e3      	adds	r3, r4, r3
   e543a:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   e543e:	109b      	asrs	r3, r3, #2
   e5440:	f240 156d 	movw	r5, #365	; 0x16d
   e5444:	fb05 3502 	mla	r5, r5, r2, r3
   e5448:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   e544c:	f06f 0363 	mvn.w	r3, #99	; 0x63
   e5450:	fb92 f3f3 	sdiv	r3, r2, r3
   e5454:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   e5458:	442b      	add	r3, r5
   e545a:	18a5      	adds	r5, r4, r2
   e545c:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e5460:	fb95 f5f2 	sdiv	r5, r5, r2
   e5464:	441d      	add	r5, r3
   e5466:	2364      	movs	r3, #100	; 0x64
   e5468:	fb94 f7f2 	sdiv	r7, r4, r2
   e546c:	fb94 f6f3 	sdiv	r6, r4, r3
   e5470:	fb02 4717 	mls	r7, r2, r7, r4
   e5474:	fb03 4616 	mls	r6, r3, r6, r4
   e5478:	f100 0338 	add.w	r3, r0, #56	; 0x38
   e547c:	fab7 fe87 	clz	lr, r7
   e5480:	9301      	str	r3, [sp, #4]
   e5482:	f004 0303 	and.w	r3, r4, #3
   e5486:	6044      	str	r4, [r0, #4]
   e5488:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   e548c:	4601      	mov	r1, r0
   e548e:	9300      	str	r3, [sp, #0]
   e5490:	f04f 0c07 	mov.w	ip, #7
   e5494:	7a0b      	ldrb	r3, [r1, #8]
   e5496:	2b4a      	cmp	r3, #74	; 0x4a
   e5498:	d10e      	bne.n	e54b8 <__tzcalc_limits+0x98>
   e549a:	694b      	ldr	r3, [r1, #20]
   e549c:	9a00      	ldr	r2, [sp, #0]
   e549e:	18ec      	adds	r4, r5, r3
   e54a0:	b902      	cbnz	r2, e54a4 <__tzcalc_limits+0x84>
   e54a2:	b906      	cbnz	r6, e54a6 <__tzcalc_limits+0x86>
   e54a4:	b927      	cbnz	r7, e54b0 <__tzcalc_limits+0x90>
   e54a6:	2b3b      	cmp	r3, #59	; 0x3b
   e54a8:	bfd4      	ite	le
   e54aa:	2300      	movle	r3, #0
   e54ac:	2301      	movgt	r3, #1
   e54ae:	e000      	b.n	e54b2 <__tzcalc_limits+0x92>
   e54b0:	2300      	movs	r3, #0
   e54b2:	4423      	add	r3, r4
   e54b4:	3b01      	subs	r3, #1
   e54b6:	e03f      	b.n	e5538 <__tzcalc_limits+0x118>
   e54b8:	2b44      	cmp	r3, #68	; 0x44
   e54ba:	d102      	bne.n	e54c2 <__tzcalc_limits+0xa2>
   e54bc:	694b      	ldr	r3, [r1, #20]
   e54be:	442b      	add	r3, r5
   e54c0:	e03a      	b.n	e5538 <__tzcalc_limits+0x118>
   e54c2:	9b00      	ldr	r3, [sp, #0]
   e54c4:	b92b      	cbnz	r3, e54d2 <__tzcalc_limits+0xb2>
   e54c6:	2e00      	cmp	r6, #0
   e54c8:	bf0c      	ite	eq
   e54ca:	46f0      	moveq	r8, lr
   e54cc:	f04f 0801 	movne.w	r8, #1
   e54d0:	e000      	b.n	e54d4 <__tzcalc_limits+0xb4>
   e54d2:	46f0      	mov	r8, lr
   e54d4:	4b24      	ldr	r3, [pc, #144]	; (e5568 <__tzcalc_limits+0x148>)
   e54d6:	68cc      	ldr	r4, [r1, #12]
   e54d8:	2230      	movs	r2, #48	; 0x30
   e54da:	fb02 3808 	mla	r8, r2, r8, r3
   e54de:	f1a8 0a04 	sub.w	sl, r8, #4
   e54e2:	46a9      	mov	r9, r5
   e54e4:	2301      	movs	r3, #1
   e54e6:	42a3      	cmp	r3, r4
   e54e8:	da04      	bge.n	e54f4 <__tzcalc_limits+0xd4>
   e54ea:	f85a bf04 	ldr.w	fp, [sl, #4]!
   e54ee:	3301      	adds	r3, #1
   e54f0:	44d9      	add	r9, fp
   e54f2:	e7f8      	b.n	e54e6 <__tzcalc_limits+0xc6>
   e54f4:	f109 0304 	add.w	r3, r9, #4
   e54f8:	fb93 fbfc 	sdiv	fp, r3, ip
   e54fc:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   e5500:	2c01      	cmp	r4, #1
   e5502:	ebca 0a03 	rsb	sl, sl, r3
   e5506:	694b      	ldr	r3, [r1, #20]
   e5508:	bfb8      	it	lt
   e550a:	2401      	movlt	r4, #1
   e550c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   e5510:	ebb3 0a0a 	subs.w	sl, r3, sl
   e5514:	690b      	ldr	r3, [r1, #16]
   e5516:	f104 34ff 	add.w	r4, r4, #4294967295
   e551a:	f103 33ff 	add.w	r3, r3, #4294967295
   e551e:	bf48      	it	mi
   e5520:	f10a 0a07 	addmi.w	sl, sl, #7
   e5524:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   e5528:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   e552c:	4453      	add	r3, sl
   e552e:	42a3      	cmp	r3, r4
   e5530:	db01      	blt.n	e5536 <__tzcalc_limits+0x116>
   e5532:	3b07      	subs	r3, #7
   e5534:	e7fb      	b.n	e552e <__tzcalc_limits+0x10e>
   e5536:	444b      	add	r3, r9
   e5538:	698c      	ldr	r4, [r1, #24]
   e553a:	4a0c      	ldr	r2, [pc, #48]	; (e556c <__tzcalc_limits+0x14c>)
   e553c:	fb02 4303 	mla	r3, r2, r3, r4
   e5540:	6a0c      	ldr	r4, [r1, #32]
   e5542:	4423      	add	r3, r4
   e5544:	f841 3f1c 	str.w	r3, [r1, #28]!
   e5548:	9b01      	ldr	r3, [sp, #4]
   e554a:	4299      	cmp	r1, r3
   e554c:	d1a2      	bne.n	e5494 <__tzcalc_limits+0x74>
   e554e:	69c3      	ldr	r3, [r0, #28]
   e5550:	6b82      	ldr	r2, [r0, #56]	; 0x38
   e5552:	4293      	cmp	r3, r2
   e5554:	bfac      	ite	ge
   e5556:	2300      	movge	r3, #0
   e5558:	2301      	movlt	r3, #1
   e555a:	6003      	str	r3, [r0, #0]
   e555c:	2001      	movs	r0, #1
   e555e:	e000      	b.n	e5562 <__tzcalc_limits+0x142>
   e5560:	2000      	movs	r0, #0
   e5562:	b003      	add	sp, #12
   e5564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e5568:	000e84ec 	.word	0x000e84ec
   e556c:	00015180 	.word	0x00015180

000e5570 <__tz_lock>:
   e5570:	4770      	bx	lr

000e5572 <__tz_unlock>:
   e5572:	4770      	bx	lr

000e5574 <_tzset_unlocked>:
   e5574:	4b01      	ldr	r3, [pc, #4]	; (e557c <_tzset_unlocked+0x8>)
   e5576:	6818      	ldr	r0, [r3, #0]
   e5578:	f000 b802 	b.w	e5580 <_tzset_unlocked_r>
   e557c:	2003d624 	.word	0x2003d624

000e5580 <_tzset_unlocked_r>:
   e5580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e5584:	b08d      	sub	sp, #52	; 0x34
   e5586:	4607      	mov	r7, r0
   e5588:	f000 fcf4 	bl	e5f74 <__gettzinfo>
   e558c:	49b0      	ldr	r1, [pc, #704]	; (e5850 <_tzset_unlocked_r+0x2d0>)
   e558e:	4eb1      	ldr	r6, [pc, #708]	; (e5854 <_tzset_unlocked_r+0x2d4>)
   e5590:	4604      	mov	r4, r0
   e5592:	4638      	mov	r0, r7
   e5594:	f000 fce6 	bl	e5f64 <_getenv_r>
   e5598:	4605      	mov	r5, r0
   e559a:	b960      	cbnz	r0, e55b6 <_tzset_unlocked_r+0x36>
   e559c:	4bae      	ldr	r3, [pc, #696]	; (e5858 <_tzset_unlocked_r+0x2d8>)
   e559e:	4aaf      	ldr	r2, [pc, #700]	; (e585c <_tzset_unlocked_r+0x2dc>)
   e55a0:	6018      	str	r0, [r3, #0]
   e55a2:	4baf      	ldr	r3, [pc, #700]	; (e5860 <_tzset_unlocked_r+0x2e0>)
   e55a4:	6018      	str	r0, [r3, #0]
   e55a6:	4baf      	ldr	r3, [pc, #700]	; (e5864 <_tzset_unlocked_r+0x2e4>)
   e55a8:	6830      	ldr	r0, [r6, #0]
   e55aa:	601a      	str	r2, [r3, #0]
   e55ac:	605a      	str	r2, [r3, #4]
   e55ae:	f7f5 faad 	bl	dab0c <free>
   e55b2:	6035      	str	r5, [r6, #0]
   e55b4:	e148      	b.n	e5848 <_tzset_unlocked_r+0x2c8>
   e55b6:	6831      	ldr	r1, [r6, #0]
   e55b8:	b979      	cbnz	r1, e55da <_tzset_unlocked_r+0x5a>
   e55ba:	6830      	ldr	r0, [r6, #0]
   e55bc:	f7f5 faa6 	bl	dab0c <free>
   e55c0:	4628      	mov	r0, r5
   e55c2:	f7fe ffa3 	bl	e450c <strlen>
   e55c6:	1c41      	adds	r1, r0, #1
   e55c8:	4638      	mov	r0, r7
   e55ca:	f7f5 fadf 	bl	dab8c <_malloc_r>
   e55ce:	6030      	str	r0, [r6, #0]
   e55d0:	b148      	cbz	r0, e55e6 <_tzset_unlocked_r+0x66>
   e55d2:	4629      	mov	r1, r5
   e55d4:	f7fe fa62 	bl	e3a9c <strcpy>
   e55d8:	e005      	b.n	e55e6 <_tzset_unlocked_r+0x66>
   e55da:	f7fe fa55 	bl	e3a88 <strcmp>
   e55de:	2800      	cmp	r0, #0
   e55e0:	f000 8132 	beq.w	e5848 <_tzset_unlocked_r+0x2c8>
   e55e4:	e7e9      	b.n	e55ba <_tzset_unlocked_r+0x3a>
   e55e6:	782b      	ldrb	r3, [r5, #0]
   e55e8:	4a9f      	ldr	r2, [pc, #636]	; (e5868 <_tzset_unlocked_r+0x2e8>)
   e55ea:	49a0      	ldr	r1, [pc, #640]	; (e586c <_tzset_unlocked_r+0x2ec>)
   e55ec:	2b3a      	cmp	r3, #58	; 0x3a
   e55ee:	bf08      	it	eq
   e55f0:	3501      	addeq	r5, #1
   e55f2:	ae0a      	add	r6, sp, #40	; 0x28
   e55f4:	4633      	mov	r3, r6
   e55f6:	4628      	mov	r0, r5
   e55f8:	f7f5 faa0 	bl	dab3c <siscanf>
   e55fc:	2800      	cmp	r0, #0
   e55fe:	f340 8123 	ble.w	e5848 <_tzset_unlocked_r+0x2c8>
   e5602:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e5604:	18ef      	adds	r7, r5, r3
   e5606:	5ceb      	ldrb	r3, [r5, r3]
   e5608:	2b2d      	cmp	r3, #45	; 0x2d
   e560a:	d103      	bne.n	e5614 <_tzset_unlocked_r+0x94>
   e560c:	3701      	adds	r7, #1
   e560e:	f04f 35ff 	mov.w	r5, #4294967295
   e5612:	e003      	b.n	e561c <_tzset_unlocked_r+0x9c>
   e5614:	2b2b      	cmp	r3, #43	; 0x2b
   e5616:	bf08      	it	eq
   e5618:	3701      	addeq	r7, #1
   e561a:	2501      	movs	r5, #1
   e561c:	f10d 0a20 	add.w	sl, sp, #32
   e5620:	f10d 0b1e 	add.w	fp, sp, #30
   e5624:	f04f 0800 	mov.w	r8, #0
   e5628:	9603      	str	r6, [sp, #12]
   e562a:	f8cd a008 	str.w	sl, [sp, #8]
   e562e:	9601      	str	r6, [sp, #4]
   e5630:	f8cd b000 	str.w	fp, [sp]
   e5634:	4633      	mov	r3, r6
   e5636:	aa07      	add	r2, sp, #28
   e5638:	498d      	ldr	r1, [pc, #564]	; (e5870 <_tzset_unlocked_r+0x2f0>)
   e563a:	f8ad 801e 	strh.w	r8, [sp, #30]
   e563e:	4638      	mov	r0, r7
   e5640:	f8ad 8020 	strh.w	r8, [sp, #32]
   e5644:	f7f5 fa7a 	bl	dab3c <siscanf>
   e5648:	4540      	cmp	r0, r8
   e564a:	f340 80fd 	ble.w	e5848 <_tzset_unlocked_r+0x2c8>
   e564e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   e5652:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   e5656:	f8df 9224 	ldr.w	r9, [pc, #548]	; e587c <_tzset_unlocked_r+0x2fc>
   e565a:	213c      	movs	r1, #60	; 0x3c
   e565c:	fb01 3302 	mla	r3, r1, r2, r3
   e5660:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   e5664:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   e5668:	fb01 3302 	mla	r3, r1, r2, r3
   e566c:	435d      	muls	r5, r3
   e566e:	6225      	str	r5, [r4, #32]
   e5670:	4d7c      	ldr	r5, [pc, #496]	; (e5864 <_tzset_unlocked_r+0x2e4>)
   e5672:	4b7d      	ldr	r3, [pc, #500]	; (e5868 <_tzset_unlocked_r+0x2e8>)
   e5674:	602b      	str	r3, [r5, #0]
   e5676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e5678:	497c      	ldr	r1, [pc, #496]	; (e586c <_tzset_unlocked_r+0x2ec>)
   e567a:	441f      	add	r7, r3
   e567c:	464a      	mov	r2, r9
   e567e:	4633      	mov	r3, r6
   e5680:	4638      	mov	r0, r7
   e5682:	f7f5 fa5b 	bl	dab3c <siscanf>
   e5686:	4540      	cmp	r0, r8
   e5688:	dc08      	bgt.n	e569c <_tzset_unlocked_r+0x11c>
   e568a:	682b      	ldr	r3, [r5, #0]
   e568c:	606b      	str	r3, [r5, #4]
   e568e:	4b72      	ldr	r3, [pc, #456]	; (e5858 <_tzset_unlocked_r+0x2d8>)
   e5690:	6a22      	ldr	r2, [r4, #32]
   e5692:	601a      	str	r2, [r3, #0]
   e5694:	4b72      	ldr	r3, [pc, #456]	; (e5860 <_tzset_unlocked_r+0x2e0>)
   e5696:	f8c3 8000 	str.w	r8, [r3]
   e569a:	e0d5      	b.n	e5848 <_tzset_unlocked_r+0x2c8>
   e569c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e569e:	f8c5 9004 	str.w	r9, [r5, #4]
   e56a2:	18fd      	adds	r5, r7, r3
   e56a4:	5cfb      	ldrb	r3, [r7, r3]
   e56a6:	2b2d      	cmp	r3, #45	; 0x2d
   e56a8:	d103      	bne.n	e56b2 <_tzset_unlocked_r+0x132>
   e56aa:	3501      	adds	r5, #1
   e56ac:	f04f 37ff 	mov.w	r7, #4294967295
   e56b0:	e003      	b.n	e56ba <_tzset_unlocked_r+0x13a>
   e56b2:	2b2b      	cmp	r3, #43	; 0x2b
   e56b4:	bf08      	it	eq
   e56b6:	3501      	addeq	r5, #1
   e56b8:	2701      	movs	r7, #1
   e56ba:	2300      	movs	r3, #0
   e56bc:	f8ad 301c 	strh.w	r3, [sp, #28]
   e56c0:	f8ad 301e 	strh.w	r3, [sp, #30]
   e56c4:	f8ad 3020 	strh.w	r3, [sp, #32]
   e56c8:	930a      	str	r3, [sp, #40]	; 0x28
   e56ca:	9603      	str	r6, [sp, #12]
   e56cc:	f8cd a008 	str.w	sl, [sp, #8]
   e56d0:	9601      	str	r6, [sp, #4]
   e56d2:	f8cd b000 	str.w	fp, [sp]
   e56d6:	4633      	mov	r3, r6
   e56d8:	aa07      	add	r2, sp, #28
   e56da:	4965      	ldr	r1, [pc, #404]	; (e5870 <_tzset_unlocked_r+0x2f0>)
   e56dc:	4628      	mov	r0, r5
   e56de:	f7f5 fa2d 	bl	dab3c <siscanf>
   e56e2:	2800      	cmp	r0, #0
   e56e4:	dc04      	bgt.n	e56f0 <_tzset_unlocked_r+0x170>
   e56e6:	6a23      	ldr	r3, [r4, #32]
   e56e8:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   e56ec:	63e3      	str	r3, [r4, #60]	; 0x3c
   e56ee:	e00e      	b.n	e570e <_tzset_unlocked_r+0x18e>
   e56f0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   e56f4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   e56f8:	213c      	movs	r1, #60	; 0x3c
   e56fa:	fb01 3302 	mla	r3, r1, r2, r3
   e56fe:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   e5702:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   e5706:	fb01 3302 	mla	r3, r1, r2, r3
   e570a:	435f      	muls	r7, r3
   e570c:	63e7      	str	r7, [r4, #60]	; 0x3c
   e570e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e5710:	4627      	mov	r7, r4
   e5712:	441d      	add	r5, r3
   e5714:	f04f 0900 	mov.w	r9, #0
   e5718:	782b      	ldrb	r3, [r5, #0]
   e571a:	2b2c      	cmp	r3, #44	; 0x2c
   e571c:	bf08      	it	eq
   e571e:	3501      	addeq	r5, #1
   e5720:	f895 8000 	ldrb.w	r8, [r5]
   e5724:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   e5728:	d126      	bne.n	e5778 <_tzset_unlocked_r+0x1f8>
   e572a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   e572e:	9302      	str	r3, [sp, #8]
   e5730:	ab09      	add	r3, sp, #36	; 0x24
   e5732:	9300      	str	r3, [sp, #0]
   e5734:	9603      	str	r6, [sp, #12]
   e5736:	9601      	str	r6, [sp, #4]
   e5738:	4633      	mov	r3, r6
   e573a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   e573e:	494d      	ldr	r1, [pc, #308]	; (e5874 <_tzset_unlocked_r+0x2f4>)
   e5740:	4628      	mov	r0, r5
   e5742:	f7f5 f9fb 	bl	dab3c <siscanf>
   e5746:	2803      	cmp	r0, #3
   e5748:	d17e      	bne.n	e5848 <_tzset_unlocked_r+0x2c8>
   e574a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   e574e:	1e4b      	subs	r3, r1, #1
   e5750:	2b0b      	cmp	r3, #11
   e5752:	d879      	bhi.n	e5848 <_tzset_unlocked_r+0x2c8>
   e5754:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   e5758:	1e53      	subs	r3, r2, #1
   e575a:	2b04      	cmp	r3, #4
   e575c:	d874      	bhi.n	e5848 <_tzset_unlocked_r+0x2c8>
   e575e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   e5762:	2b06      	cmp	r3, #6
   e5764:	d870      	bhi.n	e5848 <_tzset_unlocked_r+0x2c8>
   e5766:	f887 8008 	strb.w	r8, [r7, #8]
   e576a:	60f9      	str	r1, [r7, #12]
   e576c:	613a      	str	r2, [r7, #16]
   e576e:	617b      	str	r3, [r7, #20]
   e5770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e5772:	eb05 0803 	add.w	r8, r5, r3
   e5776:	e02a      	b.n	e57ce <_tzset_unlocked_r+0x24e>
   e5778:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   e577c:	bf06      	itte	eq
   e577e:	3501      	addeq	r5, #1
   e5780:	4643      	moveq	r3, r8
   e5782:	2344      	movne	r3, #68	; 0x44
   e5784:	220a      	movs	r2, #10
   e5786:	a90b      	add	r1, sp, #44	; 0x2c
   e5788:	4628      	mov	r0, r5
   e578a:	9305      	str	r3, [sp, #20]
   e578c:	f7ff fe22 	bl	e53d4 <strtoul>
   e5790:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   e5794:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   e5798:	4545      	cmp	r5, r8
   e579a:	9b05      	ldr	r3, [sp, #20]
   e579c:	d114      	bne.n	e57c8 <_tzset_unlocked_r+0x248>
   e579e:	234d      	movs	r3, #77	; 0x4d
   e57a0:	f1b9 0f00 	cmp.w	r9, #0
   e57a4:	d107      	bne.n	e57b6 <_tzset_unlocked_r+0x236>
   e57a6:	7223      	strb	r3, [r4, #8]
   e57a8:	2303      	movs	r3, #3
   e57aa:	60e3      	str	r3, [r4, #12]
   e57ac:	2302      	movs	r3, #2
   e57ae:	6123      	str	r3, [r4, #16]
   e57b0:	f8c4 9014 	str.w	r9, [r4, #20]
   e57b4:	e00b      	b.n	e57ce <_tzset_unlocked_r+0x24e>
   e57b6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   e57ba:	230b      	movs	r3, #11
   e57bc:	62a3      	str	r3, [r4, #40]	; 0x28
   e57be:	2301      	movs	r3, #1
   e57c0:	62e3      	str	r3, [r4, #44]	; 0x2c
   e57c2:	2300      	movs	r3, #0
   e57c4:	6323      	str	r3, [r4, #48]	; 0x30
   e57c6:	e002      	b.n	e57ce <_tzset_unlocked_r+0x24e>
   e57c8:	b280      	uxth	r0, r0
   e57ca:	723b      	strb	r3, [r7, #8]
   e57cc:	6178      	str	r0, [r7, #20]
   e57ce:	2302      	movs	r3, #2
   e57d0:	f8ad 301c 	strh.w	r3, [sp, #28]
   e57d4:	2300      	movs	r3, #0
   e57d6:	f8ad 301e 	strh.w	r3, [sp, #30]
   e57da:	f8ad 3020 	strh.w	r3, [sp, #32]
   e57de:	930a      	str	r3, [sp, #40]	; 0x28
   e57e0:	f898 3000 	ldrb.w	r3, [r8]
   e57e4:	2b2f      	cmp	r3, #47	; 0x2f
   e57e6:	d10b      	bne.n	e5800 <_tzset_unlocked_r+0x280>
   e57e8:	9603      	str	r6, [sp, #12]
   e57ea:	f8cd a008 	str.w	sl, [sp, #8]
   e57ee:	9601      	str	r6, [sp, #4]
   e57f0:	f8cd b000 	str.w	fp, [sp]
   e57f4:	4633      	mov	r3, r6
   e57f6:	aa07      	add	r2, sp, #28
   e57f8:	491f      	ldr	r1, [pc, #124]	; (e5878 <_tzset_unlocked_r+0x2f8>)
   e57fa:	4640      	mov	r0, r8
   e57fc:	f7f5 f99e 	bl	dab3c <siscanf>
   e5800:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   e5804:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   e5808:	213c      	movs	r1, #60	; 0x3c
   e580a:	fb01 3302 	mla	r3, r1, r2, r3
   e580e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   e5812:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   e5816:	fb01 3302 	mla	r3, r1, r2, r3
   e581a:	61bb      	str	r3, [r7, #24]
   e581c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   e581e:	f109 0901 	add.w	r9, r9, #1
   e5822:	f1b9 0f02 	cmp.w	r9, #2
   e5826:	4445      	add	r5, r8
   e5828:	f107 071c 	add.w	r7, r7, #28
   e582c:	f47f af74 	bne.w	e5718 <_tzset_unlocked_r+0x198>
   e5830:	6860      	ldr	r0, [r4, #4]
   e5832:	f7ff fdf5 	bl	e5420 <__tzcalc_limits>
   e5836:	4b08      	ldr	r3, [pc, #32]	; (e5858 <_tzset_unlocked_r+0x2d8>)
   e5838:	6a22      	ldr	r2, [r4, #32]
   e583a:	601a      	str	r2, [r3, #0]
   e583c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   e583e:	1a9b      	subs	r3, r3, r2
   e5840:	4a07      	ldr	r2, [pc, #28]	; (e5860 <_tzset_unlocked_r+0x2e0>)
   e5842:	bf18      	it	ne
   e5844:	2301      	movne	r3, #1
   e5846:	6013      	str	r3, [r2, #0]
   e5848:	b00d      	add	sp, #52	; 0x34
   e584a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e584e:	bf00      	nop
   e5850:	000e882c 	.word	0x000e882c
   e5854:	2003e7e4 	.word	0x2003e7e4
   e5858:	2003e7ec 	.word	0x2003e7ec
   e585c:	000e882f 	.word	0x000e882f
   e5860:	2003e7e8 	.word	0x2003e7e8
   e5864:	2003d660 	.word	0x2003d660
   e5868:	2003e7d7 	.word	0x2003e7d7
   e586c:	000e8833 	.word	0x000e8833
   e5870:	000e8856 	.word	0x000e8856
   e5874:	000e8842 	.word	0x000e8842
   e5878:	000e8855 	.word	0x000e8855
   e587c:	2003e7cc 	.word	0x2003e7cc

000e5880 <abs>:
   e5880:	2800      	cmp	r0, #0
   e5882:	bfb8      	it	lt
   e5884:	4240      	neglt	r0, r0
   e5886:	4770      	bx	lr

000e5888 <div>:
   e5888:	2900      	cmp	r1, #0
   e588a:	b510      	push	{r4, lr}
   e588c:	fb91 f4f2 	sdiv	r4, r1, r2
   e5890:	fb02 1314 	mls	r3, r2, r4, r1
   e5894:	db04      	blt.n	e58a0 <div+0x18>
   e5896:	2b00      	cmp	r3, #0
   e5898:	da07      	bge.n	e58aa <div+0x22>
   e589a:	3401      	adds	r4, #1
   e589c:	1a9b      	subs	r3, r3, r2
   e589e:	e004      	b.n	e58aa <div+0x22>
   e58a0:	2b00      	cmp	r3, #0
   e58a2:	bfc4      	itt	gt
   e58a4:	f104 34ff 	addgt.w	r4, r4, #4294967295
   e58a8:	189b      	addgt	r3, r3, r2
   e58aa:	6004      	str	r4, [r0, #0]
   e58ac:	6043      	str	r3, [r0, #4]
   e58ae:	bd10      	pop	{r4, pc}

000e58b0 <rshift>:
   e58b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   e58b2:	6906      	ldr	r6, [r0, #16]
   e58b4:	114b      	asrs	r3, r1, #5
   e58b6:	42b3      	cmp	r3, r6
   e58b8:	f100 0514 	add.w	r5, r0, #20
   e58bc:	da27      	bge.n	e590e <rshift+0x5e>
   e58be:	f011 011f 	ands.w	r1, r1, #31
   e58c2:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   e58c6:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   e58ca:	d101      	bne.n	e58d0 <rshift+0x20>
   e58cc:	4629      	mov	r1, r5
   e58ce:	e016      	b.n	e58fe <rshift+0x4e>
   e58d0:	1d14      	adds	r4, r2, #4
   e58d2:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   e58d6:	f1c1 0e20 	rsb	lr, r1, #32
   e58da:	40ca      	lsrs	r2, r1
   e58dc:	462b      	mov	r3, r5
   e58de:	42b4      	cmp	r4, r6
   e58e0:	d209      	bcs.n	e58f6 <rshift+0x46>
   e58e2:	6827      	ldr	r7, [r4, #0]
   e58e4:	fa07 f70e 	lsl.w	r7, r7, lr
   e58e8:	433a      	orrs	r2, r7
   e58ea:	f843 2b04 	str.w	r2, [r3], #4
   e58ee:	f854 2b04 	ldr.w	r2, [r4], #4
   e58f2:	40ca      	lsrs	r2, r1
   e58f4:	e7f3      	b.n	e58de <rshift+0x2e>
   e58f6:	601a      	str	r2, [r3, #0]
   e58f8:	b152      	cbz	r2, e5910 <rshift+0x60>
   e58fa:	3304      	adds	r3, #4
   e58fc:	e008      	b.n	e5910 <rshift+0x60>
   e58fe:	42b2      	cmp	r2, r6
   e5900:	460b      	mov	r3, r1
   e5902:	d205      	bcs.n	e5910 <rshift+0x60>
   e5904:	f852 3b04 	ldr.w	r3, [r2], #4
   e5908:	f841 3b04 	str.w	r3, [r1], #4
   e590c:	e7f7      	b.n	e58fe <rshift+0x4e>
   e590e:	462b      	mov	r3, r5
   e5910:	1b5b      	subs	r3, r3, r5
   e5912:	109b      	asrs	r3, r3, #2
   e5914:	6103      	str	r3, [r0, #16]
   e5916:	b903      	cbnz	r3, e591a <rshift+0x6a>
   e5918:	6143      	str	r3, [r0, #20]
   e591a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e591c <__hexdig_fun>:
   e591c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   e5920:	2b09      	cmp	r3, #9
   e5922:	d801      	bhi.n	e5928 <__hexdig_fun+0xc>
   e5924:	3820      	subs	r0, #32
   e5926:	e00a      	b.n	e593e <__hexdig_fun+0x22>
   e5928:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   e592c:	2b05      	cmp	r3, #5
   e592e:	d801      	bhi.n	e5934 <__hexdig_fun+0x18>
   e5930:	3847      	subs	r0, #71	; 0x47
   e5932:	e004      	b.n	e593e <__hexdig_fun+0x22>
   e5934:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   e5938:	2b05      	cmp	r3, #5
   e593a:	d802      	bhi.n	e5942 <__hexdig_fun+0x26>
   e593c:	3827      	subs	r0, #39	; 0x27
   e593e:	b2c0      	uxtb	r0, r0
   e5940:	4770      	bx	lr
   e5942:	2000      	movs	r0, #0
   e5944:	4770      	bx	lr

000e5946 <__gethex>:
   e5946:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e594a:	b08b      	sub	sp, #44	; 0x2c
   e594c:	468a      	mov	sl, r1
   e594e:	4690      	mov	r8, r2
   e5950:	9306      	str	r3, [sp, #24]
   e5952:	9002      	str	r0, [sp, #8]
   e5954:	f7fd fe0a 	bl	e356c <_localeconv_r>
   e5958:	6803      	ldr	r3, [r0, #0]
   e595a:	9303      	str	r3, [sp, #12]
   e595c:	4618      	mov	r0, r3
   e595e:	f7fe fdd5 	bl	e450c <strlen>
   e5962:	9b03      	ldr	r3, [sp, #12]
   e5964:	9001      	str	r0, [sp, #4]
   e5966:	4403      	add	r3, r0
   e5968:	f04f 0b00 	mov.w	fp, #0
   e596c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   e5970:	9307      	str	r3, [sp, #28]
   e5972:	f8da 3000 	ldr.w	r3, [sl]
   e5976:	3302      	adds	r3, #2
   e5978:	461f      	mov	r7, r3
   e597a:	f813 0b01 	ldrb.w	r0, [r3], #1
   e597e:	2830      	cmp	r0, #48	; 0x30
   e5980:	d102      	bne.n	e5988 <__gethex+0x42>
   e5982:	f10b 0b01 	add.w	fp, fp, #1
   e5986:	e7f7      	b.n	e5978 <__gethex+0x32>
   e5988:	f7ff ffc8 	bl	e591c <__hexdig_fun>
   e598c:	4604      	mov	r4, r0
   e598e:	b9e0      	cbnz	r0, e59ca <__gethex+0x84>
   e5990:	9a01      	ldr	r2, [sp, #4]
   e5992:	9903      	ldr	r1, [sp, #12]
   e5994:	4638      	mov	r0, r7
   e5996:	f7fe fdc1 	bl	e451c <strncmp>
   e599a:	2800      	cmp	r0, #0
   e599c:	d134      	bne.n	e5a08 <__gethex+0xc2>
   e599e:	9b01      	ldr	r3, [sp, #4]
   e59a0:	5cf8      	ldrb	r0, [r7, r3]
   e59a2:	18fe      	adds	r6, r7, r3
   e59a4:	f7ff ffba 	bl	e591c <__hexdig_fun>
   e59a8:	b380      	cbz	r0, e5a0c <__gethex+0xc6>
   e59aa:	4633      	mov	r3, r6
   e59ac:	7818      	ldrb	r0, [r3, #0]
   e59ae:	2830      	cmp	r0, #48	; 0x30
   e59b0:	461f      	mov	r7, r3
   e59b2:	f103 0301 	add.w	r3, r3, #1
   e59b6:	d0f9      	beq.n	e59ac <__gethex+0x66>
   e59b8:	f7ff ffb0 	bl	e591c <__hexdig_fun>
   e59bc:	fab0 f580 	clz	r5, r0
   e59c0:	096d      	lsrs	r5, r5, #5
   e59c2:	4634      	mov	r4, r6
   e59c4:	f04f 0b01 	mov.w	fp, #1
   e59c8:	e001      	b.n	e59ce <__gethex+0x88>
   e59ca:	2500      	movs	r5, #0
   e59cc:	462c      	mov	r4, r5
   e59ce:	463a      	mov	r2, r7
   e59d0:	4616      	mov	r6, r2
   e59d2:	3201      	adds	r2, #1
   e59d4:	7830      	ldrb	r0, [r6, #0]
   e59d6:	f7ff ffa1 	bl	e591c <__hexdig_fun>
   e59da:	2800      	cmp	r0, #0
   e59dc:	d1f8      	bne.n	e59d0 <__gethex+0x8a>
   e59de:	9a01      	ldr	r2, [sp, #4]
   e59e0:	9903      	ldr	r1, [sp, #12]
   e59e2:	4630      	mov	r0, r6
   e59e4:	f7fe fd9a 	bl	e451c <strncmp>
   e59e8:	b950      	cbnz	r0, e5a00 <__gethex+0xba>
   e59ea:	b954      	cbnz	r4, e5a02 <__gethex+0xbc>
   e59ec:	9b01      	ldr	r3, [sp, #4]
   e59ee:	18f4      	adds	r4, r6, r3
   e59f0:	4622      	mov	r2, r4
   e59f2:	4616      	mov	r6, r2
   e59f4:	3201      	adds	r2, #1
   e59f6:	7830      	ldrb	r0, [r6, #0]
   e59f8:	f7ff ff90 	bl	e591c <__hexdig_fun>
   e59fc:	2800      	cmp	r0, #0
   e59fe:	d1f8      	bne.n	e59f2 <__gethex+0xac>
   e5a00:	b134      	cbz	r4, e5a10 <__gethex+0xca>
   e5a02:	1ba4      	subs	r4, r4, r6
   e5a04:	00a4      	lsls	r4, r4, #2
   e5a06:	e003      	b.n	e5a10 <__gethex+0xca>
   e5a08:	463e      	mov	r6, r7
   e5a0a:	e000      	b.n	e5a0e <__gethex+0xc8>
   e5a0c:	4604      	mov	r4, r0
   e5a0e:	2501      	movs	r5, #1
   e5a10:	7833      	ldrb	r3, [r6, #0]
   e5a12:	2b50      	cmp	r3, #80	; 0x50
   e5a14:	d001      	beq.n	e5a1a <__gethex+0xd4>
   e5a16:	2b70      	cmp	r3, #112	; 0x70
   e5a18:	d12a      	bne.n	e5a70 <__gethex+0x12a>
   e5a1a:	7873      	ldrb	r3, [r6, #1]
   e5a1c:	2b2b      	cmp	r3, #43	; 0x2b
   e5a1e:	d008      	beq.n	e5a32 <__gethex+0xec>
   e5a20:	2b2d      	cmp	r3, #45	; 0x2d
   e5a22:	d003      	beq.n	e5a2c <__gethex+0xe6>
   e5a24:	1c71      	adds	r1, r6, #1
   e5a26:	f04f 0900 	mov.w	r9, #0
   e5a2a:	e005      	b.n	e5a38 <__gethex+0xf2>
   e5a2c:	f04f 0901 	mov.w	r9, #1
   e5a30:	e001      	b.n	e5a36 <__gethex+0xf0>
   e5a32:	f04f 0900 	mov.w	r9, #0
   e5a36:	1cb1      	adds	r1, r6, #2
   e5a38:	7808      	ldrb	r0, [r1, #0]
   e5a3a:	f7ff ff6f 	bl	e591c <__hexdig_fun>
   e5a3e:	1e43      	subs	r3, r0, #1
   e5a40:	b2db      	uxtb	r3, r3
   e5a42:	2b18      	cmp	r3, #24
   e5a44:	d814      	bhi.n	e5a70 <__gethex+0x12a>
   e5a46:	f1a0 0210 	sub.w	r2, r0, #16
   e5a4a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   e5a4e:	f7ff ff65 	bl	e591c <__hexdig_fun>
   e5a52:	1e43      	subs	r3, r0, #1
   e5a54:	b2db      	uxtb	r3, r3
   e5a56:	2b18      	cmp	r3, #24
   e5a58:	d804      	bhi.n	e5a64 <__gethex+0x11e>
   e5a5a:	230a      	movs	r3, #10
   e5a5c:	fb03 0202 	mla	r2, r3, r2, r0
   e5a60:	3a10      	subs	r2, #16
   e5a62:	e7f2      	b.n	e5a4a <__gethex+0x104>
   e5a64:	f1b9 0f00 	cmp.w	r9, #0
   e5a68:	d000      	beq.n	e5a6c <__gethex+0x126>
   e5a6a:	4252      	negs	r2, r2
   e5a6c:	4414      	add	r4, r2
   e5a6e:	e000      	b.n	e5a72 <__gethex+0x12c>
   e5a70:	4631      	mov	r1, r6
   e5a72:	f8ca 1000 	str.w	r1, [sl]
   e5a76:	b12d      	cbz	r5, e5a84 <__gethex+0x13e>
   e5a78:	f1bb 0f00 	cmp.w	fp, #0
   e5a7c:	bf14      	ite	ne
   e5a7e:	2000      	movne	r0, #0
   e5a80:	2006      	moveq	r0, #6
   e5a82:	e17c      	b.n	e5d7e <__gethex+0x438>
   e5a84:	1bf3      	subs	r3, r6, r7
   e5a86:	3b01      	subs	r3, #1
   e5a88:	4629      	mov	r1, r5
   e5a8a:	2b07      	cmp	r3, #7
   e5a8c:	dd02      	ble.n	e5a94 <__gethex+0x14e>
   e5a8e:	3101      	adds	r1, #1
   e5a90:	105b      	asrs	r3, r3, #1
   e5a92:	e7fa      	b.n	e5a8a <__gethex+0x144>
   e5a94:	9802      	ldr	r0, [sp, #8]
   e5a96:	f000 fb0d 	bl	e60b4 <_Balloc>
   e5a9a:	9b01      	ldr	r3, [sp, #4]
   e5a9c:	f100 0a14 	add.w	sl, r0, #20
   e5aa0:	f04f 0900 	mov.w	r9, #0
   e5aa4:	f1c3 0301 	rsb	r3, r3, #1
   e5aa8:	4605      	mov	r5, r0
   e5aaa:	f8cd a010 	str.w	sl, [sp, #16]
   e5aae:	46cb      	mov	fp, r9
   e5ab0:	9308      	str	r3, [sp, #32]
   e5ab2:	42b7      	cmp	r7, r6
   e5ab4:	d22f      	bcs.n	e5b16 <__gethex+0x1d0>
   e5ab6:	1e73      	subs	r3, r6, #1
   e5ab8:	9305      	str	r3, [sp, #20]
   e5aba:	9a07      	ldr	r2, [sp, #28]
   e5abc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   e5ac0:	4293      	cmp	r3, r2
   e5ac2:	d00b      	beq.n	e5adc <__gethex+0x196>
   e5ac4:	f1bb 0f20 	cmp.w	fp, #32
   e5ac8:	d116      	bne.n	e5af8 <__gethex+0x1b2>
   e5aca:	9b04      	ldr	r3, [sp, #16]
   e5acc:	f8c3 9000 	str.w	r9, [r3]
   e5ad0:	3304      	adds	r3, #4
   e5ad2:	f04f 0900 	mov.w	r9, #0
   e5ad6:	9304      	str	r3, [sp, #16]
   e5ad8:	46cb      	mov	fp, r9
   e5ada:	e00d      	b.n	e5af8 <__gethex+0x1b2>
   e5adc:	9b05      	ldr	r3, [sp, #20]
   e5ade:	9a08      	ldr	r2, [sp, #32]
   e5ae0:	4413      	add	r3, r2
   e5ae2:	429f      	cmp	r7, r3
   e5ae4:	d8ee      	bhi.n	e5ac4 <__gethex+0x17e>
   e5ae6:	4618      	mov	r0, r3
   e5ae8:	9a01      	ldr	r2, [sp, #4]
   e5aea:	9903      	ldr	r1, [sp, #12]
   e5aec:	9309      	str	r3, [sp, #36]	; 0x24
   e5aee:	f7fe fd15 	bl	e451c <strncmp>
   e5af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e5af4:	b168      	cbz	r0, e5b12 <__gethex+0x1cc>
   e5af6:	e7e5      	b.n	e5ac4 <__gethex+0x17e>
   e5af8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   e5afc:	f7ff ff0e 	bl	e591c <__hexdig_fun>
   e5b00:	f000 000f 	and.w	r0, r0, #15
   e5b04:	fa00 f00b 	lsl.w	r0, r0, fp
   e5b08:	9b05      	ldr	r3, [sp, #20]
   e5b0a:	ea49 0900 	orr.w	r9, r9, r0
   e5b0e:	f10b 0b04 	add.w	fp, fp, #4
   e5b12:	461e      	mov	r6, r3
   e5b14:	e7cd      	b.n	e5ab2 <__gethex+0x16c>
   e5b16:	9804      	ldr	r0, [sp, #16]
   e5b18:	f840 9b04 	str.w	r9, [r0], #4
   e5b1c:	ebca 0000 	rsb	r0, sl, r0
   e5b20:	1080      	asrs	r0, r0, #2
   e5b22:	6128      	str	r0, [r5, #16]
   e5b24:	0147      	lsls	r7, r0, #5
   e5b26:	4648      	mov	r0, r9
   e5b28:	f000 fb89 	bl	e623e <__hi0bits>
   e5b2c:	f8d8 6000 	ldr.w	r6, [r8]
   e5b30:	1a38      	subs	r0, r7, r0
   e5b32:	42b0      	cmp	r0, r6
   e5b34:	dd26      	ble.n	e5b84 <__gethex+0x23e>
   e5b36:	1b87      	subs	r7, r0, r6
   e5b38:	4639      	mov	r1, r7
   e5b3a:	4628      	mov	r0, r5
   e5b3c:	f000 fe87 	bl	e684e <__any_on>
   e5b40:	b1c8      	cbz	r0, e5b76 <__gethex+0x230>
   e5b42:	1e7b      	subs	r3, r7, #1
   e5b44:	1159      	asrs	r1, r3, #5
   e5b46:	f003 021f 	and.w	r2, r3, #31
   e5b4a:	f04f 0901 	mov.w	r9, #1
   e5b4e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   e5b52:	fa09 f202 	lsl.w	r2, r9, r2
   e5b56:	420a      	tst	r2, r1
   e5b58:	d00e      	beq.n	e5b78 <__gethex+0x232>
   e5b5a:	454b      	cmp	r3, r9
   e5b5c:	dc02      	bgt.n	e5b64 <__gethex+0x21e>
   e5b5e:	f04f 0902 	mov.w	r9, #2
   e5b62:	e009      	b.n	e5b78 <__gethex+0x232>
   e5b64:	1eb9      	subs	r1, r7, #2
   e5b66:	4628      	mov	r0, r5
   e5b68:	f000 fe71 	bl	e684e <__any_on>
   e5b6c:	2800      	cmp	r0, #0
   e5b6e:	d0f6      	beq.n	e5b5e <__gethex+0x218>
   e5b70:	f04f 0903 	mov.w	r9, #3
   e5b74:	e000      	b.n	e5b78 <__gethex+0x232>
   e5b76:	4681      	mov	r9, r0
   e5b78:	4639      	mov	r1, r7
   e5b7a:	4628      	mov	r0, r5
   e5b7c:	f7ff fe98 	bl	e58b0 <rshift>
   e5b80:	443c      	add	r4, r7
   e5b82:	e00c      	b.n	e5b9e <__gethex+0x258>
   e5b84:	da09      	bge.n	e5b9a <__gethex+0x254>
   e5b86:	1a37      	subs	r7, r6, r0
   e5b88:	4629      	mov	r1, r5
   e5b8a:	463a      	mov	r2, r7
   e5b8c:	9802      	ldr	r0, [sp, #8]
   e5b8e:	f000 fc8b 	bl	e64a8 <__lshift>
   e5b92:	1be4      	subs	r4, r4, r7
   e5b94:	4605      	mov	r5, r0
   e5b96:	f100 0a14 	add.w	sl, r0, #20
   e5b9a:	f04f 0900 	mov.w	r9, #0
   e5b9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   e5ba2:	429c      	cmp	r4, r3
   e5ba4:	dd08      	ble.n	e5bb8 <__gethex+0x272>
   e5ba6:	9802      	ldr	r0, [sp, #8]
   e5ba8:	4629      	mov	r1, r5
   e5baa:	f000 fab8 	bl	e611e <_Bfree>
   e5bae:	9a14      	ldr	r2, [sp, #80]	; 0x50
   e5bb0:	2300      	movs	r3, #0
   e5bb2:	6013      	str	r3, [r2, #0]
   e5bb4:	20a3      	movs	r0, #163	; 0xa3
   e5bb6:	e0e2      	b.n	e5d7e <__gethex+0x438>
   e5bb8:	f8d8 0004 	ldr.w	r0, [r8, #4]
   e5bbc:	4284      	cmp	r4, r0
   e5bbe:	da53      	bge.n	e5c68 <__gethex+0x322>
   e5bc0:	1b04      	subs	r4, r0, r4
   e5bc2:	42a6      	cmp	r6, r4
   e5bc4:	dc2e      	bgt.n	e5c24 <__gethex+0x2de>
   e5bc6:	f8d8 300c 	ldr.w	r3, [r8, #12]
   e5bca:	2b02      	cmp	r3, #2
   e5bcc:	d01a      	beq.n	e5c04 <__gethex+0x2be>
   e5bce:	2b03      	cmp	r3, #3
   e5bd0:	d01c      	beq.n	e5c0c <__gethex+0x2c6>
   e5bd2:	2b01      	cmp	r3, #1
   e5bd4:	d11d      	bne.n	e5c12 <__gethex+0x2cc>
   e5bd6:	42a6      	cmp	r6, r4
   e5bd8:	d11b      	bne.n	e5c12 <__gethex+0x2cc>
   e5bda:	2e01      	cmp	r6, #1
   e5bdc:	dc0b      	bgt.n	e5bf6 <__gethex+0x2b0>
   e5bde:	9a06      	ldr	r2, [sp, #24]
   e5be0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   e5be4:	6013      	str	r3, [r2, #0]
   e5be6:	2301      	movs	r3, #1
   e5be8:	612b      	str	r3, [r5, #16]
   e5bea:	f8ca 3000 	str.w	r3, [sl]
   e5bee:	9b14      	ldr	r3, [sp, #80]	; 0x50
   e5bf0:	2062      	movs	r0, #98	; 0x62
   e5bf2:	601d      	str	r5, [r3, #0]
   e5bf4:	e0c3      	b.n	e5d7e <__gethex+0x438>
   e5bf6:	1e71      	subs	r1, r6, #1
   e5bf8:	4628      	mov	r0, r5
   e5bfa:	f000 fe28 	bl	e684e <__any_on>
   e5bfe:	2800      	cmp	r0, #0
   e5c00:	d1ed      	bne.n	e5bde <__gethex+0x298>
   e5c02:	e006      	b.n	e5c12 <__gethex+0x2cc>
   e5c04:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e5c06:	2b00      	cmp	r3, #0
   e5c08:	d0e9      	beq.n	e5bde <__gethex+0x298>
   e5c0a:	e002      	b.n	e5c12 <__gethex+0x2cc>
   e5c0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e5c0e:	2b00      	cmp	r3, #0
   e5c10:	d1e5      	bne.n	e5bde <__gethex+0x298>
   e5c12:	9802      	ldr	r0, [sp, #8]
   e5c14:	4629      	mov	r1, r5
   e5c16:	f000 fa82 	bl	e611e <_Bfree>
   e5c1a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   e5c1c:	2300      	movs	r3, #0
   e5c1e:	6013      	str	r3, [r2, #0]
   e5c20:	2050      	movs	r0, #80	; 0x50
   e5c22:	e0ac      	b.n	e5d7e <__gethex+0x438>
   e5c24:	1e67      	subs	r7, r4, #1
   e5c26:	f1b9 0f00 	cmp.w	r9, #0
   e5c2a:	d106      	bne.n	e5c3a <__gethex+0x2f4>
   e5c2c:	b13f      	cbz	r7, e5c3e <__gethex+0x2f8>
   e5c2e:	4639      	mov	r1, r7
   e5c30:	4628      	mov	r0, r5
   e5c32:	f000 fe0c 	bl	e684e <__any_on>
   e5c36:	4681      	mov	r9, r0
   e5c38:	e001      	b.n	e5c3e <__gethex+0x2f8>
   e5c3a:	f04f 0901 	mov.w	r9, #1
   e5c3e:	117a      	asrs	r2, r7, #5
   e5c40:	2301      	movs	r3, #1
   e5c42:	f007 071f 	and.w	r7, r7, #31
   e5c46:	fa03 f707 	lsl.w	r7, r3, r7
   e5c4a:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   e5c4e:	4621      	mov	r1, r4
   e5c50:	421f      	tst	r7, r3
   e5c52:	4628      	mov	r0, r5
   e5c54:	bf18      	it	ne
   e5c56:	f049 0902 	orrne.w	r9, r9, #2
   e5c5a:	1b36      	subs	r6, r6, r4
   e5c5c:	f7ff fe28 	bl	e58b0 <rshift>
   e5c60:	2702      	movs	r7, #2
   e5c62:	f8d8 4004 	ldr.w	r4, [r8, #4]
   e5c66:	e000      	b.n	e5c6a <__gethex+0x324>
   e5c68:	2701      	movs	r7, #1
   e5c6a:	f1b9 0f00 	cmp.w	r9, #0
   e5c6e:	f000 8081 	beq.w	e5d74 <__gethex+0x42e>
   e5c72:	f8d8 300c 	ldr.w	r3, [r8, #12]
   e5c76:	2b02      	cmp	r3, #2
   e5c78:	d00e      	beq.n	e5c98 <__gethex+0x352>
   e5c7a:	2b03      	cmp	r3, #3
   e5c7c:	d010      	beq.n	e5ca0 <__gethex+0x35a>
   e5c7e:	2b01      	cmp	r3, #1
   e5c80:	d176      	bne.n	e5d70 <__gethex+0x42a>
   e5c82:	f019 0f02 	tst.w	r9, #2
   e5c86:	d073      	beq.n	e5d70 <__gethex+0x42a>
   e5c88:	f8da 0000 	ldr.w	r0, [sl]
   e5c8c:	ea49 0900 	orr.w	r9, r9, r0
   e5c90:	f019 0f01 	tst.w	r9, #1
   e5c94:	d107      	bne.n	e5ca6 <__gethex+0x360>
   e5c96:	e06b      	b.n	e5d70 <__gethex+0x42a>
   e5c98:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e5c9a:	f1c3 0301 	rsb	r3, r3, #1
   e5c9e:	9315      	str	r3, [sp, #84]	; 0x54
   e5ca0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e5ca2:	2b00      	cmp	r3, #0
   e5ca4:	d064      	beq.n	e5d70 <__gethex+0x42a>
   e5ca6:	f8d5 a010 	ldr.w	sl, [r5, #16]
   e5caa:	f105 0314 	add.w	r3, r5, #20
   e5cae:	ea4f 098a 	mov.w	r9, sl, lsl #2
   e5cb2:	eb03 0109 	add.w	r1, r3, r9
   e5cb6:	2000      	movs	r0, #0
   e5cb8:	681a      	ldr	r2, [r3, #0]
   e5cba:	f1b2 3fff 	cmp.w	r2, #4294967295
   e5cbe:	d002      	beq.n	e5cc6 <__gethex+0x380>
   e5cc0:	3201      	adds	r2, #1
   e5cc2:	601a      	str	r2, [r3, #0]
   e5cc4:	e020      	b.n	e5d08 <__gethex+0x3c2>
   e5cc6:	f843 0b04 	str.w	r0, [r3], #4
   e5cca:	4299      	cmp	r1, r3
   e5ccc:	d8f4      	bhi.n	e5cb8 <__gethex+0x372>
   e5cce:	68ab      	ldr	r3, [r5, #8]
   e5cd0:	459a      	cmp	sl, r3
   e5cd2:	db12      	blt.n	e5cfa <__gethex+0x3b4>
   e5cd4:	6869      	ldr	r1, [r5, #4]
   e5cd6:	9802      	ldr	r0, [sp, #8]
   e5cd8:	3101      	adds	r1, #1
   e5cda:	f000 f9eb 	bl	e60b4 <_Balloc>
   e5cde:	692a      	ldr	r2, [r5, #16]
   e5ce0:	3202      	adds	r2, #2
   e5ce2:	f105 010c 	add.w	r1, r5, #12
   e5ce6:	4683      	mov	fp, r0
   e5ce8:	0092      	lsls	r2, r2, #2
   e5cea:	300c      	adds	r0, #12
   e5cec:	f7fd fc42 	bl	e3574 <memcpy>
   e5cf0:	4629      	mov	r1, r5
   e5cf2:	9802      	ldr	r0, [sp, #8]
   e5cf4:	f000 fa13 	bl	e611e <_Bfree>
   e5cf8:	465d      	mov	r5, fp
   e5cfa:	692b      	ldr	r3, [r5, #16]
   e5cfc:	1c5a      	adds	r2, r3, #1
   e5cfe:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   e5d02:	612a      	str	r2, [r5, #16]
   e5d04:	2201      	movs	r2, #1
   e5d06:	615a      	str	r2, [r3, #20]
   e5d08:	2f02      	cmp	r7, #2
   e5d0a:	f105 0214 	add.w	r2, r5, #20
   e5d0e:	d111      	bne.n	e5d34 <__gethex+0x3ee>
   e5d10:	f8d8 3000 	ldr.w	r3, [r8]
   e5d14:	3b01      	subs	r3, #1
   e5d16:	429e      	cmp	r6, r3
   e5d18:	d127      	bne.n	e5d6a <__gethex+0x424>
   e5d1a:	1171      	asrs	r1, r6, #5
   e5d1c:	2301      	movs	r3, #1
   e5d1e:	f006 061f 	and.w	r6, r6, #31
   e5d22:	fa03 f606 	lsl.w	r6, r3, r6
   e5d26:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   e5d2a:	421e      	tst	r6, r3
   e5d2c:	bf0c      	ite	eq
   e5d2e:	2702      	moveq	r7, #2
   e5d30:	2701      	movne	r7, #1
   e5d32:	e01a      	b.n	e5d6a <__gethex+0x424>
   e5d34:	692b      	ldr	r3, [r5, #16]
   e5d36:	459a      	cmp	sl, r3
   e5d38:	da0a      	bge.n	e5d50 <__gethex+0x40a>
   e5d3a:	2101      	movs	r1, #1
   e5d3c:	4628      	mov	r0, r5
   e5d3e:	f7ff fdb7 	bl	e58b0 <rshift>
   e5d42:	f8d8 3008 	ldr.w	r3, [r8, #8]
   e5d46:	3401      	adds	r4, #1
   e5d48:	429c      	cmp	r4, r3
   e5d4a:	f73f af2c 	bgt.w	e5ba6 <__gethex+0x260>
   e5d4e:	e00b      	b.n	e5d68 <__gethex+0x422>
   e5d50:	f016 061f 	ands.w	r6, r6, #31
   e5d54:	d008      	beq.n	e5d68 <__gethex+0x422>
   e5d56:	4491      	add	r9, r2
   e5d58:	f1c6 0620 	rsb	r6, r6, #32
   e5d5c:	f859 0c04 	ldr.w	r0, [r9, #-4]
   e5d60:	f000 fa6d 	bl	e623e <__hi0bits>
   e5d64:	42b0      	cmp	r0, r6
   e5d66:	dbe8      	blt.n	e5d3a <__gethex+0x3f4>
   e5d68:	2701      	movs	r7, #1
   e5d6a:	f047 0720 	orr.w	r7, r7, #32
   e5d6e:	e001      	b.n	e5d74 <__gethex+0x42e>
   e5d70:	f047 0710 	orr.w	r7, r7, #16
   e5d74:	9b14      	ldr	r3, [sp, #80]	; 0x50
   e5d76:	601d      	str	r5, [r3, #0]
   e5d78:	9b06      	ldr	r3, [sp, #24]
   e5d7a:	4638      	mov	r0, r7
   e5d7c:	601c      	str	r4, [r3, #0]
   e5d7e:	b00b      	add	sp, #44	; 0x2c
   e5d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000e5d84 <L_shift>:
   e5d84:	f1c2 0208 	rsb	r2, r2, #8
   e5d88:	0092      	lsls	r2, r2, #2
   e5d8a:	b570      	push	{r4, r5, r6, lr}
   e5d8c:	f1c2 0620 	rsb	r6, r2, #32
   e5d90:	6843      	ldr	r3, [r0, #4]
   e5d92:	6805      	ldr	r5, [r0, #0]
   e5d94:	fa03 f406 	lsl.w	r4, r3, r6
   e5d98:	432c      	orrs	r4, r5
   e5d9a:	40d3      	lsrs	r3, r2
   e5d9c:	6004      	str	r4, [r0, #0]
   e5d9e:	f840 3f04 	str.w	r3, [r0, #4]!
   e5da2:	4288      	cmp	r0, r1
   e5da4:	d3f4      	bcc.n	e5d90 <L_shift+0xc>
   e5da6:	bd70      	pop	{r4, r5, r6, pc}

000e5da8 <__match>:
   e5da8:	b530      	push	{r4, r5, lr}
   e5daa:	6803      	ldr	r3, [r0, #0]
   e5dac:	f811 4b01 	ldrb.w	r4, [r1], #1
   e5db0:	3301      	adds	r3, #1
   e5db2:	b14c      	cbz	r4, e5dc8 <__match+0x20>
   e5db4:	781a      	ldrb	r2, [r3, #0]
   e5db6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   e5dba:	2d19      	cmp	r5, #25
   e5dbc:	bf98      	it	ls
   e5dbe:	3220      	addls	r2, #32
   e5dc0:	42a2      	cmp	r2, r4
   e5dc2:	d0f3      	beq.n	e5dac <__match+0x4>
   e5dc4:	2000      	movs	r0, #0
   e5dc6:	bd30      	pop	{r4, r5, pc}
   e5dc8:	6003      	str	r3, [r0, #0]
   e5dca:	2001      	movs	r0, #1
   e5dcc:	bd30      	pop	{r4, r5, pc}

000e5dce <__hexnan>:
   e5dce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e5dd2:	680b      	ldr	r3, [r1, #0]
   e5dd4:	f8d0 b000 	ldr.w	fp, [r0]
   e5dd8:	115e      	asrs	r6, r3, #5
   e5dda:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   e5dde:	f013 031f 	ands.w	r3, r3, #31
   e5de2:	b085      	sub	sp, #20
   e5de4:	bf18      	it	ne
   e5de6:	3604      	addne	r6, #4
   e5de8:	1f35      	subs	r5, r6, #4
   e5dea:	4617      	mov	r7, r2
   e5dec:	2200      	movs	r2, #0
   e5dee:	4682      	mov	sl, r0
   e5df0:	9301      	str	r3, [sp, #4]
   e5df2:	f846 2c04 	str.w	r2, [r6, #-4]
   e5df6:	46a8      	mov	r8, r5
   e5df8:	462c      	mov	r4, r5
   e5dfa:	9200      	str	r2, [sp, #0]
   e5dfc:	4691      	mov	r9, r2
   e5dfe:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   e5e02:	2900      	cmp	r1, #0
   e5e04:	d03c      	beq.n	e5e80 <__hexnan+0xb2>
   e5e06:	4608      	mov	r0, r1
   e5e08:	9203      	str	r2, [sp, #12]
   e5e0a:	9102      	str	r1, [sp, #8]
   e5e0c:	f7ff fd86 	bl	e591c <__hexdig_fun>
   e5e10:	9a03      	ldr	r2, [sp, #12]
   e5e12:	bb00      	cbnz	r0, e5e56 <__hexnan+0x88>
   e5e14:	9902      	ldr	r1, [sp, #8]
   e5e16:	2920      	cmp	r1, #32
   e5e18:	d816      	bhi.n	e5e48 <__hexnan+0x7a>
   e5e1a:	9b00      	ldr	r3, [sp, #0]
   e5e1c:	4599      	cmp	r9, r3
   e5e1e:	ddee      	ble.n	e5dfe <__hexnan+0x30>
   e5e20:	4544      	cmp	r4, r8
   e5e22:	d205      	bcs.n	e5e30 <__hexnan+0x62>
   e5e24:	2a07      	cmp	r2, #7
   e5e26:	dc03      	bgt.n	e5e30 <__hexnan+0x62>
   e5e28:	4641      	mov	r1, r8
   e5e2a:	4620      	mov	r0, r4
   e5e2c:	f7ff ffaa 	bl	e5d84 <L_shift>
   e5e30:	42bc      	cmp	r4, r7
   e5e32:	d923      	bls.n	e5e7c <__hexnan+0xae>
   e5e34:	2300      	movs	r3, #0
   e5e36:	f1a4 0804 	sub.w	r8, r4, #4
   e5e3a:	f844 3c04 	str.w	r3, [r4, #-4]
   e5e3e:	f8cd 9000 	str.w	r9, [sp]
   e5e42:	4644      	mov	r4, r8
   e5e44:	461a      	mov	r2, r3
   e5e46:	e7da      	b.n	e5dfe <__hexnan+0x30>
   e5e48:	2929      	cmp	r1, #41	; 0x29
   e5e4a:	d148      	bne.n	e5ede <__hexnan+0x110>
   e5e4c:	f10b 0301 	add.w	r3, fp, #1
   e5e50:	f8ca 3000 	str.w	r3, [sl]
   e5e54:	e014      	b.n	e5e80 <__hexnan+0xb2>
   e5e56:	3201      	adds	r2, #1
   e5e58:	2a08      	cmp	r2, #8
   e5e5a:	f109 0901 	add.w	r9, r9, #1
   e5e5e:	dd06      	ble.n	e5e6e <__hexnan+0xa0>
   e5e60:	42bc      	cmp	r4, r7
   e5e62:	d9cc      	bls.n	e5dfe <__hexnan+0x30>
   e5e64:	2300      	movs	r3, #0
   e5e66:	f844 3c04 	str.w	r3, [r4, #-4]
   e5e6a:	2201      	movs	r2, #1
   e5e6c:	3c04      	subs	r4, #4
   e5e6e:	6821      	ldr	r1, [r4, #0]
   e5e70:	f000 000f 	and.w	r0, r0, #15
   e5e74:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   e5e78:	6020      	str	r0, [r4, #0]
   e5e7a:	e7c0      	b.n	e5dfe <__hexnan+0x30>
   e5e7c:	2208      	movs	r2, #8
   e5e7e:	e7be      	b.n	e5dfe <__hexnan+0x30>
   e5e80:	f1b9 0f00 	cmp.w	r9, #0
   e5e84:	d02b      	beq.n	e5ede <__hexnan+0x110>
   e5e86:	4544      	cmp	r4, r8
   e5e88:	d205      	bcs.n	e5e96 <__hexnan+0xc8>
   e5e8a:	2a07      	cmp	r2, #7
   e5e8c:	dc03      	bgt.n	e5e96 <__hexnan+0xc8>
   e5e8e:	4641      	mov	r1, r8
   e5e90:	4620      	mov	r0, r4
   e5e92:	f7ff ff77 	bl	e5d84 <L_shift>
   e5e96:	42bc      	cmp	r4, r7
   e5e98:	d90c      	bls.n	e5eb4 <__hexnan+0xe6>
   e5e9a:	463b      	mov	r3, r7
   e5e9c:	f854 2b04 	ldr.w	r2, [r4], #4
   e5ea0:	f843 2b04 	str.w	r2, [r3], #4
   e5ea4:	42a5      	cmp	r5, r4
   e5ea6:	d2f9      	bcs.n	e5e9c <__hexnan+0xce>
   e5ea8:	2200      	movs	r2, #0
   e5eaa:	f843 2b04 	str.w	r2, [r3], #4
   e5eae:	429d      	cmp	r5, r3
   e5eb0:	d2fb      	bcs.n	e5eaa <__hexnan+0xdc>
   e5eb2:	e00b      	b.n	e5ecc <__hexnan+0xfe>
   e5eb4:	9b01      	ldr	r3, [sp, #4]
   e5eb6:	b14b      	cbz	r3, e5ecc <__hexnan+0xfe>
   e5eb8:	f1c3 0220 	rsb	r2, r3, #32
   e5ebc:	f04f 33ff 	mov.w	r3, #4294967295
   e5ec0:	40d3      	lsrs	r3, r2
   e5ec2:	f856 2c04 	ldr.w	r2, [r6, #-4]
   e5ec6:	4013      	ands	r3, r2
   e5ec8:	f846 3c04 	str.w	r3, [r6, #-4]
   e5ecc:	682b      	ldr	r3, [r5, #0]
   e5ece:	b943      	cbnz	r3, e5ee2 <__hexnan+0x114>
   e5ed0:	42bd      	cmp	r5, r7
   e5ed2:	d102      	bne.n	e5eda <__hexnan+0x10c>
   e5ed4:	2301      	movs	r3, #1
   e5ed6:	602b      	str	r3, [r5, #0]
   e5ed8:	e003      	b.n	e5ee2 <__hexnan+0x114>
   e5eda:	3d04      	subs	r5, #4
   e5edc:	e7f6      	b.n	e5ecc <__hexnan+0xfe>
   e5ede:	2004      	movs	r0, #4
   e5ee0:	e000      	b.n	e5ee4 <__hexnan+0x116>
   e5ee2:	2005      	movs	r0, #5
   e5ee4:	b005      	add	sp, #20
   e5ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000e5eec <_findenv_r>:
   e5eec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e5ef0:	4607      	mov	r7, r0
   e5ef2:	468b      	mov	fp, r1
   e5ef4:	4690      	mov	r8, r2
   e5ef6:	f000 fcda 	bl	e68ae <__env_lock>
   e5efa:	4b19      	ldr	r3, [pc, #100]	; (e5f60 <_findenv_r+0x74>)
   e5efc:	681d      	ldr	r5, [r3, #0]
   e5efe:	469a      	mov	sl, r3
   e5f00:	b13d      	cbz	r5, e5f12 <_findenv_r+0x26>
   e5f02:	465c      	mov	r4, fp
   e5f04:	4623      	mov	r3, r4
   e5f06:	f813 2b01 	ldrb.w	r2, [r3], #1
   e5f0a:	b142      	cbz	r2, e5f1e <_findenv_r+0x32>
   e5f0c:	2a3d      	cmp	r2, #61	; 0x3d
   e5f0e:	461c      	mov	r4, r3
   e5f10:	d1f8      	bne.n	e5f04 <_findenv_r+0x18>
   e5f12:	4638      	mov	r0, r7
   e5f14:	f000 fccc 	bl	e68b0 <__env_unlock>
   e5f18:	2000      	movs	r0, #0
   e5f1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e5f1e:	ebcb 0404 	rsb	r4, fp, r4
   e5f22:	46a9      	mov	r9, r5
   e5f24:	f859 0b04 	ldr.w	r0, [r9], #4
   e5f28:	2800      	cmp	r0, #0
   e5f2a:	d0f2      	beq.n	e5f12 <_findenv_r+0x26>
   e5f2c:	4622      	mov	r2, r4
   e5f2e:	4659      	mov	r1, fp
   e5f30:	f7fe faf4 	bl	e451c <strncmp>
   e5f34:	b988      	cbnz	r0, e5f5a <_findenv_r+0x6e>
   e5f36:	f859 3c04 	ldr.w	r3, [r9, #-4]
   e5f3a:	191e      	adds	r6, r3, r4
   e5f3c:	5d1b      	ldrb	r3, [r3, r4]
   e5f3e:	2b3d      	cmp	r3, #61	; 0x3d
   e5f40:	d10b      	bne.n	e5f5a <_findenv_r+0x6e>
   e5f42:	f8da 3000 	ldr.w	r3, [sl]
   e5f46:	1aed      	subs	r5, r5, r3
   e5f48:	10ad      	asrs	r5, r5, #2
   e5f4a:	4638      	mov	r0, r7
   e5f4c:	f8c8 5000 	str.w	r5, [r8]
   e5f50:	f000 fcae 	bl	e68b0 <__env_unlock>
   e5f54:	1c70      	adds	r0, r6, #1
   e5f56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e5f5a:	464d      	mov	r5, r9
   e5f5c:	e7e1      	b.n	e5f22 <_findenv_r+0x36>
   e5f5e:	bf00      	nop
   e5f60:	2003d6a8 	.word	0x2003d6a8

000e5f64 <_getenv_r>:
   e5f64:	b507      	push	{r0, r1, r2, lr}
   e5f66:	aa01      	add	r2, sp, #4
   e5f68:	f7ff ffc0 	bl	e5eec <_findenv_r>
   e5f6c:	b003      	add	sp, #12
   e5f6e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000e5f74 <__gettzinfo>:
   e5f74:	4800      	ldr	r0, [pc, #0]	; (e5f78 <__gettzinfo+0x4>)
   e5f76:	4770      	bx	lr
   e5f78:	2003d668 	.word	0x2003d668

000e5f7c <gmtime_r>:
   e5f7c:	6802      	ldr	r2, [r0, #0]
   e5f7e:	4b47      	ldr	r3, [pc, #284]	; (e609c <gmtime_r+0x120>)
   e5f80:	b5f0      	push	{r4, r5, r6, r7, lr}
   e5f82:	fb92 f4f3 	sdiv	r4, r2, r3
   e5f86:	fb03 2214 	mls	r2, r3, r4, r2
   e5f8a:	2a00      	cmp	r2, #0
   e5f8c:	bfbc      	itt	lt
   e5f8e:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   e5f92:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   e5f96:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   e5f9a:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   e5f9e:	fb92 f3f0 	sdiv	r3, r2, r0
   e5fa2:	fb00 2213 	mls	r2, r0, r3, r2
   e5fa6:	f04f 003c 	mov.w	r0, #60	; 0x3c
   e5faa:	bfac      	ite	ge
   e5fac:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   e5fb0:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   e5fb4:	608b      	str	r3, [r1, #8]
   e5fb6:	fb92 f3f0 	sdiv	r3, r2, r0
   e5fba:	fb00 2213 	mls	r2, r0, r3, r2
   e5fbe:	604b      	str	r3, [r1, #4]
   e5fc0:	600a      	str	r2, [r1, #0]
   e5fc2:	2307      	movs	r3, #7
   e5fc4:	1ce2      	adds	r2, r4, #3
   e5fc6:	fb92 f3f3 	sdiv	r3, r2, r3
   e5fca:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   e5fce:	1ad3      	subs	r3, r2, r3
   e5fd0:	618b      	str	r3, [r1, #24]
   e5fd2:	4b33      	ldr	r3, [pc, #204]	; (e60a0 <gmtime_r+0x124>)
   e5fd4:	4d33      	ldr	r5, [pc, #204]	; (e60a4 <gmtime_r+0x128>)
   e5fd6:	fb94 f5f5 	sdiv	r5, r4, r5
   e5fda:	fb03 4405 	mla	r4, r3, r5, r4
   e5fde:	f648 62ac 	movw	r2, #36524	; 0x8eac
   e5fe2:	fbb4 f2f2 	udiv	r2, r4, r2
   e5fe6:	4422      	add	r2, r4
   e5fe8:	f240 57b4 	movw	r7, #1460	; 0x5b4
   e5fec:	fbb4 f3f7 	udiv	r3, r4, r7
   e5ff0:	1ad2      	subs	r2, r2, r3
   e5ff2:	482d      	ldr	r0, [pc, #180]	; (e60a8 <gmtime_r+0x12c>)
   e5ff4:	fbb4 f0f0 	udiv	r0, r4, r0
   e5ff8:	f648 6694 	movw	r6, #36500	; 0x8e94
   e5ffc:	1a13      	subs	r3, r2, r0
   e5ffe:	fbb3 f6f6 	udiv	r6, r3, r6
   e6002:	4434      	add	r4, r6
   e6004:	f240 126d 	movw	r2, #365	; 0x16d
   e6008:	fbb3 f0f2 	udiv	r0, r3, r2
   e600c:	fbb3 f3f7 	udiv	r3, r3, r7
   e6010:	1ae3      	subs	r3, r4, r3
   e6012:	fb02 3310 	mls	r3, r2, r0, r3
   e6016:	2499      	movs	r4, #153	; 0x99
   e6018:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   e601c:	3202      	adds	r2, #2
   e601e:	fbb2 f2f4 	udiv	r2, r2, r4
   e6022:	2a0a      	cmp	r2, #10
   e6024:	fb04 f402 	mul.w	r4, r4, r2
   e6028:	f104 0602 	add.w	r6, r4, #2
   e602c:	f04f 0405 	mov.w	r4, #5
   e6030:	fbb6 f4f4 	udiv	r4, r6, r4
   e6034:	bf34      	ite	cc
   e6036:	2602      	movcc	r6, #2
   e6038:	f06f 0609 	mvncs.w	r6, #9
   e603c:	4416      	add	r6, r2
   e603e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e6042:	fb02 0505 	mla	r5, r2, r5, r0
   e6046:	1c5f      	adds	r7, r3, #1
   e6048:	2e01      	cmp	r6, #1
   e604a:	bf98      	it	ls
   e604c:	3501      	addls	r5, #1
   e604e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   e6052:	eba7 0704 	sub.w	r7, r7, r4
   e6056:	d302      	bcc.n	e605e <gmtime_r+0xe2>
   e6058:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   e605c:	e014      	b.n	e6088 <gmtime_r+0x10c>
   e605e:	0782      	lsls	r2, r0, #30
   e6060:	d105      	bne.n	e606e <gmtime_r+0xf2>
   e6062:	2464      	movs	r4, #100	; 0x64
   e6064:	fbb0 f2f4 	udiv	r2, r0, r4
   e6068:	fb04 0212 	mls	r2, r4, r2, r0
   e606c:	b94a      	cbnz	r2, e6082 <gmtime_r+0x106>
   e606e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e6072:	fbb0 f4f2 	udiv	r4, r0, r2
   e6076:	fb02 0014 	mls	r0, r2, r4, r0
   e607a:	fab0 f280 	clz	r2, r0
   e607e:	0952      	lsrs	r2, r2, #5
   e6080:	e000      	b.n	e6084 <gmtime_r+0x108>
   e6082:	2201      	movs	r2, #1
   e6084:	333b      	adds	r3, #59	; 0x3b
   e6086:	441a      	add	r2, r3
   e6088:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   e608c:	2300      	movs	r3, #0
   e608e:	61ca      	str	r2, [r1, #28]
   e6090:	614d      	str	r5, [r1, #20]
   e6092:	610e      	str	r6, [r1, #16]
   e6094:	60cf      	str	r7, [r1, #12]
   e6096:	620b      	str	r3, [r1, #32]
   e6098:	4608      	mov	r0, r1
   e609a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e609c:	00015180 	.word	0x00015180
   e60a0:	fffdc54f 	.word	0xfffdc54f
   e60a4:	00023ab1 	.word	0x00023ab1
   e60a8:	00023ab0 	.word	0x00023ab0

000e60ac <labs>:
   e60ac:	2800      	cmp	r0, #0
   e60ae:	bfb8      	it	lt
   e60b0:	4240      	neglt	r0, r0
   e60b2:	4770      	bx	lr

000e60b4 <_Balloc>:
   e60b4:	b570      	push	{r4, r5, r6, lr}
   e60b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
   e60b8:	4604      	mov	r4, r0
   e60ba:	460e      	mov	r6, r1
   e60bc:	b93d      	cbnz	r5, e60ce <_Balloc+0x1a>
   e60be:	2010      	movs	r0, #16
   e60c0:	f7f4 fd1c 	bl	daafc <malloc>
   e60c4:	6260      	str	r0, [r4, #36]	; 0x24
   e60c6:	6045      	str	r5, [r0, #4]
   e60c8:	6085      	str	r5, [r0, #8]
   e60ca:	6005      	str	r5, [r0, #0]
   e60cc:	60c5      	str	r5, [r0, #12]
   e60ce:	6a65      	ldr	r5, [r4, #36]	; 0x24
   e60d0:	68eb      	ldr	r3, [r5, #12]
   e60d2:	b143      	cbz	r3, e60e6 <_Balloc+0x32>
   e60d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   e60d6:	68db      	ldr	r3, [r3, #12]
   e60d8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   e60dc:	b178      	cbz	r0, e60fe <_Balloc+0x4a>
   e60de:	6802      	ldr	r2, [r0, #0]
   e60e0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   e60e4:	e017      	b.n	e6116 <_Balloc+0x62>
   e60e6:	2221      	movs	r2, #33	; 0x21
   e60e8:	2104      	movs	r1, #4
   e60ea:	4620      	mov	r0, r4
   e60ec:	f000 fbd1 	bl	e6892 <_calloc_r>
   e60f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   e60f2:	60e8      	str	r0, [r5, #12]
   e60f4:	68db      	ldr	r3, [r3, #12]
   e60f6:	2b00      	cmp	r3, #0
   e60f8:	d1ec      	bne.n	e60d4 <_Balloc+0x20>
   e60fa:	2000      	movs	r0, #0
   e60fc:	bd70      	pop	{r4, r5, r6, pc}
   e60fe:	2101      	movs	r1, #1
   e6100:	fa01 f506 	lsl.w	r5, r1, r6
   e6104:	1d6a      	adds	r2, r5, #5
   e6106:	0092      	lsls	r2, r2, #2
   e6108:	4620      	mov	r0, r4
   e610a:	f000 fbc2 	bl	e6892 <_calloc_r>
   e610e:	2800      	cmp	r0, #0
   e6110:	d0f3      	beq.n	e60fa <_Balloc+0x46>
   e6112:	6046      	str	r6, [r0, #4]
   e6114:	6085      	str	r5, [r0, #8]
   e6116:	2300      	movs	r3, #0
   e6118:	6103      	str	r3, [r0, #16]
   e611a:	60c3      	str	r3, [r0, #12]
   e611c:	bd70      	pop	{r4, r5, r6, pc}

000e611e <_Bfree>:
   e611e:	b570      	push	{r4, r5, r6, lr}
   e6120:	6a44      	ldr	r4, [r0, #36]	; 0x24
   e6122:	4606      	mov	r6, r0
   e6124:	460d      	mov	r5, r1
   e6126:	b93c      	cbnz	r4, e6138 <_Bfree+0x1a>
   e6128:	2010      	movs	r0, #16
   e612a:	f7f4 fce7 	bl	daafc <malloc>
   e612e:	6270      	str	r0, [r6, #36]	; 0x24
   e6130:	6044      	str	r4, [r0, #4]
   e6132:	6084      	str	r4, [r0, #8]
   e6134:	6004      	str	r4, [r0, #0]
   e6136:	60c4      	str	r4, [r0, #12]
   e6138:	b13d      	cbz	r5, e614a <_Bfree+0x2c>
   e613a:	6a73      	ldr	r3, [r6, #36]	; 0x24
   e613c:	686a      	ldr	r2, [r5, #4]
   e613e:	68db      	ldr	r3, [r3, #12]
   e6140:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   e6144:	6029      	str	r1, [r5, #0]
   e6146:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   e614a:	bd70      	pop	{r4, r5, r6, pc}

000e614c <__multadd>:
   e614c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e6150:	690d      	ldr	r5, [r1, #16]
   e6152:	461f      	mov	r7, r3
   e6154:	4606      	mov	r6, r0
   e6156:	460c      	mov	r4, r1
   e6158:	f101 0e14 	add.w	lr, r1, #20
   e615c:	2300      	movs	r3, #0
   e615e:	f8de 0000 	ldr.w	r0, [lr]
   e6162:	b281      	uxth	r1, r0
   e6164:	fb02 7101 	mla	r1, r2, r1, r7
   e6168:	0c0f      	lsrs	r7, r1, #16
   e616a:	0c00      	lsrs	r0, r0, #16
   e616c:	fb02 7000 	mla	r0, r2, r0, r7
   e6170:	b289      	uxth	r1, r1
   e6172:	3301      	adds	r3, #1
   e6174:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   e6178:	429d      	cmp	r5, r3
   e617a:	ea4f 4710 	mov.w	r7, r0, lsr #16
   e617e:	f84e 1b04 	str.w	r1, [lr], #4
   e6182:	dcec      	bgt.n	e615e <__multadd+0x12>
   e6184:	b1d7      	cbz	r7, e61bc <__multadd+0x70>
   e6186:	68a3      	ldr	r3, [r4, #8]
   e6188:	429d      	cmp	r5, r3
   e618a:	db12      	blt.n	e61b2 <__multadd+0x66>
   e618c:	6861      	ldr	r1, [r4, #4]
   e618e:	4630      	mov	r0, r6
   e6190:	3101      	adds	r1, #1
   e6192:	f7ff ff8f 	bl	e60b4 <_Balloc>
   e6196:	6922      	ldr	r2, [r4, #16]
   e6198:	3202      	adds	r2, #2
   e619a:	f104 010c 	add.w	r1, r4, #12
   e619e:	4680      	mov	r8, r0
   e61a0:	0092      	lsls	r2, r2, #2
   e61a2:	300c      	adds	r0, #12
   e61a4:	f7fd f9e6 	bl	e3574 <memcpy>
   e61a8:	4621      	mov	r1, r4
   e61aa:	4630      	mov	r0, r6
   e61ac:	f7ff ffb7 	bl	e611e <_Bfree>
   e61b0:	4644      	mov	r4, r8
   e61b2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   e61b6:	3501      	adds	r5, #1
   e61b8:	615f      	str	r7, [r3, #20]
   e61ba:	6125      	str	r5, [r4, #16]
   e61bc:	4620      	mov	r0, r4
   e61be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000e61c2 <__s2b>:
   e61c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e61c6:	460c      	mov	r4, r1
   e61c8:	4615      	mov	r5, r2
   e61ca:	461f      	mov	r7, r3
   e61cc:	2209      	movs	r2, #9
   e61ce:	3308      	adds	r3, #8
   e61d0:	4606      	mov	r6, r0
   e61d2:	fb93 f3f2 	sdiv	r3, r3, r2
   e61d6:	2100      	movs	r1, #0
   e61d8:	2201      	movs	r2, #1
   e61da:	429a      	cmp	r2, r3
   e61dc:	da02      	bge.n	e61e4 <__s2b+0x22>
   e61de:	0052      	lsls	r2, r2, #1
   e61e0:	3101      	adds	r1, #1
   e61e2:	e7fa      	b.n	e61da <__s2b+0x18>
   e61e4:	4630      	mov	r0, r6
   e61e6:	f7ff ff65 	bl	e60b4 <_Balloc>
   e61ea:	9b08      	ldr	r3, [sp, #32]
   e61ec:	6143      	str	r3, [r0, #20]
   e61ee:	2d09      	cmp	r5, #9
   e61f0:	f04f 0301 	mov.w	r3, #1
   e61f4:	6103      	str	r3, [r0, #16]
   e61f6:	dd11      	ble.n	e621c <__s2b+0x5a>
   e61f8:	f104 0809 	add.w	r8, r4, #9
   e61fc:	46c1      	mov	r9, r8
   e61fe:	442c      	add	r4, r5
   e6200:	f819 3b01 	ldrb.w	r3, [r9], #1
   e6204:	4601      	mov	r1, r0
   e6206:	3b30      	subs	r3, #48	; 0x30
   e6208:	220a      	movs	r2, #10
   e620a:	4630      	mov	r0, r6
   e620c:	f7ff ff9e 	bl	e614c <__multadd>
   e6210:	45a1      	cmp	r9, r4
   e6212:	d1f5      	bne.n	e6200 <__s2b+0x3e>
   e6214:	eb08 0405 	add.w	r4, r8, r5
   e6218:	3c08      	subs	r4, #8
   e621a:	e001      	b.n	e6220 <__s2b+0x5e>
   e621c:	340a      	adds	r4, #10
   e621e:	2509      	movs	r5, #9
   e6220:	1b2d      	subs	r5, r5, r4
   e6222:	1963      	adds	r3, r4, r5
   e6224:	429f      	cmp	r7, r3
   e6226:	dd08      	ble.n	e623a <__s2b+0x78>
   e6228:	f814 3b01 	ldrb.w	r3, [r4], #1
   e622c:	4601      	mov	r1, r0
   e622e:	3b30      	subs	r3, #48	; 0x30
   e6230:	220a      	movs	r2, #10
   e6232:	4630      	mov	r0, r6
   e6234:	f7ff ff8a 	bl	e614c <__multadd>
   e6238:	e7f3      	b.n	e6222 <__s2b+0x60>
   e623a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000e623e <__hi0bits>:
   e623e:	0c03      	lsrs	r3, r0, #16
   e6240:	041b      	lsls	r3, r3, #16
   e6242:	b913      	cbnz	r3, e624a <__hi0bits+0xc>
   e6244:	0400      	lsls	r0, r0, #16
   e6246:	2310      	movs	r3, #16
   e6248:	e000      	b.n	e624c <__hi0bits+0xe>
   e624a:	2300      	movs	r3, #0
   e624c:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   e6250:	bf04      	itt	eq
   e6252:	0200      	lsleq	r0, r0, #8
   e6254:	3308      	addeq	r3, #8
   e6256:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   e625a:	bf04      	itt	eq
   e625c:	0100      	lsleq	r0, r0, #4
   e625e:	3304      	addeq	r3, #4
   e6260:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   e6264:	bf04      	itt	eq
   e6266:	0080      	lsleq	r0, r0, #2
   e6268:	3302      	addeq	r3, #2
   e626a:	2800      	cmp	r0, #0
   e626c:	db03      	blt.n	e6276 <__hi0bits+0x38>
   e626e:	0042      	lsls	r2, r0, #1
   e6270:	d503      	bpl.n	e627a <__hi0bits+0x3c>
   e6272:	1c58      	adds	r0, r3, #1
   e6274:	4770      	bx	lr
   e6276:	4618      	mov	r0, r3
   e6278:	4770      	bx	lr
   e627a:	2020      	movs	r0, #32
   e627c:	4770      	bx	lr

000e627e <__lo0bits>:
   e627e:	6803      	ldr	r3, [r0, #0]
   e6280:	f013 0207 	ands.w	r2, r3, #7
   e6284:	d00b      	beq.n	e629e <__lo0bits+0x20>
   e6286:	07d9      	lsls	r1, r3, #31
   e6288:	d422      	bmi.n	e62d0 <__lo0bits+0x52>
   e628a:	079a      	lsls	r2, r3, #30
   e628c:	bf4b      	itete	mi
   e628e:	085b      	lsrmi	r3, r3, #1
   e6290:	089b      	lsrpl	r3, r3, #2
   e6292:	6003      	strmi	r3, [r0, #0]
   e6294:	6003      	strpl	r3, [r0, #0]
   e6296:	bf4c      	ite	mi
   e6298:	2001      	movmi	r0, #1
   e629a:	2002      	movpl	r0, #2
   e629c:	4770      	bx	lr
   e629e:	b299      	uxth	r1, r3
   e62a0:	b909      	cbnz	r1, e62a6 <__lo0bits+0x28>
   e62a2:	0c1b      	lsrs	r3, r3, #16
   e62a4:	2210      	movs	r2, #16
   e62a6:	f013 0fff 	tst.w	r3, #255	; 0xff
   e62aa:	bf04      	itt	eq
   e62ac:	0a1b      	lsreq	r3, r3, #8
   e62ae:	3208      	addeq	r2, #8
   e62b0:	0719      	lsls	r1, r3, #28
   e62b2:	bf04      	itt	eq
   e62b4:	091b      	lsreq	r3, r3, #4
   e62b6:	3204      	addeq	r2, #4
   e62b8:	0799      	lsls	r1, r3, #30
   e62ba:	bf04      	itt	eq
   e62bc:	089b      	lsreq	r3, r3, #2
   e62be:	3202      	addeq	r2, #2
   e62c0:	07d9      	lsls	r1, r3, #31
   e62c2:	d402      	bmi.n	e62ca <__lo0bits+0x4c>
   e62c4:	085b      	lsrs	r3, r3, #1
   e62c6:	d005      	beq.n	e62d4 <__lo0bits+0x56>
   e62c8:	3201      	adds	r2, #1
   e62ca:	6003      	str	r3, [r0, #0]
   e62cc:	4610      	mov	r0, r2
   e62ce:	4770      	bx	lr
   e62d0:	2000      	movs	r0, #0
   e62d2:	4770      	bx	lr
   e62d4:	2020      	movs	r0, #32
   e62d6:	4770      	bx	lr

000e62d8 <__i2b>:
   e62d8:	b510      	push	{r4, lr}
   e62da:	460c      	mov	r4, r1
   e62dc:	2101      	movs	r1, #1
   e62de:	f7ff fee9 	bl	e60b4 <_Balloc>
   e62e2:	2201      	movs	r2, #1
   e62e4:	6144      	str	r4, [r0, #20]
   e62e6:	6102      	str	r2, [r0, #16]
   e62e8:	bd10      	pop	{r4, pc}

000e62ea <__multiply>:
   e62ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e62ee:	4614      	mov	r4, r2
   e62f0:	690a      	ldr	r2, [r1, #16]
   e62f2:	6923      	ldr	r3, [r4, #16]
   e62f4:	429a      	cmp	r2, r3
   e62f6:	bfb8      	it	lt
   e62f8:	460b      	movlt	r3, r1
   e62fa:	4688      	mov	r8, r1
   e62fc:	bfbc      	itt	lt
   e62fe:	46a0      	movlt	r8, r4
   e6300:	461c      	movlt	r4, r3
   e6302:	f8d8 7010 	ldr.w	r7, [r8, #16]
   e6306:	f8d4 9010 	ldr.w	r9, [r4, #16]
   e630a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   e630e:	f8d8 1004 	ldr.w	r1, [r8, #4]
   e6312:	eb07 0609 	add.w	r6, r7, r9
   e6316:	429e      	cmp	r6, r3
   e6318:	bfc8      	it	gt
   e631a:	3101      	addgt	r1, #1
   e631c:	f7ff feca 	bl	e60b4 <_Balloc>
   e6320:	f100 0514 	add.w	r5, r0, #20
   e6324:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   e6328:	462b      	mov	r3, r5
   e632a:	2200      	movs	r2, #0
   e632c:	4563      	cmp	r3, ip
   e632e:	d202      	bcs.n	e6336 <__multiply+0x4c>
   e6330:	f843 2b04 	str.w	r2, [r3], #4
   e6334:	e7fa      	b.n	e632c <__multiply+0x42>
   e6336:	f104 0214 	add.w	r2, r4, #20
   e633a:	f108 0114 	add.w	r1, r8, #20
   e633e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   e6342:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   e6346:	9300      	str	r3, [sp, #0]
   e6348:	9b00      	ldr	r3, [sp, #0]
   e634a:	9201      	str	r2, [sp, #4]
   e634c:	4293      	cmp	r3, r2
   e634e:	d957      	bls.n	e6400 <__multiply+0x116>
   e6350:	f8b2 b000 	ldrh.w	fp, [r2]
   e6354:	f1bb 0f00 	cmp.w	fp, #0
   e6358:	d023      	beq.n	e63a2 <__multiply+0xb8>
   e635a:	4689      	mov	r9, r1
   e635c:	46ae      	mov	lr, r5
   e635e:	f04f 0800 	mov.w	r8, #0
   e6362:	f859 4b04 	ldr.w	r4, [r9], #4
   e6366:	f8be a000 	ldrh.w	sl, [lr]
   e636a:	b2a3      	uxth	r3, r4
   e636c:	fb0b a303 	mla	r3, fp, r3, sl
   e6370:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   e6374:	f8de 4000 	ldr.w	r4, [lr]
   e6378:	4443      	add	r3, r8
   e637a:	ea4f 4814 	mov.w	r8, r4, lsr #16
   e637e:	fb0b 840a 	mla	r4, fp, sl, r8
   e6382:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   e6386:	46f2      	mov	sl, lr
   e6388:	b29b      	uxth	r3, r3
   e638a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   e638e:	454f      	cmp	r7, r9
   e6390:	ea4f 4814 	mov.w	r8, r4, lsr #16
   e6394:	f84a 3b04 	str.w	r3, [sl], #4
   e6398:	d901      	bls.n	e639e <__multiply+0xb4>
   e639a:	46d6      	mov	lr, sl
   e639c:	e7e1      	b.n	e6362 <__multiply+0x78>
   e639e:	f8ce 8004 	str.w	r8, [lr, #4]
   e63a2:	9b01      	ldr	r3, [sp, #4]
   e63a4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   e63a8:	3204      	adds	r2, #4
   e63aa:	f1ba 0f00 	cmp.w	sl, #0
   e63ae:	d021      	beq.n	e63f4 <__multiply+0x10a>
   e63b0:	682b      	ldr	r3, [r5, #0]
   e63b2:	462c      	mov	r4, r5
   e63b4:	4689      	mov	r9, r1
   e63b6:	f04f 0800 	mov.w	r8, #0
   e63ba:	f8b9 e000 	ldrh.w	lr, [r9]
   e63be:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   e63c2:	fb0a be0e 	mla	lr, sl, lr, fp
   e63c6:	44f0      	add	r8, lr
   e63c8:	46a3      	mov	fp, r4
   e63ca:	b29b      	uxth	r3, r3
   e63cc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   e63d0:	f84b 3b04 	str.w	r3, [fp], #4
   e63d4:	f859 3b04 	ldr.w	r3, [r9], #4
   e63d8:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   e63dc:	0c1b      	lsrs	r3, r3, #16
   e63de:	fb0a e303 	mla	r3, sl, r3, lr
   e63e2:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   e63e6:	454f      	cmp	r7, r9
   e63e8:	ea4f 4813 	mov.w	r8, r3, lsr #16
   e63ec:	d901      	bls.n	e63f2 <__multiply+0x108>
   e63ee:	465c      	mov	r4, fp
   e63f0:	e7e3      	b.n	e63ba <__multiply+0xd0>
   e63f2:	6063      	str	r3, [r4, #4]
   e63f4:	3504      	adds	r5, #4
   e63f6:	e7a7      	b.n	e6348 <__multiply+0x5e>
   e63f8:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   e63fc:	b913      	cbnz	r3, e6404 <__multiply+0x11a>
   e63fe:	3e01      	subs	r6, #1
   e6400:	2e00      	cmp	r6, #0
   e6402:	dcf9      	bgt.n	e63f8 <__multiply+0x10e>
   e6404:	6106      	str	r6, [r0, #16]
   e6406:	b003      	add	sp, #12
   e6408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000e640c <__pow5mult>:
   e640c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e6410:	4615      	mov	r5, r2
   e6412:	f012 0203 	ands.w	r2, r2, #3
   e6416:	4606      	mov	r6, r0
   e6418:	460f      	mov	r7, r1
   e641a:	d007      	beq.n	e642c <__pow5mult+0x20>
   e641c:	3a01      	subs	r2, #1
   e641e:	4c21      	ldr	r4, [pc, #132]	; (e64a4 <__pow5mult+0x98>)
   e6420:	2300      	movs	r3, #0
   e6422:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   e6426:	f7ff fe91 	bl	e614c <__multadd>
   e642a:	4607      	mov	r7, r0
   e642c:	10ad      	asrs	r5, r5, #2
   e642e:	d036      	beq.n	e649e <__pow5mult+0x92>
   e6430:	6a74      	ldr	r4, [r6, #36]	; 0x24
   e6432:	b93c      	cbnz	r4, e6444 <__pow5mult+0x38>
   e6434:	2010      	movs	r0, #16
   e6436:	f7f4 fb61 	bl	daafc <malloc>
   e643a:	6270      	str	r0, [r6, #36]	; 0x24
   e643c:	6044      	str	r4, [r0, #4]
   e643e:	6084      	str	r4, [r0, #8]
   e6440:	6004      	str	r4, [r0, #0]
   e6442:	60c4      	str	r4, [r0, #12]
   e6444:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   e6448:	f8d8 4008 	ldr.w	r4, [r8, #8]
   e644c:	b94c      	cbnz	r4, e6462 <__pow5mult+0x56>
   e644e:	f240 2171 	movw	r1, #625	; 0x271
   e6452:	4630      	mov	r0, r6
   e6454:	f7ff ff40 	bl	e62d8 <__i2b>
   e6458:	2300      	movs	r3, #0
   e645a:	f8c8 0008 	str.w	r0, [r8, #8]
   e645e:	4604      	mov	r4, r0
   e6460:	6003      	str	r3, [r0, #0]
   e6462:	f04f 0800 	mov.w	r8, #0
   e6466:	07eb      	lsls	r3, r5, #31
   e6468:	d50a      	bpl.n	e6480 <__pow5mult+0x74>
   e646a:	4639      	mov	r1, r7
   e646c:	4622      	mov	r2, r4
   e646e:	4630      	mov	r0, r6
   e6470:	f7ff ff3b 	bl	e62ea <__multiply>
   e6474:	4639      	mov	r1, r7
   e6476:	4681      	mov	r9, r0
   e6478:	4630      	mov	r0, r6
   e647a:	f7ff fe50 	bl	e611e <_Bfree>
   e647e:	464f      	mov	r7, r9
   e6480:	106d      	asrs	r5, r5, #1
   e6482:	d00c      	beq.n	e649e <__pow5mult+0x92>
   e6484:	6820      	ldr	r0, [r4, #0]
   e6486:	b108      	cbz	r0, e648c <__pow5mult+0x80>
   e6488:	4604      	mov	r4, r0
   e648a:	e7ec      	b.n	e6466 <__pow5mult+0x5a>
   e648c:	4622      	mov	r2, r4
   e648e:	4621      	mov	r1, r4
   e6490:	4630      	mov	r0, r6
   e6492:	f7ff ff2a 	bl	e62ea <__multiply>
   e6496:	6020      	str	r0, [r4, #0]
   e6498:	f8c0 8000 	str.w	r8, [r0]
   e649c:	e7f4      	b.n	e6488 <__pow5mult+0x7c>
   e649e:	4638      	mov	r0, r7
   e64a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   e64a4:	000e8958 	.word	0x000e8958

000e64a8 <__lshift>:
   e64a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e64ac:	460c      	mov	r4, r1
   e64ae:	ea4f 1a62 	mov.w	sl, r2, asr #5
   e64b2:	6926      	ldr	r6, [r4, #16]
   e64b4:	6849      	ldr	r1, [r1, #4]
   e64b6:	68a3      	ldr	r3, [r4, #8]
   e64b8:	4456      	add	r6, sl
   e64ba:	4607      	mov	r7, r0
   e64bc:	4691      	mov	r9, r2
   e64be:	1c75      	adds	r5, r6, #1
   e64c0:	42ab      	cmp	r3, r5
   e64c2:	da02      	bge.n	e64ca <__lshift+0x22>
   e64c4:	3101      	adds	r1, #1
   e64c6:	005b      	lsls	r3, r3, #1
   e64c8:	e7fa      	b.n	e64c0 <__lshift+0x18>
   e64ca:	4638      	mov	r0, r7
   e64cc:	f7ff fdf2 	bl	e60b4 <_Balloc>
   e64d0:	2300      	movs	r3, #0
   e64d2:	4680      	mov	r8, r0
   e64d4:	f100 0114 	add.w	r1, r0, #20
   e64d8:	461a      	mov	r2, r3
   e64da:	4553      	cmp	r3, sl
   e64dc:	da03      	bge.n	e64e6 <__lshift+0x3e>
   e64de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   e64e2:	3301      	adds	r3, #1
   e64e4:	e7f9      	b.n	e64da <__lshift+0x32>
   e64e6:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   e64ea:	6920      	ldr	r0, [r4, #16]
   e64ec:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   e64f0:	f019 091f 	ands.w	r9, r9, #31
   e64f4:	f104 0114 	add.w	r1, r4, #20
   e64f8:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   e64fc:	d014      	beq.n	e6528 <__lshift+0x80>
   e64fe:	f1c9 0c20 	rsb	ip, r9, #32
   e6502:	2200      	movs	r2, #0
   e6504:	6808      	ldr	r0, [r1, #0]
   e6506:	fa00 f009 	lsl.w	r0, r0, r9
   e650a:	4302      	orrs	r2, r0
   e650c:	469a      	mov	sl, r3
   e650e:	f843 2b04 	str.w	r2, [r3], #4
   e6512:	f851 2b04 	ldr.w	r2, [r1], #4
   e6516:	458e      	cmp	lr, r1
   e6518:	fa22 f20c 	lsr.w	r2, r2, ip
   e651c:	d8f2      	bhi.n	e6504 <__lshift+0x5c>
   e651e:	f8ca 2004 	str.w	r2, [sl, #4]
   e6522:	b142      	cbz	r2, e6536 <__lshift+0x8e>
   e6524:	1cb5      	adds	r5, r6, #2
   e6526:	e006      	b.n	e6536 <__lshift+0x8e>
   e6528:	3b04      	subs	r3, #4
   e652a:	f851 2b04 	ldr.w	r2, [r1], #4
   e652e:	f843 2f04 	str.w	r2, [r3, #4]!
   e6532:	458e      	cmp	lr, r1
   e6534:	d8f9      	bhi.n	e652a <__lshift+0x82>
   e6536:	3d01      	subs	r5, #1
   e6538:	4638      	mov	r0, r7
   e653a:	f8c8 5010 	str.w	r5, [r8, #16]
   e653e:	4621      	mov	r1, r4
   e6540:	f7ff fded 	bl	e611e <_Bfree>
   e6544:	4640      	mov	r0, r8
   e6546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000e654a <__mcmp>:
   e654a:	6903      	ldr	r3, [r0, #16]
   e654c:	690a      	ldr	r2, [r1, #16]
   e654e:	1a9b      	subs	r3, r3, r2
   e6550:	b510      	push	{r4, lr}
   e6552:	d111      	bne.n	e6578 <__mcmp+0x2e>
   e6554:	0092      	lsls	r2, r2, #2
   e6556:	3014      	adds	r0, #20
   e6558:	3114      	adds	r1, #20
   e655a:	1883      	adds	r3, r0, r2
   e655c:	440a      	add	r2, r1
   e655e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   e6562:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   e6566:	428c      	cmp	r4, r1
   e6568:	d002      	beq.n	e6570 <__mcmp+0x26>
   e656a:	d307      	bcc.n	e657c <__mcmp+0x32>
   e656c:	2001      	movs	r0, #1
   e656e:	bd10      	pop	{r4, pc}
   e6570:	4298      	cmp	r0, r3
   e6572:	d3f4      	bcc.n	e655e <__mcmp+0x14>
   e6574:	2000      	movs	r0, #0
   e6576:	bd10      	pop	{r4, pc}
   e6578:	4618      	mov	r0, r3
   e657a:	bd10      	pop	{r4, pc}
   e657c:	f04f 30ff 	mov.w	r0, #4294967295
   e6580:	bd10      	pop	{r4, pc}

000e6582 <__mdiff>:
   e6582:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e6586:	460c      	mov	r4, r1
   e6588:	4607      	mov	r7, r0
   e658a:	4611      	mov	r1, r2
   e658c:	4620      	mov	r0, r4
   e658e:	4615      	mov	r5, r2
   e6590:	f7ff ffdb 	bl	e654a <__mcmp>
   e6594:	1e06      	subs	r6, r0, #0
   e6596:	d108      	bne.n	e65aa <__mdiff+0x28>
   e6598:	4631      	mov	r1, r6
   e659a:	4638      	mov	r0, r7
   e659c:	f7ff fd8a 	bl	e60b4 <_Balloc>
   e65a0:	2301      	movs	r3, #1
   e65a2:	6103      	str	r3, [r0, #16]
   e65a4:	6146      	str	r6, [r0, #20]
   e65a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   e65aa:	bfbc      	itt	lt
   e65ac:	4623      	movlt	r3, r4
   e65ae:	462c      	movlt	r4, r5
   e65b0:	4638      	mov	r0, r7
   e65b2:	6861      	ldr	r1, [r4, #4]
   e65b4:	bfba      	itte	lt
   e65b6:	461d      	movlt	r5, r3
   e65b8:	2601      	movlt	r6, #1
   e65ba:	2600      	movge	r6, #0
   e65bc:	f7ff fd7a 	bl	e60b4 <_Balloc>
   e65c0:	692b      	ldr	r3, [r5, #16]
   e65c2:	60c6      	str	r6, [r0, #12]
   e65c4:	6926      	ldr	r6, [r4, #16]
   e65c6:	f105 0914 	add.w	r9, r5, #20
   e65ca:	3414      	adds	r4, #20
   e65cc:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   e65d0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   e65d4:	f100 0514 	add.w	r5, r0, #20
   e65d8:	f04f 0c00 	mov.w	ip, #0
   e65dc:	f854 3b04 	ldr.w	r3, [r4], #4
   e65e0:	f859 2b04 	ldr.w	r2, [r9], #4
   e65e4:	fa1c f183 	uxtah	r1, ip, r3
   e65e8:	fa1f fe82 	uxth.w	lr, r2
   e65ec:	0c12      	lsrs	r2, r2, #16
   e65ee:	ebce 0101 	rsb	r1, lr, r1
   e65f2:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   e65f6:	eb03 4321 	add.w	r3, r3, r1, asr #16
   e65fa:	b289      	uxth	r1, r1
   e65fc:	ea4f 4c23 	mov.w	ip, r3, asr #16
   e6600:	45c8      	cmp	r8, r9
   e6602:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   e6606:	46a6      	mov	lr, r4
   e6608:	f845 3b04 	str.w	r3, [r5], #4
   e660c:	d8e6      	bhi.n	e65dc <__mdiff+0x5a>
   e660e:	45be      	cmp	lr, r7
   e6610:	d20e      	bcs.n	e6630 <__mdiff+0xae>
   e6612:	f85e 1b04 	ldr.w	r1, [lr], #4
   e6616:	fa1c f281 	uxtah	r2, ip, r1
   e661a:	1413      	asrs	r3, r2, #16
   e661c:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   e6620:	b292      	uxth	r2, r2
   e6622:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   e6626:	ea4f 4c23 	mov.w	ip, r3, asr #16
   e662a:	f845 2b04 	str.w	r2, [r5], #4
   e662e:	e7ee      	b.n	e660e <__mdiff+0x8c>
   e6630:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   e6634:	b90b      	cbnz	r3, e663a <__mdiff+0xb8>
   e6636:	3e01      	subs	r6, #1
   e6638:	e7fa      	b.n	e6630 <__mdiff+0xae>
   e663a:	6106      	str	r6, [r0, #16]
   e663c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000e6640 <__ulp>:
   e6640:	4b12      	ldr	r3, [pc, #72]	; (e668c <__ulp+0x4c>)
   e6642:	ee10 2a90 	vmov	r2, s1
   e6646:	401a      	ands	r2, r3
   e6648:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   e664c:	2b00      	cmp	r3, #0
   e664e:	dd02      	ble.n	e6656 <__ulp+0x16>
   e6650:	2000      	movs	r0, #0
   e6652:	4619      	mov	r1, r3
   e6654:	e017      	b.n	e6686 <__ulp+0x46>
   e6656:	425b      	negs	r3, r3
   e6658:	151b      	asrs	r3, r3, #20
   e665a:	2b13      	cmp	r3, #19
   e665c:	f04f 0000 	mov.w	r0, #0
   e6660:	f04f 0100 	mov.w	r1, #0
   e6664:	dc04      	bgt.n	e6670 <__ulp+0x30>
   e6666:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   e666a:	fa42 f103 	asr.w	r1, r2, r3
   e666e:	e00a      	b.n	e6686 <__ulp+0x46>
   e6670:	3b14      	subs	r3, #20
   e6672:	2b1e      	cmp	r3, #30
   e6674:	f04f 0201 	mov.w	r2, #1
   e6678:	bfda      	itte	le
   e667a:	f1c3 031f 	rsble	r3, r3, #31
   e667e:	fa02 f303 	lslle.w	r3, r2, r3
   e6682:	4613      	movgt	r3, r2
   e6684:	4618      	mov	r0, r3
   e6686:	ec41 0b10 	vmov	d0, r0, r1
   e668a:	4770      	bx	lr
   e668c:	7ff00000 	.word	0x7ff00000

000e6690 <__b2d>:
   e6690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e6692:	6905      	ldr	r5, [r0, #16]
   e6694:	f100 0614 	add.w	r6, r0, #20
   e6698:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   e669c:	1f2f      	subs	r7, r5, #4
   e669e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   e66a2:	4620      	mov	r0, r4
   e66a4:	f7ff fdcb 	bl	e623e <__hi0bits>
   e66a8:	f1c0 0320 	rsb	r3, r0, #32
   e66ac:	280a      	cmp	r0, #10
   e66ae:	600b      	str	r3, [r1, #0]
   e66b0:	dc14      	bgt.n	e66dc <__b2d+0x4c>
   e66b2:	f1c0 0e0b 	rsb	lr, r0, #11
   e66b6:	fa24 f10e 	lsr.w	r1, r4, lr
   e66ba:	42be      	cmp	r6, r7
   e66bc:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   e66c0:	bf34      	ite	cc
   e66c2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   e66c6:	2100      	movcs	r1, #0
   e66c8:	3015      	adds	r0, #21
   e66ca:	fa04 f000 	lsl.w	r0, r4, r0
   e66ce:	fa21 f10e 	lsr.w	r1, r1, lr
   e66d2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   e66d6:	ea40 0201 	orr.w	r2, r0, r1
   e66da:	e023      	b.n	e6724 <__b2d+0x94>
   e66dc:	42be      	cmp	r6, r7
   e66de:	bf3a      	itte	cc
   e66e0:	f1a5 0708 	subcc.w	r7, r5, #8
   e66e4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   e66e8:	2100      	movcs	r1, #0
   e66ea:	380b      	subs	r0, #11
   e66ec:	d015      	beq.n	e671a <__b2d+0x8a>
   e66ee:	4084      	lsls	r4, r0
   e66f0:	f1c0 0520 	rsb	r5, r0, #32
   e66f4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   e66f8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   e66fc:	42b7      	cmp	r7, r6
   e66fe:	fa21 fe05 	lsr.w	lr, r1, r5
   e6702:	ea44 030e 	orr.w	r3, r4, lr
   e6706:	bf8c      	ite	hi
   e6708:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   e670c:	2400      	movls	r4, #0
   e670e:	fa01 f000 	lsl.w	r0, r1, r0
   e6712:	40ec      	lsrs	r4, r5
   e6714:	ea40 0204 	orr.w	r2, r0, r4
   e6718:	e004      	b.n	e6724 <__b2d+0x94>
   e671a:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   e671e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   e6722:	460a      	mov	r2, r1
   e6724:	ec43 2b10 	vmov	d0, r2, r3
   e6728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e672a <__d2b>:
   e672a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   e672e:	460e      	mov	r6, r1
   e6730:	2101      	movs	r1, #1
   e6732:	ec59 8b10 	vmov	r8, r9, d0
   e6736:	4615      	mov	r5, r2
   e6738:	f7ff fcbc 	bl	e60b4 <_Balloc>
   e673c:	f3c9 540a 	ubfx	r4, r9, #20, #11
   e6740:	4607      	mov	r7, r0
   e6742:	f3c9 0313 	ubfx	r3, r9, #0, #20
   e6746:	b10c      	cbz	r4, e674c <__d2b+0x22>
   e6748:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   e674c:	9301      	str	r3, [sp, #4]
   e674e:	f1b8 0f00 	cmp.w	r8, #0
   e6752:	d019      	beq.n	e6788 <__d2b+0x5e>
   e6754:	a802      	add	r0, sp, #8
   e6756:	f840 8d08 	str.w	r8, [r0, #-8]!
   e675a:	f7ff fd90 	bl	e627e <__lo0bits>
   e675e:	9b00      	ldr	r3, [sp, #0]
   e6760:	b148      	cbz	r0, e6776 <__d2b+0x4c>
   e6762:	9a01      	ldr	r2, [sp, #4]
   e6764:	f1c0 0120 	rsb	r1, r0, #32
   e6768:	fa02 f101 	lsl.w	r1, r2, r1
   e676c:	430b      	orrs	r3, r1
   e676e:	40c2      	lsrs	r2, r0
   e6770:	617b      	str	r3, [r7, #20]
   e6772:	9201      	str	r2, [sp, #4]
   e6774:	e000      	b.n	e6778 <__d2b+0x4e>
   e6776:	617b      	str	r3, [r7, #20]
   e6778:	9b01      	ldr	r3, [sp, #4]
   e677a:	61bb      	str	r3, [r7, #24]
   e677c:	2b00      	cmp	r3, #0
   e677e:	bf14      	ite	ne
   e6780:	2102      	movne	r1, #2
   e6782:	2101      	moveq	r1, #1
   e6784:	6139      	str	r1, [r7, #16]
   e6786:	e007      	b.n	e6798 <__d2b+0x6e>
   e6788:	a801      	add	r0, sp, #4
   e678a:	f7ff fd78 	bl	e627e <__lo0bits>
   e678e:	9b01      	ldr	r3, [sp, #4]
   e6790:	617b      	str	r3, [r7, #20]
   e6792:	2101      	movs	r1, #1
   e6794:	6139      	str	r1, [r7, #16]
   e6796:	3020      	adds	r0, #32
   e6798:	b134      	cbz	r4, e67a8 <__d2b+0x7e>
   e679a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   e679e:	4404      	add	r4, r0
   e67a0:	6034      	str	r4, [r6, #0]
   e67a2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   e67a6:	e009      	b.n	e67bc <__d2b+0x92>
   e67a8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   e67ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   e67b0:	6030      	str	r0, [r6, #0]
   e67b2:	6918      	ldr	r0, [r3, #16]
   e67b4:	f7ff fd43 	bl	e623e <__hi0bits>
   e67b8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   e67bc:	6028      	str	r0, [r5, #0]
   e67be:	4638      	mov	r0, r7
   e67c0:	b003      	add	sp, #12
   e67c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000e67c6 <__ratio>:
   e67c6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   e67ca:	4688      	mov	r8, r1
   e67cc:	4669      	mov	r1, sp
   e67ce:	4681      	mov	r9, r0
   e67d0:	f7ff ff5e 	bl	e6690 <__b2d>
   e67d4:	a901      	add	r1, sp, #4
   e67d6:	4640      	mov	r0, r8
   e67d8:	ec55 4b10 	vmov	r4, r5, d0
   e67dc:	f7ff ff58 	bl	e6690 <__b2d>
   e67e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
   e67e4:	f8d8 2010 	ldr.w	r2, [r8, #16]
   e67e8:	1a9a      	subs	r2, r3, r2
   e67ea:	e89d 000a 	ldmia.w	sp, {r1, r3}
   e67ee:	1ac9      	subs	r1, r1, r3
   e67f0:	ec57 6b10 	vmov	r6, r7, d0
   e67f4:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   e67f8:	2b00      	cmp	r3, #0
   e67fa:	bfcc      	ite	gt
   e67fc:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   e6800:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   e6804:	4632      	mov	r2, r6
   e6806:	463b      	mov	r3, r7
   e6808:	4620      	mov	r0, r4
   e680a:	4629      	mov	r1, r5
   e680c:	f7fc fb42 	bl	e2e94 <__aeabi_ddiv>
   e6810:	ec41 0b10 	vmov	d0, r0, r1
   e6814:	b003      	add	sp, #12
   e6816:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000e681a <__copybits>:
   e681a:	3901      	subs	r1, #1
   e681c:	b510      	push	{r4, lr}
   e681e:	1149      	asrs	r1, r1, #5
   e6820:	6914      	ldr	r4, [r2, #16]
   e6822:	3101      	adds	r1, #1
   e6824:	f102 0314 	add.w	r3, r2, #20
   e6828:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   e682c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   e6830:	42a3      	cmp	r3, r4
   e6832:	4602      	mov	r2, r0
   e6834:	d204      	bcs.n	e6840 <__copybits+0x26>
   e6836:	f853 2b04 	ldr.w	r2, [r3], #4
   e683a:	f840 2b04 	str.w	r2, [r0], #4
   e683e:	e7f7      	b.n	e6830 <__copybits+0x16>
   e6840:	2300      	movs	r3, #0
   e6842:	428a      	cmp	r2, r1
   e6844:	d202      	bcs.n	e684c <__copybits+0x32>
   e6846:	f842 3b04 	str.w	r3, [r2], #4
   e684a:	e7fa      	b.n	e6842 <__copybits+0x28>
   e684c:	bd10      	pop	{r4, pc}

000e684e <__any_on>:
   e684e:	f100 0214 	add.w	r2, r0, #20
   e6852:	6900      	ldr	r0, [r0, #16]
   e6854:	114b      	asrs	r3, r1, #5
   e6856:	4298      	cmp	r0, r3
   e6858:	b510      	push	{r4, lr}
   e685a:	db0c      	blt.n	e6876 <__any_on+0x28>
   e685c:	dd0c      	ble.n	e6878 <__any_on+0x2a>
   e685e:	f011 011f 	ands.w	r1, r1, #31
   e6862:	d009      	beq.n	e6878 <__any_on+0x2a>
   e6864:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   e6868:	fa24 f001 	lsr.w	r0, r4, r1
   e686c:	fa00 f101 	lsl.w	r1, r0, r1
   e6870:	428c      	cmp	r4, r1
   e6872:	d10c      	bne.n	e688e <__any_on+0x40>
   e6874:	e000      	b.n	e6878 <__any_on+0x2a>
   e6876:	4603      	mov	r3, r0
   e6878:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   e687c:	4293      	cmp	r3, r2
   e687e:	d904      	bls.n	e688a <__any_on+0x3c>
   e6880:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   e6884:	2900      	cmp	r1, #0
   e6886:	d0f9      	beq.n	e687c <__any_on+0x2e>
   e6888:	e001      	b.n	e688e <__any_on+0x40>
   e688a:	2000      	movs	r0, #0
   e688c:	bd10      	pop	{r4, pc}
   e688e:	2001      	movs	r0, #1
   e6890:	bd10      	pop	{r4, pc}

000e6892 <_calloc_r>:
   e6892:	b538      	push	{r3, r4, r5, lr}
   e6894:	fb02 f401 	mul.w	r4, r2, r1
   e6898:	4621      	mov	r1, r4
   e689a:	f7f4 f977 	bl	dab8c <_malloc_r>
   e689e:	4605      	mov	r5, r0
   e68a0:	b118      	cbz	r0, e68aa <_calloc_r+0x18>
   e68a2:	4622      	mov	r2, r4
   e68a4:	2100      	movs	r1, #0
   e68a6:	f7fc fe70 	bl	e358a <memset>
   e68aa:	4628      	mov	r0, r5
   e68ac:	bd38      	pop	{r3, r4, r5, pc}

000e68ae <__env_lock>:
   e68ae:	4770      	bx	lr

000e68b0 <__env_unlock>:
   e68b0:	4770      	bx	lr

000e68b2 <link_code_end>:
	...

000e68b4 <dynalib_user>:
   e68b4:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   e68c4:	0000 0000                                   ....

000e68c8 <functions>:
   e68c8:	6a6e 000e d831 000d 0029 0000 0000 0000     nj..1...).......
   e68d8:	6a72 000e dbb1 000d 0029 0000 0000 0000     rj......).......
   e68e8:	6a77 000e dc75 000d 0029 0000 0000 0000     wj..u...).......
   e68f8:	6a7c 000e d2d9 000d 0029 0000 0000 0000     |j......).......
   e6908:	6a81 000e dd39 000d 002a 0000 0000 0000     .j..9...*.......
   e6918:	6a87 000e d651 000d 0029 0000 0000 0000     .j..Q...).......
   e6928:	6a73 000e d771 000d 0029 0000 0000 0000     sj..q...).......
   e6938:	6a8c 000e dd41 000d 0029 0000 0000 0000     .j..A...).......
   e6948:	7ddd 000e 40c9 000d 0028 0000 0000 0000     .}...@..(.......
   e6958:	6a91 000e de19 000d 0029 0000 0000 0000     .j......).......
   e6968:	6a95 000e 43d9 000d 0029 0000 0000 0000     .j...C..).......
   e6978:	6a99 000e d841 000d 0029 0000 0000 0000     .j..A...).......
   e6988:	6a9f 000e dff9 000d 0029 0000 0000 0000     .j......).......
   e6998:	6aa2 000e e109 000d 0029 0000 0000 0000     .j......).......
   e69a8:	6aa6 000e e109 000d 0029 0000 0000 0000     .j......).......
   e69b8:	6aac 000e 4449 000d 002a 0000 0000 0000     .j..ID..*.......
   e69c8:	6ab0 000e 4509 000d 002a 0000 0000 0000     .j...E..*.......
   e69d8:	6ab4 000e 40b9 000d 0028 0000 0000 0000     .j...@..(.......
   e69e8:	6ab7 000e e221 000d 002a 0000 0000 0000     .j..!...*.......
   e69f8:	6a78 000e d961 000d 0029 0000 0000 0000     xj..a...).......
   e6a08:	6abb 000e e559 000d 0029 0000 0000 0000     .j..Y...).......
   e6a18:	6ac0 000e e635 000d 0029 0000 0000 0000     .j..5...).......
   e6a28:	6a7d 000e da21 000d 0029 0000 0000 0000     }j..!...).......
   e6a38:	6ac5 000e da91 000d 0029 0000 0000 0000     .j......).......
	...
   e6a58:	2a25 0073 6625 000a 6f62 6e75 2064 7025     %*s.%f..bound %p
   e6a68:	000a 2566 0064 6261 0073 6361 736f 6100     ..f%d.abs.acos.a
   e6a78:	6973 006e 7461 6e61 6100 6174 326e 6300     sin.atan.atan2.c
   e6a88:	6965 006c 6f63 6873 6500 7078 6600 6361     eil.cosh.exp.fac
   e6a98:	6600 6f6c 726f 6c00 006e 6f6c 0067 6f6c     .floor.ln.log.lo
   e6aa8:	3167 0030 636e 0072 706e 0072 6970 7000     g10.ncr.npr.pi.p
   e6ab8:	776f 7300 6e69 0068 7173 7472 7400 6e61     ow.sinh.sqrt.tan
   e6ac8:	0068 0000                                   h...

000e6acc <_ZTVN8particle9LEDStatusE>:
	...
   e6ad4:	54a5 000d 54bd 000d 52f3 000d               .T...T...R..

000e6ae0 <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   e6ae0:	6c62 6b6e 6e69 0066 6576 0072 2e30 2e36     blnkinf.ver.0.6.
   e6af0:	0033 2d68 6562 7461 3600 0030 7562 6666     3.h-beat.60.buff
   e6b00:	692d 006e 3031 3432 6400 7665 5000 7261     -in.1024.dev.Par
   e6b10:	6974 6c63 0065 7562 6c69 0064 614d 2079     ticle.build.May 
   e6b20:	3231 3220 3230 2030 3231 353a 3a32 3733     12 2020 12:52:37
   e6b30:	0000 5d00 0020 4d47 2054 6573 6f63 646e     ...] .GMT second
   e6b40:	2073 666f 7366 7465 6920 3a73 0020 6925     s offset is: .%i
   e6b50:	2500 696c 4300 6e6f 656e 7463 6e69 2067     .%li.Connecting 
   e6b60:	6f74 0020 0a0d 2020 2020 5f5f 205f 5f20     to ...    ___  _
   e6b70:	205f 2020 2020 2020 2020 5f20 0d5f 200a     _          __.. 
   e6b80:	2020 202f 205f 2f29 2f20 205f 5f5f 5f5f       / _ )/ /_ ____
   e6b90:	205f 2f20 2f20 5f5f 0a0d 2020 202f 205f     _  / /__..  / _ 
   e6ba0:	2f20 2f20 2f20 202f 202f 205f 2f5c 2020      / / // / _ \/  
   e6bb0:	5f27 0d2f 200a 5f2f 5f5f 2f5f 2f5f 5f5c     '_/.. /____/_/\_
   e6bc0:	202c 5f2f 2f2f 2f5f 2f5f 5f5c 0d5c 200a     , /_//_/_/\_\.. 
   e6bd0:	2020 2020 2020 2f20 5f5f 2f5f 7620 2e30            /___/ v0.
   e6be0:	2e36 2033 6e6f 5020 7261 6974 6c63 0d65     6.3 on Particle.
   e6bf0:	000a 6544 6976 6563 0020 6120 6464 6572     ..Device . addre
   e6c00:	7373 303a 0078 4e20 544f 6120 0074 6353     ss:0x. NOT at.Sc
   e6c10:	6e61 696e 676e 2e2e 002e 6e55 6e6b 776f     anning....Unknow
   e6c20:	206e 7265 6f72 2072 7461 6120 6464 6572     n error at addre
   e6c30:	7373 3020 0078 6f4e 4920 4332 6420 7665     ss 0x.No I2C dev
   e6c40:	6369 7365 6620 756f 646e 000a 6f64 656e     ices found..done
   e6c50:	000a 6153 6976 676e 5320 6174 6574 4c00     ..Saving State.L
   e6c60:	616f 6964 676e 5320 6174 6574 4400 7369     oading State.Dis
   e6c70:	6f63 6e6e 6365 6574 0064 2a2a 2a2a 442a     connected.*****D
   e6c80:	7665 6369 2065 6f5a 656e 7620 6c61 6575     evice Zone value
   e6c90:	6920 3a73 0020 2a2a 2a2a 552a 6470 7461      is: .*****Updat
   e6ca0:	2065 7562 7a7a 7265 6154 706d 7265 6620     e buzzerTamper f
   e6cb0:	616c 2067 6176 756c 2065 7369 203a 2a00     lag value is: .*
   e6cc0:	2a2a 2a2a 7055 6164 6574 6220 7a75 657a     ****Update buzze
   e6cd0:	5672 7061 726f 6620 616c 2067 6176 756c     rVapor flag valu
   e6ce0:	2065 7369 203a 2a00 2a2a 2a2a 7055 6164     e is: .*****Upda
   e6cf0:	6574 6e20 746f 6669 5679 7061 726f 6620     te notifyVapor f
   e6d00:	616c 2067 6176 756c 2065 7369 203a 2a00     lag value is: .*
   e6d10:	2a2a 2a2a 7055 6164 6574 6e20 746f 6669     ****Update notif
   e6d20:	5479 6d61 6570 2072 6c66 6761 7620 6c61     yTamper flag val
   e6d30:	6575 6920 3a73 0020 2a2a 2a2a 552a 6470     ue is: .*****Upd
   e6d40:	7461 2065 6341 6563 656c 6f72 656d 6574     ate Acceleromete
   e6d50:	2072 6874 6572 6873 6c6f 2064 6176 756c     r threshold valu
   e6d60:	2065 7369 203a 5500 6470 7461 2065 6341     e is: .Update Ac
   e6d70:	6563 656c 6f72 656d 6574 2072 6176 756c     celerometer valu
   e6d80:	2065 7369 203a 5700 6c69 206c 6572 6573     e is: .Will rese
   e6d90:	2074 7973 7473 6d65 0020 7055 6164 6574     t system .Update
   e6da0:	6e20 746f 6669 4279 7461 6574 7972 6620      notifyBattery f
   e6db0:	616c 2067 6176 756c 2065 7369 203a 4900     lag value is: .I
   e6dc0:	696e 6974 6c61 7a69 6e69 2067 6c61 7261     nitializing alar
   e6dd0:	006d 6553 6f63 646e 0073 6957 6946 6e20     m.Seconds.WiFi n
   e6de0:	746f 7220 6165 7964 4200 796c 6b6e 6e20     ot ready.Blynk n
   e6df0:	746f 6320 6e6f 656e 7463 6465 7000 6275     ot connected.pub
   e6e00:	696c 6873 4d47 4f54 6666 6573 5274 7165     lishGMTOffsetReq
   e6e10:	6575 7473 4420 7665 6369 2065 6f5a 656e     uest Device Zone
   e6e20:	7620 6c61 6575 6920 3a73 0020 6d41 7265      value is: .Amer
   e6e30:	6369 2f61 654e 5f77 6f59 6b72 4100 656d     ica/New_York.Ame
   e6e40:	6972 6163 432f 6968 6163 6f67 4100 656d     rica/Chicago.Ame
   e6e50:	6972 6163 502f 6f68 6e65 7869 4100 656d     rica/Phoenix.Ame
   e6e60:	6972 6163 4c2f 736f 415f 676e 6c65 7365     rica/Los_Angeles
   e6e70:	7000 6d77 6400 0077 7761 4900 766e 6c61     .pwm.dw.aw.Inval
   e6e80:	6469 4820 2057 6d63 3a64 0020 6e49 6176     id HW cmd: .Inva
   e6e90:	696c 2064 6970 206e 2000 6f6d 6564 0020     lid pin . mode .
   e6ea0:	003e 6142 2064 6468 2072 656c 3a6e 0020     >.Bad hdr len: .
   e6eb0:	6552 6461 2079 7028 6e69 3a67 0020 736d     Ready (ping: .ms
   e6ec0:	2e29 4600 6572 2065 4152 3a4d 0020 6e49     )..Free RAM: .In
   e6ed0:	6176 696c 2064 7561 6874 7420 6b6f 6e65     valid auth token
   e6ee0:	4300 6e6f 656e 7463 6620 6961 656c 2e64     .Connect failed.
   e6ef0:	6320 646f 3a65 0020 6150 6b63 7465 7420      code: .Packet t
   e6f00:	6f6f 6220 6769 203a 4300 6e61 7427 7220     oo big: .Can't r
   e6f10:	6165 2064 6f62 7964 5200 6165 7964 5200     ead body.Ready.R
   e6f20:	6465 7269 6365 6974 676e 7420 206f 4900     edirecting to .I
   e6f30:	766e 6c61 6469 6920 746e 7265 616e 206c     nvalid internal 
   e6f40:	6d63 3a64 5300 7265 6576 3a72 0020 6e49     cmd:.Server: .In
   e6f50:	6176 696c 2064 6568 6461 7265 7420 7079     valid header typ
   e6f60:	3a65 0020 6548 7261 6274 6165 2074 6974     e: .Heartbeat ti
   e6f70:	656d 756f 3a74 0020 202c 4c00 676f 6e69     meout: ., .Login
   e6f80:	7420 6d69 6f65 7475 3c00 4300 646d 6520      timeout.<.Cmd e
   e6f90:	7272 726f 5300 6e65 2074 7600 0077 5453     rror.Sent .vw.ST
   e6fa0:	5942 2500 2568 2065 5225 2500 2000 2020     BY.%h%e %R.%.   
   e6fb0:	2020 2020 2020 2020 2020 2020 0020 6f47                  .Go
   e6fc0:	6e69 2067 6f74 7320 656c 7065 4700 696f     ing to sleep.Goi
   e6fd0:	676e 7420 206f 7473 6e61 6264 2079 6c73     ng to standby sl
   e6fe0:	6565 0070 6f47 6e69 2067 6f74 6420 6565     eep.Going to dee
   e6ff0:	2070 6c73 6565 0070 2b20 0020 3225 332e     p sleep. + .%2.3
   e7000:	0066 6f43 6e6e 6365 6574 0064 6e45 6574     f.Connected.Ente
   e7010:	2072 6f63 6564 7420 206f 6572 6573 0074     r code to reset.
   e7020:	6e49 7469 6169 696c 657a 2064 6564 6166     Initialized defa
   e7030:	6c75 2074 6176 756c 7365 4600 6e69 7369     ult values.Finis
   e7040:	6568 2064 6e49 7469 6169 696c 617a 6974     hed Initializati
   e7050:	6e6f 7200 7365 7465 656d 4500 746e 7265     on.resetme.Enter
   e7060:	6520 7078 6572 7373 6f69 206e 6568 6572      expression here
   e7070:	4500 746e 7265 6520 616d 6c69 6820 7265     .Enter email her
   e7080:	0065 6148 6472 5220 7365 7465 6974 676e     e.Hard Resetting
   e7090:	4200 796c 6b6e 6920 2073 6f6e 2077 6f63     .Blynk is now co
   e70a0:	6e6e 6365 6574 2064 202d 7973 636e 6e69     nnected - syncin
   e70b0:	2067 6c61 206c 6970 736e 002e 6d70 0031     g all pins..pm1.
   e70c0:	6d70 0032 6d70 0034 6d70 3031 6300 6e6f     pm2.pm4.pm10.con
   e70d0:	0063 6574 706d 2500 2e32 6637 5400 6568     c.temp.%2.7f.The
   e70e0:	6520 7078 6572 7373 6f69 206e 7369 5420      expression is T
   e70f0:	7572 0065 6854 2065 7865 7270 7365 6973     rue.The expressi
   e7100:	6e6f 6920 2073 6146 736c 0065 7245 6f72     on is False.Erro
   e7110:	2072 656e 7261 6320 6168 3a72 0020 2a2a     r near char: .**
   e7120:	202a 4341 4543 204c 4e49 4554 5252 5055     * ACCEL INTERRUP
   e7130:	4554 2044 2a2a 002a 2a2a 202a 4e49 4341     TED ***.*** INAC
   e7140:	4954 4956 5954 2a20 2a2a 2a00 2a2a 4120     TIVITY ***.*** A
   e7150:	5443 5649 5449 2059 2a2a 002a 6174 706d     CTIVITY ***.tamp
   e7160:	7265 615f 656c 7472 4100 7474 6d65 7470     er_alert.Attempt
   e7170:	6e69 2067 6f74 6320 6e6f 656e 7463 5720     ing to connect W
   e7180:	4669 2e69 2e2e 5700 4669 2069 6572 6461     iFi....WiFi read
   e7190:	0079 7441 6574 706d 6974 676e 7420 206f     y.Attempting to 
   e71a0:	6f63 6e6e 6365 2074 6f74 5020 7261 6974     connect to Parti
   e71b0:	6c63 2e65 2e2e 5000 7261 6974 6c63 2065     cle....Particle 
   e71c0:	6f6e 2074 6f63 6e6e 6365 6574 0064 6150     not connected.Pa
   e71d0:	7472 6369 656c 6320 6e6f 656e 7463 6465     rticle connected
   e71e0:	4100 7474 6d65 7470 6e69 2067 6f74 6320     .Attempting to c
   e71f0:	6e6f 656e 7463 7420 206f 6c42 6e79 2e6b     onnect to Blynk.
   e7200:	2e2e 7a00 7065 6f74 6573 736e 3265 622e     ...zeptosense2.b
   e7210:	796c 6b6e 632e 0063 6c42 6e79 206b 6f63     lynk.cc.Blynk co
   e7220:	6e6e 6365 6574 0064 7473 7261 2074 6572     nnected.start re
   e7230:	6461 6553 736e 726f 0073 7453 7461 2065     adSensors.State 
   e7240:	6176 756c 7365 6120 6572 203a 7542 7a7a     values are: Buzz
   e7250:	7265 5420 6d61 6570 2072 4200 7a75 657a     er Tamper .Buzze
   e7260:	2072 6156 6f70 2072 4e00 746f 6669 2079     r Vapor .Notify 
   e7270:	6156 6f70 2072 4e00 746f 6669 2079 6154     Vapor .Notify Ta
   e7280:	706d 7265 0020 6f4e 6974 7966 4220 7461     mper .Notify Bat
   e7290:	6574 7972 0020 6341 6974 6976 7974 5420     tery .Activity T
   e72a0:	7268 7365 6f68 646c 0020 6544 6976 6563     hreshold .Device
   e72b0:	5a20 6e6f 2065 5300 6174 7472 5320 7465      Zone .Start Set
   e72c0:	7075 7320 6365 6974 6e6f 6120 7466 7265     up section after
   e72d0:	6120 7320 656c 7065 5500 616e 6c62 2065      a sleep.Unable 
   e72e0:	6f74 7220 6165 2064 7845 6170 646e 7265     to read Expander
   e72f0:	2d20 7220 7365 7465 6974 676e 6920 206e      - resetting in 
   e7300:	2039 6573 6f63 646e 0073 7245 6f72 0072     9 seconds.Error.
   e7310:	3164 253d 0075 6843 6365 696b 676e 6920     d1=%u.Checking i
   e7320:	6332 6420 7665 6369 7365 2e2e 002e 5245     2c devices....ER
   e7330:	0052 3249 2043 7349 7573 0065 4452 0059     R.I2C Issue.RDY.
   e7340:	3249 2043 4b4f 4200 6665 726f 0065 6641     I2C OK.Before.Af
   e7350:	6574 0072 4441 4c58 3433 2035 6553 7574     ter.ADXL345 Setu
   e7360:	0070 6e55 6261 656c 7420 206f 6572 6461     p.Unable to read
   e7370:	5320 5350 3033 2d20 7420 7972 6e69 2067      SPS30 - trying 
   e7380:	6761 6961 006e 6552 6461 5320 5350 3033     again.Read SPS30
   e7390:	5400 6d69 2065 7369 7320 6e79 2763 6465     .Time is sync'ed
   e73a0:	7420 206f 6874 2065 6c63 756f 0064 2d2d      to the cloud.--
   e73b0:	614d 7373 4320 6e6f 6563 746e 6172 6974     Mass Concentrati
   e73c0:	6e6f 2d2d 2500 3a73 2520 2e30 6632 0a0d     on--.%s: %0.2f..
   e73d0:	2d00 4e2d 6d75 6562 2072 6f43 636e 6e65     .--Number Concen
   e73e0:	7274 7461 6f69 2d6e 002d 3025 312e 0066     tration--.%0.1f.
   e73f0:	0046 6574 706d 3a31 0020 6756 7361 203a     F.temp1: .Vgas: 
   e7400:	4300 6e6f 3a63 0020 3025 302e 0066 4c41     .Conc: .%0.0f.AL
   e7410:	5452 2021 4100 454c 5452 2021 2020 2020     RT! .ALERT!     
   e7420:	2020 2020 2020 2020 7c00 4100 524c 2154             .|.ALRT!
   e7430:	5500 6470 7461 6e69 0067 7562 7a7a 7265     .Updating.buzzer
   e7440:	7420 746f 6c61 7420 6d69 2065 7525 206c      total time %ul 
   e7450:	2a2a 2a2a 5600 7061 2065 6c61 7265 2074     ****.Vape alert 
   e7460:	7562 7a7a 7265 7420 6d69 2065 6572 6573     buzzer time rese
   e7470:	2074 7461 2520 6c75 2a20 2a2a 002a 6176     t at %ul ****.va
   e7480:	6570 615f 656c 7472 5600 7061 2065 6c41     pe_alert.Vape Al
   e7490:	7265 2074 6f74 6174 206c 6974 656d 2520     ert total time %
   e74a0:	6c75 6d20 6c69 696c 6573 6f63 646e 0073     ul milliseconds.
   e74b0:	6f6c 5f77 6162 7474 7265 5f79 6c61 7265     low_battery_aler
   e74c0:	5f74 3032 5500 616e 6c62 2065 6f74 7220     t_20.Unable to r
   e74d0:	6165 2064 5053 3353 2030 202d 6572 6573     ead SPS30 - rese
   e74e0:	7474 6e69 2067 6564 6976 6563 3120 5500     tting device 1.U
   e74f0:	616e 6c62 2065 6f74 7220 6165 2064 5053     nable to read SP
   e7500:	3353 2030 202d 6572 6573 7474 6e69 2067     S30 - resetting 
   e7510:	6564 6976 6563 5300 6174 7472 5320 7465     device.Start Set
   e7520:	7075 2928 6620 6e75 7463 6f69 006e 6544     up() function.De
   e7530:	6976 6563 6420 6469 6e20 746f 7720 6b61     vice did not wak
   e7540:	2065 7075 6620 6f72 206d 6150 7472 6369     e up from Partic
   e7550:	656c 7320 656c 7065 4400 7665 6369 2065     le sleep.Device 
   e7560:	6177 2073 6f77 656b 206e 7075 6220 2079     was woken up by 
   e7570:	2061 6970 006e 6544 6976 6563 7720 7361     a pin.Device was
   e7580:	7720 6b6f 6e65 7520 2070 7962 7420 6568      woken up by the
   e7590:	5020 7261 6974 6c63 2065 5452 2043 6128      Particle RTC (a
   e75a0:	7466 7265 6120 7320 6570 6963 6966 6465     fter a specified
   e75b0:	6e20 6d75 6562 2072 666f 7320 6365 6e6f      number of secon
   e75c0:	7364 0029 6544 6976 6563 7720 7361 7720     ds).Device was w
   e75d0:	6b6f 6e65 7520 2070 7962 6520 7469 6568     oken up by eithe
   e75e0:	2072 2061 6970 206e 726f 7420 6568 5020     r a pin or the P
   e75f0:	7261 6974 6c63 2065 5452 2043 6128 7466     article RTC (aft
   e7600:	7265 6120 7320 6570 6963 6966 6465 6e20     er a specified n
   e7610:	6d75 6562 2072 666f 7320 6365 6e6f 7364     umber of seconds
   e7620:	0029 7473 7461 2e65 6966 7372 5274 6e75     ).state.firstRun
   e7630:	6843 6365 206b 203d 6600 7269 7473 7552     Check = .firstRu
   e7640:	566e 6c61 6575 3d20 0020 6d70 3e31 3033     nValue = .pm1>30
   e7650:	7c30 707c 326d 333e 3030 7c7c 6d70 3e34     0||pm2>300||pm4>
   e7660:	3033 7c30 707c 316d 3e30 3033 2630 6326     300||pm10>300&&c
   e7670:	6e6f 3e63 3031 7c30 747c 6d65 3e70 3531     onc>100||temp>15
   e7680:	0030 6962 7473 6e61 4079 6f63 636d 7361     0.bistany@comcas
   e7690:	2e74 656e 0074 6946 7372 2074 7572 2e6e     t.net.First run.
   e76a0:	4e00 746f 6620 7269 7473 7220 6e75 002e     .Not first run..
   e76b0:	7356 7075 6620 726f 6120 6c6c 7320 6e65     Vsup for all sen
   e76c0:	6f73 7372 3d20 0020 6356 2063 6f66 2072     sors = .Vcc for 
   e76d0:	6c61 206c 6573 736e 726f 2073 203d 5600     all sensors = .V
   e76e0:	6572 2066 6f66 2072 6573 736e 726f 3120     ref for sensor 1
   e76f0:	3d20 0020 7a54 7265 206f 203d 4600 6e69      = .Tzero = .Fin
   e7700:	7369 6568 2064 6553 7474 6e69 2067 7055     ished Setting Up
   e7710:	5400 2c31 6d20 3156 202c 3143 6800 6f6f     .T1, mV1, C1.hoo
   e7720:	2d6b 6572 7073 6e6f 6573 672f 746d 664f     k-response/gmtOf
   e7730:	7366 7465 5300 7465 7075 6320 6d6f 6c70     fset.Setup compl
   e7740:	7465 0065 6e45 2064 6553 7574 2870 2029     ete.End Setup() 
   e7750:	7566 636e 6974 6e6f 4400 7665 6369 2065     function.Device 
   e7760:	6177 2073 6f77 656b 206e 7075 6220 2079     was woken up by 
   e7770:	6874 2065 6150 7472 6369 656c 5220 4354     the Particle RTC
   e7780:	2820 6661 6574 2072 3531 6d20 6e69 7475      (after 15 minut
   e7790:	7365 2c29 6720 206f 6e69 6f74 4420 6565     es), go into Dee
   e77a0:	2070 6c53 6565 0070 5320 2057 6556 2072     p Sleep. SW Ver 
   e77b0:	203d 3032 3931 3131 2036 2f53 204e 203d     = 2019116 S/N = 
   e77c0:	655a 3270 2057 2000 6f4c 2063 203d 6554     Zep2W . Loc = Te
   e77d0:	7473 5520 696e 2074 5200 4354 4500 7078     st Unit .RTC.Exp
   e77e0:	5200 4354 4520 5045 4f52 004d 4441 0043     .RTC EEPROM.ADC.
   e77f0:	5246 4d41 4100 5844 334c 3534 5000 304d     FRAM.ADXL345.PM0
   e7800:	352e 5000 314d 302e 5000 324d 352e 5000     .5.PM1.0.PM2.5.P
   e7810:	344d 302e 5000 314d 0030 6c4f 2064 6574     M4.0.PM10.Old te
   e7820:	706d 202e 7073 6e61 6120 646e 6f20 6666     mp. span and off
   e7830:	6573 3a74 0020 4948 4847 4c00 574f 4e00     set: .HIGH.LOW.N
   e7840:	7765 7420 6d65 2e70 7320 6170 206e 6e61     ew temp. span an
   e7850:	2064 666f 7366 7465 203a 5700 6568 206e     d offset: .When 
   e7860:	6167 2073 6f63 636e 6e65 7274 7461 6f69     gas concentratio
   e7870:	206e 7473 6165 7964 202c 6e65 6574 2072     n steady, enter 
   e7880:	6f43 636e 6e65 7274 7461 6f69 206e 6e69     Concentration in
   e7890:	7020 6d70 6620 6c6f 6f6c 6577 2064 7962      ppm followed by
   e78a0:	2720 7263 2027 203d 4500 7272 726f 5320      'cr' = .Error S
   e78b0:	7465 6974 676e 5320 6170 006e               etting Span.

000e78bc <_ZTV10MB85RC256V>:
	...
   e78c4:	96bd 000d 96bf 000d                         ........

000e78cc <CSWTCH.57>:
   e78cc:	0001 0000 0002 0000 0000 0000 0003 0000     ................

000e78dc <_ZL23BlynkWriteHandlerVector>:
   e78dc:	a41b 000d a41b 000d a41b 000d a41b 000d     ................
   e78ec:	a41b 000d a41b 000d a41b 000d a41b 000d     ................
   e78fc:	a41b 000d a41b 000d 6a85 000d a41b 000d     .........j......
   e790c:	6aa1 000d a41b 000d 6ae1 000d a41b 000d     .j.......j......
   e791c:	5835 000d 58d9 000d 5861 000d a41b 000d     5X...X..aX......
   e792c:	716d 000d a41b 000d 6d11 000d 58f5 000d     mq.......m...X..
   e793c:	5935 000d 58b9 000d 588d 000d 5971 000d     5Y...X...X..qY..
   e794c:	59ad 000d 59e9 000d a41b 000d 5a25 000d     .Y...Y......%Z..
   e795c:	5ab5 000d a41b 000d a41b 000d a41b 000d     .Z..............
   e796c:	a41b 000d a41b 000d a41b 000d a41b 000d     ................
   e797c:	a41b 000d a41b 000d a41b 000d a41b 000d     ................
   e798c:	a41b 000d a41b 000d a41b 000d a41b 000d     ................
   e799c:	a41b 000d a41b 000d a41b 000d a41b 000d     ................
   e79ac:	a41b 000d a41b 000d a41b 000d a41b 000d     ................
   e79bc:	a41b 000d a41b 000d a41b 000d a41b 000d     ................
   e79cc:	a41b 000d a41b 000d a41b 000d a41b 000d     ................
   e79dc:	a41b 000d a41b 000d a41b 000d a41b 000d     ................
   e79ec:	a41b 000d a41b 000d a41b 000d a41b 000d     ................
   e79fc:	a41b 000d a41b 000d a41b 000d a41b 000d     ................
   e7a0c:	a41b 000d a41b 000d a41b 000d a41b 000d     ................
   e7a1c:	a41b 000d a41b 000d a41b 000d a41b 000d     ................
   e7a2c:	a41b 000d a41b 000d a41b 000d a41b 000d     ................
   e7a3c:	a41b 000d a41b 000d a41b 000d a41b 000d     ................
   e7a4c:	a41b 000d a41b 000d a41b 000d a41b 000d     ................
   e7a5c:	a41b 000d a41b 000d a41b 000d a41b 000d     ................
   e7a6c:	a41b 000d a41b 000d a41b 000d a41b 000d     ................
   e7a7c:	a41b 000d a41b 000d a41b 000d a41b 000d     ................
   e7a8c:	a41b 000d a41b 000d a41b 000d a41b 000d     ................
   e7a9c:	a41b 000d a41b 000d a41b 000d a41b 000d     ................
   e7aac:	a41b 000d a41b 000d a41b 000d a41b 000d     ................
   e7abc:	a41b 000d a41b 000d a41b 000d a41b 000d     ................
   e7acc:	a41b 000d a41b 000d a41b 000d a41b 000d     ................

000e7adc <_ZL22BlynkReadHandlerVector>:
   e7adc:	a419 000d a419 000d a419 000d a419 000d     ................
   e7aec:	a419 000d a419 000d a419 000d a419 000d     ................
   e7afc:	a419 000d a419 000d a419 000d a419 000d     ................
   e7b0c:	a419 000d a419 000d a419 000d a419 000d     ................
   e7b1c:	a419 000d a419 000d a419 000d a419 000d     ................
   e7b2c:	a419 000d a419 000d a419 000d a419 000d     ................
   e7b3c:	a419 000d a419 000d a419 000d a419 000d     ................
   e7b4c:	a419 000d a419 000d a419 000d a419 000d     ................
   e7b5c:	a419 000d a419 000d a419 000d a419 000d     ................
   e7b6c:	a419 000d a419 000d a419 000d a419 000d     ................
   e7b7c:	a419 000d a419 000d a419 000d a419 000d     ................
   e7b8c:	a419 000d a419 000d a419 000d a419 000d     ................
   e7b9c:	a419 000d a419 000d a419 000d a419 000d     ................
   e7bac:	a419 000d a419 000d a419 000d a419 000d     ................
   e7bbc:	a419 000d a419 000d a419 000d a419 000d     ................
   e7bcc:	a419 000d a419 000d a419 000d a419 000d     ................
   e7bdc:	a419 000d a419 000d a419 000d a419 000d     ................
   e7bec:	a419 000d a419 000d a419 000d a419 000d     ................
   e7bfc:	a419 000d a419 000d a419 000d a419 000d     ................
   e7c0c:	a419 000d a419 000d a419 000d a419 000d     ................
   e7c1c:	a419 000d a419 000d a419 000d a419 000d     ................
   e7c2c:	a419 000d a419 000d a419 000d a419 000d     ................
   e7c3c:	a419 000d a419 000d a419 000d a419 000d     ................
   e7c4c:	a419 000d a419 000d a419 000d a419 000d     ................
   e7c5c:	a419 000d a419 000d a419 000d a419 000d     ................
   e7c6c:	a419 000d a419 000d a419 000d a419 000d     ................
   e7c7c:	a419 000d a419 000d a419 000d a419 000d     ................
   e7c8c:	a419 000d a419 000d a419 000d a419 000d     ................
   e7c9c:	a419 000d a419 000d a419 000d a419 000d     ................
   e7cac:	a419 000d a419 000d a419 000d a419 000d     ................
   e7cbc:	a419 000d a419 000d a419 000d a419 000d     ................
   e7ccc:	a419 000d a419 000d a419 000d a419 000d     ................

000e7cdc <_ZTVN5spark13EthernetClassE>:
	...
   e7ce4:	ac0b 000d ac01 000d abf7 000d abed 000d     ................
   e7cf4:	abe1 000d abd5 000d abc9 000d abc1 000d     ................
   e7d04:	abb7 000d abad 000d cd91 000d               ............

000e7d10 <_ZTV8SPIClass>:
	...
   e7d18:	ac79 000d ac7b 000d 616e 006e 766f 0066     y...{...nan.ovf.
   e7d28:	6e69 0066 6162 6475 5300 7265 6169 006c     inf.baud.Serial.
   e7d38:	6553 6972 6c61 0031 7974 6570 7000 7261     Serial1.type.par
   e7d48:	6d61 6300 646d 6900 0064 6e68 0064 7473     am.cmd.id.hnd.st
   e7d58:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
   e7d68:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
   e7d78:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
   e7d88:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
   e7d98:	6e61 6c64 7265 6100 7070 2500 3130 7530     andler.app.%010u
   e7da8:	0020 2928 203a 2000 005b 6f63 6564 3d20      .(): . [.code =
   e7db8:	0020 6564 6174 6c69 2073 203d 6600 006e      .details = .fn.
   e7dc8:	6f63 6564 6400 7465 6961 006c 6f6e 656e     code.detail.none
   e7dd8:	7400 6172 6563 6900 666e 006f 6177 6e72     .trace.info.warn
   e7de8:	7000 6e61 6369 6100 6c6c 2500 302b 6433     .panic.all.%+03d
   e7df8:	253a 3230 0075 5925 252d 2d6d 6425 2554     :%02u.%Y-%m-%dT%
   e7e08:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   e7e18:	0065 0000                                   e...

000e7e1c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   e7e24:	ba11 000d ba17 000d ba5b 000d ba25 000d     ........[...%...
   e7e34:	ba13 000d                                   ....

000e7e38 <_ZTV9IPAddress>:
	...
   e7e40:	bfa9 000d bf99 000d bf9b 000d               ............

000e7e4c <_ZTV9USBSerial>:
	...
   e7e54:	c0ad 000d c0fd 000d c10b 000d b165 000d     ............e...
   e7e64:	c0e9 000d c0af 000d c0c5 000d c0f7 000d     ................
   e7e74:	c0db 000d c0a9 000d                         ........

000e7e7c <_ZTV11USARTSerial>:
	...
   e7e84:	c20d 000d c25d 000d c26b 000d b165 000d     ....]...k...e...
   e7e94:	c221 000d c243 000d c22f 000d c257 000d     !...C.../...W...
   e7ea4:	c20f 000d c213 000d                         ........

000e7eac <_ZTV7TwoWire>:
	...
   e7eb4:	c345 000d c38f 000d c367 000d c347 000d     E.......g...G...
   e7ec4:	c36f 000d c377 000d c37f 000d c387 000d     o...w...........

000e7ed4 <_ZTVN5spark9MeshClassE>:
	...
   e7edc:	c4b9 000d c4af 000d c4a5 000d c49b 000d     ................
   e7eec:	c48f 000d c483 000d c477 000d c46f 000d     ........w...o...
   e7efc:	c465 000d c45b 000d cd91 000d               e...[.......

000e7f08 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   e7f10:	c645 000d c64b 000d cb33 000d c659 000d     E...K...3...Y...
   e7f20:	c647 000d                                   G...

000e7f24 <_ZTV9TCPClient>:
	...
   e7f2c:	b821 000d b841 000d c5bd 000d c5d7 000d     !...A...........
   e7f3c:	c9d9 000d c72b 000d c6fd 000d c601 000d     ....+...........
   e7f4c:	c8b5 000d c7b1 000d c75f 000d c9a9 000d     ........_.......
   e7f5c:	c603 000d c63b 000d c5e9 000d c65d 000d     ....;.......]...
   e7f6c:	c6dd 000d 6977 6972 676e 7200 6365 2076     ....wiring.recv 
   e7f7c:	7265 6f72 2072 203d 6425 0000               error = %d..

000e7f88 <_ZTVN5spark9WiFiClassE>:
	...
   e7f90:	cbff 000d cbf5 000d cbeb 000d 542f 000d     ............/T..
   e7fa0:	5439 000d cbdf 000d cbd3 000d cbcb 000d     9T..............
   e7fb0:	cbc1 000d cbb7 000d cd91 000d               ............

000e7fbc <_ZTV10WiFiSignal>:
	...
   e7fc4:	cb4b 000d cba9 000d cb4d 000d cc3d 000d     K.......M...=...
   e7fd4:	cb51 000d cc09 000d cb7d 000d               Q.......}...

000e7fe0 <_ZTVN5spark12NetworkClassE>:
	...
   e7fe8:	cd29 000d cd33 000d cd3d 000d cd47 000d     )...3...=...G...
   e7ff8:	cd51 000d cd5d 000d cd69 000d cd75 000d     Q...]...i...u...
   e8008:	cd7d 000d cd87 000d cd91 000d 0000 0000     }...............

000e8018 <atanlo>:
   e8018:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
   e8028:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

000e8038 <atanhi>:
   e8038:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
   e8048:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?
   e8058:	6361 736f 0000 0000 7361 6e69 0000 0000     acos....asin....
   e8068:	6f63 6873 0000 0000 7865 0070 6d66 646f     cosh....exp.fmod
   e8078:	0000 0000 6f6c 0067 6f6c 3167 0030 0000     ....log.log10...
   e8088:	6f70 0077 6973 686e 0000 0000 7173 7472     pow.sinh....sqrt
	...

000e80a0 <halF>:
   e80a0:	0000 0000 0000 3fe0 0000 0000 0000 bfe0     .......?........

000e80b0 <ln2LO>:
   e80b0:	3c76 3579 39ef 3dea 3c76 3579 39ef bdea     v<y5.9.=v<y5.9..

000e80c0 <ln2HI>:
   e80c0:	0000 fee0 2e42 3fe6 0000 fee0 2e42 bfe6     ....B..?....B...

000e80d0 <Zero>:
	...
   e80dc:	0000 8000                                   ....

000e80e0 <npio2_hw>:
   e80e0:	21fb 3ff9 21fb 4009 d97c 4012 21fb 4019     .!.?.!.@|..@.!.@
   e80f0:	6a7a 401f d97c 4022 fdbb 4025 21fb 4029     zj.@|."@..%@.!)@
   e8100:	463a 402c 6a7a 402f 475c 4031 d97c 4032     :F,@zj/@\G1@|.2@
   e8110:	6b9c 4034 fdbb 4035 8fdb 4037 21fb 4039     .k4@..5@..7@.!9@
   e8120:	b41b 403a 463a 403c d85a 403d 6a7a 403f     ..:@:F<@Z.=@zj?@
   e8130:	7e4c 4040 475c 4041 106c 4042 d97c 4042     L~@@\GA@l.B@|.B@
   e8140:	a28c 4043 6b9c 4044 34ac 4045 fdbb 4045     ..C@.kD@.4E@..E@
   e8150:	c6cb 4046 8fdb 4047 58eb 4048 21fb 4049     ..F@..G@.XH@.!I@

000e8160 <two_over_pi>:
   e8160:	f983 00a2 4e44 006e 29fc 0015 57d1 0027     ....DNn..)...W'.
   e8170:	34dd 00f5 db62 00c0 993c 0095 9041 0043     .4..b...<...A.C.
   e8180:	5163 00fe debb 00ab 61b7 00c5 6e3a 0024     cQ.......a..:n$.
   e8190:	4dd2 0042 0649 00e0 ea09 002e 921c 00d1     .MB.I...........
   e81a0:	1deb 00fe b129 001c 3ee8 00a7 35f5 0082     ....)....>...5..
   e81b0:	bb44 002e e99c 0084 26b4 0070 7e41 005f     D........&p.A~_.
   e81c0:	91d6 0039 8353 0039 f49c 0039 5f8b 0084     ..9.S.9...9.._..
   e81d0:	f928 00bd 1ff8 003b ffde 0097 980f 0005     (.....;.........
   e81e0:	2f11 00ef 5a0a 008b 1f6d 006d 7ecf 0036     ./...Z..m.m..~6.
   e81f0:	cb09 0027 4f46 00b7 669e 003f ea2d 005f     ..'.FO...f?.-._.
   e8200:	27ba 0075 ebe5 00c7 7b3d 00f1 39f7 0007     .'u.....={...9..
   e8210:	5292 008a 6bfb 00ea b11f 005f 5d08 008d     .R...k...._..]..
   e8220:	0330 0056 fc7b 0046 abf0 006b bc20 00cf     0.V.{.F...k. ...
   e8230:	f436 009a a9e3 001d 615e 0091 1b08 00e6     6.......^a......
   e8240:	9985 0065 14a0 005f 408d 0068 d880 00ff     ..e..._..@h.....
   e8250:	7327 004d 0606 0031 56ca 0015 a8c9 0073     'sM...1..V....s.
   e8260:	e27b 0060 8c6b 00c0                         {.`.k...

000e8268 <init_jk>:
   e8268:	0002 0000 0003 0000 0004 0000 0006 0000     ................

000e8278 <PIo2>:
   e8278:	0000 4000 21fb 3ff9 0000 0000 442d 3e74     ...@.!.?....-Dt>
   e8288:	0000 8000 4698 3cf8 0000 6000 cc51 3b78     .....F.<...`Q.x;
   e8298:	0000 8000 1b83 39f0 0000 4000 2520 387a     .......9...@ %z8
   e82a8:	0000 8000 8222 36e3 0000 0000 f31d 3569     ...."..6......i5

000e82b8 <TWO52>:
   e82b8:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000e82c8 <day_name.4725>:
   e82c8:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   e82d8:	6972 6153 4a74                                   riSat

000e82dd <mon_name.4726>:
   e82dd:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   e82ed:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   e82fd:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   e830d:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   e831d:	6425 000a                                   %d..

000e8321 <_ctype_>:
   e8321:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   e8331:	2020 2020 2020 2020 2020 2020 2020 2020                     
   e8341:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   e8351:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   e8361:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   e8371:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   e8381:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   e8391:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   e83a1:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000e8424 <__sf_fake_stdin>:
	...

000e8444 <__sf_fake_stdout>:
	...

000e8464 <__sf_fake_stderr>:
	...
   e8484:	4f50 4953 0058 0000                         POSIX...

000e848c <_DAYS_BEFORE_MONTH>:
   e848c:	0000 0000 001f 0000 003b 0000 005a 0000     ........;...Z...
   e849c:	0078 0000 0097 0000 00b5 0000 00d4 0000     x...............
   e84ac:	00f3 0000 0111 0000 0130 0000 014e 0000     ........0...N...

000e84bc <DAYS_IN_MONTH>:
   e84bc:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   e84cc:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   e84dc:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000e84ec <__month_lengths>:
   e84ec:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   e84fc:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   e850c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   e851c:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   e852c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   e853c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   e854c:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
   e855c:	2500 6432 2500 322e 2f64 2e25 6432 252f     .%2d.%.2d/%.2d/%
   e856c:	322e 0064 6c25 0075 2d59 6d25 252d 0064     .2d.%lu.Y-%m-%d.
   e857c:	2a2e 0075 2e25 6433 2500 6c6c 0064 2e25     .*u.%.3d.%lld.%.
   e858c:	6432 253a 322e 3a64 2e25 6432 2500 302b     2d:%.2d:%.2d.%+0
   e859c:	6c33 2564 322e 646c 0000 0000               3ld%.2ld....

000e85a8 <fpi.5344>:
   e85a8:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   e85b8:	0000 0000                                   ....

000e85bc <fpinan.5380>:
   e85bc:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   e85cc:	0000 0000 6e69 7469 0079 0000               ....inity...

000e85d8 <tinytens>:
   e85d8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   e85e8:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   e85f8:	6f43 64ac 0628 1168 434c 545f 4d49 0045     Co.d(.h.LC_TIME.
   e8608:	614a 006e 6546 0062 614d 0072 7041 0072     Jan.Feb.Mar.Apr.
   e8618:	614d 0079 754a 006e 754a 006c 7541 0067     May.Jun.Jul.Aug.
   e8628:	6553 0070 634f 0074 6f4e 0076 6544 0063     Sep.Oct.Nov.Dec.
   e8638:	614a 756e 7261 0079 6546 7262 6175 7972     January.February
   e8648:	4d00 7261 6863 4100 7270 6c69 4a00 6e75     .March.April.Jun
   e8658:	0065 754a 796c 4100 6775 7375 0074 6553     e.July.August.Se
   e8668:	7470 6d65 6562 0072 634f 6f74 6562 0072     ptember.October.
   e8678:	6f4e 6576 626d 7265 4400 6365 6d65 6562     November.Decembe
   e8688:	0072 7553 006e 6f4d 006e 7554 0065 6557     r.Sun.Mon.Tue.We
   e8698:	0064 6854 0075 7246 0069 6153 0074 7553     d.Thu.Fri.Sat.Su
   e86a8:	646e 7961 4d00 6e6f 6164 0079 7554 7365     nday.Monday.Tues
   e86b8:	6164 0079 6557 6e64 7365 6164 0079 6854     day.Wednesday.Th
   e86c8:	7275 6473 7961 4600 6972 6164 0079 6153     ursday.Friday.Sa
   e86d8:	7574 6472 7961 2500 3a48 4d25 253a 0053     turday.%H:%M:%S.
   e86e8:	6d25 252f 2f64 7925 2500 2061 6225 2520     %m/%d/%y.%a %b %
   e86f8:	2065 4825 253a 3a4d 5325 2520 0059 4d50     e %H:%M:%S %Y.PM
   e8708:	2500 2061 6225 2520 2065 4825 253a 3a4d     .%a %b %e %H:%M:
   e8718:	5325 2520 205a 5925 2500 3a49 4d25 253a     %S %Z %Y.%I:%M:%
   e8728:	2053 7025 0000 0000                         S %p....

000e8730 <_C_time_locale>:
   e8730:	8608 000e 860c 000e 8610 000e 8614 000e     ................
   e8740:	8618 000e 861c 000e 8620 000e 8624 000e     ........ ...$...
   e8750:	8628 000e 862c 000e 8630 000e 8634 000e     (...,...0...4...
   e8760:	8638 000e 8640 000e 8649 000e 864f 000e     8...@...I...O...
   e8770:	8618 000e 8655 000e 865a 000e 865f 000e     ....U...Z..._...
   e8780:	8666 000e 8670 000e 8678 000e 8681 000e     f...p...x.......
   e8790:	868a 000e 868e 000e 8692 000e 8696 000e     ................
   e87a0:	869a 000e 869e 000e 86a2 000e 86a6 000e     ................
   e87b0:	86ad 000e 86b4 000e 86bc 000e 86c6 000e     ................
   e87c0:	86cf 000e 86d6 000e 86df 000e 86e8 000e     ................
   e87d0:	86f1 000e 77f2 000e 8706 000e 8709 000e     .....w..........
   e87e0:	8638 000e 8640 000e 8649 000e 864f 000e     8...@...I...O...
   e87f0:	8618 000e 8655 000e 865a 000e 865f 000e     ....U...Z..._...
   e8800:	8666 000e 8670 000e 8678 000e 8681 000e     f...p...x.......
   e8810:	7d4c 000e 8721 000e 6bf1 000e 6bf1 000e     L}..!....k...k..
   e8820:	6bf1 000e 6bf1 000e 6bf1 000e 5a54 4700     .k...k...k..TZ.G
   e8830:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
   e8840:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
   e8850:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
   e8860:	3a6e 6825 2575 006e                         n:%hu%n.

000e8868 <__mprec_tens>:
   e8868:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   e8878:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   e8888:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   e8898:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   e88a8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   e88b8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   e88c8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   e88d8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   e88e8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   e88f8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   e8908:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   e8918:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   e8928:	9db4 79d9 7843 44ea                         ...yCx.D

000e8930 <__mprec_bigtens>:
   e8930:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   e8940:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   e8950:	bf3c 7f73 4fdd 7515                         <.s..O.u

000e8958 <p05.5387>:
   e8958:	0005 0000 0019 0000 007d 0000               ........}...

000e8964 <link_const_variable_data_end>:
   e8964:	000d8d19 	.word	0x000d8d19
   e8968:	000d9399 	.word	0x000d9399
   e896c:	000d96b9 	.word	0x000d96b9
   e8970:	000d9815 	.word	0x000d9815
   e8974:	000d997d 	.word	0x000d997d
   e8978:	000d9d4d 	.word	0x000d9d4d
   e897c:	000d9eaf 	.word	0x000d9eaf
   e8980:	000da273 	.word	0x000da273
   e8984:	000da405 	.word	0x000da405
   e8988:	000da415 	.word	0x000da415
   e898c:	000da449 	.word	0x000da449
   e8990:	000dac15 	.word	0x000dac15
   e8994:	000dad85 	.word	0x000dad85
   e8998:	000db155 	.word	0x000db155
   e899c:	000db529 	.word	0x000db529
   e89a0:	000db7e5 	.word	0x000db7e5
   e89a4:	000db8d9 	.word	0x000db8d9
   e89a8:	000dc56d 	.word	0x000dc56d
   e89ac:	000dcd15 	.word	0x000dcd15
   e89b0:	000dce5d 	.word	0x000dce5d
   e89b4:	000dcfad 	.word	0x000dcfad
   e89b8:	000dd045 	.word	0x000dd045
   e89bc:	000dd0c9 	.word	0x000dd0c9
   e89c0:	000dd18d 	.word	0x000dd18d
   e89c4:	000dd251 	.word	0x000dd251

000e89c8 <link_constructors_end>:
	...
